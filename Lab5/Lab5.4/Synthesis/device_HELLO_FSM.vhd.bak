------------------------------------
-- Group 8 - Laboratory 5
-- Exercise 4 - "HELLO" FSM
-- 
------------------------------------

library ieee;
use ieee.std_logic_1164.all;

entity FSM is
	port (
		CLK, RES                           : in  STD_LOGIC;               -- New state, Clock, and Reset
		OUT0, OUT1, OUT2, OUT3, OUT4, OUT5 : out STD_LOGIC_VECTOR(0 to 6) -- Register outputs
	);
end FSM;

architecture behaviour of FSM is

	component shiftRegn is
		generic
		(
			N     : INTEGER; -- Number of registers in cascade
			N_bit : INTEGER  -- Bit-width of each register
		);
		port (
			R                      : in  STD_LOGIC_VECTOR(0 to (N_bit - 1)); -- Shift register input
			CLK, RES, LD           : in  STD_LOGIC;                          -- Clock, Reset, and Load signals
			Q0, Q1, Q2, Q3, Q4, Q5 : out STD_LOGIC_VECTOR(0 to (N_bit - 1))  -- Register outputs
		);
	end component;

	component pulse1Hz is
		port (
			CLK, RES  : in  STD_LOGIC;
			PULSE_1Hz : out STD_LOGIC
		);
	end component;

	component mux7bit is
		port (
			IN0, IN1 : in  STD_LOGIC_VECTOR(0 to 6);
			SEL      : in  STD_LOGIC;
			OUT1     : out STD_LOGIC_VECTOR(0 to 6));
	end component;

	-- State type enumeration
	type State_type is (START, LOAD_blank, LOAD_O, LOAD_L2, LOAD_L1, LOAD_E, LOAD_H, LOOP_CHARACTERS);
	signal CS, FS                                                     : State_type; -- Current state and next state signals
	signal REG_LOAD, REG_IN                                           : STD_LOGIC_VECTOR(0 to 6);
	signal REG0_OUT, REG1_OUT, REG2_OUT, REG3_OUT, REG4_OUT, REG5_OUT : STD_LOGIC_VECTOR(0 to 6);
	signal PULSE_1Hz, LOOP_EN                                         : STD_LOGIC;

begin

	-- State memory process
	MEM : process (CLK, RES)
	begin
		if RES = '0' then
			CS <= START; -- Reset state
		elsif rising_edge(CLK) then
			if (PULSE_1Hz = '1') then
				CS <= FS; -- Update current state
			end if;
		end if;
	end process;

	-- Next state logic
	CC1 : process (CS)
	begin
		case CS is
			when START           => FS           <= LOAD_blank;
			when LOAD_blank      => FS      <= LOAD_O;
			when LOAD_O          => FS          <= LOAD_L2;
			when LOAD_L2         => FS         <= LOAD_L1;
			when LOAD_L1         => FS         <= LOAD_E;
			when LOAD_E          => FS          <= LOAD_H;
			when LOAD_H          => FS          <= LOOP_CHARACTERS;
			when LOOP_CHARACTERS => FS <= LOOP_CHARACTERS;
			when others          => FS          <= START;
		end case;
	end process;

	CC2 : process (CS)
	begin
		case CS is
			when START =>
				LOOP_EN  <= '0';
				REG_LOAD <= "1111111";
			when LOAD_blank =>
				LOOP_EN  <= '0';
				REG_LOAD <= "1111111";
			when LOAD_O =>
				LOOP_EN  <= '0';
				REG_LOAD <= "0000001";
			when LOAD_L2 =>
				LOOP_EN  <= '0';
				REG_LOAD <= "1110001";
			when LOAD_L1 =>
				LOOP_EN  <= '0';
				REG_LOAD <= "1110001";
			when LOAD_E =>
				LOOP_EN  <= '0';
				REG_LOAD <= "0110000";
			when LOAD_H =>
				LOOP_EN  <= '0';
				REG_LOAD <= "1001000";
			when LOOP_CHARACTERS =>
				LOOP_EN  <= '1';
				REG_LOAD <= "0000000";
			when others =>
				LOOP_EN  <= '0';
				REG_LOAD <= "0000000";
		end case;
	end process;

	-- Shift register instantiation
	REG : shiftRegn
	generic
	map (
	N     => 6,
	N_bit => 7
	)
	port map(
		R   => REG_IN, -- Default input to shift register
		CLK => CLK,
		RES => RES,
		LD  => PULSE_1Hz,
		Q0  => REG0_OUT,
		Q1  => REG1_OUT,
		Q2  => REG2_OUT,
		Q3  => REG3_OUT,
		Q4  => REG4_OUT,
		Q5  => REG5_OUT
	);
	OUT0 <= REG0_OUT;
	OUT1 <= REG1_OUT;
	OUT2 <= REG2_OUT;
	OUT3 <= REG3_OUT;
	OUT4 <= REG4_OUT;
	OUT5 <= REG5_OUT;

	MUX : mux7bit
	port map(
		IN0  => REG_LOAD,
		IN1  => REG0_OUT,
		OUT1 => REG_IN,
		SEL  => LOOP_EN
	);

	PULSE_GEN : pulse1Hz
	port map(
		CLK       => CLK,
		RES       => RES,
		PULSE_1Hz => PULSE_1Hz
	);

end behaviour;
