
Lab9.1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000027f4  08000194  08000194  00001194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000028  08002988  08002988  00003988  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080029b0  080029b0  00004004  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080029b0  080029b0  000039b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080029b8  080029b8  00004004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080029b8  080029b8  000039b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080029bc  080029bc  000039bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000004  20000000  080029c0  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000004  080029c4  00004004  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000024  080029c4  00004024  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00004004  2**0
                  CONTENTS, READONLY
 12 .debug_info   00006249  00000000  00000000  00004034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001365  00000000  00000000  0000a27d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000798  00000000  00000000  0000b5e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000059b  00000000  00000000  0000bd80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00011bda  00000000  00000000  0000c31b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000059c5  00000000  00000000  0001def5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00069cb3  00000000  00000000  000238ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0008d56d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001f58  00000000  00000000  0008d5b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  0008f508  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	@ (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000004 	.word	0x20000004
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08002970 	.word	0x08002970

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	@ (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	@ (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	@ (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000008 	.word	0x20000008
 80001d0:	08002970 	.word	0x08002970

080001d4 <__aeabi_uldivmod>:
 80001d4:	b953      	cbnz	r3, 80001ec <__aeabi_uldivmod+0x18>
 80001d6:	b94a      	cbnz	r2, 80001ec <__aeabi_uldivmod+0x18>
 80001d8:	2900      	cmp	r1, #0
 80001da:	bf08      	it	eq
 80001dc:	2800      	cmpeq	r0, #0
 80001de:	bf1c      	itt	ne
 80001e0:	f04f 31ff 	movne.w	r1, #4294967295
 80001e4:	f04f 30ff 	movne.w	r0, #4294967295
 80001e8:	f000 b988 	b.w	80004fc <__aeabi_idiv0>
 80001ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f4:	f000 f806 	bl	8000204 <__udivmoddi4>
 80001f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000200:	b004      	add	sp, #16
 8000202:	4770      	bx	lr

08000204 <__udivmoddi4>:
 8000204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000208:	9d08      	ldr	r5, [sp, #32]
 800020a:	468e      	mov	lr, r1
 800020c:	4604      	mov	r4, r0
 800020e:	4688      	mov	r8, r1
 8000210:	2b00      	cmp	r3, #0
 8000212:	d14a      	bne.n	80002aa <__udivmoddi4+0xa6>
 8000214:	428a      	cmp	r2, r1
 8000216:	4617      	mov	r7, r2
 8000218:	d962      	bls.n	80002e0 <__udivmoddi4+0xdc>
 800021a:	fab2 f682 	clz	r6, r2
 800021e:	b14e      	cbz	r6, 8000234 <__udivmoddi4+0x30>
 8000220:	f1c6 0320 	rsb	r3, r6, #32
 8000224:	fa01 f806 	lsl.w	r8, r1, r6
 8000228:	fa20 f303 	lsr.w	r3, r0, r3
 800022c:	40b7      	lsls	r7, r6
 800022e:	ea43 0808 	orr.w	r8, r3, r8
 8000232:	40b4      	lsls	r4, r6
 8000234:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000238:	fa1f fc87 	uxth.w	ip, r7
 800023c:	fbb8 f1fe 	udiv	r1, r8, lr
 8000240:	0c23      	lsrs	r3, r4, #16
 8000242:	fb0e 8811 	mls	r8, lr, r1, r8
 8000246:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800024a:	fb01 f20c 	mul.w	r2, r1, ip
 800024e:	429a      	cmp	r2, r3
 8000250:	d909      	bls.n	8000266 <__udivmoddi4+0x62>
 8000252:	18fb      	adds	r3, r7, r3
 8000254:	f101 30ff 	add.w	r0, r1, #4294967295
 8000258:	f080 80ea 	bcs.w	8000430 <__udivmoddi4+0x22c>
 800025c:	429a      	cmp	r2, r3
 800025e:	f240 80e7 	bls.w	8000430 <__udivmoddi4+0x22c>
 8000262:	3902      	subs	r1, #2
 8000264:	443b      	add	r3, r7
 8000266:	1a9a      	subs	r2, r3, r2
 8000268:	b2a3      	uxth	r3, r4
 800026a:	fbb2 f0fe 	udiv	r0, r2, lr
 800026e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000272:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000276:	fb00 fc0c 	mul.w	ip, r0, ip
 800027a:	459c      	cmp	ip, r3
 800027c:	d909      	bls.n	8000292 <__udivmoddi4+0x8e>
 800027e:	18fb      	adds	r3, r7, r3
 8000280:	f100 32ff 	add.w	r2, r0, #4294967295
 8000284:	f080 80d6 	bcs.w	8000434 <__udivmoddi4+0x230>
 8000288:	459c      	cmp	ip, r3
 800028a:	f240 80d3 	bls.w	8000434 <__udivmoddi4+0x230>
 800028e:	443b      	add	r3, r7
 8000290:	3802      	subs	r0, #2
 8000292:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000296:	eba3 030c 	sub.w	r3, r3, ip
 800029a:	2100      	movs	r1, #0
 800029c:	b11d      	cbz	r5, 80002a6 <__udivmoddi4+0xa2>
 800029e:	40f3      	lsrs	r3, r6
 80002a0:	2200      	movs	r2, #0
 80002a2:	e9c5 3200 	strd	r3, r2, [r5]
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	428b      	cmp	r3, r1
 80002ac:	d905      	bls.n	80002ba <__udivmoddi4+0xb6>
 80002ae:	b10d      	cbz	r5, 80002b4 <__udivmoddi4+0xb0>
 80002b0:	e9c5 0100 	strd	r0, r1, [r5]
 80002b4:	2100      	movs	r1, #0
 80002b6:	4608      	mov	r0, r1
 80002b8:	e7f5      	b.n	80002a6 <__udivmoddi4+0xa2>
 80002ba:	fab3 f183 	clz	r1, r3
 80002be:	2900      	cmp	r1, #0
 80002c0:	d146      	bne.n	8000350 <__udivmoddi4+0x14c>
 80002c2:	4573      	cmp	r3, lr
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xc8>
 80002c6:	4282      	cmp	r2, r0
 80002c8:	f200 8105 	bhi.w	80004d6 <__udivmoddi4+0x2d2>
 80002cc:	1a84      	subs	r4, r0, r2
 80002ce:	eb6e 0203 	sbc.w	r2, lr, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	4690      	mov	r8, r2
 80002d6:	2d00      	cmp	r5, #0
 80002d8:	d0e5      	beq.n	80002a6 <__udivmoddi4+0xa2>
 80002da:	e9c5 4800 	strd	r4, r8, [r5]
 80002de:	e7e2      	b.n	80002a6 <__udivmoddi4+0xa2>
 80002e0:	2a00      	cmp	r2, #0
 80002e2:	f000 8090 	beq.w	8000406 <__udivmoddi4+0x202>
 80002e6:	fab2 f682 	clz	r6, r2
 80002ea:	2e00      	cmp	r6, #0
 80002ec:	f040 80a4 	bne.w	8000438 <__udivmoddi4+0x234>
 80002f0:	1a8a      	subs	r2, r1, r2
 80002f2:	0c03      	lsrs	r3, r0, #16
 80002f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002f8:	b280      	uxth	r0, r0
 80002fa:	b2bc      	uxth	r4, r7
 80002fc:	2101      	movs	r1, #1
 80002fe:	fbb2 fcfe 	udiv	ip, r2, lr
 8000302:	fb0e 221c 	mls	r2, lr, ip, r2
 8000306:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800030a:	fb04 f20c 	mul.w	r2, r4, ip
 800030e:	429a      	cmp	r2, r3
 8000310:	d907      	bls.n	8000322 <__udivmoddi4+0x11e>
 8000312:	18fb      	adds	r3, r7, r3
 8000314:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000318:	d202      	bcs.n	8000320 <__udivmoddi4+0x11c>
 800031a:	429a      	cmp	r2, r3
 800031c:	f200 80e0 	bhi.w	80004e0 <__udivmoddi4+0x2dc>
 8000320:	46c4      	mov	ip, r8
 8000322:	1a9b      	subs	r3, r3, r2
 8000324:	fbb3 f2fe 	udiv	r2, r3, lr
 8000328:	fb0e 3312 	mls	r3, lr, r2, r3
 800032c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000330:	fb02 f404 	mul.w	r4, r2, r4
 8000334:	429c      	cmp	r4, r3
 8000336:	d907      	bls.n	8000348 <__udivmoddi4+0x144>
 8000338:	18fb      	adds	r3, r7, r3
 800033a:	f102 30ff 	add.w	r0, r2, #4294967295
 800033e:	d202      	bcs.n	8000346 <__udivmoddi4+0x142>
 8000340:	429c      	cmp	r4, r3
 8000342:	f200 80ca 	bhi.w	80004da <__udivmoddi4+0x2d6>
 8000346:	4602      	mov	r2, r0
 8000348:	1b1b      	subs	r3, r3, r4
 800034a:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800034e:	e7a5      	b.n	800029c <__udivmoddi4+0x98>
 8000350:	f1c1 0620 	rsb	r6, r1, #32
 8000354:	408b      	lsls	r3, r1
 8000356:	fa22 f706 	lsr.w	r7, r2, r6
 800035a:	431f      	orrs	r7, r3
 800035c:	fa0e f401 	lsl.w	r4, lr, r1
 8000360:	fa20 f306 	lsr.w	r3, r0, r6
 8000364:	fa2e fe06 	lsr.w	lr, lr, r6
 8000368:	ea4f 4917 	mov.w	r9, r7, lsr #16
 800036c:	4323      	orrs	r3, r4
 800036e:	fa00 f801 	lsl.w	r8, r0, r1
 8000372:	fa1f fc87 	uxth.w	ip, r7
 8000376:	fbbe f0f9 	udiv	r0, lr, r9
 800037a:	0c1c      	lsrs	r4, r3, #16
 800037c:	fb09 ee10 	mls	lr, r9, r0, lr
 8000380:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000384:	fb00 fe0c 	mul.w	lr, r0, ip
 8000388:	45a6      	cmp	lr, r4
 800038a:	fa02 f201 	lsl.w	r2, r2, r1
 800038e:	d909      	bls.n	80003a4 <__udivmoddi4+0x1a0>
 8000390:	193c      	adds	r4, r7, r4
 8000392:	f100 3aff 	add.w	sl, r0, #4294967295
 8000396:	f080 809c 	bcs.w	80004d2 <__udivmoddi4+0x2ce>
 800039a:	45a6      	cmp	lr, r4
 800039c:	f240 8099 	bls.w	80004d2 <__udivmoddi4+0x2ce>
 80003a0:	3802      	subs	r0, #2
 80003a2:	443c      	add	r4, r7
 80003a4:	eba4 040e 	sub.w	r4, r4, lr
 80003a8:	fa1f fe83 	uxth.w	lr, r3
 80003ac:	fbb4 f3f9 	udiv	r3, r4, r9
 80003b0:	fb09 4413 	mls	r4, r9, r3, r4
 80003b4:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003b8:	fb03 fc0c 	mul.w	ip, r3, ip
 80003bc:	45a4      	cmp	ip, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1ce>
 80003c0:	193c      	adds	r4, r7, r4
 80003c2:	f103 3eff 	add.w	lr, r3, #4294967295
 80003c6:	f080 8082 	bcs.w	80004ce <__udivmoddi4+0x2ca>
 80003ca:	45a4      	cmp	ip, r4
 80003cc:	d97f      	bls.n	80004ce <__udivmoddi4+0x2ca>
 80003ce:	3b02      	subs	r3, #2
 80003d0:	443c      	add	r4, r7
 80003d2:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003d6:	eba4 040c 	sub.w	r4, r4, ip
 80003da:	fba0 ec02 	umull	lr, ip, r0, r2
 80003de:	4564      	cmp	r4, ip
 80003e0:	4673      	mov	r3, lr
 80003e2:	46e1      	mov	r9, ip
 80003e4:	d362      	bcc.n	80004ac <__udivmoddi4+0x2a8>
 80003e6:	d05f      	beq.n	80004a8 <__udivmoddi4+0x2a4>
 80003e8:	b15d      	cbz	r5, 8000402 <__udivmoddi4+0x1fe>
 80003ea:	ebb8 0203 	subs.w	r2, r8, r3
 80003ee:	eb64 0409 	sbc.w	r4, r4, r9
 80003f2:	fa04 f606 	lsl.w	r6, r4, r6
 80003f6:	fa22 f301 	lsr.w	r3, r2, r1
 80003fa:	431e      	orrs	r6, r3
 80003fc:	40cc      	lsrs	r4, r1
 80003fe:	e9c5 6400 	strd	r6, r4, [r5]
 8000402:	2100      	movs	r1, #0
 8000404:	e74f      	b.n	80002a6 <__udivmoddi4+0xa2>
 8000406:	fbb1 fcf2 	udiv	ip, r1, r2
 800040a:	0c01      	lsrs	r1, r0, #16
 800040c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000410:	b280      	uxth	r0, r0
 8000412:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000416:	463b      	mov	r3, r7
 8000418:	4638      	mov	r0, r7
 800041a:	463c      	mov	r4, r7
 800041c:	46b8      	mov	r8, r7
 800041e:	46be      	mov	lr, r7
 8000420:	2620      	movs	r6, #32
 8000422:	fbb1 f1f7 	udiv	r1, r1, r7
 8000426:	eba2 0208 	sub.w	r2, r2, r8
 800042a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800042e:	e766      	b.n	80002fe <__udivmoddi4+0xfa>
 8000430:	4601      	mov	r1, r0
 8000432:	e718      	b.n	8000266 <__udivmoddi4+0x62>
 8000434:	4610      	mov	r0, r2
 8000436:	e72c      	b.n	8000292 <__udivmoddi4+0x8e>
 8000438:	f1c6 0220 	rsb	r2, r6, #32
 800043c:	fa2e f302 	lsr.w	r3, lr, r2
 8000440:	40b7      	lsls	r7, r6
 8000442:	40b1      	lsls	r1, r6
 8000444:	fa20 f202 	lsr.w	r2, r0, r2
 8000448:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800044c:	430a      	orrs	r2, r1
 800044e:	fbb3 f8fe 	udiv	r8, r3, lr
 8000452:	b2bc      	uxth	r4, r7
 8000454:	fb0e 3318 	mls	r3, lr, r8, r3
 8000458:	0c11      	lsrs	r1, r2, #16
 800045a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045e:	fb08 f904 	mul.w	r9, r8, r4
 8000462:	40b0      	lsls	r0, r6
 8000464:	4589      	cmp	r9, r1
 8000466:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800046a:	b280      	uxth	r0, r0
 800046c:	d93e      	bls.n	80004ec <__udivmoddi4+0x2e8>
 800046e:	1879      	adds	r1, r7, r1
 8000470:	f108 3cff 	add.w	ip, r8, #4294967295
 8000474:	d201      	bcs.n	800047a <__udivmoddi4+0x276>
 8000476:	4589      	cmp	r9, r1
 8000478:	d81f      	bhi.n	80004ba <__udivmoddi4+0x2b6>
 800047a:	eba1 0109 	sub.w	r1, r1, r9
 800047e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000482:	fb09 f804 	mul.w	r8, r9, r4
 8000486:	fb0e 1119 	mls	r1, lr, r9, r1
 800048a:	b292      	uxth	r2, r2
 800048c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000490:	4542      	cmp	r2, r8
 8000492:	d229      	bcs.n	80004e8 <__udivmoddi4+0x2e4>
 8000494:	18ba      	adds	r2, r7, r2
 8000496:	f109 31ff 	add.w	r1, r9, #4294967295
 800049a:	d2c4      	bcs.n	8000426 <__udivmoddi4+0x222>
 800049c:	4542      	cmp	r2, r8
 800049e:	d2c2      	bcs.n	8000426 <__udivmoddi4+0x222>
 80004a0:	f1a9 0102 	sub.w	r1, r9, #2
 80004a4:	443a      	add	r2, r7
 80004a6:	e7be      	b.n	8000426 <__udivmoddi4+0x222>
 80004a8:	45f0      	cmp	r8, lr
 80004aa:	d29d      	bcs.n	80003e8 <__udivmoddi4+0x1e4>
 80004ac:	ebbe 0302 	subs.w	r3, lr, r2
 80004b0:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004b4:	3801      	subs	r0, #1
 80004b6:	46e1      	mov	r9, ip
 80004b8:	e796      	b.n	80003e8 <__udivmoddi4+0x1e4>
 80004ba:	eba7 0909 	sub.w	r9, r7, r9
 80004be:	4449      	add	r1, r9
 80004c0:	f1a8 0c02 	sub.w	ip, r8, #2
 80004c4:	fbb1 f9fe 	udiv	r9, r1, lr
 80004c8:	fb09 f804 	mul.w	r8, r9, r4
 80004cc:	e7db      	b.n	8000486 <__udivmoddi4+0x282>
 80004ce:	4673      	mov	r3, lr
 80004d0:	e77f      	b.n	80003d2 <__udivmoddi4+0x1ce>
 80004d2:	4650      	mov	r0, sl
 80004d4:	e766      	b.n	80003a4 <__udivmoddi4+0x1a0>
 80004d6:	4608      	mov	r0, r1
 80004d8:	e6fd      	b.n	80002d6 <__udivmoddi4+0xd2>
 80004da:	443b      	add	r3, r7
 80004dc:	3a02      	subs	r2, #2
 80004de:	e733      	b.n	8000348 <__udivmoddi4+0x144>
 80004e0:	f1ac 0c02 	sub.w	ip, ip, #2
 80004e4:	443b      	add	r3, r7
 80004e6:	e71c      	b.n	8000322 <__udivmoddi4+0x11e>
 80004e8:	4649      	mov	r1, r9
 80004ea:	e79c      	b.n	8000426 <__udivmoddi4+0x222>
 80004ec:	eba1 0109 	sub.w	r1, r1, r9
 80004f0:	46c4      	mov	ip, r8
 80004f2:	fbb1 f9fe 	udiv	r9, r1, lr
 80004f6:	fb09 f804 	mul.w	r8, r9, r4
 80004fa:	e7c4      	b.n	8000486 <__udivmoddi4+0x282>

080004fc <__aeabi_idiv0>:
 80004fc:	4770      	bx	lr
 80004fe:	bf00      	nop

08000500 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000500:	b480      	push	{r7}
 8000502:	b085      	sub	sp, #20
 8000504:	af00      	add	r7, sp, #0
 8000506:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000508:	687b      	ldr	r3, [r7, #4]
 800050a:	f003 0307 	and.w	r3, r3, #7
 800050e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000510:	4b0c      	ldr	r3, [pc, #48]	@ (8000544 <__NVIC_SetPriorityGrouping+0x44>)
 8000512:	68db      	ldr	r3, [r3, #12]
 8000514:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000516:	68ba      	ldr	r2, [r7, #8]
 8000518:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800051c:	4013      	ands	r3, r2
 800051e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000520:	68fb      	ldr	r3, [r7, #12]
 8000522:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000524:	68bb      	ldr	r3, [r7, #8]
 8000526:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000528:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800052c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000530:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000532:	4a04      	ldr	r2, [pc, #16]	@ (8000544 <__NVIC_SetPriorityGrouping+0x44>)
 8000534:	68bb      	ldr	r3, [r7, #8]
 8000536:	60d3      	str	r3, [r2, #12]
}
 8000538:	bf00      	nop
 800053a:	3714      	adds	r7, #20
 800053c:	46bd      	mov	sp, r7
 800053e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000542:	4770      	bx	lr
 8000544:	e000ed00 	.word	0xe000ed00

08000548 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000548:	b480      	push	{r7}
 800054a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800054c:	4b04      	ldr	r3, [pc, #16]	@ (8000560 <__NVIC_GetPriorityGrouping+0x18>)
 800054e:	68db      	ldr	r3, [r3, #12]
 8000550:	0a1b      	lsrs	r3, r3, #8
 8000552:	f003 0307 	and.w	r3, r3, #7
}
 8000556:	4618      	mov	r0, r3
 8000558:	46bd      	mov	sp, r7
 800055a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800055e:	4770      	bx	lr
 8000560:	e000ed00 	.word	0xe000ed00

08000564 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000564:	b480      	push	{r7}
 8000566:	b083      	sub	sp, #12
 8000568:	af00      	add	r7, sp, #0
 800056a:	4603      	mov	r3, r0
 800056c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800056e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000572:	2b00      	cmp	r3, #0
 8000574:	db0b      	blt.n	800058e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000576:	79fb      	ldrb	r3, [r7, #7]
 8000578:	f003 021f 	and.w	r2, r3, #31
 800057c:	4907      	ldr	r1, [pc, #28]	@ (800059c <__NVIC_EnableIRQ+0x38>)
 800057e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000582:	095b      	lsrs	r3, r3, #5
 8000584:	2001      	movs	r0, #1
 8000586:	fa00 f202 	lsl.w	r2, r0, r2
 800058a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800058e:	bf00      	nop
 8000590:	370c      	adds	r7, #12
 8000592:	46bd      	mov	sp, r7
 8000594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000598:	4770      	bx	lr
 800059a:	bf00      	nop
 800059c:	e000e100 	.word	0xe000e100

080005a0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80005a0:	b480      	push	{r7}
 80005a2:	b083      	sub	sp, #12
 80005a4:	af00      	add	r7, sp, #0
 80005a6:	4603      	mov	r3, r0
 80005a8:	6039      	str	r1, [r7, #0]
 80005aa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80005ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005b0:	2b00      	cmp	r3, #0
 80005b2:	db0a      	blt.n	80005ca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005b4:	683b      	ldr	r3, [r7, #0]
 80005b6:	b2da      	uxtb	r2, r3
 80005b8:	490c      	ldr	r1, [pc, #48]	@ (80005ec <__NVIC_SetPriority+0x4c>)
 80005ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005be:	0112      	lsls	r2, r2, #4
 80005c0:	b2d2      	uxtb	r2, r2
 80005c2:	440b      	add	r3, r1
 80005c4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80005c8:	e00a      	b.n	80005e0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005ca:	683b      	ldr	r3, [r7, #0]
 80005cc:	b2da      	uxtb	r2, r3
 80005ce:	4908      	ldr	r1, [pc, #32]	@ (80005f0 <__NVIC_SetPriority+0x50>)
 80005d0:	79fb      	ldrb	r3, [r7, #7]
 80005d2:	f003 030f 	and.w	r3, r3, #15
 80005d6:	3b04      	subs	r3, #4
 80005d8:	0112      	lsls	r2, r2, #4
 80005da:	b2d2      	uxtb	r2, r2
 80005dc:	440b      	add	r3, r1
 80005de:	761a      	strb	r2, [r3, #24]
}
 80005e0:	bf00      	nop
 80005e2:	370c      	adds	r7, #12
 80005e4:	46bd      	mov	sp, r7
 80005e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ea:	4770      	bx	lr
 80005ec:	e000e100 	.word	0xe000e100
 80005f0:	e000ed00 	.word	0xe000ed00

080005f4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80005f4:	b480      	push	{r7}
 80005f6:	b089      	sub	sp, #36	@ 0x24
 80005f8:	af00      	add	r7, sp, #0
 80005fa:	60f8      	str	r0, [r7, #12]
 80005fc:	60b9      	str	r1, [r7, #8]
 80005fe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000600:	68fb      	ldr	r3, [r7, #12]
 8000602:	f003 0307 	and.w	r3, r3, #7
 8000606:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000608:	69fb      	ldr	r3, [r7, #28]
 800060a:	f1c3 0307 	rsb	r3, r3, #7
 800060e:	2b04      	cmp	r3, #4
 8000610:	bf28      	it	cs
 8000612:	2304      	movcs	r3, #4
 8000614:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000616:	69fb      	ldr	r3, [r7, #28]
 8000618:	3304      	adds	r3, #4
 800061a:	2b06      	cmp	r3, #6
 800061c:	d902      	bls.n	8000624 <NVIC_EncodePriority+0x30>
 800061e:	69fb      	ldr	r3, [r7, #28]
 8000620:	3b03      	subs	r3, #3
 8000622:	e000      	b.n	8000626 <NVIC_EncodePriority+0x32>
 8000624:	2300      	movs	r3, #0
 8000626:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000628:	f04f 32ff 	mov.w	r2, #4294967295
 800062c:	69bb      	ldr	r3, [r7, #24]
 800062e:	fa02 f303 	lsl.w	r3, r2, r3
 8000632:	43da      	mvns	r2, r3
 8000634:	68bb      	ldr	r3, [r7, #8]
 8000636:	401a      	ands	r2, r3
 8000638:	697b      	ldr	r3, [r7, #20]
 800063a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800063c:	f04f 31ff 	mov.w	r1, #4294967295
 8000640:	697b      	ldr	r3, [r7, #20]
 8000642:	fa01 f303 	lsl.w	r3, r1, r3
 8000646:	43d9      	mvns	r1, r3
 8000648:	687b      	ldr	r3, [r7, #4]
 800064a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800064c:	4313      	orrs	r3, r2
         );
}
 800064e:	4618      	mov	r0, r3
 8000650:	3724      	adds	r7, #36	@ 0x24
 8000652:	46bd      	mov	sp, r7
 8000654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000658:	4770      	bx	lr
	...

0800065c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	b082      	sub	sp, #8
 8000660:	af00      	add	r7, sp, #0
 8000662:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	3b01      	subs	r3, #1
 8000668:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800066c:	d301      	bcc.n	8000672 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800066e:	2301      	movs	r3, #1
 8000670:	e00f      	b.n	8000692 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000672:	4a0a      	ldr	r2, [pc, #40]	@ (800069c <SysTick_Config+0x40>)
 8000674:	687b      	ldr	r3, [r7, #4]
 8000676:	3b01      	subs	r3, #1
 8000678:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800067a:	210f      	movs	r1, #15
 800067c:	f04f 30ff 	mov.w	r0, #4294967295
 8000680:	f7ff ff8e 	bl	80005a0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000684:	4b05      	ldr	r3, [pc, #20]	@ (800069c <SysTick_Config+0x40>)
 8000686:	2200      	movs	r2, #0
 8000688:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800068a:	4b04      	ldr	r3, [pc, #16]	@ (800069c <SysTick_Config+0x40>)
 800068c:	2207      	movs	r2, #7
 800068e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000690:	2300      	movs	r3, #0
}
 8000692:	4618      	mov	r0, r3
 8000694:	3708      	adds	r7, #8
 8000696:	46bd      	mov	sp, r7
 8000698:	bd80      	pop	{r7, pc}
 800069a:	bf00      	nop
 800069c:	e000e010 	.word	0xe000e010

080006a0 <LL_ADC_REG_SetSequencerRanks>:
  *         (1) On STM32F4, parameter available only on ADC instance: ADC1.\n
  *         (2) On devices STM32F42x and STM32F43x, limitation: this internal channel is shared between temperature sensor and Vbat, only 1 measurement path must be enabled.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80006a0:	b480      	push	{r7}
 80006a2:	b089      	sub	sp, #36	@ 0x24
 80006a4:	af00      	add	r7, sp, #0
 80006a6:	60f8      	str	r0, [r7, #12]
 80006a8:	60b9      	str	r1, [r7, #8]
 80006aa:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, __ADC_MASK_SHIFT(Rank, ADC_REG_SQRX_REGOFFSET_MASK));
 80006ac:	68fb      	ldr	r3, [r7, #12]
 80006ae:	332c      	adds	r3, #44	@ 0x2c
 80006b0:	4619      	mov	r1, r3
 80006b2:	68bb      	ldr	r3, [r7, #8]
 80006b4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80006b8:	f44f 7240 	mov.w	r2, #768	@ 0x300
 80006bc:	617a      	str	r2, [r7, #20]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80006be:	697a      	ldr	r2, [r7, #20]
 80006c0:	fa92 f2a2 	rbit	r2, r2
 80006c4:	613a      	str	r2, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80006c6:	693a      	ldr	r2, [r7, #16]
 80006c8:	61ba      	str	r2, [r7, #24]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80006ca:	69ba      	ldr	r2, [r7, #24]
 80006cc:	2a00      	cmp	r2, #0
 80006ce:	d101      	bne.n	80006d4 <LL_ADC_REG_SetSequencerRanks+0x34>
  {
    return 32U;
 80006d0:	2220      	movs	r2, #32
 80006d2:	e003      	b.n	80006dc <LL_ADC_REG_SetSequencerRanks+0x3c>
  }
  return __builtin_clz(value);
 80006d4:	69ba      	ldr	r2, [r7, #24]
 80006d6:	fab2 f282 	clz	r2, r2
 80006da:	b2d2      	uxtb	r2, r2
 80006dc:	40d3      	lsrs	r3, r2
 80006de:	009b      	lsls	r3, r3, #2
 80006e0:	440b      	add	r3, r1
 80006e2:	61fb      	str	r3, [r7, #28]

  MODIFY_REG(*preg,
 80006e4:	69fb      	ldr	r3, [r7, #28]
 80006e6:	681a      	ldr	r2, [r3, #0]
 80006e8:	68bb      	ldr	r3, [r7, #8]
 80006ea:	f003 031f 	and.w	r3, r3, #31
 80006ee:	211f      	movs	r1, #31
 80006f0:	fa01 f303 	lsl.w	r3, r1, r3
 80006f4:	43db      	mvns	r3, r3
 80006f6:	401a      	ands	r2, r3
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	f003 011f 	and.w	r1, r3, #31
 80006fe:	68bb      	ldr	r3, [r7, #8]
 8000700:	f003 031f 	and.w	r3, r3, #31
 8000704:	fa01 f303 	lsl.w	r3, r1, r3
 8000708:	431a      	orrs	r2, r3
 800070a:	69fb      	ldr	r3, [r7, #28]
 800070c:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             (Channel & ADC_CHANNEL_ID_NUMBER_MASK) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800070e:	bf00      	nop
 8000710:	3724      	adds	r7, #36	@ 0x24
 8000712:	46bd      	mov	sp, r7
 8000714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000718:	4770      	bx	lr

0800071a <LL_ADC_REG_SetFlagEndOfConversion>:
  *         @arg @ref LL_ADC_REG_FLAG_EOC_SEQUENCE_CONV
  *         @arg @ref LL_ADC_REG_FLAG_EOC_UNITARY_CONV
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetFlagEndOfConversion(ADC_TypeDef *ADCx, uint32_t EocSelection)
{
 800071a:	b480      	push	{r7}
 800071c:	b083      	sub	sp, #12
 800071e:	af00      	add	r7, sp, #0
 8000720:	6078      	str	r0, [r7, #4]
 8000722:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR2, ADC_CR2_EOCS, EocSelection);
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	689b      	ldr	r3, [r3, #8]
 8000728:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800072c:	683b      	ldr	r3, [r7, #0]
 800072e:	431a      	orrs	r2, r3
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	609a      	str	r2, [r3, #8]
}
 8000734:	bf00      	nop
 8000736:	370c      	adds	r7, #12
 8000738:	46bd      	mov	sp, r7
 800073a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800073e:	4770      	bx	lr

08000740 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_144CYCLES
  *         @arg @ref LL_ADC_SAMPLINGTIME_480CYCLES
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8000740:	b480      	push	{r7}
 8000742:	b08f      	sub	sp, #60	@ 0x3c
 8000744:	af00      	add	r7, sp, #0
 8000746:	60f8      	str	r0, [r7, #12]
 8000748:	60b9      	str	r1, [r7, #8]
 800074a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPRX_REGOFFSET_MASK));
 800074c:	68fb      	ldr	r3, [r7, #12]
 800074e:	330c      	adds	r3, #12
 8000750:	4619      	mov	r1, r3
 8000752:	68bb      	ldr	r3, [r7, #8]
 8000754:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000758:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800075c:	617a      	str	r2, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800075e:	697a      	ldr	r2, [r7, #20]
 8000760:	fa92 f2a2 	rbit	r2, r2
 8000764:	613a      	str	r2, [r7, #16]
  return result;
 8000766:	693a      	ldr	r2, [r7, #16]
 8000768:	61ba      	str	r2, [r7, #24]
  if (value == 0U)
 800076a:	69ba      	ldr	r2, [r7, #24]
 800076c:	2a00      	cmp	r2, #0
 800076e:	d101      	bne.n	8000774 <LL_ADC_SetChannelSamplingTime+0x34>
    return 32U;
 8000770:	2220      	movs	r2, #32
 8000772:	e003      	b.n	800077c <LL_ADC_SetChannelSamplingTime+0x3c>
  return __builtin_clz(value);
 8000774:	69ba      	ldr	r2, [r7, #24]
 8000776:	fab2 f282 	clz	r2, r2
 800077a:	b2d2      	uxtb	r2, r2
 800077c:	40d3      	lsrs	r3, r2
 800077e:	009b      	lsls	r3, r3, #2
 8000780:	440b      	add	r3, r1
 8000782:	637b      	str	r3, [r7, #52]	@ 0x34

  MODIFY_REG(*preg,
 8000784:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000786:	681a      	ldr	r2, [r3, #0]
 8000788:	68bb      	ldr	r3, [r7, #8]
 800078a:	f003 73f8 	and.w	r3, r3, #32505856	@ 0x1f00000
 800078e:	f04f 71f8 	mov.w	r1, #32505856	@ 0x1f00000
 8000792:	6239      	str	r1, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000794:	6a39      	ldr	r1, [r7, #32]
 8000796:	fa91 f1a1 	rbit	r1, r1
 800079a:	61f9      	str	r1, [r7, #28]
  return result;
 800079c:	69f9      	ldr	r1, [r7, #28]
 800079e:	6279      	str	r1, [r7, #36]	@ 0x24
  if (value == 0U)
 80007a0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80007a2:	2900      	cmp	r1, #0
 80007a4:	d101      	bne.n	80007aa <LL_ADC_SetChannelSamplingTime+0x6a>
    return 32U;
 80007a6:	2120      	movs	r1, #32
 80007a8:	e003      	b.n	80007b2 <LL_ADC_SetChannelSamplingTime+0x72>
  return __builtin_clz(value);
 80007aa:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80007ac:	fab1 f181 	clz	r1, r1
 80007b0:	b2c9      	uxtb	r1, r1
 80007b2:	40cb      	lsrs	r3, r1
 80007b4:	2107      	movs	r1, #7
 80007b6:	fa01 f303 	lsl.w	r3, r1, r3
 80007ba:	43db      	mvns	r3, r3
 80007bc:	401a      	ands	r2, r3
 80007be:	68bb      	ldr	r3, [r7, #8]
 80007c0:	f003 73f8 	and.w	r3, r3, #32505856	@ 0x1f00000
 80007c4:	f04f 71f8 	mov.w	r1, #32505856	@ 0x1f00000
 80007c8:	62f9      	str	r1, [r7, #44]	@ 0x2c
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80007ca:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80007cc:	fa91 f1a1 	rbit	r1, r1
 80007d0:	62b9      	str	r1, [r7, #40]	@ 0x28
  return result;
 80007d2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80007d4:	6339      	str	r1, [r7, #48]	@ 0x30
  if (value == 0U)
 80007d6:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80007d8:	2900      	cmp	r1, #0
 80007da:	d101      	bne.n	80007e0 <LL_ADC_SetChannelSamplingTime+0xa0>
    return 32U;
 80007dc:	2120      	movs	r1, #32
 80007de:	e003      	b.n	80007e8 <LL_ADC_SetChannelSamplingTime+0xa8>
  return __builtin_clz(value);
 80007e0:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80007e2:	fab1 f181 	clz	r1, r1
 80007e6:	b2c9      	uxtb	r1, r1
 80007e8:	40cb      	lsrs	r3, r1
 80007ea:	6879      	ldr	r1, [r7, #4]
 80007ec:	fa01 f303 	lsl.w	r3, r1, r3
 80007f0:	431a      	orrs	r2, r3
 80007f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80007f4:	601a      	str	r2, [r3, #0]
             ADC_SMPR2_SMP0 << __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPx_BITOFFSET_MASK),
             SamplingTime   << __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPx_BITOFFSET_MASK));
}
 80007f6:	bf00      	nop
 80007f8:	373c      	adds	r7, #60	@ 0x3c
 80007fa:	46bd      	mov	sp, r7
 80007fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000800:	4770      	bx	lr
	...

08000804 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 8000804:	b480      	push	{r7}
 8000806:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8000808:	4b05      	ldr	r3, [pc, #20]	@ (8000820 <LL_RCC_HSI_Enable+0x1c>)
 800080a:	681b      	ldr	r3, [r3, #0]
 800080c:	4a04      	ldr	r2, [pc, #16]	@ (8000820 <LL_RCC_HSI_Enable+0x1c>)
 800080e:	f043 0301 	orr.w	r3, r3, #1
 8000812:	6013      	str	r3, [r2, #0]
}
 8000814:	bf00      	nop
 8000816:	46bd      	mov	sp, r7
 8000818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800081c:	4770      	bx	lr
 800081e:	bf00      	nop
 8000820:	40023800 	.word	0x40023800

08000824 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8000824:	b480      	push	{r7}
 8000826:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 8000828:	4b06      	ldr	r3, [pc, #24]	@ (8000844 <LL_RCC_HSI_IsReady+0x20>)
 800082a:	681b      	ldr	r3, [r3, #0]
 800082c:	f003 0302 	and.w	r3, r3, #2
 8000830:	2b02      	cmp	r3, #2
 8000832:	bf0c      	ite	eq
 8000834:	2301      	moveq	r3, #1
 8000836:	2300      	movne	r3, #0
 8000838:	b2db      	uxtb	r3, r3
}
 800083a:	4618      	mov	r0, r3
 800083c:	46bd      	mov	sp, r7
 800083e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000842:	4770      	bx	lr
 8000844:	40023800 	.word	0x40023800

08000848 <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll CR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 31
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 8000848:	b480      	push	{r7}
 800084a:	b083      	sub	sp, #12
 800084c:	af00      	add	r7, sp, #0
 800084e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_HSITRIM, Value << RCC_CR_HSITRIM_Pos);
 8000850:	4b07      	ldr	r3, [pc, #28]	@ (8000870 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 8000852:	681b      	ldr	r3, [r3, #0]
 8000854:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	00db      	lsls	r3, r3, #3
 800085c:	4904      	ldr	r1, [pc, #16]	@ (8000870 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 800085e:	4313      	orrs	r3, r2
 8000860:	600b      	str	r3, [r1, #0]
}
 8000862:	bf00      	nop
 8000864:	370c      	adds	r7, #12
 8000866:	46bd      	mov	sp, r7
 8000868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800086c:	4770      	bx	lr
 800086e:	bf00      	nop
 8000870:	40023800 	.word	0x40023800

08000874 <LL_RCC_SetSysClkSource>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8000874:	b480      	push	{r7}
 8000876:	b083      	sub	sp, #12
 8000878:	af00      	add	r7, sp, #0
 800087a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 800087c:	4b06      	ldr	r3, [pc, #24]	@ (8000898 <LL_RCC_SetSysClkSource+0x24>)
 800087e:	689b      	ldr	r3, [r3, #8]
 8000880:	f023 0203 	bic.w	r2, r3, #3
 8000884:	4904      	ldr	r1, [pc, #16]	@ (8000898 <LL_RCC_SetSysClkSource+0x24>)
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	4313      	orrs	r3, r2
 800088a:	608b      	str	r3, [r1, #8]
}
 800088c:	bf00      	nop
 800088e:	370c      	adds	r7, #12
 8000890:	46bd      	mov	sp, r7
 8000892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000896:	4770      	bx	lr
 8000898:	40023800 	.word	0x40023800

0800089c <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLLR (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 800089c:	b480      	push	{r7}
 800089e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80008a0:	4b04      	ldr	r3, [pc, #16]	@ (80008b4 <LL_RCC_GetSysClkSource+0x18>)
 80008a2:	689b      	ldr	r3, [r3, #8]
 80008a4:	f003 030c 	and.w	r3, r3, #12
}
 80008a8:	4618      	mov	r0, r3
 80008aa:	46bd      	mov	sp, r7
 80008ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b0:	4770      	bx	lr
 80008b2:	bf00      	nop
 80008b4:	40023800 	.word	0x40023800

080008b8 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 80008b8:	b480      	push	{r7}
 80008ba:	b083      	sub	sp, #12
 80008bc:	af00      	add	r7, sp, #0
 80008be:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 80008c0:	4b06      	ldr	r3, [pc, #24]	@ (80008dc <LL_RCC_SetAHBPrescaler+0x24>)
 80008c2:	689b      	ldr	r3, [r3, #8]
 80008c4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80008c8:	4904      	ldr	r1, [pc, #16]	@ (80008dc <LL_RCC_SetAHBPrescaler+0x24>)
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	4313      	orrs	r3, r2
 80008ce:	608b      	str	r3, [r1, #8]
}
 80008d0:	bf00      	nop
 80008d2:	370c      	adds	r7, #12
 80008d4:	46bd      	mov	sp, r7
 80008d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008da:	4770      	bx	lr
 80008dc:	40023800 	.word	0x40023800

080008e0 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 80008e0:	b480      	push	{r7}
 80008e2:	b083      	sub	sp, #12
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 80008e8:	4b06      	ldr	r3, [pc, #24]	@ (8000904 <LL_RCC_SetAPB1Prescaler+0x24>)
 80008ea:	689b      	ldr	r3, [r3, #8]
 80008ec:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80008f0:	4904      	ldr	r1, [pc, #16]	@ (8000904 <LL_RCC_SetAPB1Prescaler+0x24>)
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	4313      	orrs	r3, r2
 80008f6:	608b      	str	r3, [r1, #8]
}
 80008f8:	bf00      	nop
 80008fa:	370c      	adds	r7, #12
 80008fc:	46bd      	mov	sp, r7
 80008fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000902:	4770      	bx	lr
 8000904:	40023800 	.word	0x40023800

08000908 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8000908:	b480      	push	{r7}
 800090a:	b083      	sub	sp, #12
 800090c:	af00      	add	r7, sp, #0
 800090e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8000910:	4b06      	ldr	r3, [pc, #24]	@ (800092c <LL_RCC_SetAPB2Prescaler+0x24>)
 8000912:	689b      	ldr	r3, [r3, #8]
 8000914:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8000918:	4904      	ldr	r1, [pc, #16]	@ (800092c <LL_RCC_SetAPB2Prescaler+0x24>)
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	4313      	orrs	r3, r2
 800091e:	608b      	str	r3, [r1, #8]
}
 8000920:	bf00      	nop
 8000922:	370c      	adds	r7, #12
 8000924:	46bd      	mov	sp, r7
 8000926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800092a:	4770      	bx	lr
 800092c:	40023800 	.word	0x40023800

08000930 <LL_RCC_SetTIMPrescaler>:
  *         @arg @ref LL_RCC_TIM_PRESCALER_TWICE
  *         @arg @ref LL_RCC_TIM_PRESCALER_FOUR_TIMES
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetTIMPrescaler(uint32_t Prescaler)
{
 8000930:	b480      	push	{r7}
 8000932:	b083      	sub	sp, #12
 8000934:	af00      	add	r7, sp, #0
 8000936:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->DCKCFGR, RCC_DCKCFGR_TIMPRE, Prescaler);
 8000938:	4b07      	ldr	r3, [pc, #28]	@ (8000958 <LL_RCC_SetTIMPrescaler+0x28>)
 800093a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800093e:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8000942:	4905      	ldr	r1, [pc, #20]	@ (8000958 <LL_RCC_SetTIMPrescaler+0x28>)
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	4313      	orrs	r3, r2
 8000948:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
}
 800094c:	bf00      	nop
 800094e:	370c      	adds	r7, #12
 8000950:	46bd      	mov	sp, r7
 8000952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000956:	4770      	bx	lr
 8000958:	40023800 	.word	0x40023800

0800095c <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 800095c:	b480      	push	{r7}
 800095e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8000960:	4b05      	ldr	r3, [pc, #20]	@ (8000978 <LL_RCC_PLL_Enable+0x1c>)
 8000962:	681b      	ldr	r3, [r3, #0]
 8000964:	4a04      	ldr	r2, [pc, #16]	@ (8000978 <LL_RCC_PLL_Enable+0x1c>)
 8000966:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800096a:	6013      	str	r3, [r2, #0]
}
 800096c:	bf00      	nop
 800096e:	46bd      	mov	sp, r7
 8000970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000974:	4770      	bx	lr
 8000976:	bf00      	nop
 8000978:	40023800 	.word	0x40023800

0800097c <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 800097c:	b480      	push	{r7}
 800097e:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY));
 8000980:	4b07      	ldr	r3, [pc, #28]	@ (80009a0 <LL_RCC_PLL_IsReady+0x24>)
 8000982:	681b      	ldr	r3, [r3, #0]
 8000984:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000988:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800098c:	bf0c      	ite	eq
 800098e:	2301      	moveq	r3, #1
 8000990:	2300      	movne	r3, #0
 8000992:	b2db      	uxtb	r3, r3
}
 8000994:	4618      	mov	r0, r3
 8000996:	46bd      	mov	sp, r7
 8000998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800099c:	4770      	bx	lr
 800099e:	bf00      	nop
 80009a0:	40023800 	.word	0x40023800

080009a4 <LL_RCC_PLL_ConfigDomain_SYS>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLM, uint32_t PLLN, uint32_t PLLP_R)
{
 80009a4:	b480      	push	{r7}
 80009a6:	b085      	sub	sp, #20
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	60f8      	str	r0, [r7, #12]
 80009ac:	60b9      	str	r1, [r7, #8]
 80009ae:	607a      	str	r2, [r7, #4]
 80009b0:	603b      	str	r3, [r7, #0]
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM | RCC_PLLCFGR_PLLN,
 80009b2:	4b0d      	ldr	r3, [pc, #52]	@ (80009e8 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 80009b4:	685a      	ldr	r2, [r3, #4]
 80009b6:	4b0d      	ldr	r3, [pc, #52]	@ (80009ec <LL_RCC_PLL_ConfigDomain_SYS+0x48>)
 80009b8:	4013      	ands	r3, r2
 80009ba:	68f9      	ldr	r1, [r7, #12]
 80009bc:	68ba      	ldr	r2, [r7, #8]
 80009be:	4311      	orrs	r1, r2
 80009c0:	687a      	ldr	r2, [r7, #4]
 80009c2:	0192      	lsls	r2, r2, #6
 80009c4:	430a      	orrs	r2, r1
 80009c6:	4908      	ldr	r1, [pc, #32]	@ (80009e8 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 80009c8:	4313      	orrs	r3, r2
 80009ca:	604b      	str	r3, [r1, #4]
             Source | PLLM | PLLN << RCC_PLLCFGR_PLLN_Pos);
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLP, PLLP_R);
 80009cc:	4b06      	ldr	r3, [pc, #24]	@ (80009e8 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 80009ce:	685b      	ldr	r3, [r3, #4]
 80009d0:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80009d4:	4904      	ldr	r1, [pc, #16]	@ (80009e8 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 80009d6:	683b      	ldr	r3, [r7, #0]
 80009d8:	4313      	orrs	r3, r2
 80009da:	604b      	str	r3, [r1, #4]
#if defined(RCC_PLLR_SYSCLK_SUPPORT)
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLR, PLLP_R);
#endif /* RCC_PLLR_SYSCLK_SUPPORT */
}
 80009dc:	bf00      	nop
 80009de:	3714      	adds	r7, #20
 80009e0:	46bd      	mov	sp, r7
 80009e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e6:	4770      	bx	lr
 80009e8:	40023800 	.word	0x40023800
 80009ec:	ffbf8000 	.word	0xffbf8000

080009f0 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 80009f0:	b480      	push	{r7}
 80009f2:	b085      	sub	sp, #20
 80009f4:	af00      	add	r7, sp, #0
 80009f6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 80009f8:	4b08      	ldr	r3, [pc, #32]	@ (8000a1c <LL_AHB1_GRP1_EnableClock+0x2c>)
 80009fa:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80009fc:	4907      	ldr	r1, [pc, #28]	@ (8000a1c <LL_AHB1_GRP1_EnableClock+0x2c>)
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	4313      	orrs	r3, r2
 8000a02:	630b      	str	r3, [r1, #48]	@ 0x30
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8000a04:	4b05      	ldr	r3, [pc, #20]	@ (8000a1c <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000a06:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	4013      	ands	r3, r2
 8000a0c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000a0e:	68fb      	ldr	r3, [r7, #12]
}
 8000a10:	bf00      	nop
 8000a12:	3714      	adds	r7, #20
 8000a14:	46bd      	mov	sp, r7
 8000a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a1a:	4770      	bx	lr
 8000a1c:	40023800 	.word	0x40023800

08000a20 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000a20:	b480      	push	{r7}
 8000a22:	b085      	sub	sp, #20
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 8000a28:	4b08      	ldr	r3, [pc, #32]	@ (8000a4c <LL_APB1_GRP1_EnableClock+0x2c>)
 8000a2a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000a2c:	4907      	ldr	r1, [pc, #28]	@ (8000a4c <LL_APB1_GRP1_EnableClock+0x2c>)
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	4313      	orrs	r3, r2
 8000a32:	640b      	str	r3, [r1, #64]	@ 0x40
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8000a34:	4b05      	ldr	r3, [pc, #20]	@ (8000a4c <LL_APB1_GRP1_EnableClock+0x2c>)
 8000a36:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	4013      	ands	r3, r2
 8000a3c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000a3e:	68fb      	ldr	r3, [r7, #12]
}
 8000a40:	bf00      	nop
 8000a42:	3714      	adds	r7, #20
 8000a44:	46bd      	mov	sp, r7
 8000a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a4a:	4770      	bx	lr
 8000a4c:	40023800 	.word	0x40023800

08000a50 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000a50:	b480      	push	{r7}
 8000a52:	b085      	sub	sp, #20
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000a58:	4b08      	ldr	r3, [pc, #32]	@ (8000a7c <LL_APB2_GRP1_EnableClock+0x2c>)
 8000a5a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8000a5c:	4907      	ldr	r1, [pc, #28]	@ (8000a7c <LL_APB2_GRP1_EnableClock+0x2c>)
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	4313      	orrs	r3, r2
 8000a62:	644b      	str	r3, [r1, #68]	@ 0x44
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000a64:	4b05      	ldr	r3, [pc, #20]	@ (8000a7c <LL_APB2_GRP1_EnableClock+0x2c>)
 8000a66:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	4013      	ands	r3, r2
 8000a6c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000a6e:	68fb      	ldr	r3, [r7, #12]
}
 8000a70:	bf00      	nop
 8000a72:	3714      	adds	r7, #20
 8000a74:	46bd      	mov	sp, r7
 8000a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a7a:	4770      	bx	lr
 8000a7c:	40023800 	.word	0x40023800

08000a80 <LL_SYSCFG_SetEXTISource>:
  *         @arg @ref LL_SYSCFG_EXTI_LINE14
  *         @arg @ref LL_SYSCFG_EXTI_LINE15
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_SetEXTISource(uint32_t Port, uint32_t Line)
{
 8000a80:	b480      	push	{r7}
 8000a82:	b087      	sub	sp, #28
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	6078      	str	r0, [r7, #4]
 8000a88:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SYSCFG->EXTICR[Line & 0xFF], (Line >> 16), Port << POSITION_VAL((Line >> 16)));
 8000a8a:	4a17      	ldr	r2, [pc, #92]	@ (8000ae8 <LL_SYSCFG_SetEXTISource+0x68>)
 8000a8c:	683b      	ldr	r3, [r7, #0]
 8000a8e:	b2db      	uxtb	r3, r3
 8000a90:	3302      	adds	r3, #2
 8000a92:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000a96:	683b      	ldr	r3, [r7, #0]
 8000a98:	0c1b      	lsrs	r3, r3, #16
 8000a9a:	43db      	mvns	r3, r3
 8000a9c:	ea02 0103 	and.w	r1, r2, r3
 8000aa0:	683b      	ldr	r3, [r7, #0]
 8000aa2:	0c1b      	lsrs	r3, r3, #16
 8000aa4:	613b      	str	r3, [r7, #16]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000aa6:	693b      	ldr	r3, [r7, #16]
 8000aa8:	fa93 f3a3 	rbit	r3, r3
 8000aac:	60fb      	str	r3, [r7, #12]
  return result;
 8000aae:	68fb      	ldr	r3, [r7, #12]
 8000ab0:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8000ab2:	697b      	ldr	r3, [r7, #20]
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	d101      	bne.n	8000abc <LL_SYSCFG_SetEXTISource+0x3c>
    return 32U;
 8000ab8:	2320      	movs	r3, #32
 8000aba:	e003      	b.n	8000ac4 <LL_SYSCFG_SetEXTISource+0x44>
  return __builtin_clz(value);
 8000abc:	697b      	ldr	r3, [r7, #20]
 8000abe:	fab3 f383 	clz	r3, r3
 8000ac2:	b2db      	uxtb	r3, r3
 8000ac4:	461a      	mov	r2, r3
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	fa03 f202 	lsl.w	r2, r3, r2
 8000acc:	4806      	ldr	r0, [pc, #24]	@ (8000ae8 <LL_SYSCFG_SetEXTISource+0x68>)
 8000ace:	683b      	ldr	r3, [r7, #0]
 8000ad0:	b2db      	uxtb	r3, r3
 8000ad2:	430a      	orrs	r2, r1
 8000ad4:	3302      	adds	r3, #2
 8000ad6:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
 8000ada:	bf00      	nop
 8000adc:	371c      	adds	r7, #28
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop
 8000ae8:	40013800 	.word	0x40013800

08000aec <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_14
  *         @arg @ref LL_FLASH_LATENCY_15
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 8000aec:	b480      	push	{r7}
 8000aee:	b083      	sub	sp, #12
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8000af4:	4b06      	ldr	r3, [pc, #24]	@ (8000b10 <LL_FLASH_SetLatency+0x24>)
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	f023 0207 	bic.w	r2, r3, #7
 8000afc:	4904      	ldr	r1, [pc, #16]	@ (8000b10 <LL_FLASH_SetLatency+0x24>)
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	4313      	orrs	r3, r2
 8000b02:	600b      	str	r3, [r1, #0]
}
 8000b04:	bf00      	nop
 8000b06:	370c      	adds	r7, #12
 8000b08:	46bd      	mov	sp, r7
 8000b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b0e:	4770      	bx	lr
 8000b10:	40023c00 	.word	0x40023c00

08000b14 <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_13
  *         @arg @ref LL_FLASH_LATENCY_14
  *         @arg @ref LL_FLASH_LATENCY_15
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 8000b14:	b480      	push	{r7}
 8000b16:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8000b18:	4b04      	ldr	r3, [pc, #16]	@ (8000b2c <LL_FLASH_GetLatency+0x18>)
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	f003 0307 	and.w	r3, r3, #7
}
 8000b20:	4618      	mov	r0, r3
 8000b22:	46bd      	mov	sp, r7
 8000b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b28:	4770      	bx	lr
 8000b2a:	bf00      	nop
 8000b2c:	40023c00 	.word	0x40023c00

08000b30 <LL_PWR_SetRegulVoltageScaling>:
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE3
  *         (*) LL_PWR_REGU_VOLTAGE_SCALE1 is not available for STM32F401xx devices
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRegulVoltageScaling(uint32_t VoltageScaling)
{
 8000b30:	b480      	push	{r7}
 8000b32:	b083      	sub	sp, #12
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR, PWR_CR_VOS, VoltageScaling);
 8000b38:	4b06      	ldr	r3, [pc, #24]	@ (8000b54 <LL_PWR_SetRegulVoltageScaling+0x24>)
 8000b3a:	681b      	ldr	r3, [r3, #0]
 8000b3c:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8000b40:	4904      	ldr	r1, [pc, #16]	@ (8000b54 <LL_PWR_SetRegulVoltageScaling+0x24>)
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	4313      	orrs	r3, r2
 8000b46:	600b      	str	r3, [r1, #0]
}
 8000b48:	bf00      	nop
 8000b4a:	370c      	adds	r7, #12
 8000b4c:	46bd      	mov	sp, r7
 8000b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b52:	4770      	bx	lr
 8000b54:	40007000 	.word	0x40007000

08000b58 <LL_PWR_IsActiveFlag_VOS>:
  * @brief  Indicate whether the Regulator is ready in the selected voltage range or if its output voltage is still changing to the required voltage level
  * @rmtoll CSR   VOS       LL_PWR_IsActiveFlag_VOS
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_VOS(void)
{
 8000b58:	b480      	push	{r7}
 8000b5a:	af00      	add	r7, sp, #0
  return (READ_BIT(PWR->CSR, LL_PWR_CSR_VOS) == (LL_PWR_CSR_VOS));
 8000b5c:	4b07      	ldr	r3, [pc, #28]	@ (8000b7c <LL_PWR_IsActiveFlag_VOS+0x24>)
 8000b5e:	685b      	ldr	r3, [r3, #4]
 8000b60:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000b64:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8000b68:	bf0c      	ite	eq
 8000b6a:	2301      	moveq	r3, #1
 8000b6c:	2300      	movne	r3, #0
 8000b6e:	b2db      	uxtb	r3, r3
}
 8000b70:	4618      	mov	r0, r3
 8000b72:	46bd      	mov	sp, r7
 8000b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b78:	4770      	bx	lr
 8000b7a:	bf00      	nop
 8000b7c:	40007000 	.word	0x40007000

08000b80 <LL_TIM_DisableARRPreload>:
  * @rmtoll CR1          ARPE          LL_TIM_DisableARRPreload
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableARRPreload(TIM_TypeDef *TIMx)
{
 8000b80:	b480      	push	{r7}
 8000b82:	b083      	sub	sp, #12
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_ARPE);
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	601a      	str	r2, [r3, #0]
}
 8000b94:	bf00      	nop
 8000b96:	370c      	adds	r7, #12
 8000b98:	46bd      	mov	sp, r7
 8000b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9e:	4770      	bx	lr

08000ba0 <LL_TIM_OC_DisableFast>:
  *         @arg @ref LL_TIM_CHANNEL_CH3
  *         @arg @ref LL_TIM_CHANNEL_CH4
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_DisableFast(TIM_TypeDef *TIMx, uint32_t Channel)
{
 8000ba0:	b480      	push	{r7}
 8000ba2:	b085      	sub	sp, #20
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	6078      	str	r0, [r7, #4]
 8000ba8:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8000baa:	683b      	ldr	r3, [r7, #0]
 8000bac:	2b01      	cmp	r3, #1
 8000bae:	d01c      	beq.n	8000bea <LL_TIM_OC_DisableFast+0x4a>
 8000bb0:	683b      	ldr	r3, [r7, #0]
 8000bb2:	2b04      	cmp	r3, #4
 8000bb4:	d017      	beq.n	8000be6 <LL_TIM_OC_DisableFast+0x46>
 8000bb6:	683b      	ldr	r3, [r7, #0]
 8000bb8:	2b10      	cmp	r3, #16
 8000bba:	d012      	beq.n	8000be2 <LL_TIM_OC_DisableFast+0x42>
 8000bbc:	683b      	ldr	r3, [r7, #0]
 8000bbe:	2b40      	cmp	r3, #64	@ 0x40
 8000bc0:	d00d      	beq.n	8000bde <LL_TIM_OC_DisableFast+0x3e>
 8000bc2:	683b      	ldr	r3, [r7, #0]
 8000bc4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000bc8:	d007      	beq.n	8000bda <LL_TIM_OC_DisableFast+0x3a>
 8000bca:	683b      	ldr	r3, [r7, #0]
 8000bcc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000bd0:	d101      	bne.n	8000bd6 <LL_TIM_OC_DisableFast+0x36>
 8000bd2:	2305      	movs	r3, #5
 8000bd4:	e00a      	b.n	8000bec <LL_TIM_OC_DisableFast+0x4c>
 8000bd6:	2306      	movs	r3, #6
 8000bd8:	e008      	b.n	8000bec <LL_TIM_OC_DisableFast+0x4c>
 8000bda:	2304      	movs	r3, #4
 8000bdc:	e006      	b.n	8000bec <LL_TIM_OC_DisableFast+0x4c>
 8000bde:	2303      	movs	r3, #3
 8000be0:	e004      	b.n	8000bec <LL_TIM_OC_DisableFast+0x4c>
 8000be2:	2302      	movs	r3, #2
 8000be4:	e002      	b.n	8000bec <LL_TIM_OC_DisableFast+0x4c>
 8000be6:	2301      	movs	r3, #1
 8000be8:	e000      	b.n	8000bec <LL_TIM_OC_DisableFast+0x4c>
 8000bea:	2300      	movs	r3, #0
 8000bec:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	3318      	adds	r3, #24
 8000bf2:	4619      	mov	r1, r3
 8000bf4:	7bfb      	ldrb	r3, [r7, #15]
 8000bf6:	4a0b      	ldr	r2, [pc, #44]	@ (8000c24 <LL_TIM_OC_DisableFast+0x84>)
 8000bf8:	5cd3      	ldrb	r3, [r2, r3]
 8000bfa:	440b      	add	r3, r1
 8000bfc:	60bb      	str	r3, [r7, #8]
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1FE << SHIFT_TAB_OCxx[iChannel]));
 8000bfe:	68bb      	ldr	r3, [r7, #8]
 8000c00:	681a      	ldr	r2, [r3, #0]
 8000c02:	7bfb      	ldrb	r3, [r7, #15]
 8000c04:	4908      	ldr	r1, [pc, #32]	@ (8000c28 <LL_TIM_OC_DisableFast+0x88>)
 8000c06:	5ccb      	ldrb	r3, [r1, r3]
 8000c08:	4619      	mov	r1, r3
 8000c0a:	2304      	movs	r3, #4
 8000c0c:	408b      	lsls	r3, r1
 8000c0e:	43db      	mvns	r3, r3
 8000c10:	401a      	ands	r2, r3
 8000c12:	68bb      	ldr	r3, [r7, #8]
 8000c14:	601a      	str	r2, [r3, #0]

}
 8000c16:	bf00      	nop
 8000c18:	3714      	adds	r7, #20
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c20:	4770      	bx	lr
 8000c22:	bf00      	nop
 8000c24:	08002988 	.word	0x08002988
 8000c28:	08002990 	.word	0x08002990

08000c2c <LL_TIM_SetClockSource>:
  *         @arg @ref LL_TIM_CLOCKSOURCE_EXT_MODE1
  *         @arg @ref LL_TIM_CLOCKSOURCE_EXT_MODE2
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetClockSource(TIM_TypeDef *TIMx, uint32_t ClockSource)
{
 8000c2c:	b480      	push	{r7}
 8000c2e:	b083      	sub	sp, #12
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	6078      	str	r0, [r7, #4]
 8000c34:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	689b      	ldr	r3, [r3, #8]
 8000c3a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8000c3e:	f023 0307 	bic.w	r3, r3, #7
 8000c42:	683a      	ldr	r2, [r7, #0]
 8000c44:	431a      	orrs	r2, r3
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	609a      	str	r2, [r3, #8]
}
 8000c4a:	bf00      	nop
 8000c4c:	370c      	adds	r7, #12
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c54:	4770      	bx	lr

08000c56 <LL_TIM_SetTriggerOutput>:
  *         @arg @ref LL_TIM_TRGO_OC3REF
  *         @arg @ref LL_TIM_TRGO_OC4REF
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetTriggerOutput(TIM_TypeDef *TIMx, uint32_t TimerSynchronization)
{
 8000c56:	b480      	push	{r7}
 8000c58:	b083      	sub	sp, #12
 8000c5a:	af00      	add	r7, sp, #0
 8000c5c:	6078      	str	r0, [r7, #4]
 8000c5e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	685b      	ldr	r3, [r3, #4]
 8000c64:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8000c68:	683b      	ldr	r3, [r7, #0]
 8000c6a:	431a      	orrs	r2, r3
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	605a      	str	r2, [r3, #4]
}
 8000c70:	bf00      	nop
 8000c72:	370c      	adds	r7, #12
 8000c74:	46bd      	mov	sp, r7
 8000c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7a:	4770      	bx	lr

08000c7c <LL_TIM_DisableMasterSlaveMode>:
  * @rmtoll SMCR         MSM           LL_TIM_DisableMasterSlaveMode
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableMasterSlaveMode(TIM_TypeDef *TIMx)
{
 8000c7c:	b480      	push	{r7}
 8000c7e:	b083      	sub	sp, #12
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	689b      	ldr	r3, [r3, #8]
 8000c88:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	609a      	str	r2, [r3, #8]
}
 8000c90:	bf00      	nop
 8000c92:	370c      	adds	r7, #12
 8000c94:	46bd      	mov	sp, r7
 8000c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9a:	4770      	bx	lr

08000c9c <LL_USART_Enable>:
  * @rmtoll CR1          UE            LL_USART_Enable
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_Enable(USART_TypeDef *USARTx)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	b083      	sub	sp, #12
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	68db      	ldr	r3, [r3, #12]
 8000ca8:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	60da      	str	r2, [r3, #12]
}
 8000cb0:	bf00      	nop
 8000cb2:	370c      	adds	r7, #12
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cba:	4770      	bx	lr

08000cbc <LL_USART_ConfigAsyncMode>:
  *         CR3          HDSEL         LL_USART_ConfigAsyncMode
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ConfigAsyncMode(USART_TypeDef *USARTx)
{
 8000cbc:	b480      	push	{r7}
 8000cbe:	b083      	sub	sp, #12
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	6078      	str	r0, [r7, #4]
  /* In Asynchronous mode, the following bits must be kept cleared:
  - LINEN, CLKEN bits in the USART_CR2 register,
  - SCEN, IREN and HDSEL bits in the USART_CR3 register.*/
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	691b      	ldr	r3, [r3, #16]
 8000cc8:	f423 4290 	bic.w	r2, r3, #18432	@ 0x4800
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	695b      	ldr	r3, [r3, #20]
 8000cd4:	f023 022a 	bic.w	r2, r3, #42	@ 0x2a
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	615a      	str	r2, [r3, #20]
}
 8000cdc:	bf00      	nop
 8000cde:	370c      	adds	r7, #12
 8000ce0:	46bd      	mov	sp, r7
 8000ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce6:	4770      	bx	lr

08000ce8 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 8000ce8:	b480      	push	{r7}
 8000cea:	b08b      	sub	sp, #44	@ 0x2c
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	60f8      	str	r0, [r7, #12]
 8000cf0:	60b9      	str	r1, [r7, #8]
 8000cf2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8000cf4:	68fb      	ldr	r3, [r7, #12]
 8000cf6:	681a      	ldr	r2, [r3, #0]
 8000cf8:	68bb      	ldr	r3, [r7, #8]
 8000cfa:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000cfc:	697b      	ldr	r3, [r7, #20]
 8000cfe:	fa93 f3a3 	rbit	r3, r3
 8000d02:	613b      	str	r3, [r7, #16]
  return result;
 8000d04:	693b      	ldr	r3, [r7, #16]
 8000d06:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8000d08:	69bb      	ldr	r3, [r7, #24]
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	d101      	bne.n	8000d12 <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 8000d0e:	2320      	movs	r3, #32
 8000d10:	e003      	b.n	8000d1a <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 8000d12:	69bb      	ldr	r3, [r7, #24]
 8000d14:	fab3 f383 	clz	r3, r3
 8000d18:	b2db      	uxtb	r3, r3
 8000d1a:	005b      	lsls	r3, r3, #1
 8000d1c:	2103      	movs	r1, #3
 8000d1e:	fa01 f303 	lsl.w	r3, r1, r3
 8000d22:	43db      	mvns	r3, r3
 8000d24:	401a      	ands	r2, r3
 8000d26:	68bb      	ldr	r3, [r7, #8]
 8000d28:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d2a:	6a3b      	ldr	r3, [r7, #32]
 8000d2c:	fa93 f3a3 	rbit	r3, r3
 8000d30:	61fb      	str	r3, [r7, #28]
  return result;
 8000d32:	69fb      	ldr	r3, [r7, #28]
 8000d34:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8000d36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	d101      	bne.n	8000d40 <LL_GPIO_SetPinMode+0x58>
    return 32U;
 8000d3c:	2320      	movs	r3, #32
 8000d3e:	e003      	b.n	8000d48 <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 8000d40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d42:	fab3 f383 	clz	r3, r3
 8000d46:	b2db      	uxtb	r3, r3
 8000d48:	005b      	lsls	r3, r3, #1
 8000d4a:	6879      	ldr	r1, [r7, #4]
 8000d4c:	fa01 f303 	lsl.w	r3, r1, r3
 8000d50:	431a      	orrs	r2, r3
 8000d52:	68fb      	ldr	r3, [r7, #12]
 8000d54:	601a      	str	r2, [r3, #0]
}
 8000d56:	bf00      	nop
 8000d58:	372c      	adds	r7, #44	@ 0x2c
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d60:	4770      	bx	lr

08000d62 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 8000d62:	b480      	push	{r7}
 8000d64:	b08b      	sub	sp, #44	@ 0x2c
 8000d66:	af00      	add	r7, sp, #0
 8000d68:	60f8      	str	r0, [r7, #12]
 8000d6a:	60b9      	str	r1, [r7, #8]
 8000d6c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8000d6e:	68fb      	ldr	r3, [r7, #12]
 8000d70:	68da      	ldr	r2, [r3, #12]
 8000d72:	68bb      	ldr	r3, [r7, #8]
 8000d74:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d76:	697b      	ldr	r3, [r7, #20]
 8000d78:	fa93 f3a3 	rbit	r3, r3
 8000d7c:	613b      	str	r3, [r7, #16]
  return result;
 8000d7e:	693b      	ldr	r3, [r7, #16]
 8000d80:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8000d82:	69bb      	ldr	r3, [r7, #24]
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	d101      	bne.n	8000d8c <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 8000d88:	2320      	movs	r3, #32
 8000d8a:	e003      	b.n	8000d94 <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 8000d8c:	69bb      	ldr	r3, [r7, #24]
 8000d8e:	fab3 f383 	clz	r3, r3
 8000d92:	b2db      	uxtb	r3, r3
 8000d94:	005b      	lsls	r3, r3, #1
 8000d96:	2103      	movs	r1, #3
 8000d98:	fa01 f303 	lsl.w	r3, r1, r3
 8000d9c:	43db      	mvns	r3, r3
 8000d9e:	401a      	ands	r2, r3
 8000da0:	68bb      	ldr	r3, [r7, #8]
 8000da2:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000da4:	6a3b      	ldr	r3, [r7, #32]
 8000da6:	fa93 f3a3 	rbit	r3, r3
 8000daa:	61fb      	str	r3, [r7, #28]
  return result;
 8000dac:	69fb      	ldr	r3, [r7, #28]
 8000dae:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8000db0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d101      	bne.n	8000dba <LL_GPIO_SetPinPull+0x58>
    return 32U;
 8000db6:	2320      	movs	r3, #32
 8000db8:	e003      	b.n	8000dc2 <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 8000dba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000dbc:	fab3 f383 	clz	r3, r3
 8000dc0:	b2db      	uxtb	r3, r3
 8000dc2:	005b      	lsls	r3, r3, #1
 8000dc4:	6879      	ldr	r1, [r7, #4]
 8000dc6:	fa01 f303 	lsl.w	r3, r1, r3
 8000dca:	431a      	orrs	r2, r3
 8000dcc:	68fb      	ldr	r3, [r7, #12]
 8000dce:	60da      	str	r2, [r3, #12]
}
 8000dd0:	bf00      	nop
 8000dd2:	372c      	adds	r7, #44	@ 0x2c
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dda:	4770      	bx	lr

08000ddc <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000ddc:	b480      	push	{r7}
 8000dde:	b083      	sub	sp, #12
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	6078      	str	r0, [r7, #4]
 8000de4:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8000de6:	683b      	ldr	r3, [r7, #0]
 8000de8:	041a      	lsls	r2, r3, #16
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	619a      	str	r2, [r3, #24]
}
 8000dee:	bf00      	nop
 8000df0:	370c      	adds	r7, #12
 8000df2:	46bd      	mov	sp, r7
 8000df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df8:	4770      	bx	lr
	...

08000dfc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b082      	sub	sp, #8
 8000e00:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
 8000e02:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8000e06:	f7ff fe23 	bl	8000a50 <LL_APB2_GRP1_EnableClock>
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 8000e0a:	f04f 5080 	mov.w	r0, #268435456	@ 0x10000000
 8000e0e:	f7ff fe07 	bl	8000a20 <LL_APB1_GRP1_EnableClock>

  /* System interrupt init*/
  NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_1);
 8000e12:	2006      	movs	r0, #6
 8000e14:	f7ff fb74 	bl	8000500 <__NVIC_SetPriorityGrouping>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e18:	f000 f86a 	bl	8000ef0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e1c:	f000 f9d2 	bl	80011c4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000e20:	f000 f980 	bl	8001124 <MX_USART2_UART_Init>
  MX_TIM3_Init();
 8000e24:	f000 f922 	bl	800106c <MX_TIM3_Init>
  MX_ADC1_Init();
 8000e28:	f000 f8b2 	bl	8000f90 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
	LL_TIM_WriteReg(TIM3, PSC, 83);			// 61 in decimal
 8000e2c:	4b2a      	ldr	r3, [pc, #168]	@ (8000ed8 <main+0xdc>)
 8000e2e:	2253      	movs	r2, #83	@ 0x53
 8000e30:	629a      	str	r2, [r3, #40]	@ 0x28
	//LL_TIM_WriteReg(TIM3, PSC, 42000);		// Debug purposes
	LL_TIM_WriteReg(TIM3, ARR, 0xFFFF);			// 999 in decimal
 8000e32:	4b29      	ldr	r3, [pc, #164]	@ (8000ed8 <main+0xdc>)
 8000e34:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000e38:	62da      	str	r2, [r3, #44]	@ 0x2c
	LL_TIM_WriteReg(TIM3, DIER, LL_TIM_ReadReg(TIM3,DIER) | 0b010);
 8000e3a:	4b27      	ldr	r3, [pc, #156]	@ (8000ed8 <main+0xdc>)
 8000e3c:	68db      	ldr	r3, [r3, #12]
 8000e3e:	4a26      	ldr	r2, [pc, #152]	@ (8000ed8 <main+0xdc>)
 8000e40:	f043 0302 	orr.w	r3, r3, #2
 8000e44:	60d3      	str	r3, [r2, #12]
	LL_TIM_WriteReg(TIM3, CCER, LL_TIM_ReadReg(TIM3, CCER) | 0x01);
 8000e46:	4b24      	ldr	r3, [pc, #144]	@ (8000ed8 <main+0xdc>)
 8000e48:	6a1b      	ldr	r3, [r3, #32]
 8000e4a:	4a23      	ldr	r2, [pc, #140]	@ (8000ed8 <main+0xdc>)
 8000e4c:	f043 0301 	orr.w	r3, r3, #1
 8000e50:	6213      	str	r3, [r2, #32]
	//LL_TIM_WriteReg(TIM3, CCR1, 800);
	LL_TIM_WriteReg(TIM3, CCR1, 0);
 8000e52:	4b21      	ldr	r3, [pc, #132]	@ (8000ed8 <main+0xdc>)
 8000e54:	2200      	movs	r2, #0
 8000e56:	635a      	str	r2, [r3, #52]	@ 0x34
	//LL_TIM_WriteReg(TIM3, CCMR1, LL_TIM_ReadReg(TIM3, CCMR1) | 0b010110000);


	LL_ADC_WriteReg(ADC1, CR2, LL_ADC_ReadReg(ADC1,CR2) | 0x01);
 8000e58:	4b20      	ldr	r3, [pc, #128]	@ (8000edc <main+0xe0>)
 8000e5a:	689b      	ldr	r3, [r3, #8]
 8000e5c:	4a1f      	ldr	r2, [pc, #124]	@ (8000edc <main+0xe0>)
 8000e5e:	f043 0301 	orr.w	r3, r3, #1
 8000e62:	6093      	str	r3, [r2, #8]
	LL_ADC_WriteReg(ADC1, CR2, LL_ADC_ReadReg(ADC1,CR2) | (1 << 30));
 8000e64:	4b1d      	ldr	r3, [pc, #116]	@ (8000edc <main+0xe0>)
 8000e66:	689b      	ldr	r3, [r3, #8]
 8000e68:	4a1c      	ldr	r2, [pc, #112]	@ (8000edc <main+0xe0>)
 8000e6a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8000e6e:	6093      	str	r3, [r2, #8]
	uint8_t voltage;

	LL_TIM_WriteReg(TIM3, CR1, LL_TIM_ReadReg(TIM3,CR1) | 0x01);
 8000e70:	4b19      	ldr	r3, [pc, #100]	@ (8000ed8 <main+0xdc>)
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	4a18      	ldr	r2, [pc, #96]	@ (8000ed8 <main+0xdc>)
 8000e76:	f043 0301 	orr.w	r3, r3, #1
 8000e7a:	6013      	str	r3, [r2, #0]
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	SysTick_Config(SystemCoreClock / 1000);
 8000e7c:	4b18      	ldr	r3, [pc, #96]	@ (8000ee0 <main+0xe4>)
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	4a18      	ldr	r2, [pc, #96]	@ (8000ee4 <main+0xe8>)
 8000e82:	fba2 2303 	umull	r2, r3, r2, r3
 8000e86:	099b      	lsrs	r3, r3, #6
 8000e88:	4618      	mov	r0, r3
 8000e8a:	f7ff fbe7 	bl	800065c <SysTick_Config>
	while (1) {
		// Check for ADC_EOC
		if ((LL_ADC_ReadReg(ADC1,SR) & 0x02) == 0x02) {
 8000e8e:	4b13      	ldr	r3, [pc, #76]	@ (8000edc <main+0xe0>)
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	f003 0302 	and.w	r3, r3, #2
 8000e96:	2b02      	cmp	r3, #2
 8000e98:	d1f9      	bne.n	8000e8e <main+0x92>
			voltage = LL_ADC_ReadReg(ADC1, DR) & 0x00FF;	// Get converted value
 8000e9a:	4b10      	ldr	r3, [pc, #64]	@ (8000edc <main+0xe0>)
 8000e9c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e9e:	71fb      	strb	r3, [r7, #7]
			timeInterval = MIN_FREQ_INC
								+ ((MAX_FREQ_INC - MIN_FREQ_INC) * voltage) / 255;	// Compute interval
 8000ea0:	79fa      	ldrb	r2, [r7, #7]
 8000ea2:	4613      	mov	r3, r2
 8000ea4:	05db      	lsls	r3, r3, #23
 8000ea6:	1a9b      	subs	r3, r3, r2
 8000ea8:	021b      	lsls	r3, r3, #8
 8000eaa:	1a9b      	subs	r3, r3, r2
 8000eac:	005b      	lsls	r3, r3, #1
 8000eae:	4a0e      	ldr	r2, [pc, #56]	@ (8000ee8 <main+0xec>)
 8000eb0:	fb82 1203 	smull	r1, r2, r2, r3
 8000eb4:	441a      	add	r2, r3
 8000eb6:	11d2      	asrs	r2, r2, #7
 8000eb8:	17db      	asrs	r3, r3, #31
 8000eba:	1ad3      	subs	r3, r2, r3
 8000ebc:	b29b      	uxth	r3, r3
 8000ebe:	f203 2371 	addw	r3, r3, #625	@ 0x271
 8000ec2:	b29a      	uxth	r2, r3
			timeInterval = MIN_FREQ_INC
 8000ec4:	4b09      	ldr	r3, [pc, #36]	@ (8000eec <main+0xf0>)
 8000ec6:	801a      	strh	r2, [r3, #0]
			//timeInterval = 1000;

			LL_ADC_WriteReg(ADC1, SR, LL_ADC_ReadReg(ADC1,SR) & (~0x02));	// Clear EOC
 8000ec8:	4b04      	ldr	r3, [pc, #16]	@ (8000edc <main+0xe0>)
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	4a03      	ldr	r2, [pc, #12]	@ (8000edc <main+0xe0>)
 8000ece:	f023 0302 	bic.w	r3, r3, #2
 8000ed2:	6013      	str	r3, [r2, #0]
		if ((LL_ADC_ReadReg(ADC1,SR) & 0x02) == 0x02) {
 8000ed4:	e7db      	b.n	8000e8e <main+0x92>
 8000ed6:	bf00      	nop
 8000ed8:	40000400 	.word	0x40000400
 8000edc:	40012000 	.word	0x40012000
 8000ee0:	20000000 	.word	0x20000000
 8000ee4:	10624dd3 	.word	0x10624dd3
 8000ee8:	80808081 	.word	0x80808081
 8000eec:	20000020 	.word	0x20000020

08000ef0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_2);
 8000ef4:	2002      	movs	r0, #2
 8000ef6:	f7ff fdf9 	bl	8000aec <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_2)
 8000efa:	bf00      	nop
 8000efc:	f7ff fe0a 	bl	8000b14 <LL_FLASH_GetLatency>
 8000f00:	4603      	mov	r3, r0
 8000f02:	2b02      	cmp	r3, #2
 8000f04:	d1fa      	bne.n	8000efc <SystemClock_Config+0xc>
  {
  }
  LL_PWR_SetRegulVoltageScaling(LL_PWR_REGU_VOLTAGE_SCALE2);
 8000f06:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8000f0a:	f7ff fe11 	bl	8000b30 <LL_PWR_SetRegulVoltageScaling>
  LL_RCC_HSI_SetCalibTrimming(16);
 8000f0e:	2010      	movs	r0, #16
 8000f10:	f7ff fc9a 	bl	8000848 <LL_RCC_HSI_SetCalibTrimming>
  LL_RCC_HSI_Enable();
 8000f14:	f7ff fc76 	bl	8000804 <LL_RCC_HSI_Enable>

   /* Wait till HSI is ready */
  while(LL_RCC_HSI_IsReady() != 1)
 8000f18:	bf00      	nop
 8000f1a:	f7ff fc83 	bl	8000824 <LL_RCC_HSI_IsReady>
 8000f1e:	4603      	mov	r3, r0
 8000f20:	2b01      	cmp	r3, #1
 8000f22:	d1fa      	bne.n	8000f1a <SystemClock_Config+0x2a>
  {

  }
  LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSI, LL_RCC_PLLM_DIV_16, 336, LL_RCC_PLLP_DIV_4);
 8000f24:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000f28:	f44f 72a8 	mov.w	r2, #336	@ 0x150
 8000f2c:	2110      	movs	r1, #16
 8000f2e:	2000      	movs	r0, #0
 8000f30:	f7ff fd38 	bl	80009a4 <LL_RCC_PLL_ConfigDomain_SYS>
  LL_RCC_PLL_Enable();
 8000f34:	f7ff fd12 	bl	800095c <LL_RCC_PLL_Enable>

   /* Wait till PLL is ready */
  while(LL_RCC_PLL_IsReady() != 1)
 8000f38:	bf00      	nop
 8000f3a:	f7ff fd1f 	bl	800097c <LL_RCC_PLL_IsReady>
 8000f3e:	4603      	mov	r3, r0
 8000f40:	2b01      	cmp	r3, #1
 8000f42:	d1fa      	bne.n	8000f3a <SystemClock_Config+0x4a>
  {

  }
  while (LL_PWR_IsActiveFlag_VOS() == 0)
 8000f44:	bf00      	nop
 8000f46:	f7ff fe07 	bl	8000b58 <LL_PWR_IsActiveFlag_VOS>
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d0fa      	beq.n	8000f46 <SystemClock_Config+0x56>
  {
  }
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 8000f50:	2000      	movs	r0, #0
 8000f52:	f7ff fcb1 	bl	80008b8 <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_2);
 8000f56:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8000f5a:	f7ff fcc1 	bl	80008e0 <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);
 8000f5e:	2000      	movs	r0, #0
 8000f60:	f7ff fcd2 	bl	8000908 <LL_RCC_SetAPB2Prescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
 8000f64:	2002      	movs	r0, #2
 8000f66:	f7ff fc85 	bl	8000874 <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8000f6a:	bf00      	nop
 8000f6c:	f7ff fc96 	bl	800089c <LL_RCC_GetSysClkSource>
 8000f70:	4603      	mov	r3, r0
 8000f72:	2b08      	cmp	r3, #8
 8000f74:	d1fa      	bne.n	8000f6c <SystemClock_Config+0x7c>
  {

  }
  LL_Init1msTick(84000000);
 8000f76:	4805      	ldr	r0, [pc, #20]	@ (8000f8c <SystemClock_Config+0x9c>)
 8000f78:	f001 fcb0 	bl	80028dc <LL_Init1msTick>
  LL_SetSystemCoreClock(84000000);
 8000f7c:	4803      	ldr	r0, [pc, #12]	@ (8000f8c <SystemClock_Config+0x9c>)
 8000f7e:	f001 fcbb 	bl	80028f8 <LL_SetSystemCoreClock>
  LL_RCC_SetTIMPrescaler(LL_RCC_TIM_PRESCALER_TWICE);
 8000f82:	2000      	movs	r0, #0
 8000f84:	f7ff fcd4 	bl	8000930 <LL_RCC_SetTIMPrescaler>
}
 8000f88:	bf00      	nop
 8000f8a:	bd80      	pop	{r7, pc}
 8000f8c:	0501bd00 	.word	0x0501bd00

08000f90 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b090      	sub	sp, #64	@ 0x40
 8000f94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  LL_ADC_InitTypeDef ADC_InitStruct = {0};
 8000f96:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	601a      	str	r2, [r3, #0]
 8000f9e:	605a      	str	r2, [r3, #4]
 8000fa0:	609a      	str	r2, [r3, #8]
  LL_ADC_REG_InitTypeDef ADC_REG_InitStruct = {0};
 8000fa2:	f107 0320 	add.w	r3, r7, #32
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	601a      	str	r2, [r3, #0]
 8000faa:	605a      	str	r2, [r3, #4]
 8000fac:	609a      	str	r2, [r3, #8]
 8000fae:	60da      	str	r2, [r3, #12]
 8000fb0:	611a      	str	r2, [r3, #16]
  LL_ADC_CommonInitTypeDef ADC_CommonInitStruct = {0};
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	61fb      	str	r3, [r7, #28]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fb6:	1d3b      	adds	r3, r7, #4
 8000fb8:	2200      	movs	r2, #0
 8000fba:	601a      	str	r2, [r3, #0]
 8000fbc:	605a      	str	r2, [r3, #4]
 8000fbe:	609a      	str	r2, [r3, #8]
 8000fc0:	60da      	str	r2, [r3, #12]
 8000fc2:	611a      	str	r2, [r3, #16]
 8000fc4:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_ADC1);
 8000fc6:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8000fca:	f7ff fd41 	bl	8000a50 <LL_APB2_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8000fce:	2001      	movs	r0, #1
 8000fd0:	f7ff fd0e 	bl	80009f0 <LL_AHB1_GRP1_EnableClock>
  /**ADC1 GPIO Configuration
  PA0-WKUP   ------> ADC1_IN0
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_0;
 8000fd4:	2301      	movs	r3, #1
 8000fd6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8000fd8:	2303      	movs	r3, #3
 8000fda:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000fdc:	2300      	movs	r3, #0
 8000fde:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fe0:	1d3b      	adds	r3, r7, #4
 8000fe2:	4619      	mov	r1, r3
 8000fe4:	481e      	ldr	r0, [pc, #120]	@ (8001060 <MX_ADC1_Init+0xd0>)
 8000fe6:	f000 fd1d 	bl	8001a24 <LL_GPIO_Init>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  ADC_InitStruct.Resolution = LL_ADC_RESOLUTION_8B;
 8000fea:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8000fee:	637b      	str	r3, [r7, #52]	@ 0x34
  ADC_InitStruct.DataAlignment = LL_ADC_DATA_ALIGN_RIGHT;
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	63bb      	str	r3, [r7, #56]	@ 0x38
  ADC_InitStruct.SequencersScanMode = LL_ADC_SEQ_SCAN_DISABLE;
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  LL_ADC_Init(ADC1, &ADC_InitStruct);
 8000ff8:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8000ffc:	4619      	mov	r1, r3
 8000ffe:	4819      	ldr	r0, [pc, #100]	@ (8001064 <MX_ADC1_Init+0xd4>)
 8001000:	f000 fa40 	bl	8001484 <LL_ADC_Init>
  ADC_REG_InitStruct.TriggerSource = LL_ADC_REG_TRIG_SOFTWARE;
 8001004:	2300      	movs	r3, #0
 8001006:	623b      	str	r3, [r7, #32]
  ADC_REG_InitStruct.SequencerLength = LL_ADC_REG_SEQ_SCAN_DISABLE;
 8001008:	2300      	movs	r3, #0
 800100a:	627b      	str	r3, [r7, #36]	@ 0x24
  ADC_REG_InitStruct.SequencerDiscont = LL_ADC_REG_SEQ_DISCONT_DISABLE;
 800100c:	2300      	movs	r3, #0
 800100e:	62bb      	str	r3, [r7, #40]	@ 0x28
  ADC_REG_InitStruct.ContinuousMode = LL_ADC_REG_CONV_CONTINUOUS;
 8001010:	2302      	movs	r3, #2
 8001012:	62fb      	str	r3, [r7, #44]	@ 0x2c
  ADC_REG_InitStruct.DMATransfer = LL_ADC_REG_DMA_TRANSFER_NONE;
 8001014:	2300      	movs	r3, #0
 8001016:	633b      	str	r3, [r7, #48]	@ 0x30
  LL_ADC_REG_Init(ADC1, &ADC_REG_InitStruct);
 8001018:	f107 0320 	add.w	r3, r7, #32
 800101c:	4619      	mov	r1, r3
 800101e:	4811      	ldr	r0, [pc, #68]	@ (8001064 <MX_ADC1_Init+0xd4>)
 8001020:	f000 fa5c 	bl	80014dc <LL_ADC_REG_Init>
  LL_ADC_REG_SetFlagEndOfConversion(ADC1, LL_ADC_REG_FLAG_EOC_SEQUENCE_CONV);
 8001024:	2100      	movs	r1, #0
 8001026:	480f      	ldr	r0, [pc, #60]	@ (8001064 <MX_ADC1_Init+0xd4>)
 8001028:	f7ff fb77 	bl	800071a <LL_ADC_REG_SetFlagEndOfConversion>
  ADC_CommonInitStruct.CommonClock = LL_ADC_CLOCK_SYNC_PCLK_DIV4;
 800102c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001030:	61fb      	str	r3, [r7, #28]
  LL_ADC_CommonInit(__LL_ADC_COMMON_INSTANCE(ADC1), &ADC_CommonInitStruct);
 8001032:	f107 031c 	add.w	r3, r7, #28
 8001036:	4619      	mov	r1, r3
 8001038:	480b      	ldr	r0, [pc, #44]	@ (8001068 <MX_ADC1_Init+0xd8>)
 800103a:	f000 fa05 	bl	8001448 <LL_ADC_CommonInit>

  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_1, LL_ADC_CHANNEL_0);
 800103e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001042:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001046:	4807      	ldr	r0, [pc, #28]	@ (8001064 <MX_ADC1_Init+0xd4>)
 8001048:	f7ff fb2a 	bl	80006a0 <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_0, LL_ADC_SAMPLINGTIME_3CYCLES);
 800104c:	2200      	movs	r2, #0
 800104e:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8001052:	4804      	ldr	r0, [pc, #16]	@ (8001064 <MX_ADC1_Init+0xd4>)
 8001054:	f7ff fb74 	bl	8000740 <LL_ADC_SetChannelSamplingTime>
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001058:	bf00      	nop
 800105a:	3740      	adds	r7, #64	@ 0x40
 800105c:	46bd      	mov	sp, r7
 800105e:	bd80      	pop	{r7, pc}
 8001060:	40020000 	.word	0x40020000
 8001064:	40012000 	.word	0x40012000
 8001068:	40012300 	.word	0x40012300

0800106c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b08e      	sub	sp, #56	@ 0x38
 8001070:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8001072:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001076:	2200      	movs	r2, #0
 8001078:	601a      	str	r2, [r3, #0]
 800107a:	605a      	str	r2, [r3, #4]
 800107c:	609a      	str	r2, [r3, #8]
 800107e:	60da      	str	r2, [r3, #12]
 8001080:	611a      	str	r2, [r3, #16]
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 8001082:	1d3b      	adds	r3, r7, #4
 8001084:	2220      	movs	r2, #32
 8001086:	2100      	movs	r1, #0
 8001088:	4618      	mov	r0, r3
 800108a:	f001 fc45 	bl	8002918 <memset>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM3);
 800108e:	2002      	movs	r0, #2
 8001090:	f7ff fcc6 	bl	8000a20 <LL_APB1_GRP1_EnableClock>

  /* TIM3 interrupt Init */
  NVIC_SetPriority(TIM3_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8001094:	f7ff fa58 	bl	8000548 <__NVIC_GetPriorityGrouping>
 8001098:	4603      	mov	r3, r0
 800109a:	2200      	movs	r2, #0
 800109c:	2100      	movs	r1, #0
 800109e:	4618      	mov	r0, r3
 80010a0:	f7ff faa8 	bl	80005f4 <NVIC_EncodePriority>
 80010a4:	4603      	mov	r3, r0
 80010a6:	4619      	mov	r1, r3
 80010a8:	201d      	movs	r0, #29
 80010aa:	f7ff fa79 	bl	80005a0 <__NVIC_SetPriority>
  NVIC_EnableIRQ(TIM3_IRQn);
 80010ae:	201d      	movs	r0, #29
 80010b0:	f7ff fa58 	bl	8000564 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  TIM_InitStruct.Prescaler = 0;
 80010b4:	2300      	movs	r3, #0
 80010b6:	84bb      	strh	r3, [r7, #36]	@ 0x24
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 80010b8:	2300      	movs	r3, #0
 80010ba:	62bb      	str	r3, [r7, #40]	@ 0x28
  TIM_InitStruct.Autoreload = 65535;
 80010bc:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80010c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 80010c2:	2300      	movs	r3, #0
 80010c4:	633b      	str	r3, [r7, #48]	@ 0x30
  LL_TIM_Init(TIM3, &TIM_InitStruct);
 80010c6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80010ca:	4619      	mov	r1, r3
 80010cc:	4814      	ldr	r0, [pc, #80]	@ (8001120 <MX_TIM3_Init+0xb4>)
 80010ce:	f000 fed7 	bl	8001e80 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM3);
 80010d2:	4813      	ldr	r0, [pc, #76]	@ (8001120 <MX_TIM3_Init+0xb4>)
 80010d4:	f7ff fd54 	bl	8000b80 <LL_TIM_DisableARRPreload>
  LL_TIM_SetClockSource(TIM3, LL_TIM_CLOCKSOURCE_INTERNAL);
 80010d8:	2100      	movs	r1, #0
 80010da:	4811      	ldr	r0, [pc, #68]	@ (8001120 <MX_TIM3_Init+0xb4>)
 80010dc:	f7ff fda6 	bl	8000c2c <LL_TIM_SetClockSource>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_FROZEN;
 80010e0:	2300      	movs	r3, #0
 80010e2:	607b      	str	r3, [r7, #4]
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 80010e4:	2300      	movs	r3, #0
 80010e6:	60bb      	str	r3, [r7, #8]
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 80010e8:	2300      	movs	r3, #0
 80010ea:	60fb      	str	r3, [r7, #12]
  TIM_OC_InitStruct.CompareValue = 0;
 80010ec:	2300      	movs	r3, #0
 80010ee:	613b      	str	r3, [r7, #16]
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 80010f0:	2300      	movs	r3, #0
 80010f2:	617b      	str	r3, [r7, #20]
  LL_TIM_OC_Init(TIM3, LL_TIM_CHANNEL_CH1, &TIM_OC_InitStruct);
 80010f4:	1d3b      	adds	r3, r7, #4
 80010f6:	461a      	mov	r2, r3
 80010f8:	2101      	movs	r1, #1
 80010fa:	4809      	ldr	r0, [pc, #36]	@ (8001120 <MX_TIM3_Init+0xb4>)
 80010fc:	f000 ff3a 	bl	8001f74 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM3, LL_TIM_CHANNEL_CH1);
 8001100:	2101      	movs	r1, #1
 8001102:	4807      	ldr	r0, [pc, #28]	@ (8001120 <MX_TIM3_Init+0xb4>)
 8001104:	f7ff fd4c 	bl	8000ba0 <LL_TIM_OC_DisableFast>
  LL_TIM_SetTriggerOutput(TIM3, LL_TIM_TRGO_RESET);
 8001108:	2100      	movs	r1, #0
 800110a:	4805      	ldr	r0, [pc, #20]	@ (8001120 <MX_TIM3_Init+0xb4>)
 800110c:	f7ff fda3 	bl	8000c56 <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM3);
 8001110:	4803      	ldr	r0, [pc, #12]	@ (8001120 <MX_TIM3_Init+0xb4>)
 8001112:	f7ff fdb3 	bl	8000c7c <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001116:	bf00      	nop
 8001118:	3738      	adds	r7, #56	@ 0x38
 800111a:	46bd      	mov	sp, r7
 800111c:	bd80      	pop	{r7, pc}
 800111e:	bf00      	nop
 8001120:	40000400 	.word	0x40000400

08001124 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b08e      	sub	sp, #56	@ 0x38
 8001128:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART2_Init 0 */

  /* USER CODE END USART2_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 800112a:	f107 031c 	add.w	r3, r7, #28
 800112e:	2200      	movs	r2, #0
 8001130:	601a      	str	r2, [r3, #0]
 8001132:	605a      	str	r2, [r3, #4]
 8001134:	609a      	str	r2, [r3, #8]
 8001136:	60da      	str	r2, [r3, #12]
 8001138:	611a      	str	r2, [r3, #16]
 800113a:	615a      	str	r2, [r3, #20]
 800113c:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800113e:	1d3b      	adds	r3, r7, #4
 8001140:	2200      	movs	r2, #0
 8001142:	601a      	str	r2, [r3, #0]
 8001144:	605a      	str	r2, [r3, #4]
 8001146:	609a      	str	r2, [r3, #8]
 8001148:	60da      	str	r2, [r3, #12]
 800114a:	611a      	str	r2, [r3, #16]
 800114c:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART2);
 800114e:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 8001152:	f7ff fc65 	bl	8000a20 <LL_APB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8001156:	2001      	movs	r0, #1
 8001158:	f7ff fc4a 	bl	80009f0 <LL_AHB1_GRP1_EnableClock>
  /**USART2 GPIO Configuration
  PA2   ------> USART2_TX
  PA3   ------> USART2_RX
  */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800115c:	230c      	movs	r3, #12
 800115e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001160:	2302      	movs	r3, #2
 8001162:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001164:	2300      	movs	r3, #0
 8001166:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001168:	2300      	movs	r3, #0
 800116a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800116c:	2300      	movs	r3, #0
 800116e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 8001170:	2307      	movs	r3, #7
 8001172:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001174:	1d3b      	adds	r3, r7, #4
 8001176:	4619      	mov	r1, r3
 8001178:	4810      	ldr	r0, [pc, #64]	@ (80011bc <MX_USART2_UART_Init+0x98>)
 800117a:	f000 fc53 	bl	8001a24 <LL_GPIO_Init>

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 800117e:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 8001182:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8001184:	2300      	movs	r3, #0
 8001186:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8001188:	2300      	movs	r3, #0
 800118a:	627b      	str	r3, [r7, #36]	@ 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 800118c:	2300      	movs	r3, #0
 800118e:	62bb      	str	r3, [r7, #40]	@ 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8001190:	230c      	movs	r3, #12
 8001192:	62fb      	str	r3, [r7, #44]	@ 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8001194:	2300      	movs	r3, #0
 8001196:	633b      	str	r3, [r7, #48]	@ 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8001198:	2300      	movs	r3, #0
 800119a:	637b      	str	r3, [r7, #52]	@ 0x34
  LL_USART_Init(USART2, &USART_InitStruct);
 800119c:	f107 031c 	add.w	r3, r7, #28
 80011a0:	4619      	mov	r1, r3
 80011a2:	4807      	ldr	r0, [pc, #28]	@ (80011c0 <MX_USART2_UART_Init+0x9c>)
 80011a4:	f001 fb1c 	bl	80027e0 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART2);
 80011a8:	4805      	ldr	r0, [pc, #20]	@ (80011c0 <MX_USART2_UART_Init+0x9c>)
 80011aa:	f7ff fd87 	bl	8000cbc <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART2);
 80011ae:	4804      	ldr	r0, [pc, #16]	@ (80011c0 <MX_USART2_UART_Init+0x9c>)
 80011b0:	f7ff fd74 	bl	8000c9c <LL_USART_Enable>
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80011b4:	bf00      	nop
 80011b6:	3738      	adds	r7, #56	@ 0x38
 80011b8:	46bd      	mov	sp, r7
 80011ba:	bd80      	pop	{r7, pc}
 80011bc:	40020000 	.word	0x40020000
 80011c0:	40004400 	.word	0x40004400

080011c4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b088      	sub	sp, #32
 80011c8:	af00      	add	r7, sp, #0
  LL_EXTI_InitTypeDef EXTI_InitStruct = {0};
 80011ca:	f107 0318 	add.w	r3, r7, #24
 80011ce:	2200      	movs	r2, #0
 80011d0:	601a      	str	r2, [r3, #0]
 80011d2:	605a      	str	r2, [r3, #4]
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011d4:	463b      	mov	r3, r7
 80011d6:	2200      	movs	r2, #0
 80011d8:	601a      	str	r2, [r3, #0]
 80011da:	605a      	str	r2, [r3, #4]
 80011dc:	609a      	str	r2, [r3, #8]
 80011de:	60da      	str	r2, [r3, #12]
 80011e0:	611a      	str	r2, [r3, #16]
 80011e2:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 80011e4:	2004      	movs	r0, #4
 80011e6:	f7ff fc03 	bl	80009f0 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOH);
 80011ea:	2080      	movs	r0, #128	@ 0x80
 80011ec:	f7ff fc00 	bl	80009f0 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 80011f0:	2001      	movs	r0, #1
 80011f2:	f7ff fbfd 	bl	80009f0 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 80011f6:	2002      	movs	r0, #2
 80011f8:	f7ff fbfa 	bl	80009f0 <LL_AHB1_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(GPIOA, LD2_Pin|OUT1_Pin);
 80011fc:	f44f 6184 	mov.w	r1, #1056	@ 0x420
 8001200:	481a      	ldr	r0, [pc, #104]	@ (800126c <MX_GPIO_Init+0xa8>)
 8001202:	f7ff fdeb 	bl	8000ddc <LL_GPIO_ResetOutputPin>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTC, LL_SYSCFG_EXTI_LINE13);
 8001206:	491a      	ldr	r1, [pc, #104]	@ (8001270 <MX_GPIO_Init+0xac>)
 8001208:	2002      	movs	r0, #2
 800120a:	f7ff fc39 	bl	8000a80 <LL_SYSCFG_SetEXTISource>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_13;
 800120e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001212:	61bb      	str	r3, [r7, #24]
  EXTI_InitStruct.LineCommand = ENABLE;
 8001214:	2301      	movs	r3, #1
 8001216:	773b      	strb	r3, [r7, #28]
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8001218:	2300      	movs	r3, #0
 800121a:	777b      	strb	r3, [r7, #29]
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 800121c:	2302      	movs	r3, #2
 800121e:	77bb      	strb	r3, [r7, #30]
  LL_EXTI_Init(&EXTI_InitStruct);
 8001220:	f107 0318 	add.w	r3, r7, #24
 8001224:	4618      	mov	r0, r3
 8001226:	f000 fa33 	bl	8001690 <LL_EXTI_Init>

  /**/
  LL_GPIO_SetPinPull(B1_GPIO_Port, B1_Pin, LL_GPIO_PULL_NO);
 800122a:	2200      	movs	r2, #0
 800122c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001230:	4810      	ldr	r0, [pc, #64]	@ (8001274 <MX_GPIO_Init+0xb0>)
 8001232:	f7ff fd96 	bl	8000d62 <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinMode(B1_GPIO_Port, B1_Pin, LL_GPIO_MODE_INPUT);
 8001236:	2200      	movs	r2, #0
 8001238:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800123c:	480d      	ldr	r0, [pc, #52]	@ (8001274 <MX_GPIO_Init+0xb0>)
 800123e:	f7ff fd53 	bl	8000ce8 <LL_GPIO_SetPinMode>

  /**/
  GPIO_InitStruct.Pin = LD2_Pin|OUT1_Pin;
 8001242:	f44f 6384 	mov.w	r3, #1056	@ 0x420
 8001246:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001248:	2301      	movs	r3, #1
 800124a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800124c:	2300      	movs	r3, #0
 800124e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001250:	2300      	movs	r3, #0
 8001252:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001254:	2300      	movs	r3, #0
 8001256:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001258:	463b      	mov	r3, r7
 800125a:	4619      	mov	r1, r3
 800125c:	4803      	ldr	r0, [pc, #12]	@ (800126c <MX_GPIO_Init+0xa8>)
 800125e:	f000 fbe1 	bl	8001a24 <LL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8001262:	bf00      	nop
 8001264:	3720      	adds	r7, #32
 8001266:	46bd      	mov	sp, r7
 8001268:	bd80      	pop	{r7, pc}
 800126a:	bf00      	nop
 800126c:	40020000 	.word	0x40020000
 8001270:	00f00003 	.word	0x00f00003
 8001274:	40020800 	.word	0x40020800

08001278 <LL_TIM_ClearFlag_CC1>:
  * @rmtoll SR           CC1IF         LL_TIM_ClearFlag_CC1
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_ClearFlag_CC1(TIM_TypeDef *TIMx)
{
 8001278:	b480      	push	{r7}
 800127a:	b083      	sub	sp, #12
 800127c:	af00      	add	r7, sp, #0
 800127e:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_CC1IF));
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	f06f 0202 	mvn.w	r2, #2
 8001286:	611a      	str	r2, [r3, #16]
}
 8001288:	bf00      	nop
 800128a:	370c      	adds	r7, #12
 800128c:	46bd      	mov	sp, r7
 800128e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001292:	4770      	bx	lr

08001294 <LL_TIM_IsActiveFlag_CC1>:
  * @rmtoll SR           CC1IF         LL_TIM_IsActiveFlag_CC1
  * @param  TIMx Timer instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_TIM_IsActiveFlag_CC1(const TIM_TypeDef *TIMx)
{
 8001294:	b480      	push	{r7}
 8001296:	b083      	sub	sp, #12
 8001298:	af00      	add	r7, sp, #0
 800129a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(TIMx->SR, TIM_SR_CC1IF) == (TIM_SR_CC1IF)) ? 1UL : 0UL);
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	691b      	ldr	r3, [r3, #16]
 80012a0:	f003 0302 	and.w	r3, r3, #2
 80012a4:	2b02      	cmp	r3, #2
 80012a6:	d101      	bne.n	80012ac <LL_TIM_IsActiveFlag_CC1+0x18>
 80012a8:	2301      	movs	r3, #1
 80012aa:	e000      	b.n	80012ae <LL_TIM_IsActiveFlag_CC1+0x1a>
 80012ac:	2300      	movs	r3, #0
}
 80012ae:	4618      	mov	r0, r3
 80012b0:	370c      	adds	r7, #12
 80012b2:	46bd      	mov	sp, r7
 80012b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b8:	4770      	bx	lr

080012ba <NMI_Handler>:
/*           Cortex-M4 Processor Interruption and Exception Handlers          */
/******************************************************************************/
/**
 * @brief This function handles Non maskable interrupt.
 */
void NMI_Handler(void) {
 80012ba:	b480      	push	{r7}
 80012bc:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN NonMaskableInt_IRQn 0 */

	/* USER CODE END NonMaskableInt_IRQn 0 */
	/* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
 80012be:	bf00      	nop
 80012c0:	e7fd      	b.n	80012be <NMI_Handler+0x4>

080012c2 <HardFault_Handler>:
}

/**
 * @brief This function handles Hard fault interrupt.
 */
void HardFault_Handler(void) {
 80012c2:	b480      	push	{r7}
 80012c4:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN HardFault_IRQn 0 */

	/* USER CODE END HardFault_IRQn 0 */
	while (1) {
 80012c6:	bf00      	nop
 80012c8:	e7fd      	b.n	80012c6 <HardFault_Handler+0x4>

080012ca <MemManage_Handler>:
}

/**
 * @brief This function handles Memory management fault.
 */
void MemManage_Handler(void) {
 80012ca:	b480      	push	{r7}
 80012cc:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN MemoryManagement_IRQn 0 */

	/* USER CODE END MemoryManagement_IRQn 0 */
	while (1) {
 80012ce:	bf00      	nop
 80012d0:	e7fd      	b.n	80012ce <MemManage_Handler+0x4>

080012d2 <BusFault_Handler>:
}

/**
 * @brief This function handles Pre-fetch fault, memory access fault.
 */
void BusFault_Handler(void) {
 80012d2:	b480      	push	{r7}
 80012d4:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN BusFault_IRQn 0 */

	/* USER CODE END BusFault_IRQn 0 */
	while (1) {
 80012d6:	bf00      	nop
 80012d8:	e7fd      	b.n	80012d6 <BusFault_Handler+0x4>

080012da <UsageFault_Handler>:
}

/**
 * @brief This function handles Undefined instruction or illegal state.
 */
void UsageFault_Handler(void) {
 80012da:	b480      	push	{r7}
 80012dc:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN UsageFault_IRQn 0 */

	/* USER CODE END UsageFault_IRQn 0 */
	while (1) {
 80012de:	bf00      	nop
 80012e0:	e7fd      	b.n	80012de <UsageFault_Handler+0x4>

080012e2 <SVC_Handler>:
}

/**
 * @brief This function handles System service call via SWI instruction.
 */
void SVC_Handler(void) {
 80012e2:	b480      	push	{r7}
 80012e4:	af00      	add	r7, sp, #0

	/* USER CODE END SVCall_IRQn 0 */
	/* USER CODE BEGIN SVCall_IRQn 1 */

	/* USER CODE END SVCall_IRQn 1 */
}
 80012e6:	bf00      	nop
 80012e8:	46bd      	mov	sp, r7
 80012ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ee:	4770      	bx	lr

080012f0 <DebugMon_Handler>:

/**
 * @brief This function handles Debug monitor.
 */
void DebugMon_Handler(void) {
 80012f0:	b480      	push	{r7}
 80012f2:	af00      	add	r7, sp, #0

	/* USER CODE END DebugMonitor_IRQn 0 */
	/* USER CODE BEGIN DebugMonitor_IRQn 1 */

	/* USER CODE END DebugMonitor_IRQn 1 */
}
 80012f4:	bf00      	nop
 80012f6:	46bd      	mov	sp, r7
 80012f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fc:	4770      	bx	lr

080012fe <PendSV_Handler>:

/**
 * @brief This function handles Pendable request for system service.
 */
void PendSV_Handler(void) {
 80012fe:	b480      	push	{r7}
 8001300:	af00      	add	r7, sp, #0

	/* USER CODE END PendSV_IRQn 0 */
	/* USER CODE BEGIN PendSV_IRQn 1 */

	/* USER CODE END PendSV_IRQn 1 */
}
 8001302:	bf00      	nop
 8001304:	46bd      	mov	sp, r7
 8001306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130a:	4770      	bx	lr

0800130c <SysTick_Handler>:

/**
 * @brief This function handles System tick timer.
 */
void SysTick_Handler(void) {
 800130c:	b480      	push	{r7}
 800130e:	af00      	add	r7, sp, #0
	/* USER CODE END SysTick_IRQn 0 */

	/* USER CODE BEGIN SysTick_IRQn 1 */

	/* USER CODE END SysTick_IRQn 1 */
}
 8001310:	bf00      	nop
 8001312:	46bd      	mov	sp, r7
 8001314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001318:	4770      	bx	lr
	...

0800131c <TIM3_IRQHandler>:
/******************************************************************************/

/**
 * @brief This function handles TIM3 global interrupt.
 */
void TIM3_IRQHandler(void) {
 800131c:	b580      	push	{r7, lr}
 800131e:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN TIM3_IRQn 0 */
	// Check for CC1IF
	if (LL_TIM_IsActiveFlag_CC1(TIM3)) {
 8001320:	480c      	ldr	r0, [pc, #48]	@ (8001354 <TIM3_IRQHandler+0x38>)
 8001322:	f7ff ffb7 	bl	8001294 <LL_TIM_IsActiveFlag_CC1>
 8001326:	4603      	mov	r3, r0
 8001328:	2b00      	cmp	r3, #0
 800132a:	d010      	beq.n	800134e <TIM3_IRQHandler+0x32>
		//LL_GPIO_WriteReg(GPIOA, ODR, LL_GPIO_ReadReg(GPIOA,ODR) ^ 0x0400);	// Debug with PA5
		LL_GPIO_WriteReg(GPIOA, ODR, LL_GPIO_ReadReg(GPIOA,ODR) ^ (1 << 10));// Toggle PA10
 800132c:	4b0a      	ldr	r3, [pc, #40]	@ (8001358 <TIM3_IRQHandler+0x3c>)
 800132e:	695b      	ldr	r3, [r3, #20]
 8001330:	4a09      	ldr	r2, [pc, #36]	@ (8001358 <TIM3_IRQHandler+0x3c>)
 8001332:	f483 6380 	eor.w	r3, r3, #1024	@ 0x400
 8001336:	6153      	str	r3, [r2, #20]
		LL_TIM_WriteReg(TIM3, CCR1, LL_TIM_ReadReg(TIM3,CCR1) + timeInterval);// Update CC1R
 8001338:	4b06      	ldr	r3, [pc, #24]	@ (8001354 <TIM3_IRQHandler+0x38>)
 800133a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800133c:	4a07      	ldr	r2, [pc, #28]	@ (800135c <TIM3_IRQHandler+0x40>)
 800133e:	8812      	ldrh	r2, [r2, #0]
 8001340:	4611      	mov	r1, r2
 8001342:	4a04      	ldr	r2, [pc, #16]	@ (8001354 <TIM3_IRQHandler+0x38>)
 8001344:	440b      	add	r3, r1
 8001346:	6353      	str	r3, [r2, #52]	@ 0x34
		LL_TIM_ClearFlag_CC1(TIM3);								// Clear CC1IF
 8001348:	4802      	ldr	r0, [pc, #8]	@ (8001354 <TIM3_IRQHandler+0x38>)
 800134a:	f7ff ff95 	bl	8001278 <LL_TIM_ClearFlag_CC1>
	}
	/* USER CODE END TIM3_IRQn 0 */
	/* USER CODE BEGIN TIM3_IRQn 1 */

	/* USER CODE END TIM3_IRQn 1 */
}
 800134e:	bf00      	nop
 8001350:	bd80      	pop	{r7, pc}
 8001352:	bf00      	nop
 8001354:	40000400 	.word	0x40000400
 8001358:	40020000 	.word	0x40020000
 800135c:	20000020 	.word	0x20000020

08001360 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001360:	b480      	push	{r7}
 8001362:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001364:	4b06      	ldr	r3, [pc, #24]	@ (8001380 <SystemInit+0x20>)
 8001366:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800136a:	4a05      	ldr	r2, [pc, #20]	@ (8001380 <SystemInit+0x20>)
 800136c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001370:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001374:	bf00      	nop
 8001376:	46bd      	mov	sp, r7
 8001378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137c:	4770      	bx	lr
 800137e:	bf00      	nop
 8001380:	e000ed00 	.word	0xe000ed00

08001384 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001384:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80013bc <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001388:	f7ff ffea 	bl	8001360 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800138c:	480c      	ldr	r0, [pc, #48]	@ (80013c0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800138e:	490d      	ldr	r1, [pc, #52]	@ (80013c4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001390:	4a0d      	ldr	r2, [pc, #52]	@ (80013c8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001392:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001394:	e002      	b.n	800139c <LoopCopyDataInit>

08001396 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001396:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001398:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800139a:	3304      	adds	r3, #4

0800139c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800139c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800139e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80013a0:	d3f9      	bcc.n	8001396 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80013a2:	4a0a      	ldr	r2, [pc, #40]	@ (80013cc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80013a4:	4c0a      	ldr	r4, [pc, #40]	@ (80013d0 <LoopFillZerobss+0x22>)
  movs r3, #0
 80013a6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80013a8:	e001      	b.n	80013ae <LoopFillZerobss>

080013aa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80013aa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80013ac:	3204      	adds	r2, #4

080013ae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80013ae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80013b0:	d3fb      	bcc.n	80013aa <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 80013b2:	f001 fab9 	bl	8002928 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80013b6:	f7ff fd21 	bl	8000dfc <main>
  bx  lr    
 80013ba:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80013bc:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80013c0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80013c4:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 80013c8:	080029c0 	.word	0x080029c0
  ldr r2, =_sbss
 80013cc:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 80013d0:	20000024 	.word	0x20000024

080013d4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80013d4:	e7fe      	b.n	80013d4 <ADC_IRQHandler>

080013d6 <LL_ADC_SetCommonClock>:
{
 80013d6:	b480      	push	{r7}
 80013d8:	b083      	sub	sp, #12
 80013da:	af00      	add	r7, sp, #0
 80013dc:	6078      	str	r0, [r7, #4]
 80013de:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_ADCPRE, CommonClock);
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	685b      	ldr	r3, [r3, #4]
 80013e4:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80013e8:	683b      	ldr	r3, [r7, #0]
 80013ea:	431a      	orrs	r2, r3
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	605a      	str	r2, [r3, #4]
}
 80013f0:	bf00      	nop
 80013f2:	370c      	adds	r7, #12
 80013f4:	46bd      	mov	sp, r7
 80013f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fa:	4770      	bx	lr

080013fc <LL_ADC_REG_SetSequencerLength>:
{
 80013fc:	b480      	push	{r7}
 80013fe:	b083      	sub	sp, #12
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
 8001404:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SQR1, ADC_SQR1_L, SequencerNbRanks);
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800140a:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 800140e:	683b      	ldr	r3, [r7, #0]
 8001410:	431a      	orrs	r2, r3
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 8001416:	bf00      	nop
 8001418:	370c      	adds	r7, #12
 800141a:	46bd      	mov	sp, r7
 800141c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001420:	4770      	bx	lr

08001422 <LL_ADC_IsEnabled>:
  * @rmtoll CR2      ADON           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001422:	b480      	push	{r7}
 8001424:	b083      	sub	sp, #12
 8001426:	af00      	add	r7, sp, #0
 8001428:	6078      	str	r0, [r7, #4]
  return (READ_BIT(ADCx->CR2, ADC_CR2_ADON) == (ADC_CR2_ADON));
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	689b      	ldr	r3, [r3, #8]
 800142e:	f003 0301 	and.w	r3, r3, #1
 8001432:	2b01      	cmp	r3, #1
 8001434:	bf0c      	ite	eq
 8001436:	2301      	moveq	r3, #1
 8001438:	2300      	movne	r3, #0
 800143a:	b2db      	uxtb	r3, r3
}
 800143c:	4618      	mov	r0, r3
 800143e:	370c      	adds	r7, #12
 8001440:	46bd      	mov	sp, r7
 8001442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001446:	4770      	bx	lr

08001448 <LL_ADC_CommonInit>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC common registers are initialized
  *          - ERROR: ADC common registers are not initialized
  */
ErrorStatus LL_ADC_CommonInit(ADC_Common_TypeDef *ADCxy_COMMON, LL_ADC_CommonInitTypeDef *ADC_CommonInitStruct)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	b084      	sub	sp, #16
 800144c:	af00      	add	r7, sp, #0
 800144e:	6078      	str	r0, [r7, #4]
 8001450:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 8001452:	2300      	movs	r3, #0
 8001454:	73fb      	strb	r3, [r7, #15]
  /* Note: Hardware constraint (refer to description of functions             */
  /*       "LL_ADC_SetCommonXXX()" and "LL_ADC_SetMultiXXX()"):               */
  /*       On this STM32 series, setting of these features is conditioned to  */
  /*       ADC state:                                                         */
  /*       All ADC instances of the ADC common group must be disabled.        */
  if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(ADCxy_COMMON) == 0UL)
 8001456:	480a      	ldr	r0, [pc, #40]	@ (8001480 <LL_ADC_CommonInit+0x38>)
 8001458:	f7ff ffe3 	bl	8001422 <LL_ADC_IsEnabled>
 800145c:	4603      	mov	r3, r0
 800145e:	2b00      	cmp	r3, #0
 8001460:	d106      	bne.n	8001470 <LL_ADC_CommonInit+0x28>
                 ADC_CommonInitStruct->CommonClock
                 | LL_ADC_MULTI_INDEPENDENT
                );
    }
#else
    LL_ADC_SetCommonClock(ADCxy_COMMON, ADC_CommonInitStruct->CommonClock);
 8001462:	683b      	ldr	r3, [r7, #0]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	4619      	mov	r1, r3
 8001468:	6878      	ldr	r0, [r7, #4]
 800146a:	f7ff ffb4 	bl	80013d6 <LL_ADC_SetCommonClock>
 800146e:	e001      	b.n	8001474 <LL_ADC_CommonInit+0x2c>
  }
  else
  {
    /* Initialization error: One or several ADC instances belonging to        */
    /* the same ADC common instance are not disabled.                         */
    status = ERROR;
 8001470:	2301      	movs	r3, #1
 8001472:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8001474:	7bfb      	ldrb	r3, [r7, #15]
}
 8001476:	4618      	mov	r0, r3
 8001478:	3710      	adds	r7, #16
 800147a:	46bd      	mov	sp, r7
 800147c:	bd80      	pop	{r7, pc}
 800147e:	bf00      	nop
 8001480:	40012000 	.word	0x40012000

08001484 <LL_ADC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_Init(ADC_TypeDef *ADCx, LL_ADC_InitTypeDef *ADC_InitStruct)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	b084      	sub	sp, #16
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]
 800148c:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 800148e:	2300      	movs	r3, #0
 8001490:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_ADC_DATA_ALIGN(ADC_InitStruct->DataAlignment));
  assert_param(IS_LL_ADC_SCAN_SELECTION(ADC_InitStruct->SequencersScanMode));

  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if (LL_ADC_IsEnabled(ADCx) == 0UL)
 8001492:	6878      	ldr	r0, [r7, #4]
 8001494:	f7ff ffc5 	bl	8001422 <LL_ADC_IsEnabled>
 8001498:	4603      	mov	r3, r0
 800149a:	2b00      	cmp	r3, #0
 800149c:	d117      	bne.n	80014ce <LL_ADC_Init+0x4a>
  {
    /* Configuration of ADC hierarchical scope:                               */
    /*  - ADC instance                                                        */
    /*    - Set ADC data resolution                                           */
    /*    - Set ADC conversion data alignment                                 */
    MODIFY_REG(ADCx->CR1,
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	685b      	ldr	r3, [r3, #4]
 80014a2:	f023 7340 	bic.w	r3, r3, #50331648	@ 0x3000000
 80014a6:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80014aa:	683a      	ldr	r2, [r7, #0]
 80014ac:	6811      	ldr	r1, [r2, #0]
 80014ae:	683a      	ldr	r2, [r7, #0]
 80014b0:	6892      	ldr	r2, [r2, #8]
 80014b2:	430a      	orrs	r2, r1
 80014b4:	431a      	orrs	r2, r3
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	605a      	str	r2, [r3, #4]
               ,
               ADC_InitStruct->Resolution
               | ADC_InitStruct->SequencersScanMode
              );

    MODIFY_REG(ADCx->CR2,
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	689b      	ldr	r3, [r3, #8]
 80014be:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80014c2:	683b      	ldr	r3, [r7, #0]
 80014c4:	685b      	ldr	r3, [r3, #4]
 80014c6:	431a      	orrs	r2, r3
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	609a      	str	r2, [r3, #8]
 80014cc:	e001      	b.n	80014d2 <LL_ADC_Init+0x4e>

  }
  else
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
 80014ce:	2301      	movs	r3, #1
 80014d0:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 80014d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80014d4:	4618      	mov	r0, r3
 80014d6:	3710      	adds	r7, #16
 80014d8:	46bd      	mov	sp, r7
 80014da:	bd80      	pop	{r7, pc}

080014dc <LL_ADC_REG_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_REG_Init(ADC_TypeDef *ADCx, LL_ADC_REG_InitTypeDef *ADC_REG_InitStruct)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	b084      	sub	sp, #16
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	6078      	str	r0, [r7, #4]
 80014e4:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 80014e6:	2300      	movs	r3, #0
 80014e8:	73fb      	strb	r3, [r7, #15]
  assert_param((ADC_REG_InitStruct->ContinuousMode == LL_ADC_REG_CONV_SINGLE)
               || (ADC_REG_InitStruct->SequencerDiscont == LL_ADC_REG_SEQ_DISCONT_DISABLE));

  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if (LL_ADC_IsEnabled(ADCx) == 0UL)
 80014ea:	6878      	ldr	r0, [r7, #4]
 80014ec:	f7ff ff99 	bl	8001422 <LL_ADC_IsEnabled>
 80014f0:	4603      	mov	r3, r0
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d12b      	bne.n	800154e <LL_ADC_REG_Init+0x72>
    /*    - Set ADC group regular conversion data transfer: no transfer or    */
    /*      transfer by DMA, and DMA requests mode                            */
    /* Note: On this STM32 series, ADC trigger edge is set when starting      */
    /*       ADC conversion.                                                  */
    /*       Refer to function @ref LL_ADC_REG_StartConversionExtTrig().      */
    if (ADC_REG_InitStruct->SequencerLength != LL_ADC_REG_SEQ_SCAN_DISABLE)
 80014f6:	683b      	ldr	r3, [r7, #0]
 80014f8:	685b      	ldr	r3, [r3, #4]
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d009      	beq.n	8001512 <LL_ADC_REG_Init+0x36>
    {
      MODIFY_REG(ADCx->CR1,
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	685b      	ldr	r3, [r3, #4]
 8001502:	f423 4268 	bic.w	r2, r3, #59392	@ 0xe800
 8001506:	683b      	ldr	r3, [r7, #0]
 8001508:	689b      	ldr	r3, [r3, #8]
 800150a:	431a      	orrs	r2, r3
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	605a      	str	r2, [r3, #4]
 8001510:	e005      	b.n	800151e <LL_ADC_REG_Init+0x42>
                 ADC_REG_InitStruct->SequencerDiscont
                );
    }
    else
    {
      MODIFY_REG(ADCx->CR1,
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	685b      	ldr	r3, [r3, #4]
 8001516:	f423 4268 	bic.w	r2, r3, #59392	@ 0xe800
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	605a      	str	r2, [r3, #4]
                 ,
                 LL_ADC_REG_SEQ_DISCONT_DISABLE
                );
    }

    MODIFY_REG(ADCx->CR2,
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	689a      	ldr	r2, [r3, #8]
 8001522:	4b0e      	ldr	r3, [pc, #56]	@ (800155c <LL_ADC_REG_Init+0x80>)
 8001524:	4013      	ands	r3, r2
 8001526:	683a      	ldr	r2, [r7, #0]
 8001528:	6812      	ldr	r2, [r2, #0]
 800152a:	f002 6170 	and.w	r1, r2, #251658240	@ 0xf000000
 800152e:	683a      	ldr	r2, [r7, #0]
 8001530:	68d2      	ldr	r2, [r2, #12]
 8001532:	4311      	orrs	r1, r2
 8001534:	683a      	ldr	r2, [r7, #0]
 8001536:	6912      	ldr	r2, [r2, #16]
 8001538:	430a      	orrs	r2, r1
 800153a:	431a      	orrs	r2, r3
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	609a      	str	r2, [r3, #8]
    /* Note: If ADC instance feature scan mode is disabled                    */
    /*       (refer to  ADC instance initialization structure                 */
    /*       parameter @ref SequencersScanMode                                */
    /*       or function @ref LL_ADC_SetSequencersScanMode() ),               */
    /*       this parameter is discarded.                                     */
    LL_ADC_REG_SetSequencerLength(ADCx, ADC_REG_InitStruct->SequencerLength);
 8001540:	683b      	ldr	r3, [r7, #0]
 8001542:	685b      	ldr	r3, [r3, #4]
 8001544:	4619      	mov	r1, r3
 8001546:	6878      	ldr	r0, [r7, #4]
 8001548:	f7ff ff58 	bl	80013fc <LL_ADC_REG_SetSequencerLength>
 800154c:	e001      	b.n	8001552 <LL_ADC_REG_Init+0x76>
  }
  else
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
 800154e:	2301      	movs	r3, #1
 8001550:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 8001552:	7bfb      	ldrb	r3, [r7, #15]
}
 8001554:	4618      	mov	r0, r3
 8001556:	3710      	adds	r7, #16
 8001558:	46bd      	mov	sp, r7
 800155a:	bd80      	pop	{r7, pc}
 800155c:	c0fffcfd 	.word	0xc0fffcfd

08001560 <LL_EXTI_EnableIT_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 8001560:	b480      	push	{r7}
 8001562:	b083      	sub	sp, #12
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR, ExtiLine);
 8001568:	4b05      	ldr	r3, [pc, #20]	@ (8001580 <LL_EXTI_EnableIT_0_31+0x20>)
 800156a:	681a      	ldr	r2, [r3, #0]
 800156c:	4904      	ldr	r1, [pc, #16]	@ (8001580 <LL_EXTI_EnableIT_0_31+0x20>)
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	4313      	orrs	r3, r2
 8001572:	600b      	str	r3, [r1, #0]
}
 8001574:	bf00      	nop
 8001576:	370c      	adds	r7, #12
 8001578:	46bd      	mov	sp, r7
 800157a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157e:	4770      	bx	lr
 8001580:	40013c00 	.word	0x40013c00

08001584 <LL_EXTI_DisableIT_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableIT_0_31(uint32_t ExtiLine)
{
 8001584:	b480      	push	{r7}
 8001586:	b083      	sub	sp, #12
 8001588:	af00      	add	r7, sp, #0
 800158a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR, ExtiLine);
 800158c:	4b06      	ldr	r3, [pc, #24]	@ (80015a8 <LL_EXTI_DisableIT_0_31+0x24>)
 800158e:	681a      	ldr	r2, [r3, #0]
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	43db      	mvns	r3, r3
 8001594:	4904      	ldr	r1, [pc, #16]	@ (80015a8 <LL_EXTI_DisableIT_0_31+0x24>)
 8001596:	4013      	ands	r3, r2
 8001598:	600b      	str	r3, [r1, #0]
}
 800159a:	bf00      	nop
 800159c:	370c      	adds	r7, #12
 800159e:	46bd      	mov	sp, r7
 80015a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a4:	4770      	bx	lr
 80015a6:	bf00      	nop
 80015a8:	40013c00 	.word	0x40013c00

080015ac <LL_EXTI_EnableEvent_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableEvent_0_31(uint32_t ExtiLine)
{
 80015ac:	b480      	push	{r7}
 80015ae:	b083      	sub	sp, #12
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR, ExtiLine);
 80015b4:	4b05      	ldr	r3, [pc, #20]	@ (80015cc <LL_EXTI_EnableEvent_0_31+0x20>)
 80015b6:	685a      	ldr	r2, [r3, #4]
 80015b8:	4904      	ldr	r1, [pc, #16]	@ (80015cc <LL_EXTI_EnableEvent_0_31+0x20>)
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	4313      	orrs	r3, r2
 80015be:	604b      	str	r3, [r1, #4]

}
 80015c0:	bf00      	nop
 80015c2:	370c      	adds	r7, #12
 80015c4:	46bd      	mov	sp, r7
 80015c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ca:	4770      	bx	lr
 80015cc:	40013c00 	.word	0x40013c00

080015d0 <LL_EXTI_DisableEvent_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableEvent_0_31(uint32_t ExtiLine)
{
 80015d0:	b480      	push	{r7}
 80015d2:	b083      	sub	sp, #12
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR, ExtiLine);
 80015d8:	4b06      	ldr	r3, [pc, #24]	@ (80015f4 <LL_EXTI_DisableEvent_0_31+0x24>)
 80015da:	685a      	ldr	r2, [r3, #4]
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	43db      	mvns	r3, r3
 80015e0:	4904      	ldr	r1, [pc, #16]	@ (80015f4 <LL_EXTI_DisableEvent_0_31+0x24>)
 80015e2:	4013      	ands	r3, r2
 80015e4:	604b      	str	r3, [r1, #4]
}
 80015e6:	bf00      	nop
 80015e8:	370c      	adds	r7, #12
 80015ea:	46bd      	mov	sp, r7
 80015ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f0:	4770      	bx	lr
 80015f2:	bf00      	nop
 80015f4:	40013c00 	.word	0x40013c00

080015f8 <LL_EXTI_EnableRisingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 80015f8:	b480      	push	{r7}
 80015fa:	b083      	sub	sp, #12
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR, ExtiLine);
 8001600:	4b05      	ldr	r3, [pc, #20]	@ (8001618 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8001602:	689a      	ldr	r2, [r3, #8]
 8001604:	4904      	ldr	r1, [pc, #16]	@ (8001618 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	4313      	orrs	r3, r2
 800160a:	608b      	str	r3, [r1, #8]

}
 800160c:	bf00      	nop
 800160e:	370c      	adds	r7, #12
 8001610:	46bd      	mov	sp, r7
 8001612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001616:	4770      	bx	lr
 8001618:	40013c00 	.word	0x40013c00

0800161c <LL_EXTI_DisableRisingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_0_31(uint32_t ExtiLine)
{
 800161c:	b480      	push	{r7}
 800161e:	b083      	sub	sp, #12
 8001620:	af00      	add	r7, sp, #0
 8001622:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR, ExtiLine);
 8001624:	4b06      	ldr	r3, [pc, #24]	@ (8001640 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8001626:	689a      	ldr	r2, [r3, #8]
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	43db      	mvns	r3, r3
 800162c:	4904      	ldr	r1, [pc, #16]	@ (8001640 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 800162e:	4013      	ands	r3, r2
 8001630:	608b      	str	r3, [r1, #8]

}
 8001632:	bf00      	nop
 8001634:	370c      	adds	r7, #12
 8001636:	46bd      	mov	sp, r7
 8001638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163c:	4770      	bx	lr
 800163e:	bf00      	nop
 8001640:	40013c00 	.word	0x40013c00

08001644 <LL_EXTI_EnableFallingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_0_31(uint32_t ExtiLine)
{
 8001644:	b480      	push	{r7}
 8001646:	b083      	sub	sp, #12
 8001648:	af00      	add	r7, sp, #0
 800164a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR, ExtiLine);
 800164c:	4b05      	ldr	r3, [pc, #20]	@ (8001664 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 800164e:	68da      	ldr	r2, [r3, #12]
 8001650:	4904      	ldr	r1, [pc, #16]	@ (8001664 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	4313      	orrs	r3, r2
 8001656:	60cb      	str	r3, [r1, #12]
}
 8001658:	bf00      	nop
 800165a:	370c      	adds	r7, #12
 800165c:	46bd      	mov	sp, r7
 800165e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001662:	4770      	bx	lr
 8001664:	40013c00 	.word	0x40013c00

08001668 <LL_EXTI_DisableFallingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_0_31(uint32_t ExtiLine)
{
 8001668:	b480      	push	{r7}
 800166a:	b083      	sub	sp, #12
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR, ExtiLine);
 8001670:	4b06      	ldr	r3, [pc, #24]	@ (800168c <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8001672:	68da      	ldr	r2, [r3, #12]
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	43db      	mvns	r3, r3
 8001678:	4904      	ldr	r1, [pc, #16]	@ (800168c <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 800167a:	4013      	ands	r3, r2
 800167c:	60cb      	str	r3, [r1, #12]
}
 800167e:	bf00      	nop
 8001680:	370c      	adds	r7, #12
 8001682:	46bd      	mov	sp, r7
 8001684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001688:	4770      	bx	lr
 800168a:	bf00      	nop
 800168c:	40013c00 	.word	0x40013c00

08001690 <LL_EXTI_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: EXTI registers are initialized
  *          - ERROR: not applicable
  */
uint32_t LL_EXTI_Init(LL_EXTI_InitTypeDef *EXTI_InitStruct)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	b084      	sub	sp, #16
 8001694:	af00      	add	r7, sp, #0
 8001696:	6078      	str	r0, [r7, #4]
  ErrorStatus status = SUCCESS;
 8001698:	2300      	movs	r3, #0
 800169a:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_EXTI_LINE_0_31(EXTI_InitStruct->Line_0_31));
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->LineCommand));
  assert_param(IS_LL_EXTI_MODE(EXTI_InitStruct->Mode));

  /* ENABLE LineCommand */
  if (EXTI_InitStruct->LineCommand != DISABLE)
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	791b      	ldrb	r3, [r3, #4]
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d065      	beq.n	8001770 <LL_EXTI_Init+0xe0>
  {
    assert_param(IS_LL_EXTI_TRIGGER(EXTI_InitStruct->Trigger));

    /* Configure EXTI Lines in range from 0 to 31 */
    if (EXTI_InitStruct->Line_0_31 != LL_EXTI_LINE_NONE)
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d06b      	beq.n	8001784 <LL_EXTI_Init+0xf4>
    {
      switch (EXTI_InitStruct->Mode)
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	795b      	ldrb	r3, [r3, #5]
 80016b0:	2b02      	cmp	r3, #2
 80016b2:	d01c      	beq.n	80016ee <LL_EXTI_Init+0x5e>
 80016b4:	2b02      	cmp	r3, #2
 80016b6:	dc25      	bgt.n	8001704 <LL_EXTI_Init+0x74>
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d002      	beq.n	80016c2 <LL_EXTI_Init+0x32>
 80016bc:	2b01      	cmp	r3, #1
 80016be:	d00b      	beq.n	80016d8 <LL_EXTI_Init+0x48>
 80016c0:	e020      	b.n	8001704 <LL_EXTI_Init+0x74>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	4618      	mov	r0, r3
 80016c8:	f7ff ff82 	bl	80015d0 <LL_EXTI_DisableEvent_0_31>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	4618      	mov	r0, r3
 80016d2:	f7ff ff45 	bl	8001560 <LL_EXTI_EnableIT_0_31>
          break;
 80016d6:	e018      	b.n	800170a <LL_EXTI_Init+0x7a>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	4618      	mov	r0, r3
 80016de:	f7ff ff51 	bl	8001584 <LL_EXTI_DisableIT_0_31>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	4618      	mov	r0, r3
 80016e8:	f7ff ff60 	bl	80015ac <LL_EXTI_EnableEvent_0_31>
          break;
 80016ec:	e00d      	b.n	800170a <LL_EXTI_Init+0x7a>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT & Event on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	4618      	mov	r0, r3
 80016f4:	f7ff ff34 	bl	8001560 <LL_EXTI_EnableIT_0_31>
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	4618      	mov	r0, r3
 80016fe:	f7ff ff55 	bl	80015ac <LL_EXTI_EnableEvent_0_31>
          break;
 8001702:	e002      	b.n	800170a <LL_EXTI_Init+0x7a>
        default:
          status = ERROR;
 8001704:	2301      	movs	r3, #1
 8001706:	73fb      	strb	r3, [r7, #15]
          break;
 8001708:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	799b      	ldrb	r3, [r3, #6]
 800170e:	2b00      	cmp	r3, #0
 8001710:	d038      	beq.n	8001784 <LL_EXTI_Init+0xf4>
      {
        switch (EXTI_InitStruct->Trigger)
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	799b      	ldrb	r3, [r3, #6]
 8001716:	2b03      	cmp	r3, #3
 8001718:	d01c      	beq.n	8001754 <LL_EXTI_Init+0xc4>
 800171a:	2b03      	cmp	r3, #3
 800171c:	dc25      	bgt.n	800176a <LL_EXTI_Init+0xda>
 800171e:	2b01      	cmp	r3, #1
 8001720:	d002      	beq.n	8001728 <LL_EXTI_Init+0x98>
 8001722:	2b02      	cmp	r3, #2
 8001724:	d00b      	beq.n	800173e <LL_EXTI_Init+0xae>
 8001726:	e020      	b.n	800176a <LL_EXTI_Init+0xda>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	4618      	mov	r0, r3
 800172e:	f7ff ff9b 	bl	8001668 <LL_EXTI_DisableFallingTrig_0_31>
            /* Then Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	4618      	mov	r0, r3
 8001738:	f7ff ff5e 	bl	80015f8 <LL_EXTI_EnableRisingTrig_0_31>
            break;
 800173c:	e022      	b.n	8001784 <LL_EXTI_Init+0xf4>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	4618      	mov	r0, r3
 8001744:	f7ff ff6a 	bl	800161c <LL_EXTI_DisableRisingTrig_0_31>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	4618      	mov	r0, r3
 800174e:	f7ff ff79 	bl	8001644 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 8001752:	e017      	b.n	8001784 <LL_EXTI_Init+0xf4>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	4618      	mov	r0, r3
 800175a:	f7ff ff4d 	bl	80015f8 <LL_EXTI_EnableRisingTrig_0_31>
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	4618      	mov	r0, r3
 8001764:	f7ff ff6e 	bl	8001644 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 8001768:	e00c      	b.n	8001784 <LL_EXTI_Init+0xf4>
          default:
            status = ERROR;
 800176a:	2301      	movs	r3, #1
 800176c:	73fb      	strb	r3, [r7, #15]
            break;
 800176e:	e009      	b.n	8001784 <LL_EXTI_Init+0xf4>
  }
  /* DISABLE LineCommand */
  else
  {
    /* De-configure EXTI Lines in range from 0 to 31 */
    LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	4618      	mov	r0, r3
 8001776:	f7ff ff05 	bl	8001584 <LL_EXTI_DisableIT_0_31>
    LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	4618      	mov	r0, r3
 8001780:	f7ff ff26 	bl	80015d0 <LL_EXTI_DisableEvent_0_31>
  }
  return status;
 8001784:	7bfb      	ldrb	r3, [r7, #15]
}
 8001786:	4618      	mov	r0, r3
 8001788:	3710      	adds	r7, #16
 800178a:	46bd      	mov	sp, r7
 800178c:	bd80      	pop	{r7, pc}

0800178e <LL_GPIO_SetPinMode>:
{
 800178e:	b480      	push	{r7}
 8001790:	b08b      	sub	sp, #44	@ 0x2c
 8001792:	af00      	add	r7, sp, #0
 8001794:	60f8      	str	r0, [r7, #12]
 8001796:	60b9      	str	r1, [r7, #8]
 8001798:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	681a      	ldr	r2, [r3, #0]
 800179e:	68bb      	ldr	r3, [r7, #8]
 80017a0:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017a2:	697b      	ldr	r3, [r7, #20]
 80017a4:	fa93 f3a3 	rbit	r3, r3
 80017a8:	613b      	str	r3, [r7, #16]
  return result;
 80017aa:	693b      	ldr	r3, [r7, #16]
 80017ac:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80017ae:	69bb      	ldr	r3, [r7, #24]
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d101      	bne.n	80017b8 <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 80017b4:	2320      	movs	r3, #32
 80017b6:	e003      	b.n	80017c0 <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 80017b8:	69bb      	ldr	r3, [r7, #24]
 80017ba:	fab3 f383 	clz	r3, r3
 80017be:	b2db      	uxtb	r3, r3
 80017c0:	005b      	lsls	r3, r3, #1
 80017c2:	2103      	movs	r1, #3
 80017c4:	fa01 f303 	lsl.w	r3, r1, r3
 80017c8:	43db      	mvns	r3, r3
 80017ca:	401a      	ands	r2, r3
 80017cc:	68bb      	ldr	r3, [r7, #8]
 80017ce:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017d0:	6a3b      	ldr	r3, [r7, #32]
 80017d2:	fa93 f3a3 	rbit	r3, r3
 80017d6:	61fb      	str	r3, [r7, #28]
  return result;
 80017d8:	69fb      	ldr	r3, [r7, #28]
 80017da:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 80017dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d101      	bne.n	80017e6 <LL_GPIO_SetPinMode+0x58>
    return 32U;
 80017e2:	2320      	movs	r3, #32
 80017e4:	e003      	b.n	80017ee <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 80017e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017e8:	fab3 f383 	clz	r3, r3
 80017ec:	b2db      	uxtb	r3, r3
 80017ee:	005b      	lsls	r3, r3, #1
 80017f0:	6879      	ldr	r1, [r7, #4]
 80017f2:	fa01 f303 	lsl.w	r3, r1, r3
 80017f6:	431a      	orrs	r2, r3
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	601a      	str	r2, [r3, #0]
}
 80017fc:	bf00      	nop
 80017fe:	372c      	adds	r7, #44	@ 0x2c
 8001800:	46bd      	mov	sp, r7
 8001802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001806:	4770      	bx	lr

08001808 <LL_GPIO_SetPinOutputType>:
{
 8001808:	b480      	push	{r7}
 800180a:	b085      	sub	sp, #20
 800180c:	af00      	add	r7, sp, #0
 800180e:	60f8      	str	r0, [r7, #12]
 8001810:	60b9      	str	r1, [r7, #8]
 8001812:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	685a      	ldr	r2, [r3, #4]
 8001818:	68bb      	ldr	r3, [r7, #8]
 800181a:	43db      	mvns	r3, r3
 800181c:	401a      	ands	r2, r3
 800181e:	68bb      	ldr	r3, [r7, #8]
 8001820:	6879      	ldr	r1, [r7, #4]
 8001822:	fb01 f303 	mul.w	r3, r1, r3
 8001826:	431a      	orrs	r2, r3
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	605a      	str	r2, [r3, #4]
}
 800182c:	bf00      	nop
 800182e:	3714      	adds	r7, #20
 8001830:	46bd      	mov	sp, r7
 8001832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001836:	4770      	bx	lr

08001838 <LL_GPIO_SetPinSpeed>:
{
 8001838:	b480      	push	{r7}
 800183a:	b08b      	sub	sp, #44	@ 0x2c
 800183c:	af00      	add	r7, sp, #0
 800183e:	60f8      	str	r0, [r7, #12]
 8001840:	60b9      	str	r1, [r7, #8]
 8001842:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	689a      	ldr	r2, [r3, #8]
 8001848:	68bb      	ldr	r3, [r7, #8]
 800184a:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800184c:	697b      	ldr	r3, [r7, #20]
 800184e:	fa93 f3a3 	rbit	r3, r3
 8001852:	613b      	str	r3, [r7, #16]
  return result;
 8001854:	693b      	ldr	r3, [r7, #16]
 8001856:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8001858:	69bb      	ldr	r3, [r7, #24]
 800185a:	2b00      	cmp	r3, #0
 800185c:	d101      	bne.n	8001862 <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 800185e:	2320      	movs	r3, #32
 8001860:	e003      	b.n	800186a <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 8001862:	69bb      	ldr	r3, [r7, #24]
 8001864:	fab3 f383 	clz	r3, r3
 8001868:	b2db      	uxtb	r3, r3
 800186a:	005b      	lsls	r3, r3, #1
 800186c:	2103      	movs	r1, #3
 800186e:	fa01 f303 	lsl.w	r3, r1, r3
 8001872:	43db      	mvns	r3, r3
 8001874:	401a      	ands	r2, r3
 8001876:	68bb      	ldr	r3, [r7, #8]
 8001878:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800187a:	6a3b      	ldr	r3, [r7, #32]
 800187c:	fa93 f3a3 	rbit	r3, r3
 8001880:	61fb      	str	r3, [r7, #28]
  return result;
 8001882:	69fb      	ldr	r3, [r7, #28]
 8001884:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8001886:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001888:	2b00      	cmp	r3, #0
 800188a:	d101      	bne.n	8001890 <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 800188c:	2320      	movs	r3, #32
 800188e:	e003      	b.n	8001898 <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 8001890:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001892:	fab3 f383 	clz	r3, r3
 8001896:	b2db      	uxtb	r3, r3
 8001898:	005b      	lsls	r3, r3, #1
 800189a:	6879      	ldr	r1, [r7, #4]
 800189c:	fa01 f303 	lsl.w	r3, r1, r3
 80018a0:	431a      	orrs	r2, r3
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	609a      	str	r2, [r3, #8]
}
 80018a6:	bf00      	nop
 80018a8:	372c      	adds	r7, #44	@ 0x2c
 80018aa:	46bd      	mov	sp, r7
 80018ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b0:	4770      	bx	lr

080018b2 <LL_GPIO_SetPinPull>:
{
 80018b2:	b480      	push	{r7}
 80018b4:	b08b      	sub	sp, #44	@ 0x2c
 80018b6:	af00      	add	r7, sp, #0
 80018b8:	60f8      	str	r0, [r7, #12]
 80018ba:	60b9      	str	r1, [r7, #8]
 80018bc:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	68da      	ldr	r2, [r3, #12]
 80018c2:	68bb      	ldr	r3, [r7, #8]
 80018c4:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018c6:	697b      	ldr	r3, [r7, #20]
 80018c8:	fa93 f3a3 	rbit	r3, r3
 80018cc:	613b      	str	r3, [r7, #16]
  return result;
 80018ce:	693b      	ldr	r3, [r7, #16]
 80018d0:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80018d2:	69bb      	ldr	r3, [r7, #24]
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d101      	bne.n	80018dc <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 80018d8:	2320      	movs	r3, #32
 80018da:	e003      	b.n	80018e4 <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 80018dc:	69bb      	ldr	r3, [r7, #24]
 80018de:	fab3 f383 	clz	r3, r3
 80018e2:	b2db      	uxtb	r3, r3
 80018e4:	005b      	lsls	r3, r3, #1
 80018e6:	2103      	movs	r1, #3
 80018e8:	fa01 f303 	lsl.w	r3, r1, r3
 80018ec:	43db      	mvns	r3, r3
 80018ee:	401a      	ands	r2, r3
 80018f0:	68bb      	ldr	r3, [r7, #8]
 80018f2:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018f4:	6a3b      	ldr	r3, [r7, #32]
 80018f6:	fa93 f3a3 	rbit	r3, r3
 80018fa:	61fb      	str	r3, [r7, #28]
  return result;
 80018fc:	69fb      	ldr	r3, [r7, #28]
 80018fe:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8001900:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001902:	2b00      	cmp	r3, #0
 8001904:	d101      	bne.n	800190a <LL_GPIO_SetPinPull+0x58>
    return 32U;
 8001906:	2320      	movs	r3, #32
 8001908:	e003      	b.n	8001912 <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 800190a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800190c:	fab3 f383 	clz	r3, r3
 8001910:	b2db      	uxtb	r3, r3
 8001912:	005b      	lsls	r3, r3, #1
 8001914:	6879      	ldr	r1, [r7, #4]
 8001916:	fa01 f303 	lsl.w	r3, r1, r3
 800191a:	431a      	orrs	r2, r3
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	60da      	str	r2, [r3, #12]
}
 8001920:	bf00      	nop
 8001922:	372c      	adds	r7, #44	@ 0x2c
 8001924:	46bd      	mov	sp, r7
 8001926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192a:	4770      	bx	lr

0800192c <LL_GPIO_SetAFPin_0_7>:
{
 800192c:	b480      	push	{r7}
 800192e:	b08b      	sub	sp, #44	@ 0x2c
 8001930:	af00      	add	r7, sp, #0
 8001932:	60f8      	str	r0, [r7, #12]
 8001934:	60b9      	str	r1, [r7, #8]
 8001936:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	6a1a      	ldr	r2, [r3, #32]
 800193c:	68bb      	ldr	r3, [r7, #8]
 800193e:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001940:	697b      	ldr	r3, [r7, #20]
 8001942:	fa93 f3a3 	rbit	r3, r3
 8001946:	613b      	str	r3, [r7, #16]
  return result;
 8001948:	693b      	ldr	r3, [r7, #16]
 800194a:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800194c:	69bb      	ldr	r3, [r7, #24]
 800194e:	2b00      	cmp	r3, #0
 8001950:	d101      	bne.n	8001956 <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 8001952:	2320      	movs	r3, #32
 8001954:	e003      	b.n	800195e <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 8001956:	69bb      	ldr	r3, [r7, #24]
 8001958:	fab3 f383 	clz	r3, r3
 800195c:	b2db      	uxtb	r3, r3
 800195e:	009b      	lsls	r3, r3, #2
 8001960:	210f      	movs	r1, #15
 8001962:	fa01 f303 	lsl.w	r3, r1, r3
 8001966:	43db      	mvns	r3, r3
 8001968:	401a      	ands	r2, r3
 800196a:	68bb      	ldr	r3, [r7, #8]
 800196c:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800196e:	6a3b      	ldr	r3, [r7, #32]
 8001970:	fa93 f3a3 	rbit	r3, r3
 8001974:	61fb      	str	r3, [r7, #28]
  return result;
 8001976:	69fb      	ldr	r3, [r7, #28]
 8001978:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 800197a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800197c:	2b00      	cmp	r3, #0
 800197e:	d101      	bne.n	8001984 <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 8001980:	2320      	movs	r3, #32
 8001982:	e003      	b.n	800198c <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 8001984:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001986:	fab3 f383 	clz	r3, r3
 800198a:	b2db      	uxtb	r3, r3
 800198c:	009b      	lsls	r3, r3, #2
 800198e:	6879      	ldr	r1, [r7, #4]
 8001990:	fa01 f303 	lsl.w	r3, r1, r3
 8001994:	431a      	orrs	r2, r3
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	621a      	str	r2, [r3, #32]
}
 800199a:	bf00      	nop
 800199c:	372c      	adds	r7, #44	@ 0x2c
 800199e:	46bd      	mov	sp, r7
 80019a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a4:	4770      	bx	lr

080019a6 <LL_GPIO_SetAFPin_8_15>:
{
 80019a6:	b480      	push	{r7}
 80019a8:	b08b      	sub	sp, #44	@ 0x2c
 80019aa:	af00      	add	r7, sp, #0
 80019ac:	60f8      	str	r0, [r7, #12]
 80019ae:	60b9      	str	r1, [r7, #8]
 80019b0:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80019b6:	68bb      	ldr	r3, [r7, #8]
 80019b8:	0a1b      	lsrs	r3, r3, #8
 80019ba:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019bc:	697b      	ldr	r3, [r7, #20]
 80019be:	fa93 f3a3 	rbit	r3, r3
 80019c2:	613b      	str	r3, [r7, #16]
  return result;
 80019c4:	693b      	ldr	r3, [r7, #16]
 80019c6:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80019c8:	69bb      	ldr	r3, [r7, #24]
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d101      	bne.n	80019d2 <LL_GPIO_SetAFPin_8_15+0x2c>
    return 32U;
 80019ce:	2320      	movs	r3, #32
 80019d0:	e003      	b.n	80019da <LL_GPIO_SetAFPin_8_15+0x34>
  return __builtin_clz(value);
 80019d2:	69bb      	ldr	r3, [r7, #24]
 80019d4:	fab3 f383 	clz	r3, r3
 80019d8:	b2db      	uxtb	r3, r3
 80019da:	009b      	lsls	r3, r3, #2
 80019dc:	210f      	movs	r1, #15
 80019de:	fa01 f303 	lsl.w	r3, r1, r3
 80019e2:	43db      	mvns	r3, r3
 80019e4:	401a      	ands	r2, r3
 80019e6:	68bb      	ldr	r3, [r7, #8]
 80019e8:	0a1b      	lsrs	r3, r3, #8
 80019ea:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019ec:	6a3b      	ldr	r3, [r7, #32]
 80019ee:	fa93 f3a3 	rbit	r3, r3
 80019f2:	61fb      	str	r3, [r7, #28]
  return result;
 80019f4:	69fb      	ldr	r3, [r7, #28]
 80019f6:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 80019f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d101      	bne.n	8001a02 <LL_GPIO_SetAFPin_8_15+0x5c>
    return 32U;
 80019fe:	2320      	movs	r3, #32
 8001a00:	e003      	b.n	8001a0a <LL_GPIO_SetAFPin_8_15+0x64>
  return __builtin_clz(value);
 8001a02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a04:	fab3 f383 	clz	r3, r3
 8001a08:	b2db      	uxtb	r3, r3
 8001a0a:	009b      	lsls	r3, r3, #2
 8001a0c:	6879      	ldr	r1, [r7, #4]
 8001a0e:	fa01 f303 	lsl.w	r3, r1, r3
 8001a12:	431a      	orrs	r2, r3
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8001a18:	bf00      	nop
 8001a1a:	372c      	adds	r7, #44	@ 0x2c
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a22:	4770      	bx	lr

08001a24 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	b08a      	sub	sp, #40	@ 0x28
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	6078      	str	r0, [r7, #4]
 8001a2c:	6039      	str	r1, [r7, #0]
  uint32_t pinpos     = 0x00000000U;
 8001a2e:	2300      	movs	r3, #0
 8001a30:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t currentpin = 0x00000000U;
 8001a32:	2300      	movs	r3, #0
 8001a34:	623b      	str	r3, [r7, #32]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8001a36:	683b      	ldr	r3, [r7, #0]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	61bb      	str	r3, [r7, #24]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a3c:	69bb      	ldr	r3, [r7, #24]
 8001a3e:	fa93 f3a3 	rbit	r3, r3
 8001a42:	617b      	str	r3, [r7, #20]
  return result;
 8001a44:	697b      	ldr	r3, [r7, #20]
 8001a46:	61fb      	str	r3, [r7, #28]
  if (value == 0U)
 8001a48:	69fb      	ldr	r3, [r7, #28]
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d101      	bne.n	8001a52 <LL_GPIO_Init+0x2e>
    return 32U;
 8001a4e:	2320      	movs	r3, #32
 8001a50:	e003      	b.n	8001a5a <LL_GPIO_Init+0x36>
  return __builtin_clz(value);
 8001a52:	69fb      	ldr	r3, [r7, #28]
 8001a54:	fab3 f383 	clz	r3, r3
 8001a58:	b2db      	uxtb	r3, r3
 8001a5a:	627b      	str	r3, [r7, #36]	@ 0x24
  
  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8001a5c:	e057      	b.n	8001b0e <LL_GPIO_Init+0xea>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 8001a5e:	683b      	ldr	r3, [r7, #0]
 8001a60:	681a      	ldr	r2, [r3, #0]
 8001a62:	2101      	movs	r1, #1
 8001a64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a66:	fa01 f303 	lsl.w	r3, r1, r3
 8001a6a:	4013      	ands	r3, r2
 8001a6c:	623b      	str	r3, [r7, #32]
    
    if (currentpin)
 8001a6e:	6a3b      	ldr	r3, [r7, #32]
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d049      	beq.n	8001b08 <LL_GPIO_Init+0xe4>
    {
      
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8001a74:	683b      	ldr	r3, [r7, #0]
 8001a76:	685b      	ldr	r3, [r3, #4]
 8001a78:	2b01      	cmp	r3, #1
 8001a7a:	d003      	beq.n	8001a84 <LL_GPIO_Init+0x60>
 8001a7c:	683b      	ldr	r3, [r7, #0]
 8001a7e:	685b      	ldr	r3, [r3, #4]
 8001a80:	2b02      	cmp	r3, #2
 8001a82:	d10d      	bne.n	8001aa0 <LL_GPIO_Init+0x7c>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
        
        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8001a84:	683b      	ldr	r3, [r7, #0]
 8001a86:	689b      	ldr	r3, [r3, #8]
 8001a88:	461a      	mov	r2, r3
 8001a8a:	6a39      	ldr	r1, [r7, #32]
 8001a8c:	6878      	ldr	r0, [r7, #4]
 8001a8e:	f7ff fed3 	bl	8001838 <LL_GPIO_SetPinSpeed>
        
        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));
        
        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 8001a92:	683b      	ldr	r3, [r7, #0]
 8001a94:	68db      	ldr	r3, [r3, #12]
 8001a96:	461a      	mov	r2, r3
 8001a98:	6a39      	ldr	r1, [r7, #32]
 8001a9a:	6878      	ldr	r0, [r7, #4]
 8001a9c:	f7ff feb4 	bl	8001808 <LL_GPIO_SetPinOutputType>
      }
      
      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8001aa0:	683b      	ldr	r3, [r7, #0]
 8001aa2:	691b      	ldr	r3, [r3, #16]
 8001aa4:	461a      	mov	r2, r3
 8001aa6:	6a39      	ldr	r1, [r7, #32]
 8001aa8:	6878      	ldr	r0, [r7, #4]
 8001aaa:	f7ff ff02 	bl	80018b2 <LL_GPIO_SetPinPull>
      
      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8001aae:	683b      	ldr	r3, [r7, #0]
 8001ab0:	685b      	ldr	r3, [r3, #4]
 8001ab2:	2b02      	cmp	r3, #2
 8001ab4:	d121      	bne.n	8001afa <LL_GPIO_Init+0xd6>
 8001ab6:	6a3b      	ldr	r3, [r7, #32]
 8001ab8:	60fb      	str	r3, [r7, #12]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	fa93 f3a3 	rbit	r3, r3
 8001ac0:	60bb      	str	r3, [r7, #8]
  return result;
 8001ac2:	68bb      	ldr	r3, [r7, #8]
 8001ac4:	613b      	str	r3, [r7, #16]
  if (value == 0U)
 8001ac6:	693b      	ldr	r3, [r7, #16]
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d101      	bne.n	8001ad0 <LL_GPIO_Init+0xac>
    return 32U;
 8001acc:	2320      	movs	r3, #32
 8001ace:	e003      	b.n	8001ad8 <LL_GPIO_Init+0xb4>
  return __builtin_clz(value);
 8001ad0:	693b      	ldr	r3, [r7, #16]
 8001ad2:	fab3 f383 	clz	r3, r3
 8001ad6:	b2db      	uxtb	r3, r3
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));
        
        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 8001ad8:	2b07      	cmp	r3, #7
 8001ada:	d807      	bhi.n	8001aec <LL_GPIO_Init+0xc8>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8001adc:	683b      	ldr	r3, [r7, #0]
 8001ade:	695b      	ldr	r3, [r3, #20]
 8001ae0:	461a      	mov	r2, r3
 8001ae2:	6a39      	ldr	r1, [r7, #32]
 8001ae4:	6878      	ldr	r0, [r7, #4]
 8001ae6:	f7ff ff21 	bl	800192c <LL_GPIO_SetAFPin_0_7>
 8001aea:	e006      	b.n	8001afa <LL_GPIO_Init+0xd6>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8001aec:	683b      	ldr	r3, [r7, #0]
 8001aee:	695b      	ldr	r3, [r3, #20]
 8001af0:	461a      	mov	r2, r3
 8001af2:	6a39      	ldr	r1, [r7, #32]
 8001af4:	6878      	ldr	r0, [r7, #4]
 8001af6:	f7ff ff56 	bl	80019a6 <LL_GPIO_SetAFPin_8_15>
        }
      }
      
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8001afa:	683b      	ldr	r3, [r7, #0]
 8001afc:	685b      	ldr	r3, [r3, #4]
 8001afe:	461a      	mov	r2, r3
 8001b00:	6a39      	ldr	r1, [r7, #32]
 8001b02:	6878      	ldr	r0, [r7, #4]
 8001b04:	f7ff fe43 	bl	800178e <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8001b08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b0a:	3301      	adds	r3, #1
 8001b0c:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8001b0e:	683b      	ldr	r3, [r7, #0]
 8001b10:	681a      	ldr	r2, [r3, #0]
 8001b12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b14:	fa22 f303 	lsr.w	r3, r2, r3
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d1a0      	bne.n	8001a5e <LL_GPIO_Init+0x3a>
  }

  return (SUCCESS);
 8001b1c:	2300      	movs	r3, #0
}
 8001b1e:	4618      	mov	r0, r3
 8001b20:	3728      	adds	r7, #40	@ 0x28
 8001b22:	46bd      	mov	sp, r7
 8001b24:	bd80      	pop	{r7, pc}
	...

08001b28 <LL_RCC_GetSysClkSource>:
{
 8001b28:	b480      	push	{r7}
 8001b2a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8001b2c:	4b04      	ldr	r3, [pc, #16]	@ (8001b40 <LL_RCC_GetSysClkSource+0x18>)
 8001b2e:	689b      	ldr	r3, [r3, #8]
 8001b30:	f003 030c 	and.w	r3, r3, #12
}
 8001b34:	4618      	mov	r0, r3
 8001b36:	46bd      	mov	sp, r7
 8001b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3c:	4770      	bx	lr
 8001b3e:	bf00      	nop
 8001b40:	40023800 	.word	0x40023800

08001b44 <LL_RCC_GetAHBPrescaler>:
{
 8001b44:	b480      	push	{r7}
 8001b46:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8001b48:	4b04      	ldr	r3, [pc, #16]	@ (8001b5c <LL_RCC_GetAHBPrescaler+0x18>)
 8001b4a:	689b      	ldr	r3, [r3, #8]
 8001b4c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8001b50:	4618      	mov	r0, r3
 8001b52:	46bd      	mov	sp, r7
 8001b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b58:	4770      	bx	lr
 8001b5a:	bf00      	nop
 8001b5c:	40023800 	.word	0x40023800

08001b60 <LL_RCC_GetAPB1Prescaler>:
{
 8001b60:	b480      	push	{r7}
 8001b62:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8001b64:	4b04      	ldr	r3, [pc, #16]	@ (8001b78 <LL_RCC_GetAPB1Prescaler+0x18>)
 8001b66:	689b      	ldr	r3, [r3, #8]
 8001b68:	f403 53e0 	and.w	r3, r3, #7168	@ 0x1c00
}
 8001b6c:	4618      	mov	r0, r3
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b74:	4770      	bx	lr
 8001b76:	bf00      	nop
 8001b78:	40023800 	.word	0x40023800

08001b7c <LL_RCC_GetAPB2Prescaler>:
{
 8001b7c:	b480      	push	{r7}
 8001b7e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8001b80:	4b04      	ldr	r3, [pc, #16]	@ (8001b94 <LL_RCC_GetAPB2Prescaler+0x18>)
 8001b82:	689b      	ldr	r3, [r3, #8]
 8001b84:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 8001b88:	4618      	mov	r0, r3
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b90:	4770      	bx	lr
 8001b92:	bf00      	nop
 8001b94:	40023800 	.word	0x40023800

08001b98 <LL_RCC_PLL_GetMainSource>:
  * @retval Returned value can be one of the following values:
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8001b98:	b480      	push	{r7}
 8001b9a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8001b9c:	4b04      	ldr	r3, [pc, #16]	@ (8001bb0 <LL_RCC_PLL_GetMainSource+0x18>)
 8001b9e:	685b      	ldr	r3, [r3, #4]
 8001ba0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
}
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bac:	4770      	bx	lr
 8001bae:	bf00      	nop
 8001bb0:	40023800 	.word	0x40023800

08001bb4 <LL_RCC_PLL_GetN>:
  * @retval Between 50/192(*) and 432
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8001bb4:	b480      	push	{r7}
 8001bb6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8001bb8:	4b04      	ldr	r3, [pc, #16]	@ (8001bcc <LL_RCC_PLL_GetN+0x18>)
 8001bba:	685b      	ldr	r3, [r3, #4]
 8001bbc:	099b      	lsrs	r3, r3, #6
 8001bbe:	f3c3 0308 	ubfx	r3, r3, #0, #9
}
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	46bd      	mov	sp, r7
 8001bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bca:	4770      	bx	lr
 8001bcc:	40023800 	.word	0x40023800

08001bd0 <LL_RCC_PLL_GetP>:
  *         @arg @ref LL_RCC_PLLP_DIV_4
  *         @arg @ref LL_RCC_PLLP_DIV_6
  *         @arg @ref LL_RCC_PLLP_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetP(void)
{
 8001bd0:	b480      	push	{r7}
 8001bd2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP));
 8001bd4:	4b04      	ldr	r3, [pc, #16]	@ (8001be8 <LL_RCC_PLL_GetP+0x18>)
 8001bd6:	685b      	ldr	r3, [r3, #4]
 8001bd8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
}
 8001bdc:	4618      	mov	r0, r3
 8001bde:	46bd      	mov	sp, r7
 8001be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be4:	4770      	bx	lr
 8001be6:	bf00      	nop
 8001be8:	40023800 	.word	0x40023800

08001bec <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_61
  *         @arg @ref LL_RCC_PLLM_DIV_62
  *         @arg @ref LL_RCC_PLLM_DIV_63
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8001bec:	b480      	push	{r7}
 8001bee:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8001bf0:	4b04      	ldr	r3, [pc, #16]	@ (8001c04 <LL_RCC_PLL_GetDivider+0x18>)
 8001bf2:	685b      	ldr	r3, [r3, #4]
 8001bf4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
}
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c00:	4770      	bx	lr
 8001c02:	bf00      	nop
 8001c04:	40023800 	.word	0x40023800

08001c08 <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	b082      	sub	sp, #8
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 8001c10:	f000 f820 	bl	8001c54 <RCC_GetSystemClockFreq>
 8001c14:	4602      	mov	r2, r0
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	4618      	mov	r0, r3
 8001c20:	f000 f840 	bl	8001ca4 <RCC_GetHCLKClockFreq>
 8001c24:	4602      	mov	r2, r0
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	685b      	ldr	r3, [r3, #4]
 8001c2e:	4618      	mov	r0, r3
 8001c30:	f000 f84e 	bl	8001cd0 <RCC_GetPCLK1ClockFreq>
 8001c34:	4602      	mov	r2, r0
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	609a      	str	r2, [r3, #8]

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	685b      	ldr	r3, [r3, #4]
 8001c3e:	4618      	mov	r0, r3
 8001c40:	f000 f85a 	bl	8001cf8 <RCC_GetPCLK2ClockFreq>
 8001c44:	4602      	mov	r2, r0
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	60da      	str	r2, [r3, #12]
}
 8001c4a:	bf00      	nop
 8001c4c:	3708      	adds	r7, #8
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	bd80      	pop	{r7, pc}
	...

08001c54 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	b082      	sub	sp, #8
 8001c58:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 8001c5e:	f7ff ff63 	bl	8001b28 <LL_RCC_GetSysClkSource>
 8001c62:	4603      	mov	r3, r0
 8001c64:	2b08      	cmp	r3, #8
 8001c66:	d00c      	beq.n	8001c82 <RCC_GetSystemClockFreq+0x2e>
 8001c68:	2b08      	cmp	r3, #8
 8001c6a:	d80f      	bhi.n	8001c8c <RCC_GetSystemClockFreq+0x38>
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d002      	beq.n	8001c76 <RCC_GetSystemClockFreq+0x22>
 8001c70:	2b04      	cmp	r3, #4
 8001c72:	d003      	beq.n	8001c7c <RCC_GetSystemClockFreq+0x28>
 8001c74:	e00a      	b.n	8001c8c <RCC_GetSystemClockFreq+0x38>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 8001c76:	4b09      	ldr	r3, [pc, #36]	@ (8001c9c <RCC_GetSystemClockFreq+0x48>)
 8001c78:	607b      	str	r3, [r7, #4]
      break;
 8001c7a:	e00a      	b.n	8001c92 <RCC_GetSystemClockFreq+0x3e>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 8001c7c:	4b08      	ldr	r3, [pc, #32]	@ (8001ca0 <RCC_GetSystemClockFreq+0x4c>)
 8001c7e:	607b      	str	r3, [r7, #4]
      break;
 8001c80:	e007      	b.n	8001c92 <RCC_GetSystemClockFreq+0x3e>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLL);
 8001c82:	2008      	movs	r0, #8
 8001c84:	f000 f84c 	bl	8001d20 <RCC_PLL_GetFreqDomain_SYS>
 8001c88:	6078      	str	r0, [r7, #4]
      break;
 8001c8a:	e002      	b.n	8001c92 <RCC_GetSystemClockFreq+0x3e>
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLLR);
      break;
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

    default:
      frequency = HSI_VALUE;
 8001c8c:	4b03      	ldr	r3, [pc, #12]	@ (8001c9c <RCC_GetSystemClockFreq+0x48>)
 8001c8e:	607b      	str	r3, [r7, #4]
      break;
 8001c90:	bf00      	nop
  }

  return frequency;
 8001c92:	687b      	ldr	r3, [r7, #4]
}
 8001c94:	4618      	mov	r0, r3
 8001c96:	3708      	adds	r7, #8
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	bd80      	pop	{r7, pc}
 8001c9c:	00f42400 	.word	0x00f42400
 8001ca0:	007a1200 	.word	0x007a1200

08001ca4 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	b082      	sub	sp, #8
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8001cac:	f7ff ff4a 	bl	8001b44 <LL_RCC_GetAHBPrescaler>
 8001cb0:	4603      	mov	r3, r0
 8001cb2:	091b      	lsrs	r3, r3, #4
 8001cb4:	f003 030f 	and.w	r3, r3, #15
 8001cb8:	4a04      	ldr	r2, [pc, #16]	@ (8001ccc <RCC_GetHCLKClockFreq+0x28>)
 8001cba:	5cd3      	ldrb	r3, [r2, r3]
 8001cbc:	461a      	mov	r2, r3
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	40d3      	lsrs	r3, r2
}
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	3708      	adds	r7, #8
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	bd80      	pop	{r7, pc}
 8001cca:	bf00      	nop
 8001ccc:	08002998 	.word	0x08002998

08001cd0 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	b082      	sub	sp, #8
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8001cd8:	f7ff ff42 	bl	8001b60 <LL_RCC_GetAPB1Prescaler>
 8001cdc:	4603      	mov	r3, r0
 8001cde:	0a9b      	lsrs	r3, r3, #10
 8001ce0:	4a04      	ldr	r2, [pc, #16]	@ (8001cf4 <RCC_GetPCLK1ClockFreq+0x24>)
 8001ce2:	5cd3      	ldrb	r3, [r2, r3]
 8001ce4:	461a      	mov	r2, r3
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	40d3      	lsrs	r3, r2
}
 8001cea:	4618      	mov	r0, r3
 8001cec:	3708      	adds	r7, #8
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	bd80      	pop	{r7, pc}
 8001cf2:	bf00      	nop
 8001cf4:	080029a8 	.word	0x080029a8

08001cf8 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b082      	sub	sp, #8
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 8001d00:	f7ff ff3c 	bl	8001b7c <LL_RCC_GetAPB2Prescaler>
 8001d04:	4603      	mov	r3, r0
 8001d06:	0b5b      	lsrs	r3, r3, #13
 8001d08:	4a04      	ldr	r2, [pc, #16]	@ (8001d1c <RCC_GetPCLK2ClockFreq+0x24>)
 8001d0a:	5cd3      	ldrb	r3, [r2, r3]
 8001d0c:	461a      	mov	r2, r3
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	40d3      	lsrs	r3, r2
}
 8001d12:	4618      	mov	r0, r3
 8001d14:	3708      	adds	r7, #8
 8001d16:	46bd      	mov	sp, r7
 8001d18:	bd80      	pop	{r7, pc}
 8001d1a:	bf00      	nop
 8001d1c:	080029a8 	.word	0x080029a8

08001d20 <RCC_PLL_GetFreqDomain_SYS>:
  * @brief  Return PLL clock frequency used for system domain
  * @param  SYSCLK_Source System clock source
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(uint32_t SYSCLK_Source)
{
 8001d20:	b590      	push	{r4, r7, lr}
 8001d22:	b087      	sub	sp, #28
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]
  uint32_t pllinputfreq = 0U;
 8001d28:	2300      	movs	r3, #0
 8001d2a:	617b      	str	r3, [r7, #20]
  uint32_t pllsource = 0U;
 8001d2c:	2300      	movs	r3, #0
 8001d2e:	60fb      	str	r3, [r7, #12]
  uint32_t plloutputfreq = 0U;
 8001d30:	2300      	movs	r3, #0
 8001d32:	613b      	str	r3, [r7, #16]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
     SYSCLK = PLL_VCO / (PLLP or PLLR)
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 8001d34:	f7ff ff30 	bl	8001b98 <LL_RCC_PLL_GetMainSource>
 8001d38:	60f8      	str	r0, [r7, #12]

  switch (pllsource)
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d004      	beq.n	8001d4a <RCC_PLL_GetFreqDomain_SYS+0x2a>
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001d46:	d003      	beq.n	8001d50 <RCC_PLL_GetFreqDomain_SYS+0x30>
 8001d48:	e005      	b.n	8001d56 <RCC_PLL_GetFreqDomain_SYS+0x36>
  {
    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 8001d4a:	4b12      	ldr	r3, [pc, #72]	@ (8001d94 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 8001d4c:	617b      	str	r3, [r7, #20]
      break;
 8001d4e:	e005      	b.n	8001d5c <RCC_PLL_GetFreqDomain_SYS+0x3c>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 8001d50:	4b11      	ldr	r3, [pc, #68]	@ (8001d98 <RCC_PLL_GetFreqDomain_SYS+0x78>)
 8001d52:	617b      	str	r3, [r7, #20]
      break;
 8001d54:	e002      	b.n	8001d5c <RCC_PLL_GetFreqDomain_SYS+0x3c>

    default:
      pllinputfreq = HSI_VALUE;
 8001d56:	4b0f      	ldr	r3, [pc, #60]	@ (8001d94 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 8001d58:	617b      	str	r3, [r7, #20]
      break;
 8001d5a:	bf00      	nop
  }

  if (SYSCLK_Source == LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	2b08      	cmp	r3, #8
 8001d60:	d113      	bne.n	8001d8a <RCC_PLL_GetFreqDomain_SYS+0x6a>
  {
    plloutputfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8001d62:	f7ff ff43 	bl	8001bec <LL_RCC_PLL_GetDivider>
 8001d66:	4602      	mov	r2, r0
 8001d68:	697b      	ldr	r3, [r7, #20]
 8001d6a:	fbb3 f4f2 	udiv	r4, r3, r2
 8001d6e:	f7ff ff21 	bl	8001bb4 <LL_RCC_PLL_GetN>
 8001d72:	4603      	mov	r3, r0
 8001d74:	fb03 f404 	mul.w	r4, r3, r4
 8001d78:	f7ff ff2a 	bl	8001bd0 <LL_RCC_PLL_GetP>
 8001d7c:	4603      	mov	r3, r0
 8001d7e:	0c1b      	lsrs	r3, r3, #16
 8001d80:	3301      	adds	r3, #1
 8001d82:	005b      	lsls	r3, r3, #1
 8001d84:	fbb4 f3f3 	udiv	r3, r4, r3
 8001d88:	613b      	str	r3, [r7, #16]
    plloutputfreq = __LL_RCC_CALC_PLLRCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
                                               LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

  return plloutputfreq;
 8001d8a:	693b      	ldr	r3, [r7, #16]
}
 8001d8c:	4618      	mov	r0, r3
 8001d8e:	371c      	adds	r7, #28
 8001d90:	46bd      	mov	sp, r7
 8001d92:	bd90      	pop	{r4, r7, pc}
 8001d94:	00f42400 	.word	0x00f42400
 8001d98:	007a1200 	.word	0x007a1200

08001d9c <LL_TIM_SetPrescaler>:
{
 8001d9c:	b480      	push	{r7}
 8001d9e:	b083      	sub	sp, #12
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6078      	str	r0, [r7, #4]
 8001da4:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	683a      	ldr	r2, [r7, #0]
 8001daa:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001dac:	bf00      	nop
 8001dae:	370c      	adds	r7, #12
 8001db0:	46bd      	mov	sp, r7
 8001db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db6:	4770      	bx	lr

08001db8 <LL_TIM_SetAutoReload>:
{
 8001db8:	b480      	push	{r7}
 8001dba:	b083      	sub	sp, #12
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]
 8001dc0:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	683a      	ldr	r2, [r7, #0]
 8001dc6:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 8001dc8:	bf00      	nop
 8001dca:	370c      	adds	r7, #12
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd2:	4770      	bx	lr

08001dd4 <LL_TIM_SetRepetitionCounter>:
{
 8001dd4:	b480      	push	{r7}
 8001dd6:	b083      	sub	sp, #12
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
 8001ddc:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	683a      	ldr	r2, [r7, #0]
 8001de2:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8001de4:	bf00      	nop
 8001de6:	370c      	adds	r7, #12
 8001de8:	46bd      	mov	sp, r7
 8001dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dee:	4770      	bx	lr

08001df0 <LL_TIM_OC_SetCompareCH1>:
{
 8001df0:	b480      	push	{r7}
 8001df2:	b083      	sub	sp, #12
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
 8001df8:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	683a      	ldr	r2, [r7, #0]
 8001dfe:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8001e00:	bf00      	nop
 8001e02:	370c      	adds	r7, #12
 8001e04:	46bd      	mov	sp, r7
 8001e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0a:	4770      	bx	lr

08001e0c <LL_TIM_OC_SetCompareCH2>:
{
 8001e0c:	b480      	push	{r7}
 8001e0e:	b083      	sub	sp, #12
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	6078      	str	r0, [r7, #4]
 8001e14:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR2, CompareValue);
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	683a      	ldr	r2, [r7, #0]
 8001e1a:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8001e1c:	bf00      	nop
 8001e1e:	370c      	adds	r7, #12
 8001e20:	46bd      	mov	sp, r7
 8001e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e26:	4770      	bx	lr

08001e28 <LL_TIM_OC_SetCompareCH3>:
{
 8001e28:	b480      	push	{r7}
 8001e2a:	b083      	sub	sp, #12
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	6078      	str	r0, [r7, #4]
 8001e30:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR3, CompareValue);
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	683a      	ldr	r2, [r7, #0]
 8001e36:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 8001e38:	bf00      	nop
 8001e3a:	370c      	adds	r7, #12
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e42:	4770      	bx	lr

08001e44 <LL_TIM_OC_SetCompareCH4>:
{
 8001e44:	b480      	push	{r7}
 8001e46:	b083      	sub	sp, #12
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	6078      	str	r0, [r7, #4]
 8001e4c:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR4, CompareValue);
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	683a      	ldr	r2, [r7, #0]
 8001e52:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8001e54:	bf00      	nop
 8001e56:	370c      	adds	r7, #12
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5e:	4770      	bx	lr

08001e60 <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 8001e60:	b480      	push	{r7}
 8001e62:	b083      	sub	sp, #12
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	695b      	ldr	r3, [r3, #20]
 8001e6c:	f043 0201 	orr.w	r2, r3, #1
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	615a      	str	r2, [r3, #20]
}
 8001e74:	bf00      	nop
 8001e76:	370c      	adds	r7, #12
 8001e78:	46bd      	mov	sp, r7
 8001e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7e:	4770      	bx	lr

08001e80 <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, const LL_TIM_InitTypeDef *TIM_InitStruct)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b084      	sub	sp, #16
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
 8001e88:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	4a31      	ldr	r2, [pc, #196]	@ (8001f58 <LL_TIM_Init+0xd8>)
 8001e94:	4293      	cmp	r3, r2
 8001e96:	d00f      	beq.n	8001eb8 <LL_TIM_Init+0x38>
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001e9e:	d00b      	beq.n	8001eb8 <LL_TIM_Init+0x38>
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	4a2e      	ldr	r2, [pc, #184]	@ (8001f5c <LL_TIM_Init+0xdc>)
 8001ea4:	4293      	cmp	r3, r2
 8001ea6:	d007      	beq.n	8001eb8 <LL_TIM_Init+0x38>
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	4a2d      	ldr	r2, [pc, #180]	@ (8001f60 <LL_TIM_Init+0xe0>)
 8001eac:	4293      	cmp	r3, r2
 8001eae:	d003      	beq.n	8001eb8 <LL_TIM_Init+0x38>
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	4a2c      	ldr	r2, [pc, #176]	@ (8001f64 <LL_TIM_Init+0xe4>)
 8001eb4:	4293      	cmp	r3, r2
 8001eb6:	d106      	bne.n	8001ec6 <LL_TIM_Init+0x46>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8001ebe:	683b      	ldr	r3, [r7, #0]
 8001ec0:	685b      	ldr	r3, [r3, #4]
 8001ec2:	4313      	orrs	r3, r2
 8001ec4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	4a23      	ldr	r2, [pc, #140]	@ (8001f58 <LL_TIM_Init+0xd8>)
 8001eca:	4293      	cmp	r3, r2
 8001ecc:	d01b      	beq.n	8001f06 <LL_TIM_Init+0x86>
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001ed4:	d017      	beq.n	8001f06 <LL_TIM_Init+0x86>
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	4a20      	ldr	r2, [pc, #128]	@ (8001f5c <LL_TIM_Init+0xdc>)
 8001eda:	4293      	cmp	r3, r2
 8001edc:	d013      	beq.n	8001f06 <LL_TIM_Init+0x86>
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	4a1f      	ldr	r2, [pc, #124]	@ (8001f60 <LL_TIM_Init+0xe0>)
 8001ee2:	4293      	cmp	r3, r2
 8001ee4:	d00f      	beq.n	8001f06 <LL_TIM_Init+0x86>
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	4a1e      	ldr	r2, [pc, #120]	@ (8001f64 <LL_TIM_Init+0xe4>)
 8001eea:	4293      	cmp	r3, r2
 8001eec:	d00b      	beq.n	8001f06 <LL_TIM_Init+0x86>
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	4a1d      	ldr	r2, [pc, #116]	@ (8001f68 <LL_TIM_Init+0xe8>)
 8001ef2:	4293      	cmp	r3, r2
 8001ef4:	d007      	beq.n	8001f06 <LL_TIM_Init+0x86>
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	4a1c      	ldr	r2, [pc, #112]	@ (8001f6c <LL_TIM_Init+0xec>)
 8001efa:	4293      	cmp	r3, r2
 8001efc:	d003      	beq.n	8001f06 <LL_TIM_Init+0x86>
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	4a1b      	ldr	r2, [pc, #108]	@ (8001f70 <LL_TIM_Init+0xf0>)
 8001f02:	4293      	cmp	r3, r2
 8001f04:	d106      	bne.n	8001f14 <LL_TIM_Init+0x94>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8001f0c:	683b      	ldr	r3, [r7, #0]
 8001f0e:	68db      	ldr	r3, [r3, #12]
 8001f10:	4313      	orrs	r3, r2
 8001f12:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	68fa      	ldr	r2, [r7, #12]
 8001f18:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 8001f1a:	683b      	ldr	r3, [r7, #0]
 8001f1c:	689b      	ldr	r3, [r3, #8]
 8001f1e:	4619      	mov	r1, r3
 8001f20:	6878      	ldr	r0, [r7, #4]
 8001f22:	f7ff ff49 	bl	8001db8 <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 8001f26:	683b      	ldr	r3, [r7, #0]
 8001f28:	881b      	ldrh	r3, [r3, #0]
 8001f2a:	4619      	mov	r1, r3
 8001f2c:	6878      	ldr	r0, [r7, #4]
 8001f2e:	f7ff ff35 	bl	8001d9c <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	4a08      	ldr	r2, [pc, #32]	@ (8001f58 <LL_TIM_Init+0xd8>)
 8001f36:	4293      	cmp	r3, r2
 8001f38:	d105      	bne.n	8001f46 <LL_TIM_Init+0xc6>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 8001f3a:	683b      	ldr	r3, [r7, #0]
 8001f3c:	691b      	ldr	r3, [r3, #16]
 8001f3e:	4619      	mov	r1, r3
 8001f40:	6878      	ldr	r0, [r7, #4]
 8001f42:	f7ff ff47 	bl	8001dd4 <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 8001f46:	6878      	ldr	r0, [r7, #4]
 8001f48:	f7ff ff8a 	bl	8001e60 <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 8001f4c:	2300      	movs	r3, #0
}
 8001f4e:	4618      	mov	r0, r3
 8001f50:	3710      	adds	r7, #16
 8001f52:	46bd      	mov	sp, r7
 8001f54:	bd80      	pop	{r7, pc}
 8001f56:	bf00      	nop
 8001f58:	40010000 	.word	0x40010000
 8001f5c:	40000400 	.word	0x40000400
 8001f60:	40000800 	.word	0x40000800
 8001f64:	40000c00 	.word	0x40000c00
 8001f68:	40014000 	.word	0x40014000
 8001f6c:	40014400 	.word	0x40014400
 8001f70:	40014800 	.word	0x40014800

08001f74 <LL_TIM_OC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx output channel is initialized
  *          - ERROR: TIMx output channel is not initialized
  */
ErrorStatus LL_TIM_OC_Init(TIM_TypeDef *TIMx, uint32_t Channel, const LL_TIM_OC_InitTypeDef *TIM_OC_InitStruct)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	b086      	sub	sp, #24
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	60f8      	str	r0, [r7, #12]
 8001f7c:	60b9      	str	r1, [r7, #8]
 8001f7e:	607a      	str	r2, [r7, #4]
  ErrorStatus result = ERROR;
 8001f80:	2301      	movs	r3, #1
 8001f82:	75fb      	strb	r3, [r7, #23]

  switch (Channel)
 8001f84:	68bb      	ldr	r3, [r7, #8]
 8001f86:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001f8a:	d027      	beq.n	8001fdc <LL_TIM_OC_Init+0x68>
 8001f8c:	68bb      	ldr	r3, [r7, #8]
 8001f8e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001f92:	d82a      	bhi.n	8001fea <LL_TIM_OC_Init+0x76>
 8001f94:	68bb      	ldr	r3, [r7, #8]
 8001f96:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001f9a:	d018      	beq.n	8001fce <LL_TIM_OC_Init+0x5a>
 8001f9c:	68bb      	ldr	r3, [r7, #8]
 8001f9e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001fa2:	d822      	bhi.n	8001fea <LL_TIM_OC_Init+0x76>
 8001fa4:	68bb      	ldr	r3, [r7, #8]
 8001fa6:	2b01      	cmp	r3, #1
 8001fa8:	d003      	beq.n	8001fb2 <LL_TIM_OC_Init+0x3e>
 8001faa:	68bb      	ldr	r3, [r7, #8]
 8001fac:	2b10      	cmp	r3, #16
 8001fae:	d007      	beq.n	8001fc0 <LL_TIM_OC_Init+0x4c>
      break;
    case LL_TIM_CHANNEL_CH4:
      result = OC4Config(TIMx, TIM_OC_InitStruct);
      break;
    default:
      break;
 8001fb0:	e01b      	b.n	8001fea <LL_TIM_OC_Init+0x76>
      result = OC1Config(TIMx, TIM_OC_InitStruct);
 8001fb2:	6879      	ldr	r1, [r7, #4]
 8001fb4:	68f8      	ldr	r0, [r7, #12]
 8001fb6:	f000 f81f 	bl	8001ff8 <OC1Config>
 8001fba:	4603      	mov	r3, r0
 8001fbc:	75fb      	strb	r3, [r7, #23]
      break;
 8001fbe:	e015      	b.n	8001fec <LL_TIM_OC_Init+0x78>
      result = OC2Config(TIMx, TIM_OC_InitStruct);
 8001fc0:	6879      	ldr	r1, [r7, #4]
 8001fc2:	68f8      	ldr	r0, [r7, #12]
 8001fc4:	f000 f87e 	bl	80020c4 <OC2Config>
 8001fc8:	4603      	mov	r3, r0
 8001fca:	75fb      	strb	r3, [r7, #23]
      break;
 8001fcc:	e00e      	b.n	8001fec <LL_TIM_OC_Init+0x78>
      result = OC3Config(TIMx, TIM_OC_InitStruct);
 8001fce:	6879      	ldr	r1, [r7, #4]
 8001fd0:	68f8      	ldr	r0, [r7, #12]
 8001fd2:	f000 f8e1 	bl	8002198 <OC3Config>
 8001fd6:	4603      	mov	r3, r0
 8001fd8:	75fb      	strb	r3, [r7, #23]
      break;
 8001fda:	e007      	b.n	8001fec <LL_TIM_OC_Init+0x78>
      result = OC4Config(TIMx, TIM_OC_InitStruct);
 8001fdc:	6879      	ldr	r1, [r7, #4]
 8001fde:	68f8      	ldr	r0, [r7, #12]
 8001fe0:	f000 f944 	bl	800226c <OC4Config>
 8001fe4:	4603      	mov	r3, r0
 8001fe6:	75fb      	strb	r3, [r7, #23]
      break;
 8001fe8:	e000      	b.n	8001fec <LL_TIM_OC_Init+0x78>
      break;
 8001fea:	bf00      	nop
  }

  return result;
 8001fec:	7dfb      	ldrb	r3, [r7, #23]
}
 8001fee:	4618      	mov	r0, r3
 8001ff0:	3718      	adds	r7, #24
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	bd80      	pop	{r7, pc}
	...

08001ff8 <OC1Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC1Config(TIM_TypeDef *TIMx, const LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	b086      	sub	sp, #24
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	6078      	str	r0, [r7, #4]
 8002000:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCMODE(TIM_OCInitStruct->OCMode));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));

  /* Disable the Channel 1: Reset the CC1E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC1E);
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	6a1b      	ldr	r3, [r3, #32]
 8002006:	f023 0201 	bic.w	r2, r3, #1
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	6a1b      	ldr	r3, [r3, #32]
 8002012:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	685b      	ldr	r3, [r3, #4]
 8002018:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	699b      	ldr	r3, [r3, #24]
 800201e:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC1S);
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	f023 0303 	bic.w	r3, r3, #3
 8002026:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC1M, TIM_OCInitStruct->OCMode);
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800202e:	683b      	ldr	r3, [r7, #0]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	4313      	orrs	r3, r2
 8002034:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC1P, TIM_OCInitStruct->OCPolarity);
 8002036:	697b      	ldr	r3, [r7, #20]
 8002038:	f023 0202 	bic.w	r2, r3, #2
 800203c:	683b      	ldr	r3, [r7, #0]
 800203e:	691b      	ldr	r3, [r3, #16]
 8002040:	4313      	orrs	r3, r2
 8002042:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC1E, TIM_OCInitStruct->OCState);
 8002044:	697b      	ldr	r3, [r7, #20]
 8002046:	f023 0201 	bic.w	r2, r3, #1
 800204a:	683b      	ldr	r3, [r7, #0]
 800204c:	685b      	ldr	r3, [r3, #4]
 800204e:	4313      	orrs	r3, r2
 8002050:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	4a1a      	ldr	r2, [pc, #104]	@ (80020c0 <OC1Config+0xc8>)
 8002056:	4293      	cmp	r3, r2
 8002058:	d11e      	bne.n	8002098 <OC1Config+0xa0>
    assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
    assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NP, TIM_OCInitStruct->OCNPolarity << 2U);
 800205a:	697b      	ldr	r3, [r7, #20]
 800205c:	f023 0208 	bic.w	r2, r3, #8
 8002060:	683b      	ldr	r3, [r7, #0]
 8002062:	695b      	ldr	r3, [r3, #20]
 8002064:	009b      	lsls	r3, r3, #2
 8002066:	4313      	orrs	r3, r2
 8002068:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NE, TIM_OCInitStruct->OCNState << 2U);
 800206a:	697b      	ldr	r3, [r7, #20]
 800206c:	f023 0204 	bic.w	r2, r3, #4
 8002070:	683b      	ldr	r3, [r7, #0]
 8002072:	689b      	ldr	r3, [r3, #8]
 8002074:	009b      	lsls	r3, r3, #2
 8002076:	4313      	orrs	r3, r2
 8002078:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1, TIM_OCInitStruct->OCIdleState);
 800207a:	693b      	ldr	r3, [r7, #16]
 800207c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002080:	683b      	ldr	r3, [r7, #0]
 8002082:	699b      	ldr	r3, [r3, #24]
 8002084:	4313      	orrs	r3, r2
 8002086:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1N, TIM_OCInitStruct->OCNIdleState << 1U);
 8002088:	693b      	ldr	r3, [r7, #16]
 800208a:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800208e:	683b      	ldr	r3, [r7, #0]
 8002090:	69db      	ldr	r3, [r3, #28]
 8002092:	005b      	lsls	r3, r3, #1
 8002094:	4313      	orrs	r3, r2
 8002096:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	693a      	ldr	r2, [r7, #16]
 800209c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	68fa      	ldr	r2, [r7, #12]
 80020a2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH1(TIMx, TIM_OCInitStruct->CompareValue);
 80020a4:	683b      	ldr	r3, [r7, #0]
 80020a6:	68db      	ldr	r3, [r3, #12]
 80020a8:	4619      	mov	r1, r3
 80020aa:	6878      	ldr	r0, [r7, #4]
 80020ac:	f7ff fea0 	bl	8001df0 <LL_TIM_OC_SetCompareCH1>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	697a      	ldr	r2, [r7, #20]
 80020b4:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 80020b6:	2300      	movs	r3, #0
}
 80020b8:	4618      	mov	r0, r3
 80020ba:	3718      	adds	r7, #24
 80020bc:	46bd      	mov	sp, r7
 80020be:	bd80      	pop	{r7, pc}
 80020c0:	40010000 	.word	0x40010000

080020c4 <OC2Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC2Config(TIM_TypeDef *TIMx, const LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	b086      	sub	sp, #24
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	6078      	str	r0, [r7, #4]
 80020cc:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCMODE(TIM_OCInitStruct->OCMode));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));

  /* Disable the Channel 2: Reset the CC2E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC2E);
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	6a1b      	ldr	r3, [r3, #32]
 80020d2:	f023 0210 	bic.w	r2, r3, #16
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	6a1b      	ldr	r3, [r3, #32]
 80020de:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	685b      	ldr	r3, [r3, #4]
 80020e4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	699b      	ldr	r3, [r3, #24]
 80020ea:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC2S);
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80020f2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC2M, TIM_OCInitStruct->OCMode << 8U);
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 80020fa:	683b      	ldr	r3, [r7, #0]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	021b      	lsls	r3, r3, #8
 8002100:	4313      	orrs	r3, r2
 8002102:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC2P, TIM_OCInitStruct->OCPolarity << 4U);
 8002104:	697b      	ldr	r3, [r7, #20]
 8002106:	f023 0220 	bic.w	r2, r3, #32
 800210a:	683b      	ldr	r3, [r7, #0]
 800210c:	691b      	ldr	r3, [r3, #16]
 800210e:	011b      	lsls	r3, r3, #4
 8002110:	4313      	orrs	r3, r2
 8002112:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC2E, TIM_OCInitStruct->OCState << 4U);
 8002114:	697b      	ldr	r3, [r7, #20]
 8002116:	f023 0210 	bic.w	r2, r3, #16
 800211a:	683b      	ldr	r3, [r7, #0]
 800211c:	685b      	ldr	r3, [r3, #4]
 800211e:	011b      	lsls	r3, r3, #4
 8002120:	4313      	orrs	r3, r2
 8002122:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	4a1b      	ldr	r2, [pc, #108]	@ (8002194 <OC2Config+0xd0>)
 8002128:	4293      	cmp	r3, r2
 800212a:	d11f      	bne.n	800216c <OC2Config+0xa8>
    assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
    assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NP, TIM_OCInitStruct->OCNPolarity << 6U);
 800212c:	697b      	ldr	r3, [r7, #20]
 800212e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002132:	683b      	ldr	r3, [r7, #0]
 8002134:	695b      	ldr	r3, [r3, #20]
 8002136:	019b      	lsls	r3, r3, #6
 8002138:	4313      	orrs	r3, r2
 800213a:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NE, TIM_OCInitStruct->OCNState << 6U);
 800213c:	697b      	ldr	r3, [r7, #20]
 800213e:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 8002142:	683b      	ldr	r3, [r7, #0]
 8002144:	689b      	ldr	r3, [r3, #8]
 8002146:	019b      	lsls	r3, r3, #6
 8002148:	4313      	orrs	r3, r2
 800214a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2, TIM_OCInitStruct->OCIdleState << 2U);
 800214c:	693b      	ldr	r3, [r7, #16]
 800214e:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8002152:	683b      	ldr	r3, [r7, #0]
 8002154:	699b      	ldr	r3, [r3, #24]
 8002156:	009b      	lsls	r3, r3, #2
 8002158:	4313      	orrs	r3, r2
 800215a:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2N, TIM_OCInitStruct->OCNIdleState << 3U);
 800215c:	693b      	ldr	r3, [r7, #16]
 800215e:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8002162:	683b      	ldr	r3, [r7, #0]
 8002164:	69db      	ldr	r3, [r3, #28]
 8002166:	00db      	lsls	r3, r3, #3
 8002168:	4313      	orrs	r3, r2
 800216a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	693a      	ldr	r2, [r7, #16]
 8002170:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	68fa      	ldr	r2, [r7, #12]
 8002176:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH2(TIMx, TIM_OCInitStruct->CompareValue);
 8002178:	683b      	ldr	r3, [r7, #0]
 800217a:	68db      	ldr	r3, [r3, #12]
 800217c:	4619      	mov	r1, r3
 800217e:	6878      	ldr	r0, [r7, #4]
 8002180:	f7ff fe44 	bl	8001e0c <LL_TIM_OC_SetCompareCH2>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	697a      	ldr	r2, [r7, #20]
 8002188:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 800218a:	2300      	movs	r3, #0
}
 800218c:	4618      	mov	r0, r3
 800218e:	3718      	adds	r7, #24
 8002190:	46bd      	mov	sp, r7
 8002192:	bd80      	pop	{r7, pc}
 8002194:	40010000 	.word	0x40010000

08002198 <OC3Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC3Config(TIM_TypeDef *TIMx, const LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8002198:	b580      	push	{r7, lr}
 800219a:	b086      	sub	sp, #24
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]
 80021a0:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCMODE(TIM_OCInitStruct->OCMode));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));

  /* Disable the Channel 3: Reset the CC3E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC3E);
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	6a1b      	ldr	r3, [r3, #32]
 80021a6:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	6a1b      	ldr	r3, [r3, #32]
 80021b2:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	685b      	ldr	r3, [r3, #4]
 80021b8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	69db      	ldr	r3, [r3, #28]
 80021be:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC3S);
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	f023 0303 	bic.w	r3, r3, #3
 80021c6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC3M, TIM_OCInitStruct->OCMode);
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80021ce:	683b      	ldr	r3, [r7, #0]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	4313      	orrs	r3, r2
 80021d4:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC3P, TIM_OCInitStruct->OCPolarity << 8U);
 80021d6:	697b      	ldr	r3, [r7, #20]
 80021d8:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 80021dc:	683b      	ldr	r3, [r7, #0]
 80021de:	691b      	ldr	r3, [r3, #16]
 80021e0:	021b      	lsls	r3, r3, #8
 80021e2:	4313      	orrs	r3, r2
 80021e4:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC3E, TIM_OCInitStruct->OCState << 8U);
 80021e6:	697b      	ldr	r3, [r7, #20]
 80021e8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80021ec:	683b      	ldr	r3, [r7, #0]
 80021ee:	685b      	ldr	r3, [r3, #4]
 80021f0:	021b      	lsls	r3, r3, #8
 80021f2:	4313      	orrs	r3, r2
 80021f4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	4a1b      	ldr	r2, [pc, #108]	@ (8002268 <OC3Config+0xd0>)
 80021fa:	4293      	cmp	r3, r2
 80021fc:	d11f      	bne.n	800223e <OC3Config+0xa6>
    assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
    assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NP, TIM_OCInitStruct->OCNPolarity << 10U);
 80021fe:	697b      	ldr	r3, [r7, #20]
 8002200:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8002204:	683b      	ldr	r3, [r7, #0]
 8002206:	695b      	ldr	r3, [r3, #20]
 8002208:	029b      	lsls	r3, r3, #10
 800220a:	4313      	orrs	r3, r2
 800220c:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NE, TIM_OCInitStruct->OCNState << 10U);
 800220e:	697b      	ldr	r3, [r7, #20]
 8002210:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8002214:	683b      	ldr	r3, [r7, #0]
 8002216:	689b      	ldr	r3, [r3, #8]
 8002218:	029b      	lsls	r3, r3, #10
 800221a:	4313      	orrs	r3, r2
 800221c:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3, TIM_OCInitStruct->OCIdleState << 4U);
 800221e:	693b      	ldr	r3, [r7, #16]
 8002220:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8002224:	683b      	ldr	r3, [r7, #0]
 8002226:	699b      	ldr	r3, [r3, #24]
 8002228:	011b      	lsls	r3, r3, #4
 800222a:	4313      	orrs	r3, r2
 800222c:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3N, TIM_OCInitStruct->OCNIdleState << 5U);
 800222e:	693b      	ldr	r3, [r7, #16]
 8002230:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8002234:	683b      	ldr	r3, [r7, #0]
 8002236:	69db      	ldr	r3, [r3, #28]
 8002238:	015b      	lsls	r3, r3, #5
 800223a:	4313      	orrs	r3, r2
 800223c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	693a      	ldr	r2, [r7, #16]
 8002242:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	68fa      	ldr	r2, [r7, #12]
 8002248:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH3(TIMx, TIM_OCInitStruct->CompareValue);
 800224a:	683b      	ldr	r3, [r7, #0]
 800224c:	68db      	ldr	r3, [r3, #12]
 800224e:	4619      	mov	r1, r3
 8002250:	6878      	ldr	r0, [r7, #4]
 8002252:	f7ff fde9 	bl	8001e28 <LL_TIM_OC_SetCompareCH3>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	697a      	ldr	r2, [r7, #20]
 800225a:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 800225c:	2300      	movs	r3, #0
}
 800225e:	4618      	mov	r0, r3
 8002260:	3718      	adds	r7, #24
 8002262:	46bd      	mov	sp, r7
 8002264:	bd80      	pop	{r7, pc}
 8002266:	bf00      	nop
 8002268:	40010000 	.word	0x40010000

0800226c <OC4Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC4Config(TIM_TypeDef *TIMx, const LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 800226c:	b580      	push	{r7, lr}
 800226e:	b086      	sub	sp, #24
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]
 8002274:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCMODE(TIM_OCInitStruct->OCMode));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));

  /* Disable the Channel 4: Reset the CC4E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC4E);
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	6a1b      	ldr	r3, [r3, #32]
 800227a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	6a1b      	ldr	r3, [r3, #32]
 8002286:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  LL_TIM_ReadReg(TIMx, CR2);
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	685b      	ldr	r3, [r3, #4]
 800228c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	69db      	ldr	r3, [r3, #28]
 8002292:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC4S);
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800229a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC4M, TIM_OCInitStruct->OCMode << 8U);
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 80022a2:	683b      	ldr	r3, [r7, #0]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	021b      	lsls	r3, r3, #8
 80022a8:	4313      	orrs	r3, r2
 80022aa:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC4P, TIM_OCInitStruct->OCPolarity << 12U);
 80022ac:	693b      	ldr	r3, [r7, #16]
 80022ae:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80022b2:	683b      	ldr	r3, [r7, #0]
 80022b4:	691b      	ldr	r3, [r3, #16]
 80022b6:	031b      	lsls	r3, r3, #12
 80022b8:	4313      	orrs	r3, r2
 80022ba:	613b      	str	r3, [r7, #16]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC4E, TIM_OCInitStruct->OCState << 12U);
 80022bc:	693b      	ldr	r3, [r7, #16]
 80022be:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80022c2:	683b      	ldr	r3, [r7, #0]
 80022c4:	685b      	ldr	r3, [r3, #4]
 80022c6:	031b      	lsls	r3, r3, #12
 80022c8:	4313      	orrs	r3, r2
 80022ca:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	4a0f      	ldr	r2, [pc, #60]	@ (800230c <OC4Config+0xa0>)
 80022d0:	4293      	cmp	r3, r2
 80022d2:	d107      	bne.n	80022e4 <OC4Config+0x78>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS4, TIM_OCInitStruct->OCIdleState << 6U);
 80022d4:	697b      	ldr	r3, [r7, #20]
 80022d6:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 80022da:	683b      	ldr	r3, [r7, #0]
 80022dc:	699b      	ldr	r3, [r3, #24]
 80022de:	019b      	lsls	r3, r3, #6
 80022e0:	4313      	orrs	r3, r2
 80022e2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	697a      	ldr	r2, [r7, #20]
 80022e8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	68fa      	ldr	r2, [r7, #12]
 80022ee:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH4(TIMx, TIM_OCInitStruct->CompareValue);
 80022f0:	683b      	ldr	r3, [r7, #0]
 80022f2:	68db      	ldr	r3, [r3, #12]
 80022f4:	4619      	mov	r1, r3
 80022f6:	6878      	ldr	r0, [r7, #4]
 80022f8:	f7ff fda4 	bl	8001e44 <LL_TIM_OC_SetCompareCH4>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	693a      	ldr	r2, [r7, #16]
 8002300:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8002302:	2300      	movs	r3, #0
}
 8002304:	4618      	mov	r0, r3
 8002306:	3718      	adds	r7, #24
 8002308:	46bd      	mov	sp, r7
 800230a:	bd80      	pop	{r7, pc}
 800230c:	40010000 	.word	0x40010000

08002310 <LL_USART_IsEnabled>:
{
 8002310:	b480      	push	{r7}
 8002312:	b083      	sub	sp, #12
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE));
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	68db      	ldr	r3, [r3, #12]
 800231c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002320:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002324:	bf0c      	ite	eq
 8002326:	2301      	moveq	r3, #1
 8002328:	2300      	movne	r3, #0
 800232a:	b2db      	uxtb	r3, r3
}
 800232c:	4618      	mov	r0, r3
 800232e:	370c      	adds	r7, #12
 8002330:	46bd      	mov	sp, r7
 8002332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002336:	4770      	bx	lr

08002338 <LL_USART_SetStopBitsLength>:
{
 8002338:	b480      	push	{r7}
 800233a:	b083      	sub	sp, #12
 800233c:	af00      	add	r7, sp, #0
 800233e:	6078      	str	r0, [r7, #4]
 8002340:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	691b      	ldr	r3, [r3, #16]
 8002346:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800234a:	683b      	ldr	r3, [r7, #0]
 800234c:	431a      	orrs	r2, r3
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	611a      	str	r2, [r3, #16]
}
 8002352:	bf00      	nop
 8002354:	370c      	adds	r7, #12
 8002356:	46bd      	mov	sp, r7
 8002358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235c:	4770      	bx	lr

0800235e <LL_USART_SetHWFlowCtrl>:
{
 800235e:	b480      	push	{r7}
 8002360:	b083      	sub	sp, #12
 8002362:	af00      	add	r7, sp, #0
 8002364:	6078      	str	r0, [r7, #4]
 8002366:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	695b      	ldr	r3, [r3, #20]
 800236c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002370:	683b      	ldr	r3, [r7, #0]
 8002372:	431a      	orrs	r2, r3
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	615a      	str	r2, [r3, #20]
}
 8002378:	bf00      	nop
 800237a:	370c      	adds	r7, #12
 800237c:	46bd      	mov	sp, r7
 800237e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002382:	4770      	bx	lr

08002384 <LL_USART_SetBaudRate>:
{
 8002384:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002388:	b0c0      	sub	sp, #256	@ 0x100
 800238a:	af00      	add	r7, sp, #0
 800238c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8002390:	f8c7 10f8 	str.w	r1, [r7, #248]	@ 0xf8
 8002394:	f8c7 20f4 	str.w	r2, [r7, #244]	@ 0xf4
 8002398:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 800239c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80023a0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80023a4:	f040 810c 	bne.w	80025c0 <LL_USART_SetBaudRate+0x23c>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 80023a8:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80023ac:	2200      	movs	r2, #0
 80023ae:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80023b2:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80023b6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80023ba:	4622      	mov	r2, r4
 80023bc:	462b      	mov	r3, r5
 80023be:	1891      	adds	r1, r2, r2
 80023c0:	6639      	str	r1, [r7, #96]	@ 0x60
 80023c2:	415b      	adcs	r3, r3
 80023c4:	667b      	str	r3, [r7, #100]	@ 0x64
 80023c6:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 80023ca:	4621      	mov	r1, r4
 80023cc:	eb12 0801 	adds.w	r8, r2, r1
 80023d0:	4629      	mov	r1, r5
 80023d2:	eb43 0901 	adc.w	r9, r3, r1
 80023d6:	f04f 0200 	mov.w	r2, #0
 80023da:	f04f 0300 	mov.w	r3, #0
 80023de:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80023e2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80023e6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80023ea:	4690      	mov	r8, r2
 80023ec:	4699      	mov	r9, r3
 80023ee:	4623      	mov	r3, r4
 80023f0:	eb18 0303 	adds.w	r3, r8, r3
 80023f4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80023f8:	462b      	mov	r3, r5
 80023fa:	eb49 0303 	adc.w	r3, r9, r3
 80023fe:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8002402:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8002406:	2200      	movs	r2, #0
 8002408:	469a      	mov	sl, r3
 800240a:	4693      	mov	fp, r2
 800240c:	eb1a 030a 	adds.w	r3, sl, sl
 8002410:	65bb      	str	r3, [r7, #88]	@ 0x58
 8002412:	eb4b 030b 	adc.w	r3, fp, fp
 8002416:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002418:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800241c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8002420:	f7fd fed8 	bl	80001d4 <__aeabi_uldivmod>
 8002424:	4602      	mov	r2, r0
 8002426:	460b      	mov	r3, r1
 8002428:	4b64      	ldr	r3, [pc, #400]	@ (80025bc <LL_USART_SetBaudRate+0x238>)
 800242a:	fba3 2302 	umull	r2, r3, r3, r2
 800242e:	095b      	lsrs	r3, r3, #5
 8002430:	b29b      	uxth	r3, r3
 8002432:	011b      	lsls	r3, r3, #4
 8002434:	b29c      	uxth	r4, r3
 8002436:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800243a:	2200      	movs	r2, #0
 800243c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8002440:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8002444:	e9d7 8936 	ldrd	r8, r9, [r7, #216]	@ 0xd8
 8002448:	4642      	mov	r2, r8
 800244a:	464b      	mov	r3, r9
 800244c:	1891      	adds	r1, r2, r2
 800244e:	6539      	str	r1, [r7, #80]	@ 0x50
 8002450:	415b      	adcs	r3, r3
 8002452:	657b      	str	r3, [r7, #84]	@ 0x54
 8002454:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8002458:	4641      	mov	r1, r8
 800245a:	1851      	adds	r1, r2, r1
 800245c:	64b9      	str	r1, [r7, #72]	@ 0x48
 800245e:	4649      	mov	r1, r9
 8002460:	414b      	adcs	r3, r1
 8002462:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002464:	f04f 0200 	mov.w	r2, #0
 8002468:	f04f 0300 	mov.w	r3, #0
 800246c:	e9d7 ab12 	ldrd	sl, fp, [r7, #72]	@ 0x48
 8002470:	4659      	mov	r1, fp
 8002472:	00cb      	lsls	r3, r1, #3
 8002474:	4651      	mov	r1, sl
 8002476:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800247a:	4651      	mov	r1, sl
 800247c:	00ca      	lsls	r2, r1, #3
 800247e:	4610      	mov	r0, r2
 8002480:	4619      	mov	r1, r3
 8002482:	4603      	mov	r3, r0
 8002484:	4642      	mov	r2, r8
 8002486:	189b      	adds	r3, r3, r2
 8002488:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800248c:	464b      	mov	r3, r9
 800248e:	460a      	mov	r2, r1
 8002490:	eb42 0303 	adc.w	r3, r2, r3
 8002494:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8002498:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800249c:	2200      	movs	r2, #0
 800249e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80024a2:	f8c7 20cc 	str.w	r2, [r7, #204]	@ 0xcc
 80024a6:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 80024aa:	460b      	mov	r3, r1
 80024ac:	18db      	adds	r3, r3, r3
 80024ae:	643b      	str	r3, [r7, #64]	@ 0x40
 80024b0:	4613      	mov	r3, r2
 80024b2:	eb42 0303 	adc.w	r3, r2, r3
 80024b6:	647b      	str	r3, [r7, #68]	@ 0x44
 80024b8:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80024bc:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	@ 0xd0
 80024c0:	f7fd fe88 	bl	80001d4 <__aeabi_uldivmod>
 80024c4:	4602      	mov	r2, r0
 80024c6:	460b      	mov	r3, r1
 80024c8:	4611      	mov	r1, r2
 80024ca:	4b3c      	ldr	r3, [pc, #240]	@ (80025bc <LL_USART_SetBaudRate+0x238>)
 80024cc:	fba3 2301 	umull	r2, r3, r3, r1
 80024d0:	095b      	lsrs	r3, r3, #5
 80024d2:	2264      	movs	r2, #100	@ 0x64
 80024d4:	fb02 f303 	mul.w	r3, r2, r3
 80024d8:	1acb      	subs	r3, r1, r3
 80024da:	00db      	lsls	r3, r3, #3
 80024dc:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80024e0:	4b36      	ldr	r3, [pc, #216]	@ (80025bc <LL_USART_SetBaudRate+0x238>)
 80024e2:	fba3 2302 	umull	r2, r3, r3, r2
 80024e6:	095b      	lsrs	r3, r3, #5
 80024e8:	b29b      	uxth	r3, r3
 80024ea:	005b      	lsls	r3, r3, #1
 80024ec:	b29b      	uxth	r3, r3
 80024ee:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80024f2:	b29b      	uxth	r3, r3
 80024f4:	4423      	add	r3, r4
 80024f6:	b29c      	uxth	r4, r3
 80024f8:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80024fc:	2200      	movs	r2, #0
 80024fe:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002502:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8002506:	e9d7 8930 	ldrd	r8, r9, [r7, #192]	@ 0xc0
 800250a:	4642      	mov	r2, r8
 800250c:	464b      	mov	r3, r9
 800250e:	1891      	adds	r1, r2, r2
 8002510:	63b9      	str	r1, [r7, #56]	@ 0x38
 8002512:	415b      	adcs	r3, r3
 8002514:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002516:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800251a:	4641      	mov	r1, r8
 800251c:	1851      	adds	r1, r2, r1
 800251e:	6339      	str	r1, [r7, #48]	@ 0x30
 8002520:	4649      	mov	r1, r9
 8002522:	414b      	adcs	r3, r1
 8002524:	637b      	str	r3, [r7, #52]	@ 0x34
 8002526:	f04f 0200 	mov.w	r2, #0
 800252a:	f04f 0300 	mov.w	r3, #0
 800252e:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8002532:	4659      	mov	r1, fp
 8002534:	00cb      	lsls	r3, r1, #3
 8002536:	4651      	mov	r1, sl
 8002538:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800253c:	4651      	mov	r1, sl
 800253e:	00ca      	lsls	r2, r1, #3
 8002540:	4610      	mov	r0, r2
 8002542:	4619      	mov	r1, r3
 8002544:	4603      	mov	r3, r0
 8002546:	4642      	mov	r2, r8
 8002548:	189b      	adds	r3, r3, r2
 800254a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800254e:	464b      	mov	r3, r9
 8002550:	460a      	mov	r2, r1
 8002552:	eb42 0303 	adc.w	r3, r2, r3
 8002556:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800255a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800255e:	2200      	movs	r2, #0
 8002560:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002564:	f8c7 20b4 	str.w	r2, [r7, #180]	@ 0xb4
 8002568:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 800256c:	460b      	mov	r3, r1
 800256e:	18db      	adds	r3, r3, r3
 8002570:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002572:	4613      	mov	r3, r2
 8002574:	eb42 0303 	adc.w	r3, r2, r3
 8002578:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800257a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800257e:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	@ 0xb8
 8002582:	f7fd fe27 	bl	80001d4 <__aeabi_uldivmod>
 8002586:	4602      	mov	r2, r0
 8002588:	460b      	mov	r3, r1
 800258a:	4b0c      	ldr	r3, [pc, #48]	@ (80025bc <LL_USART_SetBaudRate+0x238>)
 800258c:	fba3 1302 	umull	r1, r3, r3, r2
 8002590:	095b      	lsrs	r3, r3, #5
 8002592:	2164      	movs	r1, #100	@ 0x64
 8002594:	fb01 f303 	mul.w	r3, r1, r3
 8002598:	1ad3      	subs	r3, r2, r3
 800259a:	00db      	lsls	r3, r3, #3
 800259c:	3332      	adds	r3, #50	@ 0x32
 800259e:	4a07      	ldr	r2, [pc, #28]	@ (80025bc <LL_USART_SetBaudRate+0x238>)
 80025a0:	fba2 2303 	umull	r2, r3, r2, r3
 80025a4:	095b      	lsrs	r3, r3, #5
 80025a6:	b29b      	uxth	r3, r3
 80025a8:	f003 0307 	and.w	r3, r3, #7
 80025ac:	b29b      	uxth	r3, r3
 80025ae:	4423      	add	r3, r4
 80025b0:	b29b      	uxth	r3, r3
 80025b2:	461a      	mov	r2, r3
 80025b4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80025b8:	609a      	str	r2, [r3, #8]
}
 80025ba:	e108      	b.n	80027ce <LL_USART_SetBaudRate+0x44a>
 80025bc:	51eb851f 	.word	0x51eb851f
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 80025c0:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80025c4:	2200      	movs	r2, #0
 80025c6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80025ca:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80025ce:	e9d7 892a 	ldrd	r8, r9, [r7, #168]	@ 0xa8
 80025d2:	4642      	mov	r2, r8
 80025d4:	464b      	mov	r3, r9
 80025d6:	1891      	adds	r1, r2, r2
 80025d8:	6239      	str	r1, [r7, #32]
 80025da:	415b      	adcs	r3, r3
 80025dc:	627b      	str	r3, [r7, #36]	@ 0x24
 80025de:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80025e2:	4641      	mov	r1, r8
 80025e4:	1854      	adds	r4, r2, r1
 80025e6:	4649      	mov	r1, r9
 80025e8:	eb43 0501 	adc.w	r5, r3, r1
 80025ec:	f04f 0200 	mov.w	r2, #0
 80025f0:	f04f 0300 	mov.w	r3, #0
 80025f4:	00eb      	lsls	r3, r5, #3
 80025f6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80025fa:	00e2      	lsls	r2, r4, #3
 80025fc:	4614      	mov	r4, r2
 80025fe:	461d      	mov	r5, r3
 8002600:	4643      	mov	r3, r8
 8002602:	18e3      	adds	r3, r4, r3
 8002604:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8002608:	464b      	mov	r3, r9
 800260a:	eb45 0303 	adc.w	r3, r5, r3
 800260e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8002612:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8002616:	2200      	movs	r2, #0
 8002618:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800261c:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8002620:	f04f 0200 	mov.w	r2, #0
 8002624:	f04f 0300 	mov.w	r3, #0
 8002628:	e9d7 4526 	ldrd	r4, r5, [r7, #152]	@ 0x98
 800262c:	4629      	mov	r1, r5
 800262e:	008b      	lsls	r3, r1, #2
 8002630:	4621      	mov	r1, r4
 8002632:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002636:	4621      	mov	r1, r4
 8002638:	008a      	lsls	r2, r1, #2
 800263a:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	@ 0xa0
 800263e:	f7fd fdc9 	bl	80001d4 <__aeabi_uldivmod>
 8002642:	4602      	mov	r2, r0
 8002644:	460b      	mov	r3, r1
 8002646:	4b65      	ldr	r3, [pc, #404]	@ (80027dc <LL_USART_SetBaudRate+0x458>)
 8002648:	fba3 2302 	umull	r2, r3, r3, r2
 800264c:	095b      	lsrs	r3, r3, #5
 800264e:	b29b      	uxth	r3, r3
 8002650:	011b      	lsls	r3, r3, #4
 8002652:	b29c      	uxth	r4, r3
 8002654:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8002658:	2200      	movs	r2, #0
 800265a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800265e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8002662:	e9d7 8924 	ldrd	r8, r9, [r7, #144]	@ 0x90
 8002666:	4642      	mov	r2, r8
 8002668:	464b      	mov	r3, r9
 800266a:	1891      	adds	r1, r2, r2
 800266c:	61b9      	str	r1, [r7, #24]
 800266e:	415b      	adcs	r3, r3
 8002670:	61fb      	str	r3, [r7, #28]
 8002672:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002676:	4641      	mov	r1, r8
 8002678:	1851      	adds	r1, r2, r1
 800267a:	6139      	str	r1, [r7, #16]
 800267c:	4649      	mov	r1, r9
 800267e:	414b      	adcs	r3, r1
 8002680:	617b      	str	r3, [r7, #20]
 8002682:	f04f 0200 	mov.w	r2, #0
 8002686:	f04f 0300 	mov.w	r3, #0
 800268a:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800268e:	4659      	mov	r1, fp
 8002690:	00cb      	lsls	r3, r1, #3
 8002692:	4651      	mov	r1, sl
 8002694:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002698:	4651      	mov	r1, sl
 800269a:	00ca      	lsls	r2, r1, #3
 800269c:	4610      	mov	r0, r2
 800269e:	4619      	mov	r1, r3
 80026a0:	4603      	mov	r3, r0
 80026a2:	4642      	mov	r2, r8
 80026a4:	189b      	adds	r3, r3, r2
 80026a6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80026aa:	464b      	mov	r3, r9
 80026ac:	460a      	mov	r2, r1
 80026ae:	eb42 0303 	adc.w	r3, r2, r3
 80026b2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80026b6:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80026ba:	2200      	movs	r2, #0
 80026bc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80026c0:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 80026c4:	f04f 0200 	mov.w	r2, #0
 80026c8:	f04f 0300 	mov.w	r3, #0
 80026cc:	e9d7 8920 	ldrd	r8, r9, [r7, #128]	@ 0x80
 80026d0:	4649      	mov	r1, r9
 80026d2:	008b      	lsls	r3, r1, #2
 80026d4:	4641      	mov	r1, r8
 80026d6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80026da:	4641      	mov	r1, r8
 80026dc:	008a      	lsls	r2, r1, #2
 80026de:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	@ 0x88
 80026e2:	f7fd fd77 	bl	80001d4 <__aeabi_uldivmod>
 80026e6:	4602      	mov	r2, r0
 80026e8:	460b      	mov	r3, r1
 80026ea:	4611      	mov	r1, r2
 80026ec:	4b3b      	ldr	r3, [pc, #236]	@ (80027dc <LL_USART_SetBaudRate+0x458>)
 80026ee:	fba3 2301 	umull	r2, r3, r3, r1
 80026f2:	095b      	lsrs	r3, r3, #5
 80026f4:	2264      	movs	r2, #100	@ 0x64
 80026f6:	fb02 f303 	mul.w	r3, r2, r3
 80026fa:	1acb      	subs	r3, r1, r3
 80026fc:	011b      	lsls	r3, r3, #4
 80026fe:	3332      	adds	r3, #50	@ 0x32
 8002700:	4a36      	ldr	r2, [pc, #216]	@ (80027dc <LL_USART_SetBaudRate+0x458>)
 8002702:	fba2 2303 	umull	r2, r3, r2, r3
 8002706:	095b      	lsrs	r3, r3, #5
 8002708:	b29b      	uxth	r3, r3
 800270a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800270e:	b29b      	uxth	r3, r3
 8002710:	4423      	add	r3, r4
 8002712:	b29c      	uxth	r4, r3
 8002714:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8002718:	2200      	movs	r2, #0
 800271a:	67bb      	str	r3, [r7, #120]	@ 0x78
 800271c:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800271e:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8002722:	4642      	mov	r2, r8
 8002724:	464b      	mov	r3, r9
 8002726:	1891      	adds	r1, r2, r2
 8002728:	60b9      	str	r1, [r7, #8]
 800272a:	415b      	adcs	r3, r3
 800272c:	60fb      	str	r3, [r7, #12]
 800272e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002732:	4641      	mov	r1, r8
 8002734:	1851      	adds	r1, r2, r1
 8002736:	6039      	str	r1, [r7, #0]
 8002738:	4649      	mov	r1, r9
 800273a:	414b      	adcs	r3, r1
 800273c:	607b      	str	r3, [r7, #4]
 800273e:	f04f 0200 	mov.w	r2, #0
 8002742:	f04f 0300 	mov.w	r3, #0
 8002746:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800274a:	4659      	mov	r1, fp
 800274c:	00cb      	lsls	r3, r1, #3
 800274e:	4651      	mov	r1, sl
 8002750:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002754:	4651      	mov	r1, sl
 8002756:	00ca      	lsls	r2, r1, #3
 8002758:	4610      	mov	r0, r2
 800275a:	4619      	mov	r1, r3
 800275c:	4603      	mov	r3, r0
 800275e:	4642      	mov	r2, r8
 8002760:	189b      	adds	r3, r3, r2
 8002762:	673b      	str	r3, [r7, #112]	@ 0x70
 8002764:	464b      	mov	r3, r9
 8002766:	460a      	mov	r2, r1
 8002768:	eb42 0303 	adc.w	r3, r2, r3
 800276c:	677b      	str	r3, [r7, #116]	@ 0x74
 800276e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8002772:	2200      	movs	r2, #0
 8002774:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002776:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8002778:	f04f 0200 	mov.w	r2, #0
 800277c:	f04f 0300 	mov.w	r3, #0
 8002780:	e9d7 891a 	ldrd	r8, r9, [r7, #104]	@ 0x68
 8002784:	4649      	mov	r1, r9
 8002786:	008b      	lsls	r3, r1, #2
 8002788:	4641      	mov	r1, r8
 800278a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800278e:	4641      	mov	r1, r8
 8002790:	008a      	lsls	r2, r1, #2
 8002792:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 8002796:	f7fd fd1d 	bl	80001d4 <__aeabi_uldivmod>
 800279a:	4602      	mov	r2, r0
 800279c:	460b      	mov	r3, r1
 800279e:	4b0f      	ldr	r3, [pc, #60]	@ (80027dc <LL_USART_SetBaudRate+0x458>)
 80027a0:	fba3 1302 	umull	r1, r3, r3, r2
 80027a4:	095b      	lsrs	r3, r3, #5
 80027a6:	2164      	movs	r1, #100	@ 0x64
 80027a8:	fb01 f303 	mul.w	r3, r1, r3
 80027ac:	1ad3      	subs	r3, r2, r3
 80027ae:	011b      	lsls	r3, r3, #4
 80027b0:	3332      	adds	r3, #50	@ 0x32
 80027b2:	4a0a      	ldr	r2, [pc, #40]	@ (80027dc <LL_USART_SetBaudRate+0x458>)
 80027b4:	fba2 2303 	umull	r2, r3, r2, r3
 80027b8:	095b      	lsrs	r3, r3, #5
 80027ba:	b29b      	uxth	r3, r3
 80027bc:	f003 030f 	and.w	r3, r3, #15
 80027c0:	b29b      	uxth	r3, r3
 80027c2:	4423      	add	r3, r4
 80027c4:	b29b      	uxth	r3, r3
 80027c6:	461a      	mov	r2, r3
 80027c8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80027cc:	609a      	str	r2, [r3, #8]
}
 80027ce:	bf00      	nop
 80027d0:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80027d4:	46bd      	mov	sp, r7
 80027d6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80027da:	bf00      	nop
 80027dc:	51eb851f 	.word	0x51eb851f

080027e0 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, const LL_USART_InitTypeDef *USART_InitStruct)
{
 80027e0:	b580      	push	{r7, lr}
 80027e2:	b088      	sub	sp, #32
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	6078      	str	r0, [r7, #4]
 80027e8:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 80027ea:	2301      	movs	r3, #1
 80027ec:	77fb      	strb	r3, [r7, #31]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 80027ee:	2300      	movs	r3, #0
 80027f0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 80027f2:	6878      	ldr	r0, [r7, #4]
 80027f4:	f7ff fd8c 	bl	8002310 <LL_USART_IsEnabled>
 80027f8:	4603      	mov	r3, r0
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d149      	bne.n	8002892 <LL_USART_Init+0xb2>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	68db      	ldr	r3, [r3, #12]
 8002802:	f423 4316 	bic.w	r3, r3, #38400	@ 0x9600
 8002806:	f023 030c 	bic.w	r3, r3, #12
 800280a:	683a      	ldr	r2, [r7, #0]
 800280c:	6851      	ldr	r1, [r2, #4]
 800280e:	683a      	ldr	r2, [r7, #0]
 8002810:	68d2      	ldr	r2, [r2, #12]
 8002812:	4311      	orrs	r1, r2
 8002814:	683a      	ldr	r2, [r7, #0]
 8002816:	6912      	ldr	r2, [r2, #16]
 8002818:	4311      	orrs	r1, r2
 800281a:	683a      	ldr	r2, [r7, #0]
 800281c:	6992      	ldr	r2, [r2, #24]
 800281e:	430a      	orrs	r2, r1
 8002820:	431a      	orrs	r2, r3
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	60da      	str	r2, [r3, #12]
    /*---------------------------- USART CR2 Configuration -----------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 8002826:	683b      	ldr	r3, [r7, #0]
 8002828:	689b      	ldr	r3, [r3, #8]
 800282a:	4619      	mov	r1, r3
 800282c:	6878      	ldr	r0, [r7, #4]
 800282e:	f7ff fd83 	bl	8002338 <LL_USART_SetStopBitsLength>

    /*---------------------------- USART CR3 Configuration -----------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 8002832:	683b      	ldr	r3, [r7, #0]
 8002834:	695b      	ldr	r3, [r3, #20]
 8002836:	4619      	mov	r1, r3
 8002838:	6878      	ldr	r0, [r7, #4]
 800283a:	f7ff fd90 	bl	800235e <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration -----------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 800283e:	f107 0308 	add.w	r3, r7, #8
 8002842:	4618      	mov	r0, r3
 8002844:	f7ff f9e0 	bl	8001c08 <LL_RCC_GetSystemClocksFreq>
    if (USARTx == USART1)
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	4a14      	ldr	r2, [pc, #80]	@ (800289c <LL_USART_Init+0xbc>)
 800284c:	4293      	cmp	r3, r2
 800284e:	d102      	bne.n	8002856 <LL_USART_Init+0x76>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 8002850:	697b      	ldr	r3, [r7, #20]
 8002852:	61bb      	str	r3, [r7, #24]
 8002854:	e00c      	b.n	8002870 <LL_USART_Init+0x90>
    }
    else if (USARTx == USART2)
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	4a11      	ldr	r2, [pc, #68]	@ (80028a0 <LL_USART_Init+0xc0>)
 800285a:	4293      	cmp	r3, r2
 800285c:	d102      	bne.n	8002864 <LL_USART_Init+0x84>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 800285e:	693b      	ldr	r3, [r7, #16]
 8002860:	61bb      	str	r3, [r7, #24]
 8002862:	e005      	b.n	8002870 <LL_USART_Init+0x90>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
    }
#endif /* USART3 */
#if defined(USART6)
    else if (USARTx == USART6)
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	4a0f      	ldr	r2, [pc, #60]	@ (80028a4 <LL_USART_Init+0xc4>)
 8002868:	4293      	cmp	r3, r2
 800286a:	d101      	bne.n	8002870 <LL_USART_Init+0x90>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 800286c:	697b      	ldr	r3, [r7, #20]
 800286e:	61bb      	str	r3, [r7, #24]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 8002870:	69bb      	ldr	r3, [r7, #24]
 8002872:	2b00      	cmp	r3, #0
 8002874:	d00d      	beq.n	8002892 <LL_USART_Init+0xb2>
        && (USART_InitStruct->BaudRate != 0U))
 8002876:	683b      	ldr	r3, [r7, #0]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	2b00      	cmp	r3, #0
 800287c:	d009      	beq.n	8002892 <LL_USART_Init+0xb2>
    {
      status = SUCCESS;
 800287e:	2300      	movs	r3, #0
 8002880:	77fb      	strb	r3, [r7, #31]
      LL_USART_SetBaudRate(USARTx,
                           periphclk,
                           USART_InitStruct->OverSampling,
 8002882:	683b      	ldr	r3, [r7, #0]
 8002884:	699a      	ldr	r2, [r3, #24]
                           USART_InitStruct->BaudRate);
 8002886:	683b      	ldr	r3, [r7, #0]
 8002888:	681b      	ldr	r3, [r3, #0]
      LL_USART_SetBaudRate(USARTx,
 800288a:	69b9      	ldr	r1, [r7, #24]
 800288c:	6878      	ldr	r0, [r7, #4]
 800288e:	f7ff fd79 	bl	8002384 <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MIN(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 8002892:	7ffb      	ldrb	r3, [r7, #31]
}
 8002894:	4618      	mov	r0, r3
 8002896:	3720      	adds	r7, #32
 8002898:	46bd      	mov	sp, r7
 800289a:	bd80      	pop	{r7, pc}
 800289c:	40011000 	.word	0x40011000
 80028a0:	40004400 	.word	0x40004400
 80028a4:	40011400 	.word	0x40011400

080028a8 <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Frequency of Ticks (Hz)
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 80028a8:	b480      	push	{r7}
 80028aa:	b083      	sub	sp, #12
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	6078      	str	r0, [r7, #4]
 80028b0:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 80028b2:	687a      	ldr	r2, [r7, #4]
 80028b4:	683b      	ldr	r3, [r7, #0]
 80028b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80028ba:	4a07      	ldr	r2, [pc, #28]	@ (80028d8 <LL_InitTick+0x30>)
 80028bc:	3b01      	subs	r3, #1
 80028be:	6053      	str	r3, [r2, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 80028c0:	4b05      	ldr	r3, [pc, #20]	@ (80028d8 <LL_InitTick+0x30>)
 80028c2:	2200      	movs	r2, #0
 80028c4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80028c6:	4b04      	ldr	r3, [pc, #16]	@ (80028d8 <LL_InitTick+0x30>)
 80028c8:	2205      	movs	r2, #5
 80028ca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 80028cc:	bf00      	nop
 80028ce:	370c      	adds	r7, #12
 80028d0:	46bd      	mov	sp, r7
 80028d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d6:	4770      	bx	lr
 80028d8:	e000e010 	.word	0xe000e010

080028dc <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 80028dc:	b580      	push	{r7, lr}
 80028de:	b082      	sub	sp, #8
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 80028e4:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80028e8:	6878      	ldr	r0, [r7, #4]
 80028ea:	f7ff ffdd 	bl	80028a8 <LL_InitTick>
}
 80028ee:	bf00      	nop
 80028f0:	3708      	adds	r7, #8
 80028f2:	46bd      	mov	sp, r7
 80028f4:	bd80      	pop	{r7, pc}
	...

080028f8 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 80028f8:	b480      	push	{r7}
 80028fa:	b083      	sub	sp, #12
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8002900:	4a04      	ldr	r2, [pc, #16]	@ (8002914 <LL_SetSystemCoreClock+0x1c>)
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	6013      	str	r3, [r2, #0]
}
 8002906:	bf00      	nop
 8002908:	370c      	adds	r7, #12
 800290a:	46bd      	mov	sp, r7
 800290c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002910:	4770      	bx	lr
 8002912:	bf00      	nop
 8002914:	20000000 	.word	0x20000000

08002918 <memset>:
 8002918:	4402      	add	r2, r0
 800291a:	4603      	mov	r3, r0
 800291c:	4293      	cmp	r3, r2
 800291e:	d100      	bne.n	8002922 <memset+0xa>
 8002920:	4770      	bx	lr
 8002922:	f803 1b01 	strb.w	r1, [r3], #1
 8002926:	e7f9      	b.n	800291c <memset+0x4>

08002928 <__libc_init_array>:
 8002928:	b570      	push	{r4, r5, r6, lr}
 800292a:	4d0d      	ldr	r5, [pc, #52]	@ (8002960 <__libc_init_array+0x38>)
 800292c:	4c0d      	ldr	r4, [pc, #52]	@ (8002964 <__libc_init_array+0x3c>)
 800292e:	1b64      	subs	r4, r4, r5
 8002930:	10a4      	asrs	r4, r4, #2
 8002932:	2600      	movs	r6, #0
 8002934:	42a6      	cmp	r6, r4
 8002936:	d109      	bne.n	800294c <__libc_init_array+0x24>
 8002938:	4d0b      	ldr	r5, [pc, #44]	@ (8002968 <__libc_init_array+0x40>)
 800293a:	4c0c      	ldr	r4, [pc, #48]	@ (800296c <__libc_init_array+0x44>)
 800293c:	f000 f818 	bl	8002970 <_init>
 8002940:	1b64      	subs	r4, r4, r5
 8002942:	10a4      	asrs	r4, r4, #2
 8002944:	2600      	movs	r6, #0
 8002946:	42a6      	cmp	r6, r4
 8002948:	d105      	bne.n	8002956 <__libc_init_array+0x2e>
 800294a:	bd70      	pop	{r4, r5, r6, pc}
 800294c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002950:	4798      	blx	r3
 8002952:	3601      	adds	r6, #1
 8002954:	e7ee      	b.n	8002934 <__libc_init_array+0xc>
 8002956:	f855 3b04 	ldr.w	r3, [r5], #4
 800295a:	4798      	blx	r3
 800295c:	3601      	adds	r6, #1
 800295e:	e7f2      	b.n	8002946 <__libc_init_array+0x1e>
 8002960:	080029b8 	.word	0x080029b8
 8002964:	080029b8 	.word	0x080029b8
 8002968:	080029b8 	.word	0x080029b8
 800296c:	080029bc 	.word	0x080029bc

08002970 <_init>:
 8002970:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002972:	bf00      	nop
 8002974:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002976:	bc08      	pop	{r3}
 8002978:	469e      	mov	lr, r3
 800297a:	4770      	bx	lr

0800297c <_fini>:
 800297c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800297e:	bf00      	nop
 8002980:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002982:	bc08      	pop	{r3}
 8002984:	469e      	mov	lr, r3
 8002986:	4770      	bx	lr
