
Lab9.1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003324  08000194  08000194  00001194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  080034b8  080034b8  000044b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080034d0  080034d0  0000500c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080034d0  080034d0  000044d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080034d8  080034d8  0000500c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080034d8  080034d8  000044d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080034dc  080034dc  000044dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  080034e0  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b0  2000000c  080034ec  0000500c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000bc  080034ec  000050bc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000500c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000bf2c  00000000  00000000  0000503c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000203f  00000000  00000000  00010f68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e10  00000000  00000000  00012fa8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000aba  00000000  00000000  00013db8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018c93  00000000  00000000  00014872  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e2d9  00000000  00000000  0002d505  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009f17d  00000000  00000000  0003b7de  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000da95b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003ae8  00000000  00000000  000da9a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000073  00000000  00000000  000de488  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	@ (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	2000000c 	.word	0x2000000c
 80001b0:	00000000 	.word	0x00000000
 80001b4:	080034a0 	.word	0x080034a0

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	@ (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	@ (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	@ (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000010 	.word	0x20000010
 80001d0:	080034a0 	.word	0x080034a0

080001d4 <__aeabi_uldivmod>:
 80001d4:	b953      	cbnz	r3, 80001ec <__aeabi_uldivmod+0x18>
 80001d6:	b94a      	cbnz	r2, 80001ec <__aeabi_uldivmod+0x18>
 80001d8:	2900      	cmp	r1, #0
 80001da:	bf08      	it	eq
 80001dc:	2800      	cmpeq	r0, #0
 80001de:	bf1c      	itt	ne
 80001e0:	f04f 31ff 	movne.w	r1, #4294967295
 80001e4:	f04f 30ff 	movne.w	r0, #4294967295
 80001e8:	f000 b988 	b.w	80004fc <__aeabi_idiv0>
 80001ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f4:	f000 f806 	bl	8000204 <__udivmoddi4>
 80001f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000200:	b004      	add	sp, #16
 8000202:	4770      	bx	lr

08000204 <__udivmoddi4>:
 8000204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000208:	9d08      	ldr	r5, [sp, #32]
 800020a:	468e      	mov	lr, r1
 800020c:	4604      	mov	r4, r0
 800020e:	4688      	mov	r8, r1
 8000210:	2b00      	cmp	r3, #0
 8000212:	d14a      	bne.n	80002aa <__udivmoddi4+0xa6>
 8000214:	428a      	cmp	r2, r1
 8000216:	4617      	mov	r7, r2
 8000218:	d962      	bls.n	80002e0 <__udivmoddi4+0xdc>
 800021a:	fab2 f682 	clz	r6, r2
 800021e:	b14e      	cbz	r6, 8000234 <__udivmoddi4+0x30>
 8000220:	f1c6 0320 	rsb	r3, r6, #32
 8000224:	fa01 f806 	lsl.w	r8, r1, r6
 8000228:	fa20 f303 	lsr.w	r3, r0, r3
 800022c:	40b7      	lsls	r7, r6
 800022e:	ea43 0808 	orr.w	r8, r3, r8
 8000232:	40b4      	lsls	r4, r6
 8000234:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000238:	fa1f fc87 	uxth.w	ip, r7
 800023c:	fbb8 f1fe 	udiv	r1, r8, lr
 8000240:	0c23      	lsrs	r3, r4, #16
 8000242:	fb0e 8811 	mls	r8, lr, r1, r8
 8000246:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800024a:	fb01 f20c 	mul.w	r2, r1, ip
 800024e:	429a      	cmp	r2, r3
 8000250:	d909      	bls.n	8000266 <__udivmoddi4+0x62>
 8000252:	18fb      	adds	r3, r7, r3
 8000254:	f101 30ff 	add.w	r0, r1, #4294967295
 8000258:	f080 80ea 	bcs.w	8000430 <__udivmoddi4+0x22c>
 800025c:	429a      	cmp	r2, r3
 800025e:	f240 80e7 	bls.w	8000430 <__udivmoddi4+0x22c>
 8000262:	3902      	subs	r1, #2
 8000264:	443b      	add	r3, r7
 8000266:	1a9a      	subs	r2, r3, r2
 8000268:	b2a3      	uxth	r3, r4
 800026a:	fbb2 f0fe 	udiv	r0, r2, lr
 800026e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000272:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000276:	fb00 fc0c 	mul.w	ip, r0, ip
 800027a:	459c      	cmp	ip, r3
 800027c:	d909      	bls.n	8000292 <__udivmoddi4+0x8e>
 800027e:	18fb      	adds	r3, r7, r3
 8000280:	f100 32ff 	add.w	r2, r0, #4294967295
 8000284:	f080 80d6 	bcs.w	8000434 <__udivmoddi4+0x230>
 8000288:	459c      	cmp	ip, r3
 800028a:	f240 80d3 	bls.w	8000434 <__udivmoddi4+0x230>
 800028e:	443b      	add	r3, r7
 8000290:	3802      	subs	r0, #2
 8000292:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000296:	eba3 030c 	sub.w	r3, r3, ip
 800029a:	2100      	movs	r1, #0
 800029c:	b11d      	cbz	r5, 80002a6 <__udivmoddi4+0xa2>
 800029e:	40f3      	lsrs	r3, r6
 80002a0:	2200      	movs	r2, #0
 80002a2:	e9c5 3200 	strd	r3, r2, [r5]
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	428b      	cmp	r3, r1
 80002ac:	d905      	bls.n	80002ba <__udivmoddi4+0xb6>
 80002ae:	b10d      	cbz	r5, 80002b4 <__udivmoddi4+0xb0>
 80002b0:	e9c5 0100 	strd	r0, r1, [r5]
 80002b4:	2100      	movs	r1, #0
 80002b6:	4608      	mov	r0, r1
 80002b8:	e7f5      	b.n	80002a6 <__udivmoddi4+0xa2>
 80002ba:	fab3 f183 	clz	r1, r3
 80002be:	2900      	cmp	r1, #0
 80002c0:	d146      	bne.n	8000350 <__udivmoddi4+0x14c>
 80002c2:	4573      	cmp	r3, lr
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xc8>
 80002c6:	4282      	cmp	r2, r0
 80002c8:	f200 8105 	bhi.w	80004d6 <__udivmoddi4+0x2d2>
 80002cc:	1a84      	subs	r4, r0, r2
 80002ce:	eb6e 0203 	sbc.w	r2, lr, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	4690      	mov	r8, r2
 80002d6:	2d00      	cmp	r5, #0
 80002d8:	d0e5      	beq.n	80002a6 <__udivmoddi4+0xa2>
 80002da:	e9c5 4800 	strd	r4, r8, [r5]
 80002de:	e7e2      	b.n	80002a6 <__udivmoddi4+0xa2>
 80002e0:	2a00      	cmp	r2, #0
 80002e2:	f000 8090 	beq.w	8000406 <__udivmoddi4+0x202>
 80002e6:	fab2 f682 	clz	r6, r2
 80002ea:	2e00      	cmp	r6, #0
 80002ec:	f040 80a4 	bne.w	8000438 <__udivmoddi4+0x234>
 80002f0:	1a8a      	subs	r2, r1, r2
 80002f2:	0c03      	lsrs	r3, r0, #16
 80002f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002f8:	b280      	uxth	r0, r0
 80002fa:	b2bc      	uxth	r4, r7
 80002fc:	2101      	movs	r1, #1
 80002fe:	fbb2 fcfe 	udiv	ip, r2, lr
 8000302:	fb0e 221c 	mls	r2, lr, ip, r2
 8000306:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800030a:	fb04 f20c 	mul.w	r2, r4, ip
 800030e:	429a      	cmp	r2, r3
 8000310:	d907      	bls.n	8000322 <__udivmoddi4+0x11e>
 8000312:	18fb      	adds	r3, r7, r3
 8000314:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000318:	d202      	bcs.n	8000320 <__udivmoddi4+0x11c>
 800031a:	429a      	cmp	r2, r3
 800031c:	f200 80e0 	bhi.w	80004e0 <__udivmoddi4+0x2dc>
 8000320:	46c4      	mov	ip, r8
 8000322:	1a9b      	subs	r3, r3, r2
 8000324:	fbb3 f2fe 	udiv	r2, r3, lr
 8000328:	fb0e 3312 	mls	r3, lr, r2, r3
 800032c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000330:	fb02 f404 	mul.w	r4, r2, r4
 8000334:	429c      	cmp	r4, r3
 8000336:	d907      	bls.n	8000348 <__udivmoddi4+0x144>
 8000338:	18fb      	adds	r3, r7, r3
 800033a:	f102 30ff 	add.w	r0, r2, #4294967295
 800033e:	d202      	bcs.n	8000346 <__udivmoddi4+0x142>
 8000340:	429c      	cmp	r4, r3
 8000342:	f200 80ca 	bhi.w	80004da <__udivmoddi4+0x2d6>
 8000346:	4602      	mov	r2, r0
 8000348:	1b1b      	subs	r3, r3, r4
 800034a:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800034e:	e7a5      	b.n	800029c <__udivmoddi4+0x98>
 8000350:	f1c1 0620 	rsb	r6, r1, #32
 8000354:	408b      	lsls	r3, r1
 8000356:	fa22 f706 	lsr.w	r7, r2, r6
 800035a:	431f      	orrs	r7, r3
 800035c:	fa0e f401 	lsl.w	r4, lr, r1
 8000360:	fa20 f306 	lsr.w	r3, r0, r6
 8000364:	fa2e fe06 	lsr.w	lr, lr, r6
 8000368:	ea4f 4917 	mov.w	r9, r7, lsr #16
 800036c:	4323      	orrs	r3, r4
 800036e:	fa00 f801 	lsl.w	r8, r0, r1
 8000372:	fa1f fc87 	uxth.w	ip, r7
 8000376:	fbbe f0f9 	udiv	r0, lr, r9
 800037a:	0c1c      	lsrs	r4, r3, #16
 800037c:	fb09 ee10 	mls	lr, r9, r0, lr
 8000380:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000384:	fb00 fe0c 	mul.w	lr, r0, ip
 8000388:	45a6      	cmp	lr, r4
 800038a:	fa02 f201 	lsl.w	r2, r2, r1
 800038e:	d909      	bls.n	80003a4 <__udivmoddi4+0x1a0>
 8000390:	193c      	adds	r4, r7, r4
 8000392:	f100 3aff 	add.w	sl, r0, #4294967295
 8000396:	f080 809c 	bcs.w	80004d2 <__udivmoddi4+0x2ce>
 800039a:	45a6      	cmp	lr, r4
 800039c:	f240 8099 	bls.w	80004d2 <__udivmoddi4+0x2ce>
 80003a0:	3802      	subs	r0, #2
 80003a2:	443c      	add	r4, r7
 80003a4:	eba4 040e 	sub.w	r4, r4, lr
 80003a8:	fa1f fe83 	uxth.w	lr, r3
 80003ac:	fbb4 f3f9 	udiv	r3, r4, r9
 80003b0:	fb09 4413 	mls	r4, r9, r3, r4
 80003b4:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003b8:	fb03 fc0c 	mul.w	ip, r3, ip
 80003bc:	45a4      	cmp	ip, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1ce>
 80003c0:	193c      	adds	r4, r7, r4
 80003c2:	f103 3eff 	add.w	lr, r3, #4294967295
 80003c6:	f080 8082 	bcs.w	80004ce <__udivmoddi4+0x2ca>
 80003ca:	45a4      	cmp	ip, r4
 80003cc:	d97f      	bls.n	80004ce <__udivmoddi4+0x2ca>
 80003ce:	3b02      	subs	r3, #2
 80003d0:	443c      	add	r4, r7
 80003d2:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003d6:	eba4 040c 	sub.w	r4, r4, ip
 80003da:	fba0 ec02 	umull	lr, ip, r0, r2
 80003de:	4564      	cmp	r4, ip
 80003e0:	4673      	mov	r3, lr
 80003e2:	46e1      	mov	r9, ip
 80003e4:	d362      	bcc.n	80004ac <__udivmoddi4+0x2a8>
 80003e6:	d05f      	beq.n	80004a8 <__udivmoddi4+0x2a4>
 80003e8:	b15d      	cbz	r5, 8000402 <__udivmoddi4+0x1fe>
 80003ea:	ebb8 0203 	subs.w	r2, r8, r3
 80003ee:	eb64 0409 	sbc.w	r4, r4, r9
 80003f2:	fa04 f606 	lsl.w	r6, r4, r6
 80003f6:	fa22 f301 	lsr.w	r3, r2, r1
 80003fa:	431e      	orrs	r6, r3
 80003fc:	40cc      	lsrs	r4, r1
 80003fe:	e9c5 6400 	strd	r6, r4, [r5]
 8000402:	2100      	movs	r1, #0
 8000404:	e74f      	b.n	80002a6 <__udivmoddi4+0xa2>
 8000406:	fbb1 fcf2 	udiv	ip, r1, r2
 800040a:	0c01      	lsrs	r1, r0, #16
 800040c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000410:	b280      	uxth	r0, r0
 8000412:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000416:	463b      	mov	r3, r7
 8000418:	4638      	mov	r0, r7
 800041a:	463c      	mov	r4, r7
 800041c:	46b8      	mov	r8, r7
 800041e:	46be      	mov	lr, r7
 8000420:	2620      	movs	r6, #32
 8000422:	fbb1 f1f7 	udiv	r1, r1, r7
 8000426:	eba2 0208 	sub.w	r2, r2, r8
 800042a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800042e:	e766      	b.n	80002fe <__udivmoddi4+0xfa>
 8000430:	4601      	mov	r1, r0
 8000432:	e718      	b.n	8000266 <__udivmoddi4+0x62>
 8000434:	4610      	mov	r0, r2
 8000436:	e72c      	b.n	8000292 <__udivmoddi4+0x8e>
 8000438:	f1c6 0220 	rsb	r2, r6, #32
 800043c:	fa2e f302 	lsr.w	r3, lr, r2
 8000440:	40b7      	lsls	r7, r6
 8000442:	40b1      	lsls	r1, r6
 8000444:	fa20 f202 	lsr.w	r2, r0, r2
 8000448:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800044c:	430a      	orrs	r2, r1
 800044e:	fbb3 f8fe 	udiv	r8, r3, lr
 8000452:	b2bc      	uxth	r4, r7
 8000454:	fb0e 3318 	mls	r3, lr, r8, r3
 8000458:	0c11      	lsrs	r1, r2, #16
 800045a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045e:	fb08 f904 	mul.w	r9, r8, r4
 8000462:	40b0      	lsls	r0, r6
 8000464:	4589      	cmp	r9, r1
 8000466:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800046a:	b280      	uxth	r0, r0
 800046c:	d93e      	bls.n	80004ec <__udivmoddi4+0x2e8>
 800046e:	1879      	adds	r1, r7, r1
 8000470:	f108 3cff 	add.w	ip, r8, #4294967295
 8000474:	d201      	bcs.n	800047a <__udivmoddi4+0x276>
 8000476:	4589      	cmp	r9, r1
 8000478:	d81f      	bhi.n	80004ba <__udivmoddi4+0x2b6>
 800047a:	eba1 0109 	sub.w	r1, r1, r9
 800047e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000482:	fb09 f804 	mul.w	r8, r9, r4
 8000486:	fb0e 1119 	mls	r1, lr, r9, r1
 800048a:	b292      	uxth	r2, r2
 800048c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000490:	4542      	cmp	r2, r8
 8000492:	d229      	bcs.n	80004e8 <__udivmoddi4+0x2e4>
 8000494:	18ba      	adds	r2, r7, r2
 8000496:	f109 31ff 	add.w	r1, r9, #4294967295
 800049a:	d2c4      	bcs.n	8000426 <__udivmoddi4+0x222>
 800049c:	4542      	cmp	r2, r8
 800049e:	d2c2      	bcs.n	8000426 <__udivmoddi4+0x222>
 80004a0:	f1a9 0102 	sub.w	r1, r9, #2
 80004a4:	443a      	add	r2, r7
 80004a6:	e7be      	b.n	8000426 <__udivmoddi4+0x222>
 80004a8:	45f0      	cmp	r8, lr
 80004aa:	d29d      	bcs.n	80003e8 <__udivmoddi4+0x1e4>
 80004ac:	ebbe 0302 	subs.w	r3, lr, r2
 80004b0:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004b4:	3801      	subs	r0, #1
 80004b6:	46e1      	mov	r9, ip
 80004b8:	e796      	b.n	80003e8 <__udivmoddi4+0x1e4>
 80004ba:	eba7 0909 	sub.w	r9, r7, r9
 80004be:	4449      	add	r1, r9
 80004c0:	f1a8 0c02 	sub.w	ip, r8, #2
 80004c4:	fbb1 f9fe 	udiv	r9, r1, lr
 80004c8:	fb09 f804 	mul.w	r8, r9, r4
 80004cc:	e7db      	b.n	8000486 <__udivmoddi4+0x282>
 80004ce:	4673      	mov	r3, lr
 80004d0:	e77f      	b.n	80003d2 <__udivmoddi4+0x1ce>
 80004d2:	4650      	mov	r0, sl
 80004d4:	e766      	b.n	80003a4 <__udivmoddi4+0x1a0>
 80004d6:	4608      	mov	r0, r1
 80004d8:	e6fd      	b.n	80002d6 <__udivmoddi4+0xd2>
 80004da:	443b      	add	r3, r7
 80004dc:	3a02      	subs	r2, #2
 80004de:	e733      	b.n	8000348 <__udivmoddi4+0x144>
 80004e0:	f1ac 0c02 	sub.w	ip, ip, #2
 80004e4:	443b      	add	r3, r7
 80004e6:	e71c      	b.n	8000322 <__udivmoddi4+0x11e>
 80004e8:	4649      	mov	r1, r9
 80004ea:	e79c      	b.n	8000426 <__udivmoddi4+0x222>
 80004ec:	eba1 0109 	sub.w	r1, r1, r9
 80004f0:	46c4      	mov	ip, r8
 80004f2:	fbb1 f9fe 	udiv	r9, r1, lr
 80004f6:	fb09 f804 	mul.w	r8, r9, r4
 80004fa:	e7c4      	b.n	8000486 <__udivmoddi4+0x282>

080004fc <__aeabi_idiv0>:
 80004fc:	4770      	bx	lr
 80004fe:	bf00      	nop

08000500 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 8000500:	b480      	push	{r7}
 8000502:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8000504:	4b05      	ldr	r3, [pc, #20]	@ (800051c <LL_RCC_HSI_Enable+0x1c>)
 8000506:	681b      	ldr	r3, [r3, #0]
 8000508:	4a04      	ldr	r2, [pc, #16]	@ (800051c <LL_RCC_HSI_Enable+0x1c>)
 800050a:	f043 0301 	orr.w	r3, r3, #1
 800050e:	6013      	str	r3, [r2, #0]
}
 8000510:	bf00      	nop
 8000512:	46bd      	mov	sp, r7
 8000514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000518:	4770      	bx	lr
 800051a:	bf00      	nop
 800051c:	40023800 	.word	0x40023800

08000520 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8000520:	b480      	push	{r7}
 8000522:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 8000524:	4b06      	ldr	r3, [pc, #24]	@ (8000540 <LL_RCC_HSI_IsReady+0x20>)
 8000526:	681b      	ldr	r3, [r3, #0]
 8000528:	f003 0302 	and.w	r3, r3, #2
 800052c:	2b02      	cmp	r3, #2
 800052e:	bf0c      	ite	eq
 8000530:	2301      	moveq	r3, #1
 8000532:	2300      	movne	r3, #0
 8000534:	b2db      	uxtb	r3, r3
}
 8000536:	4618      	mov	r0, r3
 8000538:	46bd      	mov	sp, r7
 800053a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800053e:	4770      	bx	lr
 8000540:	40023800 	.word	0x40023800

08000544 <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll CR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 31
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 8000544:	b480      	push	{r7}
 8000546:	b083      	sub	sp, #12
 8000548:	af00      	add	r7, sp, #0
 800054a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_HSITRIM, Value << RCC_CR_HSITRIM_Pos);
 800054c:	4b07      	ldr	r3, [pc, #28]	@ (800056c <LL_RCC_HSI_SetCalibTrimming+0x28>)
 800054e:	681b      	ldr	r3, [r3, #0]
 8000550:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8000554:	687b      	ldr	r3, [r7, #4]
 8000556:	00db      	lsls	r3, r3, #3
 8000558:	4904      	ldr	r1, [pc, #16]	@ (800056c <LL_RCC_HSI_SetCalibTrimming+0x28>)
 800055a:	4313      	orrs	r3, r2
 800055c:	600b      	str	r3, [r1, #0]
}
 800055e:	bf00      	nop
 8000560:	370c      	adds	r7, #12
 8000562:	46bd      	mov	sp, r7
 8000564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000568:	4770      	bx	lr
 800056a:	bf00      	nop
 800056c:	40023800 	.word	0x40023800

08000570 <LL_RCC_SetSysClkSource>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8000570:	b480      	push	{r7}
 8000572:	b083      	sub	sp, #12
 8000574:	af00      	add	r7, sp, #0
 8000576:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8000578:	4b06      	ldr	r3, [pc, #24]	@ (8000594 <LL_RCC_SetSysClkSource+0x24>)
 800057a:	689b      	ldr	r3, [r3, #8]
 800057c:	f023 0203 	bic.w	r2, r3, #3
 8000580:	4904      	ldr	r1, [pc, #16]	@ (8000594 <LL_RCC_SetSysClkSource+0x24>)
 8000582:	687b      	ldr	r3, [r7, #4]
 8000584:	4313      	orrs	r3, r2
 8000586:	608b      	str	r3, [r1, #8]
}
 8000588:	bf00      	nop
 800058a:	370c      	adds	r7, #12
 800058c:	46bd      	mov	sp, r7
 800058e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000592:	4770      	bx	lr
 8000594:	40023800 	.word	0x40023800

08000598 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLLR (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8000598:	b480      	push	{r7}
 800059a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800059c:	4b04      	ldr	r3, [pc, #16]	@ (80005b0 <LL_RCC_GetSysClkSource+0x18>)
 800059e:	689b      	ldr	r3, [r3, #8]
 80005a0:	f003 030c 	and.w	r3, r3, #12
}
 80005a4:	4618      	mov	r0, r3
 80005a6:	46bd      	mov	sp, r7
 80005a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop
 80005b0:	40023800 	.word	0x40023800

080005b4 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 80005b4:	b480      	push	{r7}
 80005b6:	b083      	sub	sp, #12
 80005b8:	af00      	add	r7, sp, #0
 80005ba:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 80005bc:	4b06      	ldr	r3, [pc, #24]	@ (80005d8 <LL_RCC_SetAHBPrescaler+0x24>)
 80005be:	689b      	ldr	r3, [r3, #8]
 80005c0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80005c4:	4904      	ldr	r1, [pc, #16]	@ (80005d8 <LL_RCC_SetAHBPrescaler+0x24>)
 80005c6:	687b      	ldr	r3, [r7, #4]
 80005c8:	4313      	orrs	r3, r2
 80005ca:	608b      	str	r3, [r1, #8]
}
 80005cc:	bf00      	nop
 80005ce:	370c      	adds	r7, #12
 80005d0:	46bd      	mov	sp, r7
 80005d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d6:	4770      	bx	lr
 80005d8:	40023800 	.word	0x40023800

080005dc <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 80005dc:	b480      	push	{r7}
 80005de:	b083      	sub	sp, #12
 80005e0:	af00      	add	r7, sp, #0
 80005e2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 80005e4:	4b06      	ldr	r3, [pc, #24]	@ (8000600 <LL_RCC_SetAPB1Prescaler+0x24>)
 80005e6:	689b      	ldr	r3, [r3, #8]
 80005e8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80005ec:	4904      	ldr	r1, [pc, #16]	@ (8000600 <LL_RCC_SetAPB1Prescaler+0x24>)
 80005ee:	687b      	ldr	r3, [r7, #4]
 80005f0:	4313      	orrs	r3, r2
 80005f2:	608b      	str	r3, [r1, #8]
}
 80005f4:	bf00      	nop
 80005f6:	370c      	adds	r7, #12
 80005f8:	46bd      	mov	sp, r7
 80005fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005fe:	4770      	bx	lr
 8000600:	40023800 	.word	0x40023800

08000604 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8000604:	b480      	push	{r7}
 8000606:	b083      	sub	sp, #12
 8000608:	af00      	add	r7, sp, #0
 800060a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 800060c:	4b06      	ldr	r3, [pc, #24]	@ (8000628 <LL_RCC_SetAPB2Prescaler+0x24>)
 800060e:	689b      	ldr	r3, [r3, #8]
 8000610:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8000614:	4904      	ldr	r1, [pc, #16]	@ (8000628 <LL_RCC_SetAPB2Prescaler+0x24>)
 8000616:	687b      	ldr	r3, [r7, #4]
 8000618:	4313      	orrs	r3, r2
 800061a:	608b      	str	r3, [r1, #8]
}
 800061c:	bf00      	nop
 800061e:	370c      	adds	r7, #12
 8000620:	46bd      	mov	sp, r7
 8000622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000626:	4770      	bx	lr
 8000628:	40023800 	.word	0x40023800

0800062c <LL_RCC_SetTIMPrescaler>:
  *         @arg @ref LL_RCC_TIM_PRESCALER_TWICE
  *         @arg @ref LL_RCC_TIM_PRESCALER_FOUR_TIMES
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetTIMPrescaler(uint32_t Prescaler)
{
 800062c:	b480      	push	{r7}
 800062e:	b083      	sub	sp, #12
 8000630:	af00      	add	r7, sp, #0
 8000632:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->DCKCFGR, RCC_DCKCFGR_TIMPRE, Prescaler);
 8000634:	4b07      	ldr	r3, [pc, #28]	@ (8000654 <LL_RCC_SetTIMPrescaler+0x28>)
 8000636:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800063a:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800063e:	4905      	ldr	r1, [pc, #20]	@ (8000654 <LL_RCC_SetTIMPrescaler+0x28>)
 8000640:	687b      	ldr	r3, [r7, #4]
 8000642:	4313      	orrs	r3, r2
 8000644:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
}
 8000648:	bf00      	nop
 800064a:	370c      	adds	r7, #12
 800064c:	46bd      	mov	sp, r7
 800064e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000652:	4770      	bx	lr
 8000654:	40023800 	.word	0x40023800

08000658 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8000658:	b480      	push	{r7}
 800065a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 800065c:	4b05      	ldr	r3, [pc, #20]	@ (8000674 <LL_RCC_PLL_Enable+0x1c>)
 800065e:	681b      	ldr	r3, [r3, #0]
 8000660:	4a04      	ldr	r2, [pc, #16]	@ (8000674 <LL_RCC_PLL_Enable+0x1c>)
 8000662:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000666:	6013      	str	r3, [r2, #0]
}
 8000668:	bf00      	nop
 800066a:	46bd      	mov	sp, r7
 800066c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000670:	4770      	bx	lr
 8000672:	bf00      	nop
 8000674:	40023800 	.word	0x40023800

08000678 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8000678:	b480      	push	{r7}
 800067a:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY));
 800067c:	4b07      	ldr	r3, [pc, #28]	@ (800069c <LL_RCC_PLL_IsReady+0x24>)
 800067e:	681b      	ldr	r3, [r3, #0]
 8000680:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000684:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8000688:	bf0c      	ite	eq
 800068a:	2301      	moveq	r3, #1
 800068c:	2300      	movne	r3, #0
 800068e:	b2db      	uxtb	r3, r3
}
 8000690:	4618      	mov	r0, r3
 8000692:	46bd      	mov	sp, r7
 8000694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000698:	4770      	bx	lr
 800069a:	bf00      	nop
 800069c:	40023800 	.word	0x40023800

080006a0 <LL_RCC_PLL_ConfigDomain_SYS>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLM, uint32_t PLLN, uint32_t PLLP_R)
{
 80006a0:	b480      	push	{r7}
 80006a2:	b085      	sub	sp, #20
 80006a4:	af00      	add	r7, sp, #0
 80006a6:	60f8      	str	r0, [r7, #12]
 80006a8:	60b9      	str	r1, [r7, #8]
 80006aa:	607a      	str	r2, [r7, #4]
 80006ac:	603b      	str	r3, [r7, #0]
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM | RCC_PLLCFGR_PLLN,
 80006ae:	4b0d      	ldr	r3, [pc, #52]	@ (80006e4 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 80006b0:	685a      	ldr	r2, [r3, #4]
 80006b2:	4b0d      	ldr	r3, [pc, #52]	@ (80006e8 <LL_RCC_PLL_ConfigDomain_SYS+0x48>)
 80006b4:	4013      	ands	r3, r2
 80006b6:	68f9      	ldr	r1, [r7, #12]
 80006b8:	68ba      	ldr	r2, [r7, #8]
 80006ba:	4311      	orrs	r1, r2
 80006bc:	687a      	ldr	r2, [r7, #4]
 80006be:	0192      	lsls	r2, r2, #6
 80006c0:	430a      	orrs	r2, r1
 80006c2:	4908      	ldr	r1, [pc, #32]	@ (80006e4 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 80006c4:	4313      	orrs	r3, r2
 80006c6:	604b      	str	r3, [r1, #4]
             Source | PLLM | PLLN << RCC_PLLCFGR_PLLN_Pos);
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLP, PLLP_R);
 80006c8:	4b06      	ldr	r3, [pc, #24]	@ (80006e4 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 80006ca:	685b      	ldr	r3, [r3, #4]
 80006cc:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80006d0:	4904      	ldr	r1, [pc, #16]	@ (80006e4 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 80006d2:	683b      	ldr	r3, [r7, #0]
 80006d4:	4313      	orrs	r3, r2
 80006d6:	604b      	str	r3, [r1, #4]
#if defined(RCC_PLLR_SYSCLK_SUPPORT)
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLR, PLLP_R);
#endif /* RCC_PLLR_SYSCLK_SUPPORT */
}
 80006d8:	bf00      	nop
 80006da:	3714      	adds	r7, #20
 80006dc:	46bd      	mov	sp, r7
 80006de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e2:	4770      	bx	lr
 80006e4:	40023800 	.word	0x40023800
 80006e8:	ffbf8000 	.word	0xffbf8000

080006ec <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 80006ec:	b480      	push	{r7}
 80006ee:	b085      	sub	sp, #20
 80006f0:	af00      	add	r7, sp, #0
 80006f2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 80006f4:	4b08      	ldr	r3, [pc, #32]	@ (8000718 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80006f6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80006f8:	4907      	ldr	r1, [pc, #28]	@ (8000718 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80006fa:	687b      	ldr	r3, [r7, #4]
 80006fc:	4313      	orrs	r3, r2
 80006fe:	630b      	str	r3, [r1, #48]	@ 0x30
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8000700:	4b05      	ldr	r3, [pc, #20]	@ (8000718 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000702:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	4013      	ands	r3, r2
 8000708:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800070a:	68fb      	ldr	r3, [r7, #12]
}
 800070c:	bf00      	nop
 800070e:	3714      	adds	r7, #20
 8000710:	46bd      	mov	sp, r7
 8000712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000716:	4770      	bx	lr
 8000718:	40023800 	.word	0x40023800

0800071c <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 800071c:	b480      	push	{r7}
 800071e:	b085      	sub	sp, #20
 8000720:	af00      	add	r7, sp, #0
 8000722:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 8000724:	4b08      	ldr	r3, [pc, #32]	@ (8000748 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000726:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000728:	4907      	ldr	r1, [pc, #28]	@ (8000748 <LL_APB1_GRP1_EnableClock+0x2c>)
 800072a:	687b      	ldr	r3, [r7, #4]
 800072c:	4313      	orrs	r3, r2
 800072e:	640b      	str	r3, [r1, #64]	@ 0x40
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8000730:	4b05      	ldr	r3, [pc, #20]	@ (8000748 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000732:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	4013      	ands	r3, r2
 8000738:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800073a:	68fb      	ldr	r3, [r7, #12]
}
 800073c:	bf00      	nop
 800073e:	3714      	adds	r7, #20
 8000740:	46bd      	mov	sp, r7
 8000742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000746:	4770      	bx	lr
 8000748:	40023800 	.word	0x40023800

0800074c <LL_SYSCFG_SetEXTISource>:
  *         @arg @ref LL_SYSCFG_EXTI_LINE14
  *         @arg @ref LL_SYSCFG_EXTI_LINE15
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_SetEXTISource(uint32_t Port, uint32_t Line)
{
 800074c:	b480      	push	{r7}
 800074e:	b087      	sub	sp, #28
 8000750:	af00      	add	r7, sp, #0
 8000752:	6078      	str	r0, [r7, #4]
 8000754:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SYSCFG->EXTICR[Line & 0xFF], (Line >> 16), Port << POSITION_VAL((Line >> 16)));
 8000756:	4a17      	ldr	r2, [pc, #92]	@ (80007b4 <LL_SYSCFG_SetEXTISource+0x68>)
 8000758:	683b      	ldr	r3, [r7, #0]
 800075a:	b2db      	uxtb	r3, r3
 800075c:	3302      	adds	r3, #2
 800075e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000762:	683b      	ldr	r3, [r7, #0]
 8000764:	0c1b      	lsrs	r3, r3, #16
 8000766:	43db      	mvns	r3, r3
 8000768:	ea02 0103 	and.w	r1, r2, r3
 800076c:	683b      	ldr	r3, [r7, #0]
 800076e:	0c1b      	lsrs	r3, r3, #16
 8000770:	613b      	str	r3, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000772:	693b      	ldr	r3, [r7, #16]
 8000774:	fa93 f3a3 	rbit	r3, r3
 8000778:	60fb      	str	r3, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800077a:	68fb      	ldr	r3, [r7, #12]
 800077c:	617b      	str	r3, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800077e:	697b      	ldr	r3, [r7, #20]
 8000780:	2b00      	cmp	r3, #0
 8000782:	d101      	bne.n	8000788 <LL_SYSCFG_SetEXTISource+0x3c>
  {
    return 32U;
 8000784:	2320      	movs	r3, #32
 8000786:	e003      	b.n	8000790 <LL_SYSCFG_SetEXTISource+0x44>
  }
  return __builtin_clz(value);
 8000788:	697b      	ldr	r3, [r7, #20]
 800078a:	fab3 f383 	clz	r3, r3
 800078e:	b2db      	uxtb	r3, r3
 8000790:	461a      	mov	r2, r3
 8000792:	687b      	ldr	r3, [r7, #4]
 8000794:	fa03 f202 	lsl.w	r2, r3, r2
 8000798:	4806      	ldr	r0, [pc, #24]	@ (80007b4 <LL_SYSCFG_SetEXTISource+0x68>)
 800079a:	683b      	ldr	r3, [r7, #0]
 800079c:	b2db      	uxtb	r3, r3
 800079e:	430a      	orrs	r2, r1
 80007a0:	3302      	adds	r3, #2
 80007a2:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
 80007a6:	bf00      	nop
 80007a8:	371c      	adds	r7, #28
 80007aa:	46bd      	mov	sp, r7
 80007ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b0:	4770      	bx	lr
 80007b2:	bf00      	nop
 80007b4:	40013800 	.word	0x40013800

080007b8 <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_14
  *         @arg @ref LL_FLASH_LATENCY_15
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 80007b8:	b480      	push	{r7}
 80007ba:	b083      	sub	sp, #12
 80007bc:	af00      	add	r7, sp, #0
 80007be:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 80007c0:	4b06      	ldr	r3, [pc, #24]	@ (80007dc <LL_FLASH_SetLatency+0x24>)
 80007c2:	681b      	ldr	r3, [r3, #0]
 80007c4:	f023 0207 	bic.w	r2, r3, #7
 80007c8:	4904      	ldr	r1, [pc, #16]	@ (80007dc <LL_FLASH_SetLatency+0x24>)
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	4313      	orrs	r3, r2
 80007ce:	600b      	str	r3, [r1, #0]
}
 80007d0:	bf00      	nop
 80007d2:	370c      	adds	r7, #12
 80007d4:	46bd      	mov	sp, r7
 80007d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007da:	4770      	bx	lr
 80007dc:	40023c00 	.word	0x40023c00

080007e0 <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_13
  *         @arg @ref LL_FLASH_LATENCY_14
  *         @arg @ref LL_FLASH_LATENCY_15
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 80007e0:	b480      	push	{r7}
 80007e2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 80007e4:	4b04      	ldr	r3, [pc, #16]	@ (80007f8 <LL_FLASH_GetLatency+0x18>)
 80007e6:	681b      	ldr	r3, [r3, #0]
 80007e8:	f003 0307 	and.w	r3, r3, #7
}
 80007ec:	4618      	mov	r0, r3
 80007ee:	46bd      	mov	sp, r7
 80007f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f4:	4770      	bx	lr
 80007f6:	bf00      	nop
 80007f8:	40023c00 	.word	0x40023c00

080007fc <LL_PWR_SetRegulVoltageScaling>:
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE3
  *         (*) LL_PWR_REGU_VOLTAGE_SCALE1 is not available for STM32F401xx devices
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRegulVoltageScaling(uint32_t VoltageScaling)
{
 80007fc:	b480      	push	{r7}
 80007fe:	b083      	sub	sp, #12
 8000800:	af00      	add	r7, sp, #0
 8000802:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR, PWR_CR_VOS, VoltageScaling);
 8000804:	4b06      	ldr	r3, [pc, #24]	@ (8000820 <LL_PWR_SetRegulVoltageScaling+0x24>)
 8000806:	681b      	ldr	r3, [r3, #0]
 8000808:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800080c:	4904      	ldr	r1, [pc, #16]	@ (8000820 <LL_PWR_SetRegulVoltageScaling+0x24>)
 800080e:	687b      	ldr	r3, [r7, #4]
 8000810:	4313      	orrs	r3, r2
 8000812:	600b      	str	r3, [r1, #0]
}
 8000814:	bf00      	nop
 8000816:	370c      	adds	r7, #12
 8000818:	46bd      	mov	sp, r7
 800081a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800081e:	4770      	bx	lr
 8000820:	40007000 	.word	0x40007000

08000824 <LL_PWR_IsActiveFlag_VOS>:
  * @brief  Indicate whether the Regulator is ready in the selected voltage range or if its output voltage is still changing to the required voltage level
  * @rmtoll CSR   VOS       LL_PWR_IsActiveFlag_VOS
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_VOS(void)
{
 8000824:	b480      	push	{r7}
 8000826:	af00      	add	r7, sp, #0
  return (READ_BIT(PWR->CSR, LL_PWR_CSR_VOS) == (LL_PWR_CSR_VOS));
 8000828:	4b07      	ldr	r3, [pc, #28]	@ (8000848 <LL_PWR_IsActiveFlag_VOS+0x24>)
 800082a:	685b      	ldr	r3, [r3, #4]
 800082c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000830:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8000834:	bf0c      	ite	eq
 8000836:	2301      	moveq	r3, #1
 8000838:	2300      	movne	r3, #0
 800083a:	b2db      	uxtb	r3, r3
}
 800083c:	4618      	mov	r0, r3
 800083e:	46bd      	mov	sp, r7
 8000840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000844:	4770      	bx	lr
 8000846:	bf00      	nop
 8000848:	40007000 	.word	0x40007000

0800084c <LL_USART_Enable>:
  * @rmtoll CR1          UE            LL_USART_Enable
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_Enable(USART_TypeDef *USARTx)
{
 800084c:	b480      	push	{r7}
 800084e:	b083      	sub	sp, #12
 8000850:	af00      	add	r7, sp, #0
 8000852:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	68db      	ldr	r3, [r3, #12]
 8000858:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	60da      	str	r2, [r3, #12]
}
 8000860:	bf00      	nop
 8000862:	370c      	adds	r7, #12
 8000864:	46bd      	mov	sp, r7
 8000866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800086a:	4770      	bx	lr

0800086c <LL_USART_ConfigAsyncMode>:
  *         CR3          HDSEL         LL_USART_ConfigAsyncMode
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ConfigAsyncMode(USART_TypeDef *USARTx)
{
 800086c:	b480      	push	{r7}
 800086e:	b083      	sub	sp, #12
 8000870:	af00      	add	r7, sp, #0
 8000872:	6078      	str	r0, [r7, #4]
  /* In Asynchronous mode, the following bits must be kept cleared:
  - LINEN, CLKEN bits in the USART_CR2 register,
  - SCEN, IREN and HDSEL bits in the USART_CR3 register.*/
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	691b      	ldr	r3, [r3, #16]
 8000878:	f423 4290 	bic.w	r2, r3, #18432	@ 0x4800
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	695b      	ldr	r3, [r3, #20]
 8000884:	f023 022a 	bic.w	r2, r3, #42	@ 0x2a
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	615a      	str	r2, [r3, #20]
}
 800088c:	bf00      	nop
 800088e:	370c      	adds	r7, #12
 8000890:	46bd      	mov	sp, r7
 8000892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000896:	4770      	bx	lr

08000898 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 8000898:	b480      	push	{r7}
 800089a:	b08b      	sub	sp, #44	@ 0x2c
 800089c:	af00      	add	r7, sp, #0
 800089e:	60f8      	str	r0, [r7, #12]
 80008a0:	60b9      	str	r1, [r7, #8]
 80008a2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 80008a4:	68fb      	ldr	r3, [r7, #12]
 80008a6:	681a      	ldr	r2, [r3, #0]
 80008a8:	68bb      	ldr	r3, [r7, #8]
 80008aa:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80008ac:	697b      	ldr	r3, [r7, #20]
 80008ae:	fa93 f3a3 	rbit	r3, r3
 80008b2:	613b      	str	r3, [r7, #16]
  return result;
 80008b4:	693b      	ldr	r3, [r7, #16]
 80008b6:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80008b8:	69bb      	ldr	r3, [r7, #24]
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	d101      	bne.n	80008c2 <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 80008be:	2320      	movs	r3, #32
 80008c0:	e003      	b.n	80008ca <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 80008c2:	69bb      	ldr	r3, [r7, #24]
 80008c4:	fab3 f383 	clz	r3, r3
 80008c8:	b2db      	uxtb	r3, r3
 80008ca:	005b      	lsls	r3, r3, #1
 80008cc:	2103      	movs	r1, #3
 80008ce:	fa01 f303 	lsl.w	r3, r1, r3
 80008d2:	43db      	mvns	r3, r3
 80008d4:	401a      	ands	r2, r3
 80008d6:	68bb      	ldr	r3, [r7, #8]
 80008d8:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80008da:	6a3b      	ldr	r3, [r7, #32]
 80008dc:	fa93 f3a3 	rbit	r3, r3
 80008e0:	61fb      	str	r3, [r7, #28]
  return result;
 80008e2:	69fb      	ldr	r3, [r7, #28]
 80008e4:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 80008e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	d101      	bne.n	80008f0 <LL_GPIO_SetPinMode+0x58>
    return 32U;
 80008ec:	2320      	movs	r3, #32
 80008ee:	e003      	b.n	80008f8 <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 80008f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80008f2:	fab3 f383 	clz	r3, r3
 80008f6:	b2db      	uxtb	r3, r3
 80008f8:	005b      	lsls	r3, r3, #1
 80008fa:	6879      	ldr	r1, [r7, #4]
 80008fc:	fa01 f303 	lsl.w	r3, r1, r3
 8000900:	431a      	orrs	r2, r3
 8000902:	68fb      	ldr	r3, [r7, #12]
 8000904:	601a      	str	r2, [r3, #0]
}
 8000906:	bf00      	nop
 8000908:	372c      	adds	r7, #44	@ 0x2c
 800090a:	46bd      	mov	sp, r7
 800090c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000910:	4770      	bx	lr

08000912 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 8000912:	b480      	push	{r7}
 8000914:	b08b      	sub	sp, #44	@ 0x2c
 8000916:	af00      	add	r7, sp, #0
 8000918:	60f8      	str	r0, [r7, #12]
 800091a:	60b9      	str	r1, [r7, #8]
 800091c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 800091e:	68fb      	ldr	r3, [r7, #12]
 8000920:	68da      	ldr	r2, [r3, #12]
 8000922:	68bb      	ldr	r3, [r7, #8]
 8000924:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000926:	697b      	ldr	r3, [r7, #20]
 8000928:	fa93 f3a3 	rbit	r3, r3
 800092c:	613b      	str	r3, [r7, #16]
  return result;
 800092e:	693b      	ldr	r3, [r7, #16]
 8000930:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8000932:	69bb      	ldr	r3, [r7, #24]
 8000934:	2b00      	cmp	r3, #0
 8000936:	d101      	bne.n	800093c <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 8000938:	2320      	movs	r3, #32
 800093a:	e003      	b.n	8000944 <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 800093c:	69bb      	ldr	r3, [r7, #24]
 800093e:	fab3 f383 	clz	r3, r3
 8000942:	b2db      	uxtb	r3, r3
 8000944:	005b      	lsls	r3, r3, #1
 8000946:	2103      	movs	r1, #3
 8000948:	fa01 f303 	lsl.w	r3, r1, r3
 800094c:	43db      	mvns	r3, r3
 800094e:	401a      	ands	r2, r3
 8000950:	68bb      	ldr	r3, [r7, #8]
 8000952:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000954:	6a3b      	ldr	r3, [r7, #32]
 8000956:	fa93 f3a3 	rbit	r3, r3
 800095a:	61fb      	str	r3, [r7, #28]
  return result;
 800095c:	69fb      	ldr	r3, [r7, #28]
 800095e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8000960:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000962:	2b00      	cmp	r3, #0
 8000964:	d101      	bne.n	800096a <LL_GPIO_SetPinPull+0x58>
    return 32U;
 8000966:	2320      	movs	r3, #32
 8000968:	e003      	b.n	8000972 <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 800096a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800096c:	fab3 f383 	clz	r3, r3
 8000970:	b2db      	uxtb	r3, r3
 8000972:	005b      	lsls	r3, r3, #1
 8000974:	6879      	ldr	r1, [r7, #4]
 8000976:	fa01 f303 	lsl.w	r3, r1, r3
 800097a:	431a      	orrs	r2, r3
 800097c:	68fb      	ldr	r3, [r7, #12]
 800097e:	60da      	str	r2, [r3, #12]
}
 8000980:	bf00      	nop
 8000982:	372c      	adds	r7, #44	@ 0x2c
 8000984:	46bd      	mov	sp, r7
 8000986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800098a:	4770      	bx	lr

0800098c <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 800098c:	b480      	push	{r7}
 800098e:	b083      	sub	sp, #12
 8000990:	af00      	add	r7, sp, #0
 8000992:	6078      	str	r0, [r7, #4]
 8000994:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8000996:	683b      	ldr	r3, [r7, #0]
 8000998:	041a      	lsls	r2, r3, #16
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	619a      	str	r2, [r3, #24]
}
 800099e:	bf00      	nop
 80009a0:	370c      	adds	r7, #12
 80009a2:	46bd      	mov	sp, r7
 80009a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a8:	4770      	bx	lr

080009aa <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009aa:	b580      	push	{r7, lr}
 80009ac:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009ae:	f000 faef 	bl	8000f90 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009b2:	f000 f80b 	bl	80009cc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009b6:	f000 f977 	bl	8000ca8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80009ba:	f000 f925 	bl	8000c08 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 80009be:	f000 f85b 	bl	8000a78 <MX_ADC1_Init>
  MX_TIM3_Init();
 80009c2:	f000 f8ab 	bl	8000b1c <MX_TIM3_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80009c6:	bf00      	nop
 80009c8:	e7fd      	b.n	80009c6 <main+0x1c>
	...

080009cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_2);
 80009d0:	2002      	movs	r0, #2
 80009d2:	f7ff fef1 	bl	80007b8 <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_2)
 80009d6:	bf00      	nop
 80009d8:	f7ff ff02 	bl	80007e0 <LL_FLASH_GetLatency>
 80009dc:	4603      	mov	r3, r0
 80009de:	2b02      	cmp	r3, #2
 80009e0:	d1fa      	bne.n	80009d8 <SystemClock_Config+0xc>
  {
  }
  LL_PWR_SetRegulVoltageScaling(LL_PWR_REGU_VOLTAGE_SCALE2);
 80009e2:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 80009e6:	f7ff ff09 	bl	80007fc <LL_PWR_SetRegulVoltageScaling>
  LL_RCC_HSI_SetCalibTrimming(16);
 80009ea:	2010      	movs	r0, #16
 80009ec:	f7ff fdaa 	bl	8000544 <LL_RCC_HSI_SetCalibTrimming>
  LL_RCC_HSI_Enable();
 80009f0:	f7ff fd86 	bl	8000500 <LL_RCC_HSI_Enable>

   /* Wait till HSI is ready */
  while(LL_RCC_HSI_IsReady() != 1)
 80009f4:	bf00      	nop
 80009f6:	f7ff fd93 	bl	8000520 <LL_RCC_HSI_IsReady>
 80009fa:	4603      	mov	r3, r0
 80009fc:	2b01      	cmp	r3, #1
 80009fe:	d1fa      	bne.n	80009f6 <SystemClock_Config+0x2a>
  {

  }
  LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSI, LL_RCC_PLLM_DIV_16, 336, LL_RCC_PLLP_DIV_4);
 8000a00:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000a04:	f44f 72a8 	mov.w	r2, #336	@ 0x150
 8000a08:	2110      	movs	r1, #16
 8000a0a:	2000      	movs	r0, #0
 8000a0c:	f7ff fe48 	bl	80006a0 <LL_RCC_PLL_ConfigDomain_SYS>
  LL_RCC_PLL_Enable();
 8000a10:	f7ff fe22 	bl	8000658 <LL_RCC_PLL_Enable>

   /* Wait till PLL is ready */
  while(LL_RCC_PLL_IsReady() != 1)
 8000a14:	bf00      	nop
 8000a16:	f7ff fe2f 	bl	8000678 <LL_RCC_PLL_IsReady>
 8000a1a:	4603      	mov	r3, r0
 8000a1c:	2b01      	cmp	r3, #1
 8000a1e:	d1fa      	bne.n	8000a16 <SystemClock_Config+0x4a>
  {

  }
  while (LL_PWR_IsActiveFlag_VOS() == 0)
 8000a20:	bf00      	nop
 8000a22:	f7ff feff 	bl	8000824 <LL_PWR_IsActiveFlag_VOS>
 8000a26:	4603      	mov	r3, r0
 8000a28:	2b00      	cmp	r3, #0
 8000a2a:	d0fa      	beq.n	8000a22 <SystemClock_Config+0x56>
  {
  }
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 8000a2c:	2000      	movs	r0, #0
 8000a2e:	f7ff fdc1 	bl	80005b4 <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_2);
 8000a32:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8000a36:	f7ff fdd1 	bl	80005dc <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);
 8000a3a:	2000      	movs	r0, #0
 8000a3c:	f7ff fde2 	bl	8000604 <LL_RCC_SetAPB2Prescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
 8000a40:	2002      	movs	r0, #2
 8000a42:	f7ff fd95 	bl	8000570 <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8000a46:	bf00      	nop
 8000a48:	f7ff fda6 	bl	8000598 <LL_RCC_GetSysClkSource>
 8000a4c:	4603      	mov	r3, r0
 8000a4e:	2b08      	cmp	r3, #8
 8000a50:	d1fa      	bne.n	8000a48 <SystemClock_Config+0x7c>
  {

  }
  LL_SetSystemCoreClock(84000000);
 8000a52:	4808      	ldr	r0, [pc, #32]	@ (8000a74 <SystemClock_Config+0xa8>)
 8000a54:	f002 fcf0 	bl	8003438 <LL_SetSystemCoreClock>

   /* Update the time base */
  if (HAL_InitTick (TICK_INT_PRIORITY) != HAL_OK)
 8000a58:	2000      	movs	r0, #0
 8000a5a:	f000 fabb 	bl	8000fd4 <HAL_InitTick>
 8000a5e:	4603      	mov	r3, r0
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	d001      	beq.n	8000a68 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000a64:	f000 f984 	bl	8000d70 <Error_Handler>
  }
  LL_RCC_SetTIMPrescaler(LL_RCC_TIM_PRESCALER_TWICE);
 8000a68:	2000      	movs	r0, #0
 8000a6a:	f7ff fddf 	bl	800062c <LL_RCC_SetTIMPrescaler>
}
 8000a6e:	bf00      	nop
 8000a70:	bd80      	pop	{r7, pc}
 8000a72:	bf00      	nop
 8000a74:	0501bd00 	.word	0x0501bd00

08000a78 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b084      	sub	sp, #16
 8000a7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000a7e:	463b      	mov	r3, r7
 8000a80:	2200      	movs	r2, #0
 8000a82:	601a      	str	r2, [r3, #0]
 8000a84:	605a      	str	r2, [r3, #4]
 8000a86:	609a      	str	r2, [r3, #8]
 8000a88:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000a8a:	4b21      	ldr	r3, [pc, #132]	@ (8000b10 <MX_ADC1_Init+0x98>)
 8000a8c:	4a21      	ldr	r2, [pc, #132]	@ (8000b14 <MX_ADC1_Init+0x9c>)
 8000a8e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000a90:	4b1f      	ldr	r3, [pc, #124]	@ (8000b10 <MX_ADC1_Init+0x98>)
 8000a92:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000a96:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000a98:	4b1d      	ldr	r3, [pc, #116]	@ (8000b10 <MX_ADC1_Init+0x98>)
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000a9e:	4b1c      	ldr	r3, [pc, #112]	@ (8000b10 <MX_ADC1_Init+0x98>)
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000aa4:	4b1a      	ldr	r3, [pc, #104]	@ (8000b10 <MX_ADC1_Init+0x98>)
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000aaa:	4b19      	ldr	r3, [pc, #100]	@ (8000b10 <MX_ADC1_Init+0x98>)
 8000aac:	2200      	movs	r2, #0
 8000aae:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000ab2:	4b17      	ldr	r3, [pc, #92]	@ (8000b10 <MX_ADC1_Init+0x98>)
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000ab8:	4b15      	ldr	r3, [pc, #84]	@ (8000b10 <MX_ADC1_Init+0x98>)
 8000aba:	4a17      	ldr	r2, [pc, #92]	@ (8000b18 <MX_ADC1_Init+0xa0>)
 8000abc:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000abe:	4b14      	ldr	r3, [pc, #80]	@ (8000b10 <MX_ADC1_Init+0x98>)
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000ac4:	4b12      	ldr	r3, [pc, #72]	@ (8000b10 <MX_ADC1_Init+0x98>)
 8000ac6:	2201      	movs	r2, #1
 8000ac8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000aca:	4b11      	ldr	r3, [pc, #68]	@ (8000b10 <MX_ADC1_Init+0x98>)
 8000acc:	2200      	movs	r2, #0
 8000ace:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000ad2:	4b0f      	ldr	r3, [pc, #60]	@ (8000b10 <MX_ADC1_Init+0x98>)
 8000ad4:	2201      	movs	r2, #1
 8000ad6:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000ad8:	480d      	ldr	r0, [pc, #52]	@ (8000b10 <MX_ADC1_Init+0x98>)
 8000ada:	f000 fabf 	bl	800105c <HAL_ADC_Init>
 8000ade:	4603      	mov	r3, r0
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	d001      	beq.n	8000ae8 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000ae4:	f000 f944 	bl	8000d70 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000ae8:	2300      	movs	r3, #0
 8000aea:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000aec:	2301      	movs	r3, #1
 8000aee:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000af0:	2300      	movs	r3, #0
 8000af2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000af4:	463b      	mov	r3, r7
 8000af6:	4619      	mov	r1, r3
 8000af8:	4805      	ldr	r0, [pc, #20]	@ (8000b10 <MX_ADC1_Init+0x98>)
 8000afa:	f000 faf3 	bl	80010e4 <HAL_ADC_ConfigChannel>
 8000afe:	4603      	mov	r3, r0
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	d001      	beq.n	8000b08 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000b04:	f000 f934 	bl	8000d70 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000b08:	bf00      	nop
 8000b0a:	3710      	adds	r7, #16
 8000b0c:	46bd      	mov	sp, r7
 8000b0e:	bd80      	pop	{r7, pc}
 8000b10:	20000028 	.word	0x20000028
 8000b14:	40012000 	.word	0x40012000
 8000b18:	0f000001 	.word	0x0f000001

08000b1c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b08e      	sub	sp, #56	@ 0x38
 8000b20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000b22:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b26:	2200      	movs	r2, #0
 8000b28:	601a      	str	r2, [r3, #0]
 8000b2a:	605a      	str	r2, [r3, #4]
 8000b2c:	609a      	str	r2, [r3, #8]
 8000b2e:	60da      	str	r2, [r3, #12]
 8000b30:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b32:	f107 031c 	add.w	r3, r7, #28
 8000b36:	2200      	movs	r2, #0
 8000b38:	601a      	str	r2, [r3, #0]
 8000b3a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000b3c:	463b      	mov	r3, r7
 8000b3e:	2200      	movs	r2, #0
 8000b40:	601a      	str	r2, [r3, #0]
 8000b42:	605a      	str	r2, [r3, #4]
 8000b44:	609a      	str	r2, [r3, #8]
 8000b46:	60da      	str	r2, [r3, #12]
 8000b48:	611a      	str	r2, [r3, #16]
 8000b4a:	615a      	str	r2, [r3, #20]
 8000b4c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000b4e:	4b2c      	ldr	r3, [pc, #176]	@ (8000c00 <MX_TIM3_Init+0xe4>)
 8000b50:	4a2c      	ldr	r2, [pc, #176]	@ (8000c04 <MX_TIM3_Init+0xe8>)
 8000b52:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000b54:	4b2a      	ldr	r3, [pc, #168]	@ (8000c00 <MX_TIM3_Init+0xe4>)
 8000b56:	2200      	movs	r2, #0
 8000b58:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b5a:	4b29      	ldr	r3, [pc, #164]	@ (8000c00 <MX_TIM3_Init+0xe4>)
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000b60:	4b27      	ldr	r3, [pc, #156]	@ (8000c00 <MX_TIM3_Init+0xe4>)
 8000b62:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000b66:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b68:	4b25      	ldr	r3, [pc, #148]	@ (8000c00 <MX_TIM3_Init+0xe4>)
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b6e:	4b24      	ldr	r3, [pc, #144]	@ (8000c00 <MX_TIM3_Init+0xe4>)
 8000b70:	2200      	movs	r2, #0
 8000b72:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000b74:	4822      	ldr	r0, [pc, #136]	@ (8000c00 <MX_TIM3_Init+0xe4>)
 8000b76:	f000 ff69 	bl	8001a4c <HAL_TIM_Base_Init>
 8000b7a:	4603      	mov	r3, r0
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	d001      	beq.n	8000b84 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8000b80:	f000 f8f6 	bl	8000d70 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim3) != HAL_OK)
 8000b84:	481e      	ldr	r0, [pc, #120]	@ (8000c00 <MX_TIM3_Init+0xe4>)
 8000b86:	f000 ffb0 	bl	8001aea <HAL_TIM_OC_Init>
 8000b8a:	4603      	mov	r3, r0
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	d001      	beq.n	8000b94 <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 8000b90:	f000 f8ee 	bl	8000d70 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_EXTERNAL1;
 8000b94:	2307      	movs	r3, #7
 8000b96:	627b      	str	r3, [r7, #36]	@ 0x24
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 8000b98:	2300      	movs	r3, #0
 8000b9a:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_SlaveConfigSynchro(&htim3, &sSlaveConfig) != HAL_OK)
 8000b9c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ba0:	4619      	mov	r1, r3
 8000ba2:	4817      	ldr	r0, [pc, #92]	@ (8000c00 <MX_TIM3_Init+0xe4>)
 8000ba4:	f001 f946 	bl	8001e34 <HAL_TIM_SlaveConfigSynchro>
 8000ba8:	4603      	mov	r3, r0
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	d001      	beq.n	8000bb2 <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 8000bae:	f000 f8df 	bl	8000d70 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000bba:	f107 031c 	add.w	r3, r7, #28
 8000bbe:	4619      	mov	r1, r3
 8000bc0:	480f      	ldr	r0, [pc, #60]	@ (8000c00 <MX_TIM3_Init+0xe4>)
 8000bc2:	f001 fccd 	bl	8002560 <HAL_TIMEx_MasterConfigSynchronization>
 8000bc6:	4603      	mov	r3, r0
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d001      	beq.n	8000bd0 <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 8000bcc:	f000 f8d0 	bl	8000d70 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000bd8:	2300      	movs	r3, #0
 8000bda:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000bdc:	2300      	movs	r3, #0
 8000bde:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000be0:	463b      	mov	r3, r7
 8000be2:	2200      	movs	r2, #0
 8000be4:	4619      	mov	r1, r3
 8000be6:	4806      	ldr	r0, [pc, #24]	@ (8000c00 <MX_TIM3_Init+0xe4>)
 8000be8:	f001 f8c8 	bl	8001d7c <HAL_TIM_OC_ConfigChannel>
 8000bec:	4603      	mov	r3, r0
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	d001      	beq.n	8000bf6 <MX_TIM3_Init+0xda>
  {
    Error_Handler();
 8000bf2:	f000 f8bd 	bl	8000d70 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000bf6:	bf00      	nop
 8000bf8:	3738      	adds	r7, #56	@ 0x38
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	bd80      	pop	{r7, pc}
 8000bfe:	bf00      	nop
 8000c00:	20000070 	.word	0x20000070
 8000c04:	40000400 	.word	0x40000400

08000c08 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	b08e      	sub	sp, #56	@ 0x38
 8000c0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART2_Init 0 */

  /* USER CODE END USART2_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 8000c0e:	f107 031c 	add.w	r3, r7, #28
 8000c12:	2200      	movs	r2, #0
 8000c14:	601a      	str	r2, [r3, #0]
 8000c16:	605a      	str	r2, [r3, #4]
 8000c18:	609a      	str	r2, [r3, #8]
 8000c1a:	60da      	str	r2, [r3, #12]
 8000c1c:	611a      	str	r2, [r3, #16]
 8000c1e:	615a      	str	r2, [r3, #20]
 8000c20:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c22:	1d3b      	adds	r3, r7, #4
 8000c24:	2200      	movs	r2, #0
 8000c26:	601a      	str	r2, [r3, #0]
 8000c28:	605a      	str	r2, [r3, #4]
 8000c2a:	609a      	str	r2, [r3, #8]
 8000c2c:	60da      	str	r2, [r3, #12]
 8000c2e:	611a      	str	r2, [r3, #16]
 8000c30:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART2);
 8000c32:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 8000c36:	f7ff fd71 	bl	800071c <LL_APB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8000c3a:	2001      	movs	r0, #1
 8000c3c:	f7ff fd56 	bl	80006ec <LL_AHB1_GRP1_EnableClock>
  /**USART2 GPIO Configuration
  PA2   ------> USART2_TX
  PA3   ------> USART2_RX
  */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000c40:	230c      	movs	r3, #12
 8000c42:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000c44:	2302      	movs	r3, #2
 8000c46:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000c48:	2300      	movs	r3, #0
 8000c4a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000c50:	2300      	movs	r3, #0
 8000c52:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 8000c54:	2307      	movs	r3, #7
 8000c56:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c58:	1d3b      	adds	r3, r7, #4
 8000c5a:	4619      	mov	r1, r3
 8000c5c:	4810      	ldr	r0, [pc, #64]	@ (8000ca0 <MX_USART2_UART_Init+0x98>)
 8000c5e:	f001 ff63 	bl	8002b28 <LL_GPIO_Init>

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 8000c62:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 8000c66:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8000c68:	2300      	movs	r3, #0
 8000c6a:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	627b      	str	r3, [r7, #36]	@ 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8000c70:	2300      	movs	r3, #0
 8000c72:	62bb      	str	r3, [r7, #40]	@ 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8000c74:	230c      	movs	r3, #12
 8000c76:	62fb      	str	r3, [r7, #44]	@ 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8000c78:	2300      	movs	r3, #0
 8000c7a:	633b      	str	r3, [r7, #48]	@ 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	637b      	str	r3, [r7, #52]	@ 0x34
  LL_USART_Init(USART2, &USART_InitStruct);
 8000c80:	f107 031c 	add.w	r3, r7, #28
 8000c84:	4619      	mov	r1, r3
 8000c86:	4807      	ldr	r0, [pc, #28]	@ (8000ca4 <MX_USART2_UART_Init+0x9c>)
 8000c88:	f002 fb72 	bl	8003370 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART2);
 8000c8c:	4805      	ldr	r0, [pc, #20]	@ (8000ca4 <MX_USART2_UART_Init+0x9c>)
 8000c8e:	f7ff fded 	bl	800086c <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART2);
 8000c92:	4804      	ldr	r0, [pc, #16]	@ (8000ca4 <MX_USART2_UART_Init+0x9c>)
 8000c94:	f7ff fdda 	bl	800084c <LL_USART_Enable>
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000c98:	bf00      	nop
 8000c9a:	3738      	adds	r7, #56	@ 0x38
 8000c9c:	46bd      	mov	sp, r7
 8000c9e:	bd80      	pop	{r7, pc}
 8000ca0:	40020000 	.word	0x40020000
 8000ca4:	40004400 	.word	0x40004400

08000ca8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b088      	sub	sp, #32
 8000cac:	af00      	add	r7, sp, #0
  LL_EXTI_InitTypeDef EXTI_InitStruct = {0};
 8000cae:	f107 0318 	add.w	r3, r7, #24
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	601a      	str	r2, [r3, #0]
 8000cb6:	605a      	str	r2, [r3, #4]
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cb8:	463b      	mov	r3, r7
 8000cba:	2200      	movs	r2, #0
 8000cbc:	601a      	str	r2, [r3, #0]
 8000cbe:	605a      	str	r2, [r3, #4]
 8000cc0:	609a      	str	r2, [r3, #8]
 8000cc2:	60da      	str	r2, [r3, #12]
 8000cc4:	611a      	str	r2, [r3, #16]
 8000cc6:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 8000cc8:	2004      	movs	r0, #4
 8000cca:	f7ff fd0f 	bl	80006ec <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOH);
 8000cce:	2080      	movs	r0, #128	@ 0x80
 8000cd0:	f7ff fd0c 	bl	80006ec <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8000cd4:	2001      	movs	r0, #1
 8000cd6:	f7ff fd09 	bl	80006ec <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8000cda:	2002      	movs	r0, #2
 8000cdc:	f7ff fd06 	bl	80006ec <LL_AHB1_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(GPIOA, LD2_Pin|Output_waveform_Pin);
 8000ce0:	f44f 6184 	mov.w	r1, #1056	@ 0x420
 8000ce4:	481f      	ldr	r0, [pc, #124]	@ (8000d64 <MX_GPIO_Init+0xbc>)
 8000ce6:	f7ff fe51 	bl	800098c <LL_GPIO_ResetOutputPin>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTC, LL_SYSCFG_EXTI_LINE13);
 8000cea:	491f      	ldr	r1, [pc, #124]	@ (8000d68 <MX_GPIO_Init+0xc0>)
 8000cec:	2002      	movs	r0, #2
 8000cee:	f7ff fd2d 	bl	800074c <LL_SYSCFG_SetEXTISource>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_13;
 8000cf2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000cf6:	61bb      	str	r3, [r7, #24]
  EXTI_InitStruct.LineCommand = ENABLE;
 8000cf8:	2301      	movs	r3, #1
 8000cfa:	773b      	strb	r3, [r7, #28]
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	777b      	strb	r3, [r7, #29]
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 8000d00:	2302      	movs	r3, #2
 8000d02:	77bb      	strb	r3, [r7, #30]
  LL_EXTI_Init(&EXTI_InitStruct);
 8000d04:	f107 0318 	add.w	r3, r7, #24
 8000d08:	4618      	mov	r0, r3
 8000d0a:	f001 fd43 	bl	8002794 <LL_EXTI_Init>

  /**/
  LL_GPIO_SetPinPull(B1_GPIO_Port, B1_Pin, LL_GPIO_PULL_NO);
 8000d0e:	2200      	movs	r2, #0
 8000d10:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000d14:	4815      	ldr	r0, [pc, #84]	@ (8000d6c <MX_GPIO_Init+0xc4>)
 8000d16:	f7ff fdfc 	bl	8000912 <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinMode(B1_GPIO_Port, B1_Pin, LL_GPIO_MODE_INPUT);
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000d20:	4812      	ldr	r0, [pc, #72]	@ (8000d6c <MX_GPIO_Init+0xc4>)
 8000d22:	f7ff fdb9 	bl	8000898 <LL_GPIO_SetPinMode>

  /**/
  GPIO_InitStruct.Pin = Input_potentiometer_Pin;
 8000d26:	2302      	movs	r3, #2
 8000d28:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000d2e:	2300      	movs	r3, #0
 8000d30:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(Input_potentiometer_GPIO_Port, &GPIO_InitStruct);
 8000d32:	463b      	mov	r3, r7
 8000d34:	4619      	mov	r1, r3
 8000d36:	480b      	ldr	r0, [pc, #44]	@ (8000d64 <MX_GPIO_Init+0xbc>)
 8000d38:	f001 fef6 	bl	8002b28 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LD2_Pin|Output_waveform_Pin;
 8000d3c:	f44f 6384 	mov.w	r3, #1056	@ 0x420
 8000d40:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000d42:	2301      	movs	r3, #1
 8000d44:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000d46:	2300      	movs	r3, #0
 8000d48:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000d4e:	2300      	movs	r3, #0
 8000d50:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d52:	463b      	mov	r3, r7
 8000d54:	4619      	mov	r1, r3
 8000d56:	4803      	ldr	r0, [pc, #12]	@ (8000d64 <MX_GPIO_Init+0xbc>)
 8000d58:	f001 fee6 	bl	8002b28 <LL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000d5c:	bf00      	nop
 8000d5e:	3720      	adds	r7, #32
 8000d60:	46bd      	mov	sp, r7
 8000d62:	bd80      	pop	{r7, pc}
 8000d64:	40020000 	.word	0x40020000
 8000d68:	00f00003 	.word	0x00f00003
 8000d6c:	40020800 	.word	0x40020800

08000d70 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d70:	b480      	push	{r7}
 8000d72:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d74:	b672      	cpsid	i
}
 8000d76:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d78:	bf00      	nop
 8000d7a:	e7fd      	b.n	8000d78 <Error_Handler+0x8>

08000d7c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d7c:	b480      	push	{r7}
 8000d7e:	b083      	sub	sp, #12
 8000d80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d82:	2300      	movs	r3, #0
 8000d84:	607b      	str	r3, [r7, #4]
 8000d86:	4b10      	ldr	r3, [pc, #64]	@ (8000dc8 <HAL_MspInit+0x4c>)
 8000d88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d8a:	4a0f      	ldr	r2, [pc, #60]	@ (8000dc8 <HAL_MspInit+0x4c>)
 8000d8c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000d90:	6453      	str	r3, [r2, #68]	@ 0x44
 8000d92:	4b0d      	ldr	r3, [pc, #52]	@ (8000dc8 <HAL_MspInit+0x4c>)
 8000d94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d96:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000d9a:	607b      	str	r3, [r7, #4]
 8000d9c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d9e:	2300      	movs	r3, #0
 8000da0:	603b      	str	r3, [r7, #0]
 8000da2:	4b09      	ldr	r3, [pc, #36]	@ (8000dc8 <HAL_MspInit+0x4c>)
 8000da4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000da6:	4a08      	ldr	r2, [pc, #32]	@ (8000dc8 <HAL_MspInit+0x4c>)
 8000da8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000dac:	6413      	str	r3, [r2, #64]	@ 0x40
 8000dae:	4b06      	ldr	r3, [pc, #24]	@ (8000dc8 <HAL_MspInit+0x4c>)
 8000db0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000db2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000db6:	603b      	str	r3, [r7, #0]
 8000db8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000dba:	bf00      	nop
 8000dbc:	370c      	adds	r7, #12
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc4:	4770      	bx	lr
 8000dc6:	bf00      	nop
 8000dc8:	40023800 	.word	0x40023800

08000dcc <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b08a      	sub	sp, #40	@ 0x28
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dd4:	f107 0314 	add.w	r3, r7, #20
 8000dd8:	2200      	movs	r2, #0
 8000dda:	601a      	str	r2, [r3, #0]
 8000ddc:	605a      	str	r2, [r3, #4]
 8000dde:	609a      	str	r2, [r3, #8]
 8000de0:	60da      	str	r2, [r3, #12]
 8000de2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	4a17      	ldr	r2, [pc, #92]	@ (8000e48 <HAL_ADC_MspInit+0x7c>)
 8000dea:	4293      	cmp	r3, r2
 8000dec:	d127      	bne.n	8000e3e <HAL_ADC_MspInit+0x72>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000dee:	2300      	movs	r3, #0
 8000df0:	613b      	str	r3, [r7, #16]
 8000df2:	4b16      	ldr	r3, [pc, #88]	@ (8000e4c <HAL_ADC_MspInit+0x80>)
 8000df4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000df6:	4a15      	ldr	r2, [pc, #84]	@ (8000e4c <HAL_ADC_MspInit+0x80>)
 8000df8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000dfc:	6453      	str	r3, [r2, #68]	@ 0x44
 8000dfe:	4b13      	ldr	r3, [pc, #76]	@ (8000e4c <HAL_ADC_MspInit+0x80>)
 8000e00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e02:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000e06:	613b      	str	r3, [r7, #16]
 8000e08:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	60fb      	str	r3, [r7, #12]
 8000e0e:	4b0f      	ldr	r3, [pc, #60]	@ (8000e4c <HAL_ADC_MspInit+0x80>)
 8000e10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e12:	4a0e      	ldr	r2, [pc, #56]	@ (8000e4c <HAL_ADC_MspInit+0x80>)
 8000e14:	f043 0301 	orr.w	r3, r3, #1
 8000e18:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e1a:	4b0c      	ldr	r3, [pc, #48]	@ (8000e4c <HAL_ADC_MspInit+0x80>)
 8000e1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e1e:	f003 0301 	and.w	r3, r3, #1
 8000e22:	60fb      	str	r3, [r7, #12]
 8000e24:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000e26:	2301      	movs	r3, #1
 8000e28:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e2a:	2303      	movs	r3, #3
 8000e2c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e2e:	2300      	movs	r3, #0
 8000e30:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e32:	f107 0314 	add.w	r3, r7, #20
 8000e36:	4619      	mov	r1, r3
 8000e38:	4805      	ldr	r0, [pc, #20]	@ (8000e50 <HAL_ADC_MspInit+0x84>)
 8000e3a:	f000 fc83 	bl	8001744 <HAL_GPIO_Init>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8000e3e:	bf00      	nop
 8000e40:	3728      	adds	r7, #40	@ 0x28
 8000e42:	46bd      	mov	sp, r7
 8000e44:	bd80      	pop	{r7, pc}
 8000e46:	bf00      	nop
 8000e48:	40012000 	.word	0x40012000
 8000e4c:	40023800 	.word	0x40023800
 8000e50:	40020000 	.word	0x40020000

08000e54 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b084      	sub	sp, #16
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	4a0e      	ldr	r2, [pc, #56]	@ (8000e9c <HAL_TIM_Base_MspInit+0x48>)
 8000e62:	4293      	cmp	r3, r2
 8000e64:	d115      	bne.n	8000e92 <HAL_TIM_Base_MspInit+0x3e>
  {
    /* USER CODE BEGIN TIM3_MspInit 0 */

    /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000e66:	2300      	movs	r3, #0
 8000e68:	60fb      	str	r3, [r7, #12]
 8000e6a:	4b0d      	ldr	r3, [pc, #52]	@ (8000ea0 <HAL_TIM_Base_MspInit+0x4c>)
 8000e6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e6e:	4a0c      	ldr	r2, [pc, #48]	@ (8000ea0 <HAL_TIM_Base_MspInit+0x4c>)
 8000e70:	f043 0302 	orr.w	r3, r3, #2
 8000e74:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e76:	4b0a      	ldr	r3, [pc, #40]	@ (8000ea0 <HAL_TIM_Base_MspInit+0x4c>)
 8000e78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e7a:	f003 0302 	and.w	r3, r3, #2
 8000e7e:	60fb      	str	r3, [r7, #12]
 8000e80:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8000e82:	2200      	movs	r2, #0
 8000e84:	2100      	movs	r1, #0
 8000e86:	201d      	movs	r0, #29
 8000e88:	f000 fc25 	bl	80016d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000e8c:	201d      	movs	r0, #29
 8000e8e:	f000 fc3e 	bl	800170e <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM3_MspInit 1 */

  }

}
 8000e92:	bf00      	nop
 8000e94:	3710      	adds	r7, #16
 8000e96:	46bd      	mov	sp, r7
 8000e98:	bd80      	pop	{r7, pc}
 8000e9a:	bf00      	nop
 8000e9c:	40000400 	.word	0x40000400
 8000ea0:	40023800 	.word	0x40023800

08000ea4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000ea8:	bf00      	nop
 8000eaa:	e7fd      	b.n	8000ea8 <NMI_Handler+0x4>

08000eac <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000eac:	b480      	push	{r7}
 8000eae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000eb0:	bf00      	nop
 8000eb2:	e7fd      	b.n	8000eb0 <HardFault_Handler+0x4>

08000eb4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000eb4:	b480      	push	{r7}
 8000eb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000eb8:	bf00      	nop
 8000eba:	e7fd      	b.n	8000eb8 <MemManage_Handler+0x4>

08000ebc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ebc:	b480      	push	{r7}
 8000ebe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ec0:	bf00      	nop
 8000ec2:	e7fd      	b.n	8000ec0 <BusFault_Handler+0x4>

08000ec4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ec4:	b480      	push	{r7}
 8000ec6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ec8:	bf00      	nop
 8000eca:	e7fd      	b.n	8000ec8 <UsageFault_Handler+0x4>

08000ecc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ecc:	b480      	push	{r7}
 8000ece:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ed0:	bf00      	nop
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed8:	4770      	bx	lr

08000eda <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000eda:	b480      	push	{r7}
 8000edc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ede:	bf00      	nop
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee6:	4770      	bx	lr

08000ee8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ee8:	b480      	push	{r7}
 8000eea:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000eec:	bf00      	nop
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef4:	4770      	bx	lr

08000ef6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ef6:	b580      	push	{r7, lr}
 8000ef8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000efa:	f000 f89b 	bl	8001034 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000efe:	bf00      	nop
 8000f00:	bd80      	pop	{r7, pc}
	...

08000f04 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000f08:	4802      	ldr	r0, [pc, #8]	@ (8000f14 <TIM3_IRQHandler+0x10>)
 8000f0a:	f000 fe47 	bl	8001b9c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000f0e:	bf00      	nop
 8000f10:	bd80      	pop	{r7, pc}
 8000f12:	bf00      	nop
 8000f14:	20000070 	.word	0x20000070

08000f18 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f18:	b480      	push	{r7}
 8000f1a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f1c:	4b06      	ldr	r3, [pc, #24]	@ (8000f38 <SystemInit+0x20>)
 8000f1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000f22:	4a05      	ldr	r2, [pc, #20]	@ (8000f38 <SystemInit+0x20>)
 8000f24:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000f28:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f2c:	bf00      	nop
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f34:	4770      	bx	lr
 8000f36:	bf00      	nop
 8000f38:	e000ed00 	.word	0xe000ed00

08000f3c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000f3c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000f74 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000f40:	f7ff ffea 	bl	8000f18 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000f44:	480c      	ldr	r0, [pc, #48]	@ (8000f78 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000f46:	490d      	ldr	r1, [pc, #52]	@ (8000f7c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000f48:	4a0d      	ldr	r2, [pc, #52]	@ (8000f80 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000f4a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f4c:	e002      	b.n	8000f54 <LoopCopyDataInit>

08000f4e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f4e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f50:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f52:	3304      	adds	r3, #4

08000f54 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f54:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f56:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f58:	d3f9      	bcc.n	8000f4e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f5a:	4a0a      	ldr	r2, [pc, #40]	@ (8000f84 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000f5c:	4c0a      	ldr	r4, [pc, #40]	@ (8000f88 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000f5e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f60:	e001      	b.n	8000f66 <LoopFillZerobss>

08000f62 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f62:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f64:	3204      	adds	r2, #4

08000f66 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f66:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f68:	d3fb      	bcc.n	8000f62 <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8000f6a:	f002 fa75 	bl	8003458 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f6e:	f7ff fd1c 	bl	80009aa <main>
  bx  lr    
 8000f72:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000f74:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000f78:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f7c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000f80:	080034e0 	.word	0x080034e0
  ldr r2, =_sbss
 8000f84:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000f88:	200000bc 	.word	0x200000bc

08000f8c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f8c:	e7fe      	b.n	8000f8c <ADC_IRQHandler>
	...

08000f90 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000f94:	4b0e      	ldr	r3, [pc, #56]	@ (8000fd0 <HAL_Init+0x40>)
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	4a0d      	ldr	r2, [pc, #52]	@ (8000fd0 <HAL_Init+0x40>)
 8000f9a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000f9e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000fa0:	4b0b      	ldr	r3, [pc, #44]	@ (8000fd0 <HAL_Init+0x40>)
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	4a0a      	ldr	r2, [pc, #40]	@ (8000fd0 <HAL_Init+0x40>)
 8000fa6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000faa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000fac:	4b08      	ldr	r3, [pc, #32]	@ (8000fd0 <HAL_Init+0x40>)
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	4a07      	ldr	r2, [pc, #28]	@ (8000fd0 <HAL_Init+0x40>)
 8000fb2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000fb6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fb8:	2003      	movs	r0, #3
 8000fba:	f000 fb81 	bl	80016c0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000fbe:	2000      	movs	r0, #0
 8000fc0:	f000 f808 	bl	8000fd4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000fc4:	f7ff feda 	bl	8000d7c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000fc8:	2300      	movs	r3, #0
}
 8000fca:	4618      	mov	r0, r3
 8000fcc:	bd80      	pop	{r7, pc}
 8000fce:	bf00      	nop
 8000fd0:	40023c00 	.word	0x40023c00

08000fd4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b082      	sub	sp, #8
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000fdc:	4b12      	ldr	r3, [pc, #72]	@ (8001028 <HAL_InitTick+0x54>)
 8000fde:	681a      	ldr	r2, [r3, #0]
 8000fe0:	4b12      	ldr	r3, [pc, #72]	@ (800102c <HAL_InitTick+0x58>)
 8000fe2:	781b      	ldrb	r3, [r3, #0]
 8000fe4:	4619      	mov	r1, r3
 8000fe6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000fea:	fbb3 f3f1 	udiv	r3, r3, r1
 8000fee:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	f000 fb99 	bl	800172a <HAL_SYSTICK_Config>
 8000ff8:	4603      	mov	r3, r0
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d001      	beq.n	8001002 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000ffe:	2301      	movs	r3, #1
 8001000:	e00e      	b.n	8001020 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	2b0f      	cmp	r3, #15
 8001006:	d80a      	bhi.n	800101e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001008:	2200      	movs	r2, #0
 800100a:	6879      	ldr	r1, [r7, #4]
 800100c:	f04f 30ff 	mov.w	r0, #4294967295
 8001010:	f000 fb61 	bl	80016d6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001014:	4a06      	ldr	r2, [pc, #24]	@ (8001030 <HAL_InitTick+0x5c>)
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800101a:	2300      	movs	r3, #0
 800101c:	e000      	b.n	8001020 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800101e:	2301      	movs	r3, #1
}
 8001020:	4618      	mov	r0, r3
 8001022:	3708      	adds	r7, #8
 8001024:	46bd      	mov	sp, r7
 8001026:	bd80      	pop	{r7, pc}
 8001028:	20000000 	.word	0x20000000
 800102c:	20000008 	.word	0x20000008
 8001030:	20000004 	.word	0x20000004

08001034 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001034:	b480      	push	{r7}
 8001036:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001038:	4b06      	ldr	r3, [pc, #24]	@ (8001054 <HAL_IncTick+0x20>)
 800103a:	781b      	ldrb	r3, [r3, #0]
 800103c:	461a      	mov	r2, r3
 800103e:	4b06      	ldr	r3, [pc, #24]	@ (8001058 <HAL_IncTick+0x24>)
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	4413      	add	r3, r2
 8001044:	4a04      	ldr	r2, [pc, #16]	@ (8001058 <HAL_IncTick+0x24>)
 8001046:	6013      	str	r3, [r2, #0]
}
 8001048:	bf00      	nop
 800104a:	46bd      	mov	sp, r7
 800104c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001050:	4770      	bx	lr
 8001052:	bf00      	nop
 8001054:	20000008 	.word	0x20000008
 8001058:	200000b8 	.word	0x200000b8

0800105c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b084      	sub	sp, #16
 8001060:	af00      	add	r7, sp, #0
 8001062:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001064:	2300      	movs	r3, #0
 8001066:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	2b00      	cmp	r3, #0
 800106c:	d101      	bne.n	8001072 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800106e:	2301      	movs	r3, #1
 8001070:	e033      	b.n	80010da <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001076:	2b00      	cmp	r3, #0
 8001078:	d109      	bne.n	800108e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800107a:	6878      	ldr	r0, [r7, #4]
 800107c:	f7ff fea6 	bl	8000dcc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	2200      	movs	r2, #0
 8001084:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	2200      	movs	r2, #0
 800108a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001092:	f003 0310 	and.w	r3, r3, #16
 8001096:	2b00      	cmp	r3, #0
 8001098:	d118      	bne.n	80010cc <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800109e:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80010a2:	f023 0302 	bic.w	r3, r3, #2
 80010a6:	f043 0202 	orr.w	r2, r3, #2
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 80010ae:	6878      	ldr	r0, [r7, #4]
 80010b0:	f000 f93a 	bl	8001328 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	2200      	movs	r2, #0
 80010b8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010be:	f023 0303 	bic.w	r3, r3, #3
 80010c2:	f043 0201 	orr.w	r2, r3, #1
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	641a      	str	r2, [r3, #64]	@ 0x40
 80010ca:	e001      	b.n	80010d0 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80010cc:	2301      	movs	r3, #1
 80010ce:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	2200      	movs	r2, #0
 80010d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 80010d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80010da:	4618      	mov	r0, r3
 80010dc:	3710      	adds	r7, #16
 80010de:	46bd      	mov	sp, r7
 80010e0:	bd80      	pop	{r7, pc}
	...

080010e4 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80010e4:	b480      	push	{r7}
 80010e6:	b085      	sub	sp, #20
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	6078      	str	r0, [r7, #4]
 80010ec:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80010ee:	2300      	movs	r3, #0
 80010f0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80010f8:	2b01      	cmp	r3, #1
 80010fa:	d101      	bne.n	8001100 <HAL_ADC_ConfigChannel+0x1c>
 80010fc:	2302      	movs	r3, #2
 80010fe:	e105      	b.n	800130c <HAL_ADC_ConfigChannel+0x228>
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	2201      	movs	r2, #1
 8001104:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001108:	683b      	ldr	r3, [r7, #0]
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	2b09      	cmp	r3, #9
 800110e:	d925      	bls.n	800115c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	68d9      	ldr	r1, [r3, #12]
 8001116:	683b      	ldr	r3, [r7, #0]
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	b29b      	uxth	r3, r3
 800111c:	461a      	mov	r2, r3
 800111e:	4613      	mov	r3, r2
 8001120:	005b      	lsls	r3, r3, #1
 8001122:	4413      	add	r3, r2
 8001124:	3b1e      	subs	r3, #30
 8001126:	2207      	movs	r2, #7
 8001128:	fa02 f303 	lsl.w	r3, r2, r3
 800112c:	43da      	mvns	r2, r3
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	400a      	ands	r2, r1
 8001134:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	68d9      	ldr	r1, [r3, #12]
 800113c:	683b      	ldr	r3, [r7, #0]
 800113e:	689a      	ldr	r2, [r3, #8]
 8001140:	683b      	ldr	r3, [r7, #0]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	b29b      	uxth	r3, r3
 8001146:	4618      	mov	r0, r3
 8001148:	4603      	mov	r3, r0
 800114a:	005b      	lsls	r3, r3, #1
 800114c:	4403      	add	r3, r0
 800114e:	3b1e      	subs	r3, #30
 8001150:	409a      	lsls	r2, r3
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	430a      	orrs	r2, r1
 8001158:	60da      	str	r2, [r3, #12]
 800115a:	e022      	b.n	80011a2 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	6919      	ldr	r1, [r3, #16]
 8001162:	683b      	ldr	r3, [r7, #0]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	b29b      	uxth	r3, r3
 8001168:	461a      	mov	r2, r3
 800116a:	4613      	mov	r3, r2
 800116c:	005b      	lsls	r3, r3, #1
 800116e:	4413      	add	r3, r2
 8001170:	2207      	movs	r2, #7
 8001172:	fa02 f303 	lsl.w	r3, r2, r3
 8001176:	43da      	mvns	r2, r3
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	400a      	ands	r2, r1
 800117e:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	6919      	ldr	r1, [r3, #16]
 8001186:	683b      	ldr	r3, [r7, #0]
 8001188:	689a      	ldr	r2, [r3, #8]
 800118a:	683b      	ldr	r3, [r7, #0]
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	b29b      	uxth	r3, r3
 8001190:	4618      	mov	r0, r3
 8001192:	4603      	mov	r3, r0
 8001194:	005b      	lsls	r3, r3, #1
 8001196:	4403      	add	r3, r0
 8001198:	409a      	lsls	r2, r3
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	430a      	orrs	r2, r1
 80011a0:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80011a2:	683b      	ldr	r3, [r7, #0]
 80011a4:	685b      	ldr	r3, [r3, #4]
 80011a6:	2b06      	cmp	r3, #6
 80011a8:	d824      	bhi.n	80011f4 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80011b0:	683b      	ldr	r3, [r7, #0]
 80011b2:	685a      	ldr	r2, [r3, #4]
 80011b4:	4613      	mov	r3, r2
 80011b6:	009b      	lsls	r3, r3, #2
 80011b8:	4413      	add	r3, r2
 80011ba:	3b05      	subs	r3, #5
 80011bc:	221f      	movs	r2, #31
 80011be:	fa02 f303 	lsl.w	r3, r2, r3
 80011c2:	43da      	mvns	r2, r3
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	400a      	ands	r2, r1
 80011ca:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80011d2:	683b      	ldr	r3, [r7, #0]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	b29b      	uxth	r3, r3
 80011d8:	4618      	mov	r0, r3
 80011da:	683b      	ldr	r3, [r7, #0]
 80011dc:	685a      	ldr	r2, [r3, #4]
 80011de:	4613      	mov	r3, r2
 80011e0:	009b      	lsls	r3, r3, #2
 80011e2:	4413      	add	r3, r2
 80011e4:	3b05      	subs	r3, #5
 80011e6:	fa00 f203 	lsl.w	r2, r0, r3
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	430a      	orrs	r2, r1
 80011f0:	635a      	str	r2, [r3, #52]	@ 0x34
 80011f2:	e04c      	b.n	800128e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80011f4:	683b      	ldr	r3, [r7, #0]
 80011f6:	685b      	ldr	r3, [r3, #4]
 80011f8:	2b0c      	cmp	r3, #12
 80011fa:	d824      	bhi.n	8001246 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001202:	683b      	ldr	r3, [r7, #0]
 8001204:	685a      	ldr	r2, [r3, #4]
 8001206:	4613      	mov	r3, r2
 8001208:	009b      	lsls	r3, r3, #2
 800120a:	4413      	add	r3, r2
 800120c:	3b23      	subs	r3, #35	@ 0x23
 800120e:	221f      	movs	r2, #31
 8001210:	fa02 f303 	lsl.w	r3, r2, r3
 8001214:	43da      	mvns	r2, r3
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	400a      	ands	r2, r1
 800121c:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001224:	683b      	ldr	r3, [r7, #0]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	b29b      	uxth	r3, r3
 800122a:	4618      	mov	r0, r3
 800122c:	683b      	ldr	r3, [r7, #0]
 800122e:	685a      	ldr	r2, [r3, #4]
 8001230:	4613      	mov	r3, r2
 8001232:	009b      	lsls	r3, r3, #2
 8001234:	4413      	add	r3, r2
 8001236:	3b23      	subs	r3, #35	@ 0x23
 8001238:	fa00 f203 	lsl.w	r2, r0, r3
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	430a      	orrs	r2, r1
 8001242:	631a      	str	r2, [r3, #48]	@ 0x30
 8001244:	e023      	b.n	800128e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800124c:	683b      	ldr	r3, [r7, #0]
 800124e:	685a      	ldr	r2, [r3, #4]
 8001250:	4613      	mov	r3, r2
 8001252:	009b      	lsls	r3, r3, #2
 8001254:	4413      	add	r3, r2
 8001256:	3b41      	subs	r3, #65	@ 0x41
 8001258:	221f      	movs	r2, #31
 800125a:	fa02 f303 	lsl.w	r3, r2, r3
 800125e:	43da      	mvns	r2, r3
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	400a      	ands	r2, r1
 8001266:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800126e:	683b      	ldr	r3, [r7, #0]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	b29b      	uxth	r3, r3
 8001274:	4618      	mov	r0, r3
 8001276:	683b      	ldr	r3, [r7, #0]
 8001278:	685a      	ldr	r2, [r3, #4]
 800127a:	4613      	mov	r3, r2
 800127c:	009b      	lsls	r3, r3, #2
 800127e:	4413      	add	r3, r2
 8001280:	3b41      	subs	r3, #65	@ 0x41
 8001282:	fa00 f203 	lsl.w	r2, r0, r3
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	430a      	orrs	r2, r1
 800128c:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800128e:	4b22      	ldr	r3, [pc, #136]	@ (8001318 <HAL_ADC_ConfigChannel+0x234>)
 8001290:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	4a21      	ldr	r2, [pc, #132]	@ (800131c <HAL_ADC_ConfigChannel+0x238>)
 8001298:	4293      	cmp	r3, r2
 800129a:	d109      	bne.n	80012b0 <HAL_ADC_ConfigChannel+0x1cc>
 800129c:	683b      	ldr	r3, [r7, #0]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	2b12      	cmp	r3, #18
 80012a2:	d105      	bne.n	80012b0 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80012a4:	68fb      	ldr	r3, [r7, #12]
 80012a6:	685b      	ldr	r3, [r3, #4]
 80012a8:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 80012ac:	68fb      	ldr	r3, [r7, #12]
 80012ae:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	4a19      	ldr	r2, [pc, #100]	@ (800131c <HAL_ADC_ConfigChannel+0x238>)
 80012b6:	4293      	cmp	r3, r2
 80012b8:	d123      	bne.n	8001302 <HAL_ADC_ConfigChannel+0x21e>
 80012ba:	683b      	ldr	r3, [r7, #0]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	2b10      	cmp	r3, #16
 80012c0:	d003      	beq.n	80012ca <HAL_ADC_ConfigChannel+0x1e6>
 80012c2:	683b      	ldr	r3, [r7, #0]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	2b11      	cmp	r3, #17
 80012c8:	d11b      	bne.n	8001302 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80012ca:	68fb      	ldr	r3, [r7, #12]
 80012cc:	685b      	ldr	r3, [r3, #4]
 80012ce:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 80012d2:	68fb      	ldr	r3, [r7, #12]
 80012d4:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80012d6:	683b      	ldr	r3, [r7, #0]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	2b10      	cmp	r3, #16
 80012dc:	d111      	bne.n	8001302 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80012de:	4b10      	ldr	r3, [pc, #64]	@ (8001320 <HAL_ADC_ConfigChannel+0x23c>)
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	4a10      	ldr	r2, [pc, #64]	@ (8001324 <HAL_ADC_ConfigChannel+0x240>)
 80012e4:	fba2 2303 	umull	r2, r3, r2, r3
 80012e8:	0c9a      	lsrs	r2, r3, #18
 80012ea:	4613      	mov	r3, r2
 80012ec:	009b      	lsls	r3, r3, #2
 80012ee:	4413      	add	r3, r2
 80012f0:	005b      	lsls	r3, r3, #1
 80012f2:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80012f4:	e002      	b.n	80012fc <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80012f6:	68bb      	ldr	r3, [r7, #8]
 80012f8:	3b01      	subs	r3, #1
 80012fa:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80012fc:	68bb      	ldr	r3, [r7, #8]
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d1f9      	bne.n	80012f6 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	2200      	movs	r2, #0
 8001306:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 800130a:	2300      	movs	r3, #0
}
 800130c:	4618      	mov	r0, r3
 800130e:	3714      	adds	r7, #20
 8001310:	46bd      	mov	sp, r7
 8001312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001316:	4770      	bx	lr
 8001318:	40012300 	.word	0x40012300
 800131c:	40012000 	.word	0x40012000
 8001320:	20000000 	.word	0x20000000
 8001324:	431bde83 	.word	0x431bde83

08001328 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001328:	b480      	push	{r7}
 800132a:	b085      	sub	sp, #20
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001330:	4b79      	ldr	r3, [pc, #484]	@ (8001518 <ADC_Init+0x1f0>)
 8001332:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001334:	68fb      	ldr	r3, [r7, #12]
 8001336:	685b      	ldr	r3, [r3, #4]
 8001338:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800133c:	68fb      	ldr	r3, [r7, #12]
 800133e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001340:	68fb      	ldr	r3, [r7, #12]
 8001342:	685a      	ldr	r2, [r3, #4]
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	685b      	ldr	r3, [r3, #4]
 8001348:	431a      	orrs	r2, r3
 800134a:	68fb      	ldr	r3, [r7, #12]
 800134c:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	685a      	ldr	r2, [r3, #4]
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800135c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	6859      	ldr	r1, [r3, #4]
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	691b      	ldr	r3, [r3, #16]
 8001368:	021a      	lsls	r2, r3, #8
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	430a      	orrs	r2, r1
 8001370:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	685a      	ldr	r2, [r3, #4]
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8001380:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	6859      	ldr	r1, [r3, #4]
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	689a      	ldr	r2, [r3, #8]
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	430a      	orrs	r2, r1
 8001392:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	689a      	ldr	r2, [r3, #8]
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80013a2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	6899      	ldr	r1, [r3, #8]
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	68da      	ldr	r2, [r3, #12]
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	430a      	orrs	r2, r1
 80013b4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80013ba:	4a58      	ldr	r2, [pc, #352]	@ (800151c <ADC_Init+0x1f4>)
 80013bc:	4293      	cmp	r3, r2
 80013be:	d022      	beq.n	8001406 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	689a      	ldr	r2, [r3, #8]
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80013ce:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	6899      	ldr	r1, [r3, #8]
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	430a      	orrs	r2, r1
 80013e0:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	689a      	ldr	r2, [r3, #8]
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80013f0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	6899      	ldr	r1, [r3, #8]
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	430a      	orrs	r2, r1
 8001402:	609a      	str	r2, [r3, #8]
 8001404:	e00f      	b.n	8001426 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	689a      	ldr	r2, [r3, #8]
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001414:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	689a      	ldr	r2, [r3, #8]
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001424:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	689a      	ldr	r2, [r3, #8]
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	f022 0202 	bic.w	r2, r2, #2
 8001434:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	6899      	ldr	r1, [r3, #8]
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	7e1b      	ldrb	r3, [r3, #24]
 8001440:	005a      	lsls	r2, r3, #1
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	430a      	orrs	r2, r1
 8001448:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001450:	2b00      	cmp	r3, #0
 8001452:	d01b      	beq.n	800148c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	685a      	ldr	r2, [r3, #4]
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001462:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	685a      	ldr	r2, [r3, #4]
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8001472:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	6859      	ldr	r1, [r3, #4]
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800147e:	3b01      	subs	r3, #1
 8001480:	035a      	lsls	r2, r3, #13
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	430a      	orrs	r2, r1
 8001488:	605a      	str	r2, [r3, #4]
 800148a:	e007      	b.n	800149c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	685a      	ldr	r2, [r3, #4]
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800149a:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 80014aa:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	69db      	ldr	r3, [r3, #28]
 80014b6:	3b01      	subs	r3, #1
 80014b8:	051a      	lsls	r2, r3, #20
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	430a      	orrs	r2, r1
 80014c0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	689a      	ldr	r2, [r3, #8]
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80014d0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	6899      	ldr	r1, [r3, #8]
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80014de:	025a      	lsls	r2, r3, #9
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	430a      	orrs	r2, r1
 80014e6:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	689a      	ldr	r2, [r3, #8]
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80014f6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	6899      	ldr	r1, [r3, #8]
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	695b      	ldr	r3, [r3, #20]
 8001502:	029a      	lsls	r2, r3, #10
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	430a      	orrs	r2, r1
 800150a:	609a      	str	r2, [r3, #8]
}
 800150c:	bf00      	nop
 800150e:	3714      	adds	r7, #20
 8001510:	46bd      	mov	sp, r7
 8001512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001516:	4770      	bx	lr
 8001518:	40012300 	.word	0x40012300
 800151c:	0f000001 	.word	0x0f000001

08001520 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001520:	b480      	push	{r7}
 8001522:	b085      	sub	sp, #20
 8001524:	af00      	add	r7, sp, #0
 8001526:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	f003 0307 	and.w	r3, r3, #7
 800152e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001530:	4b0c      	ldr	r3, [pc, #48]	@ (8001564 <__NVIC_SetPriorityGrouping+0x44>)
 8001532:	68db      	ldr	r3, [r3, #12]
 8001534:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001536:	68ba      	ldr	r2, [r7, #8]
 8001538:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800153c:	4013      	ands	r3, r2
 800153e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001544:	68bb      	ldr	r3, [r7, #8]
 8001546:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001548:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800154c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001550:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001552:	4a04      	ldr	r2, [pc, #16]	@ (8001564 <__NVIC_SetPriorityGrouping+0x44>)
 8001554:	68bb      	ldr	r3, [r7, #8]
 8001556:	60d3      	str	r3, [r2, #12]
}
 8001558:	bf00      	nop
 800155a:	3714      	adds	r7, #20
 800155c:	46bd      	mov	sp, r7
 800155e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001562:	4770      	bx	lr
 8001564:	e000ed00 	.word	0xe000ed00

08001568 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001568:	b480      	push	{r7}
 800156a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800156c:	4b04      	ldr	r3, [pc, #16]	@ (8001580 <__NVIC_GetPriorityGrouping+0x18>)
 800156e:	68db      	ldr	r3, [r3, #12]
 8001570:	0a1b      	lsrs	r3, r3, #8
 8001572:	f003 0307 	and.w	r3, r3, #7
}
 8001576:	4618      	mov	r0, r3
 8001578:	46bd      	mov	sp, r7
 800157a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157e:	4770      	bx	lr
 8001580:	e000ed00 	.word	0xe000ed00

08001584 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001584:	b480      	push	{r7}
 8001586:	b083      	sub	sp, #12
 8001588:	af00      	add	r7, sp, #0
 800158a:	4603      	mov	r3, r0
 800158c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800158e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001592:	2b00      	cmp	r3, #0
 8001594:	db0b      	blt.n	80015ae <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001596:	79fb      	ldrb	r3, [r7, #7]
 8001598:	f003 021f 	and.w	r2, r3, #31
 800159c:	4907      	ldr	r1, [pc, #28]	@ (80015bc <__NVIC_EnableIRQ+0x38>)
 800159e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015a2:	095b      	lsrs	r3, r3, #5
 80015a4:	2001      	movs	r0, #1
 80015a6:	fa00 f202 	lsl.w	r2, r0, r2
 80015aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80015ae:	bf00      	nop
 80015b0:	370c      	adds	r7, #12
 80015b2:	46bd      	mov	sp, r7
 80015b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b8:	4770      	bx	lr
 80015ba:	bf00      	nop
 80015bc:	e000e100 	.word	0xe000e100

080015c0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80015c0:	b480      	push	{r7}
 80015c2:	b083      	sub	sp, #12
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	4603      	mov	r3, r0
 80015c8:	6039      	str	r1, [r7, #0]
 80015ca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	db0a      	blt.n	80015ea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015d4:	683b      	ldr	r3, [r7, #0]
 80015d6:	b2da      	uxtb	r2, r3
 80015d8:	490c      	ldr	r1, [pc, #48]	@ (800160c <__NVIC_SetPriority+0x4c>)
 80015da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015de:	0112      	lsls	r2, r2, #4
 80015e0:	b2d2      	uxtb	r2, r2
 80015e2:	440b      	add	r3, r1
 80015e4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80015e8:	e00a      	b.n	8001600 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015ea:	683b      	ldr	r3, [r7, #0]
 80015ec:	b2da      	uxtb	r2, r3
 80015ee:	4908      	ldr	r1, [pc, #32]	@ (8001610 <__NVIC_SetPriority+0x50>)
 80015f0:	79fb      	ldrb	r3, [r7, #7]
 80015f2:	f003 030f 	and.w	r3, r3, #15
 80015f6:	3b04      	subs	r3, #4
 80015f8:	0112      	lsls	r2, r2, #4
 80015fa:	b2d2      	uxtb	r2, r2
 80015fc:	440b      	add	r3, r1
 80015fe:	761a      	strb	r2, [r3, #24]
}
 8001600:	bf00      	nop
 8001602:	370c      	adds	r7, #12
 8001604:	46bd      	mov	sp, r7
 8001606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160a:	4770      	bx	lr
 800160c:	e000e100 	.word	0xe000e100
 8001610:	e000ed00 	.word	0xe000ed00

08001614 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001614:	b480      	push	{r7}
 8001616:	b089      	sub	sp, #36	@ 0x24
 8001618:	af00      	add	r7, sp, #0
 800161a:	60f8      	str	r0, [r7, #12]
 800161c:	60b9      	str	r1, [r7, #8]
 800161e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	f003 0307 	and.w	r3, r3, #7
 8001626:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001628:	69fb      	ldr	r3, [r7, #28]
 800162a:	f1c3 0307 	rsb	r3, r3, #7
 800162e:	2b04      	cmp	r3, #4
 8001630:	bf28      	it	cs
 8001632:	2304      	movcs	r3, #4
 8001634:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001636:	69fb      	ldr	r3, [r7, #28]
 8001638:	3304      	adds	r3, #4
 800163a:	2b06      	cmp	r3, #6
 800163c:	d902      	bls.n	8001644 <NVIC_EncodePriority+0x30>
 800163e:	69fb      	ldr	r3, [r7, #28]
 8001640:	3b03      	subs	r3, #3
 8001642:	e000      	b.n	8001646 <NVIC_EncodePriority+0x32>
 8001644:	2300      	movs	r3, #0
 8001646:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001648:	f04f 32ff 	mov.w	r2, #4294967295
 800164c:	69bb      	ldr	r3, [r7, #24]
 800164e:	fa02 f303 	lsl.w	r3, r2, r3
 8001652:	43da      	mvns	r2, r3
 8001654:	68bb      	ldr	r3, [r7, #8]
 8001656:	401a      	ands	r2, r3
 8001658:	697b      	ldr	r3, [r7, #20]
 800165a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800165c:	f04f 31ff 	mov.w	r1, #4294967295
 8001660:	697b      	ldr	r3, [r7, #20]
 8001662:	fa01 f303 	lsl.w	r3, r1, r3
 8001666:	43d9      	mvns	r1, r3
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800166c:	4313      	orrs	r3, r2
         );
}
 800166e:	4618      	mov	r0, r3
 8001670:	3724      	adds	r7, #36	@ 0x24
 8001672:	46bd      	mov	sp, r7
 8001674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001678:	4770      	bx	lr
	...

0800167c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	b082      	sub	sp, #8
 8001680:	af00      	add	r7, sp, #0
 8001682:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	3b01      	subs	r3, #1
 8001688:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800168c:	d301      	bcc.n	8001692 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800168e:	2301      	movs	r3, #1
 8001690:	e00f      	b.n	80016b2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001692:	4a0a      	ldr	r2, [pc, #40]	@ (80016bc <SysTick_Config+0x40>)
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	3b01      	subs	r3, #1
 8001698:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800169a:	210f      	movs	r1, #15
 800169c:	f04f 30ff 	mov.w	r0, #4294967295
 80016a0:	f7ff ff8e 	bl	80015c0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80016a4:	4b05      	ldr	r3, [pc, #20]	@ (80016bc <SysTick_Config+0x40>)
 80016a6:	2200      	movs	r2, #0
 80016a8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80016aa:	4b04      	ldr	r3, [pc, #16]	@ (80016bc <SysTick_Config+0x40>)
 80016ac:	2207      	movs	r2, #7
 80016ae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80016b0:	2300      	movs	r3, #0
}
 80016b2:	4618      	mov	r0, r3
 80016b4:	3708      	adds	r7, #8
 80016b6:	46bd      	mov	sp, r7
 80016b8:	bd80      	pop	{r7, pc}
 80016ba:	bf00      	nop
 80016bc:	e000e010 	.word	0xe000e010

080016c0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b082      	sub	sp, #8
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80016c8:	6878      	ldr	r0, [r7, #4]
 80016ca:	f7ff ff29 	bl	8001520 <__NVIC_SetPriorityGrouping>
}
 80016ce:	bf00      	nop
 80016d0:	3708      	adds	r7, #8
 80016d2:	46bd      	mov	sp, r7
 80016d4:	bd80      	pop	{r7, pc}

080016d6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80016d6:	b580      	push	{r7, lr}
 80016d8:	b086      	sub	sp, #24
 80016da:	af00      	add	r7, sp, #0
 80016dc:	4603      	mov	r3, r0
 80016de:	60b9      	str	r1, [r7, #8]
 80016e0:	607a      	str	r2, [r7, #4]
 80016e2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80016e4:	2300      	movs	r3, #0
 80016e6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80016e8:	f7ff ff3e 	bl	8001568 <__NVIC_GetPriorityGrouping>
 80016ec:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80016ee:	687a      	ldr	r2, [r7, #4]
 80016f0:	68b9      	ldr	r1, [r7, #8]
 80016f2:	6978      	ldr	r0, [r7, #20]
 80016f4:	f7ff ff8e 	bl	8001614 <NVIC_EncodePriority>
 80016f8:	4602      	mov	r2, r0
 80016fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016fe:	4611      	mov	r1, r2
 8001700:	4618      	mov	r0, r3
 8001702:	f7ff ff5d 	bl	80015c0 <__NVIC_SetPriority>
}
 8001706:	bf00      	nop
 8001708:	3718      	adds	r7, #24
 800170a:	46bd      	mov	sp, r7
 800170c:	bd80      	pop	{r7, pc}

0800170e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800170e:	b580      	push	{r7, lr}
 8001710:	b082      	sub	sp, #8
 8001712:	af00      	add	r7, sp, #0
 8001714:	4603      	mov	r3, r0
 8001716:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001718:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800171c:	4618      	mov	r0, r3
 800171e:	f7ff ff31 	bl	8001584 <__NVIC_EnableIRQ>
}
 8001722:	bf00      	nop
 8001724:	3708      	adds	r7, #8
 8001726:	46bd      	mov	sp, r7
 8001728:	bd80      	pop	{r7, pc}

0800172a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800172a:	b580      	push	{r7, lr}
 800172c:	b082      	sub	sp, #8
 800172e:	af00      	add	r7, sp, #0
 8001730:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001732:	6878      	ldr	r0, [r7, #4]
 8001734:	f7ff ffa2 	bl	800167c <SysTick_Config>
 8001738:	4603      	mov	r3, r0
}
 800173a:	4618      	mov	r0, r3
 800173c:	3708      	adds	r7, #8
 800173e:	46bd      	mov	sp, r7
 8001740:	bd80      	pop	{r7, pc}
	...

08001744 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001744:	b480      	push	{r7}
 8001746:	b089      	sub	sp, #36	@ 0x24
 8001748:	af00      	add	r7, sp, #0
 800174a:	6078      	str	r0, [r7, #4]
 800174c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800174e:	2300      	movs	r3, #0
 8001750:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001752:	2300      	movs	r3, #0
 8001754:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001756:	2300      	movs	r3, #0
 8001758:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800175a:	2300      	movs	r3, #0
 800175c:	61fb      	str	r3, [r7, #28]
 800175e:	e159      	b.n	8001a14 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001760:	2201      	movs	r2, #1
 8001762:	69fb      	ldr	r3, [r7, #28]
 8001764:	fa02 f303 	lsl.w	r3, r2, r3
 8001768:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800176a:	683b      	ldr	r3, [r7, #0]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	697a      	ldr	r2, [r7, #20]
 8001770:	4013      	ands	r3, r2
 8001772:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001774:	693a      	ldr	r2, [r7, #16]
 8001776:	697b      	ldr	r3, [r7, #20]
 8001778:	429a      	cmp	r2, r3
 800177a:	f040 8148 	bne.w	8001a0e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800177e:	683b      	ldr	r3, [r7, #0]
 8001780:	685b      	ldr	r3, [r3, #4]
 8001782:	f003 0303 	and.w	r3, r3, #3
 8001786:	2b01      	cmp	r3, #1
 8001788:	d005      	beq.n	8001796 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800178a:	683b      	ldr	r3, [r7, #0]
 800178c:	685b      	ldr	r3, [r3, #4]
 800178e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001792:	2b02      	cmp	r3, #2
 8001794:	d130      	bne.n	80017f8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	689b      	ldr	r3, [r3, #8]
 800179a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800179c:	69fb      	ldr	r3, [r7, #28]
 800179e:	005b      	lsls	r3, r3, #1
 80017a0:	2203      	movs	r2, #3
 80017a2:	fa02 f303 	lsl.w	r3, r2, r3
 80017a6:	43db      	mvns	r3, r3
 80017a8:	69ba      	ldr	r2, [r7, #24]
 80017aa:	4013      	ands	r3, r2
 80017ac:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80017ae:	683b      	ldr	r3, [r7, #0]
 80017b0:	68da      	ldr	r2, [r3, #12]
 80017b2:	69fb      	ldr	r3, [r7, #28]
 80017b4:	005b      	lsls	r3, r3, #1
 80017b6:	fa02 f303 	lsl.w	r3, r2, r3
 80017ba:	69ba      	ldr	r2, [r7, #24]
 80017bc:	4313      	orrs	r3, r2
 80017be:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	69ba      	ldr	r2, [r7, #24]
 80017c4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	685b      	ldr	r3, [r3, #4]
 80017ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80017cc:	2201      	movs	r2, #1
 80017ce:	69fb      	ldr	r3, [r7, #28]
 80017d0:	fa02 f303 	lsl.w	r3, r2, r3
 80017d4:	43db      	mvns	r3, r3
 80017d6:	69ba      	ldr	r2, [r7, #24]
 80017d8:	4013      	ands	r3, r2
 80017da:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80017dc:	683b      	ldr	r3, [r7, #0]
 80017de:	685b      	ldr	r3, [r3, #4]
 80017e0:	091b      	lsrs	r3, r3, #4
 80017e2:	f003 0201 	and.w	r2, r3, #1
 80017e6:	69fb      	ldr	r3, [r7, #28]
 80017e8:	fa02 f303 	lsl.w	r3, r2, r3
 80017ec:	69ba      	ldr	r2, [r7, #24]
 80017ee:	4313      	orrs	r3, r2
 80017f0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	69ba      	ldr	r2, [r7, #24]
 80017f6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80017f8:	683b      	ldr	r3, [r7, #0]
 80017fa:	685b      	ldr	r3, [r3, #4]
 80017fc:	f003 0303 	and.w	r3, r3, #3
 8001800:	2b03      	cmp	r3, #3
 8001802:	d017      	beq.n	8001834 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	68db      	ldr	r3, [r3, #12]
 8001808:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800180a:	69fb      	ldr	r3, [r7, #28]
 800180c:	005b      	lsls	r3, r3, #1
 800180e:	2203      	movs	r2, #3
 8001810:	fa02 f303 	lsl.w	r3, r2, r3
 8001814:	43db      	mvns	r3, r3
 8001816:	69ba      	ldr	r2, [r7, #24]
 8001818:	4013      	ands	r3, r2
 800181a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800181c:	683b      	ldr	r3, [r7, #0]
 800181e:	689a      	ldr	r2, [r3, #8]
 8001820:	69fb      	ldr	r3, [r7, #28]
 8001822:	005b      	lsls	r3, r3, #1
 8001824:	fa02 f303 	lsl.w	r3, r2, r3
 8001828:	69ba      	ldr	r2, [r7, #24]
 800182a:	4313      	orrs	r3, r2
 800182c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	69ba      	ldr	r2, [r7, #24]
 8001832:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001834:	683b      	ldr	r3, [r7, #0]
 8001836:	685b      	ldr	r3, [r3, #4]
 8001838:	f003 0303 	and.w	r3, r3, #3
 800183c:	2b02      	cmp	r3, #2
 800183e:	d123      	bne.n	8001888 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001840:	69fb      	ldr	r3, [r7, #28]
 8001842:	08da      	lsrs	r2, r3, #3
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	3208      	adds	r2, #8
 8001848:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800184c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800184e:	69fb      	ldr	r3, [r7, #28]
 8001850:	f003 0307 	and.w	r3, r3, #7
 8001854:	009b      	lsls	r3, r3, #2
 8001856:	220f      	movs	r2, #15
 8001858:	fa02 f303 	lsl.w	r3, r2, r3
 800185c:	43db      	mvns	r3, r3
 800185e:	69ba      	ldr	r2, [r7, #24]
 8001860:	4013      	ands	r3, r2
 8001862:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001864:	683b      	ldr	r3, [r7, #0]
 8001866:	691a      	ldr	r2, [r3, #16]
 8001868:	69fb      	ldr	r3, [r7, #28]
 800186a:	f003 0307 	and.w	r3, r3, #7
 800186e:	009b      	lsls	r3, r3, #2
 8001870:	fa02 f303 	lsl.w	r3, r2, r3
 8001874:	69ba      	ldr	r2, [r7, #24]
 8001876:	4313      	orrs	r3, r2
 8001878:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800187a:	69fb      	ldr	r3, [r7, #28]
 800187c:	08da      	lsrs	r2, r3, #3
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	3208      	adds	r2, #8
 8001882:	69b9      	ldr	r1, [r7, #24]
 8001884:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800188e:	69fb      	ldr	r3, [r7, #28]
 8001890:	005b      	lsls	r3, r3, #1
 8001892:	2203      	movs	r2, #3
 8001894:	fa02 f303 	lsl.w	r3, r2, r3
 8001898:	43db      	mvns	r3, r3
 800189a:	69ba      	ldr	r2, [r7, #24]
 800189c:	4013      	ands	r3, r2
 800189e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80018a0:	683b      	ldr	r3, [r7, #0]
 80018a2:	685b      	ldr	r3, [r3, #4]
 80018a4:	f003 0203 	and.w	r2, r3, #3
 80018a8:	69fb      	ldr	r3, [r7, #28]
 80018aa:	005b      	lsls	r3, r3, #1
 80018ac:	fa02 f303 	lsl.w	r3, r2, r3
 80018b0:	69ba      	ldr	r2, [r7, #24]
 80018b2:	4313      	orrs	r3, r2
 80018b4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	69ba      	ldr	r2, [r7, #24]
 80018ba:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80018bc:	683b      	ldr	r3, [r7, #0]
 80018be:	685b      	ldr	r3, [r3, #4]
 80018c0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	f000 80a2 	beq.w	8001a0e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018ca:	2300      	movs	r3, #0
 80018cc:	60fb      	str	r3, [r7, #12]
 80018ce:	4b57      	ldr	r3, [pc, #348]	@ (8001a2c <HAL_GPIO_Init+0x2e8>)
 80018d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018d2:	4a56      	ldr	r2, [pc, #344]	@ (8001a2c <HAL_GPIO_Init+0x2e8>)
 80018d4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80018d8:	6453      	str	r3, [r2, #68]	@ 0x44
 80018da:	4b54      	ldr	r3, [pc, #336]	@ (8001a2c <HAL_GPIO_Init+0x2e8>)
 80018dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018de:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80018e2:	60fb      	str	r3, [r7, #12]
 80018e4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80018e6:	4a52      	ldr	r2, [pc, #328]	@ (8001a30 <HAL_GPIO_Init+0x2ec>)
 80018e8:	69fb      	ldr	r3, [r7, #28]
 80018ea:	089b      	lsrs	r3, r3, #2
 80018ec:	3302      	adds	r3, #2
 80018ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80018f4:	69fb      	ldr	r3, [r7, #28]
 80018f6:	f003 0303 	and.w	r3, r3, #3
 80018fa:	009b      	lsls	r3, r3, #2
 80018fc:	220f      	movs	r2, #15
 80018fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001902:	43db      	mvns	r3, r3
 8001904:	69ba      	ldr	r2, [r7, #24]
 8001906:	4013      	ands	r3, r2
 8001908:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	4a49      	ldr	r2, [pc, #292]	@ (8001a34 <HAL_GPIO_Init+0x2f0>)
 800190e:	4293      	cmp	r3, r2
 8001910:	d019      	beq.n	8001946 <HAL_GPIO_Init+0x202>
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	4a48      	ldr	r2, [pc, #288]	@ (8001a38 <HAL_GPIO_Init+0x2f4>)
 8001916:	4293      	cmp	r3, r2
 8001918:	d013      	beq.n	8001942 <HAL_GPIO_Init+0x1fe>
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	4a47      	ldr	r2, [pc, #284]	@ (8001a3c <HAL_GPIO_Init+0x2f8>)
 800191e:	4293      	cmp	r3, r2
 8001920:	d00d      	beq.n	800193e <HAL_GPIO_Init+0x1fa>
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	4a46      	ldr	r2, [pc, #280]	@ (8001a40 <HAL_GPIO_Init+0x2fc>)
 8001926:	4293      	cmp	r3, r2
 8001928:	d007      	beq.n	800193a <HAL_GPIO_Init+0x1f6>
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	4a45      	ldr	r2, [pc, #276]	@ (8001a44 <HAL_GPIO_Init+0x300>)
 800192e:	4293      	cmp	r3, r2
 8001930:	d101      	bne.n	8001936 <HAL_GPIO_Init+0x1f2>
 8001932:	2304      	movs	r3, #4
 8001934:	e008      	b.n	8001948 <HAL_GPIO_Init+0x204>
 8001936:	2307      	movs	r3, #7
 8001938:	e006      	b.n	8001948 <HAL_GPIO_Init+0x204>
 800193a:	2303      	movs	r3, #3
 800193c:	e004      	b.n	8001948 <HAL_GPIO_Init+0x204>
 800193e:	2302      	movs	r3, #2
 8001940:	e002      	b.n	8001948 <HAL_GPIO_Init+0x204>
 8001942:	2301      	movs	r3, #1
 8001944:	e000      	b.n	8001948 <HAL_GPIO_Init+0x204>
 8001946:	2300      	movs	r3, #0
 8001948:	69fa      	ldr	r2, [r7, #28]
 800194a:	f002 0203 	and.w	r2, r2, #3
 800194e:	0092      	lsls	r2, r2, #2
 8001950:	4093      	lsls	r3, r2
 8001952:	69ba      	ldr	r2, [r7, #24]
 8001954:	4313      	orrs	r3, r2
 8001956:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001958:	4935      	ldr	r1, [pc, #212]	@ (8001a30 <HAL_GPIO_Init+0x2ec>)
 800195a:	69fb      	ldr	r3, [r7, #28]
 800195c:	089b      	lsrs	r3, r3, #2
 800195e:	3302      	adds	r3, #2
 8001960:	69ba      	ldr	r2, [r7, #24]
 8001962:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001966:	4b38      	ldr	r3, [pc, #224]	@ (8001a48 <HAL_GPIO_Init+0x304>)
 8001968:	689b      	ldr	r3, [r3, #8]
 800196a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800196c:	693b      	ldr	r3, [r7, #16]
 800196e:	43db      	mvns	r3, r3
 8001970:	69ba      	ldr	r2, [r7, #24]
 8001972:	4013      	ands	r3, r2
 8001974:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001976:	683b      	ldr	r3, [r7, #0]
 8001978:	685b      	ldr	r3, [r3, #4]
 800197a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800197e:	2b00      	cmp	r3, #0
 8001980:	d003      	beq.n	800198a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001982:	69ba      	ldr	r2, [r7, #24]
 8001984:	693b      	ldr	r3, [r7, #16]
 8001986:	4313      	orrs	r3, r2
 8001988:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800198a:	4a2f      	ldr	r2, [pc, #188]	@ (8001a48 <HAL_GPIO_Init+0x304>)
 800198c:	69bb      	ldr	r3, [r7, #24]
 800198e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001990:	4b2d      	ldr	r3, [pc, #180]	@ (8001a48 <HAL_GPIO_Init+0x304>)
 8001992:	68db      	ldr	r3, [r3, #12]
 8001994:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001996:	693b      	ldr	r3, [r7, #16]
 8001998:	43db      	mvns	r3, r3
 800199a:	69ba      	ldr	r2, [r7, #24]
 800199c:	4013      	ands	r3, r2
 800199e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80019a0:	683b      	ldr	r3, [r7, #0]
 80019a2:	685b      	ldr	r3, [r3, #4]
 80019a4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d003      	beq.n	80019b4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80019ac:	69ba      	ldr	r2, [r7, #24]
 80019ae:	693b      	ldr	r3, [r7, #16]
 80019b0:	4313      	orrs	r3, r2
 80019b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80019b4:	4a24      	ldr	r2, [pc, #144]	@ (8001a48 <HAL_GPIO_Init+0x304>)
 80019b6:	69bb      	ldr	r3, [r7, #24]
 80019b8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80019ba:	4b23      	ldr	r3, [pc, #140]	@ (8001a48 <HAL_GPIO_Init+0x304>)
 80019bc:	685b      	ldr	r3, [r3, #4]
 80019be:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019c0:	693b      	ldr	r3, [r7, #16]
 80019c2:	43db      	mvns	r3, r3
 80019c4:	69ba      	ldr	r2, [r7, #24]
 80019c6:	4013      	ands	r3, r2
 80019c8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80019ca:	683b      	ldr	r3, [r7, #0]
 80019cc:	685b      	ldr	r3, [r3, #4]
 80019ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d003      	beq.n	80019de <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80019d6:	69ba      	ldr	r2, [r7, #24]
 80019d8:	693b      	ldr	r3, [r7, #16]
 80019da:	4313      	orrs	r3, r2
 80019dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80019de:	4a1a      	ldr	r2, [pc, #104]	@ (8001a48 <HAL_GPIO_Init+0x304>)
 80019e0:	69bb      	ldr	r3, [r7, #24]
 80019e2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80019e4:	4b18      	ldr	r3, [pc, #96]	@ (8001a48 <HAL_GPIO_Init+0x304>)
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019ea:	693b      	ldr	r3, [r7, #16]
 80019ec:	43db      	mvns	r3, r3
 80019ee:	69ba      	ldr	r2, [r7, #24]
 80019f0:	4013      	ands	r3, r2
 80019f2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80019f4:	683b      	ldr	r3, [r7, #0]
 80019f6:	685b      	ldr	r3, [r3, #4]
 80019f8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d003      	beq.n	8001a08 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001a00:	69ba      	ldr	r2, [r7, #24]
 8001a02:	693b      	ldr	r3, [r7, #16]
 8001a04:	4313      	orrs	r3, r2
 8001a06:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001a08:	4a0f      	ldr	r2, [pc, #60]	@ (8001a48 <HAL_GPIO_Init+0x304>)
 8001a0a:	69bb      	ldr	r3, [r7, #24]
 8001a0c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001a0e:	69fb      	ldr	r3, [r7, #28]
 8001a10:	3301      	adds	r3, #1
 8001a12:	61fb      	str	r3, [r7, #28]
 8001a14:	69fb      	ldr	r3, [r7, #28]
 8001a16:	2b0f      	cmp	r3, #15
 8001a18:	f67f aea2 	bls.w	8001760 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001a1c:	bf00      	nop
 8001a1e:	bf00      	nop
 8001a20:	3724      	adds	r7, #36	@ 0x24
 8001a22:	46bd      	mov	sp, r7
 8001a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a28:	4770      	bx	lr
 8001a2a:	bf00      	nop
 8001a2c:	40023800 	.word	0x40023800
 8001a30:	40013800 	.word	0x40013800
 8001a34:	40020000 	.word	0x40020000
 8001a38:	40020400 	.word	0x40020400
 8001a3c:	40020800 	.word	0x40020800
 8001a40:	40020c00 	.word	0x40020c00
 8001a44:	40021000 	.word	0x40021000
 8001a48:	40013c00 	.word	0x40013c00

08001a4c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b082      	sub	sp, #8
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d101      	bne.n	8001a5e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001a5a:	2301      	movs	r3, #1
 8001a5c:	e041      	b.n	8001ae2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001a64:	b2db      	uxtb	r3, r3
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d106      	bne.n	8001a78 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001a72:	6878      	ldr	r0, [r7, #4]
 8001a74:	f7ff f9ee 	bl	8000e54 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	2202      	movs	r2, #2
 8001a7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681a      	ldr	r2, [r3, #0]
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	3304      	adds	r3, #4
 8001a88:	4619      	mov	r1, r3
 8001a8a:	4610      	mov	r0, r2
 8001a8c:	f000 fa46 	bl	8001f1c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	2201      	movs	r2, #1
 8001a94:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	2201      	movs	r2, #1
 8001a9c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	2201      	movs	r2, #1
 8001aa4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	2201      	movs	r2, #1
 8001aac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	2201      	movs	r2, #1
 8001ab4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	2201      	movs	r2, #1
 8001abc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	2201      	movs	r2, #1
 8001ac4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	2201      	movs	r2, #1
 8001acc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	2201      	movs	r2, #1
 8001ad4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	2201      	movs	r2, #1
 8001adc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001ae0:	2300      	movs	r3, #0
}
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	3708      	adds	r7, #8
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	bd80      	pop	{r7, pc}

08001aea <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8001aea:	b580      	push	{r7, lr}
 8001aec:	b082      	sub	sp, #8
 8001aee:	af00      	add	r7, sp, #0
 8001af0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d101      	bne.n	8001afc <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8001af8:	2301      	movs	r3, #1
 8001afa:	e041      	b.n	8001b80 <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001b02:	b2db      	uxtb	r3, r3
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d106      	bne.n	8001b16 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8001b10:	6878      	ldr	r0, [r7, #4]
 8001b12:	f000 f839 	bl	8001b88 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	2202      	movs	r2, #2
 8001b1a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681a      	ldr	r2, [r3, #0]
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	3304      	adds	r3, #4
 8001b26:	4619      	mov	r1, r3
 8001b28:	4610      	mov	r0, r2
 8001b2a:	f000 f9f7 	bl	8001f1c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	2201      	movs	r2, #1
 8001b32:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	2201      	movs	r2, #1
 8001b3a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	2201      	movs	r2, #1
 8001b42:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	2201      	movs	r2, #1
 8001b4a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	2201      	movs	r2, #1
 8001b52:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	2201      	movs	r2, #1
 8001b5a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	2201      	movs	r2, #1
 8001b62:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	2201      	movs	r2, #1
 8001b6a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	2201      	movs	r2, #1
 8001b72:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	2201      	movs	r2, #1
 8001b7a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001b7e:	2300      	movs	r3, #0
}
 8001b80:	4618      	mov	r0, r3
 8001b82:	3708      	adds	r7, #8
 8001b84:	46bd      	mov	sp, r7
 8001b86:	bd80      	pop	{r7, pc}

08001b88 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8001b88:	b480      	push	{r7}
 8001b8a:	b083      	sub	sp, #12
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8001b90:	bf00      	nop
 8001b92:	370c      	adds	r7, #12
 8001b94:	46bd      	mov	sp, r7
 8001b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9a:	4770      	bx	lr

08001b9c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	b084      	sub	sp, #16
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	68db      	ldr	r3, [r3, #12]
 8001baa:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	691b      	ldr	r3, [r3, #16]
 8001bb2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8001bb4:	68bb      	ldr	r3, [r7, #8]
 8001bb6:	f003 0302 	and.w	r3, r3, #2
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d020      	beq.n	8001c00 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	f003 0302 	and.w	r3, r3, #2
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d01b      	beq.n	8001c00 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	f06f 0202 	mvn.w	r2, #2
 8001bd0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	2201      	movs	r2, #1
 8001bd6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	699b      	ldr	r3, [r3, #24]
 8001bde:	f003 0303 	and.w	r3, r3, #3
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d003      	beq.n	8001bee <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001be6:	6878      	ldr	r0, [r7, #4]
 8001be8:	f000 f97a 	bl	8001ee0 <HAL_TIM_IC_CaptureCallback>
 8001bec:	e005      	b.n	8001bfa <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001bee:	6878      	ldr	r0, [r7, #4]
 8001bf0:	f000 f96c 	bl	8001ecc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001bf4:	6878      	ldr	r0, [r7, #4]
 8001bf6:	f000 f97d 	bl	8001ef4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8001c00:	68bb      	ldr	r3, [r7, #8]
 8001c02:	f003 0304 	and.w	r3, r3, #4
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d020      	beq.n	8001c4c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	f003 0304 	and.w	r3, r3, #4
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d01b      	beq.n	8001c4c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	f06f 0204 	mvn.w	r2, #4
 8001c1c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	2202      	movs	r2, #2
 8001c22:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	699b      	ldr	r3, [r3, #24]
 8001c2a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d003      	beq.n	8001c3a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001c32:	6878      	ldr	r0, [r7, #4]
 8001c34:	f000 f954 	bl	8001ee0 <HAL_TIM_IC_CaptureCallback>
 8001c38:	e005      	b.n	8001c46 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c3a:	6878      	ldr	r0, [r7, #4]
 8001c3c:	f000 f946 	bl	8001ecc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c40:	6878      	ldr	r0, [r7, #4]
 8001c42:	f000 f957 	bl	8001ef4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	2200      	movs	r2, #0
 8001c4a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8001c4c:	68bb      	ldr	r3, [r7, #8]
 8001c4e:	f003 0308 	and.w	r3, r3, #8
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d020      	beq.n	8001c98 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	f003 0308 	and.w	r3, r3, #8
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d01b      	beq.n	8001c98 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	f06f 0208 	mvn.w	r2, #8
 8001c68:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	2204      	movs	r2, #4
 8001c6e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	69db      	ldr	r3, [r3, #28]
 8001c76:	f003 0303 	and.w	r3, r3, #3
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d003      	beq.n	8001c86 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001c7e:	6878      	ldr	r0, [r7, #4]
 8001c80:	f000 f92e 	bl	8001ee0 <HAL_TIM_IC_CaptureCallback>
 8001c84:	e005      	b.n	8001c92 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c86:	6878      	ldr	r0, [r7, #4]
 8001c88:	f000 f920 	bl	8001ecc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c8c:	6878      	ldr	r0, [r7, #4]
 8001c8e:	f000 f931 	bl	8001ef4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	2200      	movs	r2, #0
 8001c96:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8001c98:	68bb      	ldr	r3, [r7, #8]
 8001c9a:	f003 0310 	and.w	r3, r3, #16
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d020      	beq.n	8001ce4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	f003 0310 	and.w	r3, r3, #16
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d01b      	beq.n	8001ce4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	f06f 0210 	mvn.w	r2, #16
 8001cb4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	2208      	movs	r2, #8
 8001cba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	69db      	ldr	r3, [r3, #28]
 8001cc2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d003      	beq.n	8001cd2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001cca:	6878      	ldr	r0, [r7, #4]
 8001ccc:	f000 f908 	bl	8001ee0 <HAL_TIM_IC_CaptureCallback>
 8001cd0:	e005      	b.n	8001cde <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001cd2:	6878      	ldr	r0, [r7, #4]
 8001cd4:	f000 f8fa 	bl	8001ecc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001cd8:	6878      	ldr	r0, [r7, #4]
 8001cda:	f000 f90b 	bl	8001ef4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8001ce4:	68bb      	ldr	r3, [r7, #8]
 8001ce6:	f003 0301 	and.w	r3, r3, #1
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d00c      	beq.n	8001d08 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	f003 0301 	and.w	r3, r3, #1
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d007      	beq.n	8001d08 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	f06f 0201 	mvn.w	r2, #1
 8001d00:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001d02:	6878      	ldr	r0, [r7, #4]
 8001d04:	f000 f8d8 	bl	8001eb8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8001d08:	68bb      	ldr	r3, [r7, #8]
 8001d0a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d00c      	beq.n	8001d2c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d007      	beq.n	8001d2c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8001d24:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001d26:	6878      	ldr	r0, [r7, #4]
 8001d28:	f000 fc92 	bl	8002650 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8001d2c:	68bb      	ldr	r3, [r7, #8]
 8001d2e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d00c      	beq.n	8001d50 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d007      	beq.n	8001d50 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8001d48:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001d4a:	6878      	ldr	r0, [r7, #4]
 8001d4c:	f000 f8dc 	bl	8001f08 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8001d50:	68bb      	ldr	r3, [r7, #8]
 8001d52:	f003 0320 	and.w	r3, r3, #32
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d00c      	beq.n	8001d74 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	f003 0320 	and.w	r3, r3, #32
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d007      	beq.n	8001d74 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	f06f 0220 	mvn.w	r2, #32
 8001d6c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001d6e:	6878      	ldr	r0, [r7, #4]
 8001d70:	f000 fc64 	bl	800263c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001d74:	bf00      	nop
 8001d76:	3710      	adds	r7, #16
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	bd80      	pop	{r7, pc}

08001d7c <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b086      	sub	sp, #24
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	60f8      	str	r0, [r7, #12]
 8001d84:	60b9      	str	r1, [r7, #8]
 8001d86:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001d88:	2300      	movs	r3, #0
 8001d8a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001d92:	2b01      	cmp	r3, #1
 8001d94:	d101      	bne.n	8001d9a <HAL_TIM_OC_ConfigChannel+0x1e>
 8001d96:	2302      	movs	r3, #2
 8001d98:	e048      	b.n	8001e2c <HAL_TIM_OC_ConfigChannel+0xb0>
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	2201      	movs	r2, #1
 8001d9e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	2b0c      	cmp	r3, #12
 8001da6:	d839      	bhi.n	8001e1c <HAL_TIM_OC_ConfigChannel+0xa0>
 8001da8:	a201      	add	r2, pc, #4	@ (adr r2, 8001db0 <HAL_TIM_OC_ConfigChannel+0x34>)
 8001daa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001dae:	bf00      	nop
 8001db0:	08001de5 	.word	0x08001de5
 8001db4:	08001e1d 	.word	0x08001e1d
 8001db8:	08001e1d 	.word	0x08001e1d
 8001dbc:	08001e1d 	.word	0x08001e1d
 8001dc0:	08001df3 	.word	0x08001df3
 8001dc4:	08001e1d 	.word	0x08001e1d
 8001dc8:	08001e1d 	.word	0x08001e1d
 8001dcc:	08001e1d 	.word	0x08001e1d
 8001dd0:	08001e01 	.word	0x08001e01
 8001dd4:	08001e1d 	.word	0x08001e1d
 8001dd8:	08001e1d 	.word	0x08001e1d
 8001ddc:	08001e1d 	.word	0x08001e1d
 8001de0:	08001e0f 	.word	0x08001e0f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	68b9      	ldr	r1, [r7, #8]
 8001dea:	4618      	mov	r0, r3
 8001dec:	f000 f91c 	bl	8002028 <TIM_OC1_SetConfig>
      break;
 8001df0:	e017      	b.n	8001e22 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	68b9      	ldr	r1, [r7, #8]
 8001df8:	4618      	mov	r0, r3
 8001dfa:	f000 f97b 	bl	80020f4 <TIM_OC2_SetConfig>
      break;
 8001dfe:	e010      	b.n	8001e22 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	68b9      	ldr	r1, [r7, #8]
 8001e06:	4618      	mov	r0, r3
 8001e08:	f000 f9e0 	bl	80021cc <TIM_OC3_SetConfig>
      break;
 8001e0c:	e009      	b.n	8001e22 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	68b9      	ldr	r1, [r7, #8]
 8001e14:	4618      	mov	r0, r3
 8001e16:	f000 fa43 	bl	80022a0 <TIM_OC4_SetConfig>
      break;
 8001e1a:	e002      	b.n	8001e22 <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 8001e1c:	2301      	movs	r3, #1
 8001e1e:	75fb      	strb	r3, [r7, #23]
      break;
 8001e20:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	2200      	movs	r2, #0
 8001e26:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8001e2a:	7dfb      	ldrb	r3, [r7, #23]
}
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	3718      	adds	r7, #24
 8001e30:	46bd      	mov	sp, r7
 8001e32:	bd80      	pop	{r7, pc}

08001e34 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b082      	sub	sp, #8
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
 8001e3c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001e44:	2b01      	cmp	r3, #1
 8001e46:	d101      	bne.n	8001e4c <HAL_TIM_SlaveConfigSynchro+0x18>
 8001e48:	2302      	movs	r3, #2
 8001e4a:	e031      	b.n	8001eb0 <HAL_TIM_SlaveConfigSynchro+0x7c>
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	2201      	movs	r2, #1
 8001e50:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	2202      	movs	r2, #2
 8001e58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8001e5c:	6839      	ldr	r1, [r7, #0]
 8001e5e:	6878      	ldr	r0, [r7, #4]
 8001e60:	f000 fa6e 	bl	8002340 <TIM_SlaveTimer_SetConfig>
 8001e64:	4603      	mov	r3, r0
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d009      	beq.n	8001e7e <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	2201      	movs	r2, #1
 8001e6e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    __HAL_UNLOCK(htim);
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	2200      	movs	r2, #0
 8001e76:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    return HAL_ERROR;
 8001e7a:	2301      	movs	r3, #1
 8001e7c:	e018      	b.n	8001eb0 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	68da      	ldr	r2, [r3, #12]
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001e8c:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	68da      	ldr	r2, [r3, #12]
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8001e9c:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	2201      	movs	r2, #1
 8001ea2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8001eae:	2300      	movs	r3, #0
}
 8001eb0:	4618      	mov	r0, r3
 8001eb2:	3708      	adds	r7, #8
 8001eb4:	46bd      	mov	sp, r7
 8001eb6:	bd80      	pop	{r7, pc}

08001eb8 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001eb8:	b480      	push	{r7}
 8001eba:	b083      	sub	sp, #12
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8001ec0:	bf00      	nop
 8001ec2:	370c      	adds	r7, #12
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eca:	4770      	bx	lr

08001ecc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001ecc:	b480      	push	{r7}
 8001ece:	b083      	sub	sp, #12
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001ed4:	bf00      	nop
 8001ed6:	370c      	adds	r7, #12
 8001ed8:	46bd      	mov	sp, r7
 8001eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ede:	4770      	bx	lr

08001ee0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001ee0:	b480      	push	{r7}
 8001ee2:	b083      	sub	sp, #12
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001ee8:	bf00      	nop
 8001eea:	370c      	adds	r7, #12
 8001eec:	46bd      	mov	sp, r7
 8001eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef2:	4770      	bx	lr

08001ef4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001ef4:	b480      	push	{r7}
 8001ef6:	b083      	sub	sp, #12
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001efc:	bf00      	nop
 8001efe:	370c      	adds	r7, #12
 8001f00:	46bd      	mov	sp, r7
 8001f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f06:	4770      	bx	lr

08001f08 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001f08:	b480      	push	{r7}
 8001f0a:	b083      	sub	sp, #12
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001f10:	bf00      	nop
 8001f12:	370c      	adds	r7, #12
 8001f14:	46bd      	mov	sp, r7
 8001f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1a:	4770      	bx	lr

08001f1c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001f1c:	b480      	push	{r7}
 8001f1e:	b085      	sub	sp, #20
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	6078      	str	r0, [r7, #4]
 8001f24:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	4a37      	ldr	r2, [pc, #220]	@ (800200c <TIM_Base_SetConfig+0xf0>)
 8001f30:	4293      	cmp	r3, r2
 8001f32:	d00f      	beq.n	8001f54 <TIM_Base_SetConfig+0x38>
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001f3a:	d00b      	beq.n	8001f54 <TIM_Base_SetConfig+0x38>
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	4a34      	ldr	r2, [pc, #208]	@ (8002010 <TIM_Base_SetConfig+0xf4>)
 8001f40:	4293      	cmp	r3, r2
 8001f42:	d007      	beq.n	8001f54 <TIM_Base_SetConfig+0x38>
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	4a33      	ldr	r2, [pc, #204]	@ (8002014 <TIM_Base_SetConfig+0xf8>)
 8001f48:	4293      	cmp	r3, r2
 8001f4a:	d003      	beq.n	8001f54 <TIM_Base_SetConfig+0x38>
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	4a32      	ldr	r2, [pc, #200]	@ (8002018 <TIM_Base_SetConfig+0xfc>)
 8001f50:	4293      	cmp	r3, r2
 8001f52:	d108      	bne.n	8001f66 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001f5a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001f5c:	683b      	ldr	r3, [r7, #0]
 8001f5e:	685b      	ldr	r3, [r3, #4]
 8001f60:	68fa      	ldr	r2, [r7, #12]
 8001f62:	4313      	orrs	r3, r2
 8001f64:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	4a28      	ldr	r2, [pc, #160]	@ (800200c <TIM_Base_SetConfig+0xf0>)
 8001f6a:	4293      	cmp	r3, r2
 8001f6c:	d01b      	beq.n	8001fa6 <TIM_Base_SetConfig+0x8a>
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001f74:	d017      	beq.n	8001fa6 <TIM_Base_SetConfig+0x8a>
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	4a25      	ldr	r2, [pc, #148]	@ (8002010 <TIM_Base_SetConfig+0xf4>)
 8001f7a:	4293      	cmp	r3, r2
 8001f7c:	d013      	beq.n	8001fa6 <TIM_Base_SetConfig+0x8a>
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	4a24      	ldr	r2, [pc, #144]	@ (8002014 <TIM_Base_SetConfig+0xf8>)
 8001f82:	4293      	cmp	r3, r2
 8001f84:	d00f      	beq.n	8001fa6 <TIM_Base_SetConfig+0x8a>
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	4a23      	ldr	r2, [pc, #140]	@ (8002018 <TIM_Base_SetConfig+0xfc>)
 8001f8a:	4293      	cmp	r3, r2
 8001f8c:	d00b      	beq.n	8001fa6 <TIM_Base_SetConfig+0x8a>
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	4a22      	ldr	r2, [pc, #136]	@ (800201c <TIM_Base_SetConfig+0x100>)
 8001f92:	4293      	cmp	r3, r2
 8001f94:	d007      	beq.n	8001fa6 <TIM_Base_SetConfig+0x8a>
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	4a21      	ldr	r2, [pc, #132]	@ (8002020 <TIM_Base_SetConfig+0x104>)
 8001f9a:	4293      	cmp	r3, r2
 8001f9c:	d003      	beq.n	8001fa6 <TIM_Base_SetConfig+0x8a>
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	4a20      	ldr	r2, [pc, #128]	@ (8002024 <TIM_Base_SetConfig+0x108>)
 8001fa2:	4293      	cmp	r3, r2
 8001fa4:	d108      	bne.n	8001fb8 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001fac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001fae:	683b      	ldr	r3, [r7, #0]
 8001fb0:	68db      	ldr	r3, [r3, #12]
 8001fb2:	68fa      	ldr	r2, [r7, #12]
 8001fb4:	4313      	orrs	r3, r2
 8001fb6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8001fbe:	683b      	ldr	r3, [r7, #0]
 8001fc0:	695b      	ldr	r3, [r3, #20]
 8001fc2:	4313      	orrs	r3, r2
 8001fc4:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001fc6:	683b      	ldr	r3, [r7, #0]
 8001fc8:	689a      	ldr	r2, [r3, #8]
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001fce:	683b      	ldr	r3, [r7, #0]
 8001fd0:	681a      	ldr	r2, [r3, #0]
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	4a0c      	ldr	r2, [pc, #48]	@ (800200c <TIM_Base_SetConfig+0xf0>)
 8001fda:	4293      	cmp	r3, r2
 8001fdc:	d103      	bne.n	8001fe6 <TIM_Base_SetConfig+0xca>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001fde:	683b      	ldr	r3, [r7, #0]
 8001fe0:	691a      	ldr	r2, [r3, #16]
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f043 0204 	orr.w	r2, r3, #4
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	2201      	movs	r2, #1
 8001ff6:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	68fa      	ldr	r2, [r7, #12]
 8001ffc:	601a      	str	r2, [r3, #0]
}
 8001ffe:	bf00      	nop
 8002000:	3714      	adds	r7, #20
 8002002:	46bd      	mov	sp, r7
 8002004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002008:	4770      	bx	lr
 800200a:	bf00      	nop
 800200c:	40010000 	.word	0x40010000
 8002010:	40000400 	.word	0x40000400
 8002014:	40000800 	.word	0x40000800
 8002018:	40000c00 	.word	0x40000c00
 800201c:	40014000 	.word	0x40014000
 8002020:	40014400 	.word	0x40014400
 8002024:	40014800 	.word	0x40014800

08002028 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002028:	b480      	push	{r7}
 800202a:	b087      	sub	sp, #28
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
 8002030:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	6a1b      	ldr	r3, [r3, #32]
 8002036:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	6a1b      	ldr	r3, [r3, #32]
 800203c:	f023 0201 	bic.w	r2, r3, #1
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	685b      	ldr	r3, [r3, #4]
 8002048:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	699b      	ldr	r3, [r3, #24]
 800204e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002056:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	f023 0303 	bic.w	r3, r3, #3
 800205e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002060:	683b      	ldr	r3, [r7, #0]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	68fa      	ldr	r2, [r7, #12]
 8002066:	4313      	orrs	r3, r2
 8002068:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800206a:	697b      	ldr	r3, [r7, #20]
 800206c:	f023 0302 	bic.w	r3, r3, #2
 8002070:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002072:	683b      	ldr	r3, [r7, #0]
 8002074:	689b      	ldr	r3, [r3, #8]
 8002076:	697a      	ldr	r2, [r7, #20]
 8002078:	4313      	orrs	r3, r2
 800207a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	4a1c      	ldr	r2, [pc, #112]	@ (80020f0 <TIM_OC1_SetConfig+0xc8>)
 8002080:	4293      	cmp	r3, r2
 8002082:	d10c      	bne.n	800209e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002084:	697b      	ldr	r3, [r7, #20]
 8002086:	f023 0308 	bic.w	r3, r3, #8
 800208a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800208c:	683b      	ldr	r3, [r7, #0]
 800208e:	68db      	ldr	r3, [r3, #12]
 8002090:	697a      	ldr	r2, [r7, #20]
 8002092:	4313      	orrs	r3, r2
 8002094:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002096:	697b      	ldr	r3, [r7, #20]
 8002098:	f023 0304 	bic.w	r3, r3, #4
 800209c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	4a13      	ldr	r2, [pc, #76]	@ (80020f0 <TIM_OC1_SetConfig+0xc8>)
 80020a2:	4293      	cmp	r3, r2
 80020a4:	d111      	bne.n	80020ca <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80020a6:	693b      	ldr	r3, [r7, #16]
 80020a8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80020ac:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80020ae:	693b      	ldr	r3, [r7, #16]
 80020b0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80020b4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80020b6:	683b      	ldr	r3, [r7, #0]
 80020b8:	695b      	ldr	r3, [r3, #20]
 80020ba:	693a      	ldr	r2, [r7, #16]
 80020bc:	4313      	orrs	r3, r2
 80020be:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80020c0:	683b      	ldr	r3, [r7, #0]
 80020c2:	699b      	ldr	r3, [r3, #24]
 80020c4:	693a      	ldr	r2, [r7, #16]
 80020c6:	4313      	orrs	r3, r2
 80020c8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	693a      	ldr	r2, [r7, #16]
 80020ce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	68fa      	ldr	r2, [r7, #12]
 80020d4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80020d6:	683b      	ldr	r3, [r7, #0]
 80020d8:	685a      	ldr	r2, [r3, #4]
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	697a      	ldr	r2, [r7, #20]
 80020e2:	621a      	str	r2, [r3, #32]
}
 80020e4:	bf00      	nop
 80020e6:	371c      	adds	r7, #28
 80020e8:	46bd      	mov	sp, r7
 80020ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ee:	4770      	bx	lr
 80020f0:	40010000 	.word	0x40010000

080020f4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80020f4:	b480      	push	{r7}
 80020f6:	b087      	sub	sp, #28
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	6078      	str	r0, [r7, #4]
 80020fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	6a1b      	ldr	r3, [r3, #32]
 8002102:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	6a1b      	ldr	r3, [r3, #32]
 8002108:	f023 0210 	bic.w	r2, r3, #16
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	685b      	ldr	r3, [r3, #4]
 8002114:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	699b      	ldr	r3, [r3, #24]
 800211a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002122:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800212a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800212c:	683b      	ldr	r3, [r7, #0]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	021b      	lsls	r3, r3, #8
 8002132:	68fa      	ldr	r2, [r7, #12]
 8002134:	4313      	orrs	r3, r2
 8002136:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002138:	697b      	ldr	r3, [r7, #20]
 800213a:	f023 0320 	bic.w	r3, r3, #32
 800213e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002140:	683b      	ldr	r3, [r7, #0]
 8002142:	689b      	ldr	r3, [r3, #8]
 8002144:	011b      	lsls	r3, r3, #4
 8002146:	697a      	ldr	r2, [r7, #20]
 8002148:	4313      	orrs	r3, r2
 800214a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	4a1e      	ldr	r2, [pc, #120]	@ (80021c8 <TIM_OC2_SetConfig+0xd4>)
 8002150:	4293      	cmp	r3, r2
 8002152:	d10d      	bne.n	8002170 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002154:	697b      	ldr	r3, [r7, #20]
 8002156:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800215a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800215c:	683b      	ldr	r3, [r7, #0]
 800215e:	68db      	ldr	r3, [r3, #12]
 8002160:	011b      	lsls	r3, r3, #4
 8002162:	697a      	ldr	r2, [r7, #20]
 8002164:	4313      	orrs	r3, r2
 8002166:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002168:	697b      	ldr	r3, [r7, #20]
 800216a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800216e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	4a15      	ldr	r2, [pc, #84]	@ (80021c8 <TIM_OC2_SetConfig+0xd4>)
 8002174:	4293      	cmp	r3, r2
 8002176:	d113      	bne.n	80021a0 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002178:	693b      	ldr	r3, [r7, #16]
 800217a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800217e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002180:	693b      	ldr	r3, [r7, #16]
 8002182:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002186:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002188:	683b      	ldr	r3, [r7, #0]
 800218a:	695b      	ldr	r3, [r3, #20]
 800218c:	009b      	lsls	r3, r3, #2
 800218e:	693a      	ldr	r2, [r7, #16]
 8002190:	4313      	orrs	r3, r2
 8002192:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002194:	683b      	ldr	r3, [r7, #0]
 8002196:	699b      	ldr	r3, [r3, #24]
 8002198:	009b      	lsls	r3, r3, #2
 800219a:	693a      	ldr	r2, [r7, #16]
 800219c:	4313      	orrs	r3, r2
 800219e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	693a      	ldr	r2, [r7, #16]
 80021a4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	68fa      	ldr	r2, [r7, #12]
 80021aa:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80021ac:	683b      	ldr	r3, [r7, #0]
 80021ae:	685a      	ldr	r2, [r3, #4]
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	697a      	ldr	r2, [r7, #20]
 80021b8:	621a      	str	r2, [r3, #32]
}
 80021ba:	bf00      	nop
 80021bc:	371c      	adds	r7, #28
 80021be:	46bd      	mov	sp, r7
 80021c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c4:	4770      	bx	lr
 80021c6:	bf00      	nop
 80021c8:	40010000 	.word	0x40010000

080021cc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80021cc:	b480      	push	{r7}
 80021ce:	b087      	sub	sp, #28
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	6078      	str	r0, [r7, #4]
 80021d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	6a1b      	ldr	r3, [r3, #32]
 80021da:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	6a1b      	ldr	r3, [r3, #32]
 80021e0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	685b      	ldr	r3, [r3, #4]
 80021ec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	69db      	ldr	r3, [r3, #28]
 80021f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80021fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	f023 0303 	bic.w	r3, r3, #3
 8002202:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002204:	683b      	ldr	r3, [r7, #0]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	68fa      	ldr	r2, [r7, #12]
 800220a:	4313      	orrs	r3, r2
 800220c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800220e:	697b      	ldr	r3, [r7, #20]
 8002210:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002214:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002216:	683b      	ldr	r3, [r7, #0]
 8002218:	689b      	ldr	r3, [r3, #8]
 800221a:	021b      	lsls	r3, r3, #8
 800221c:	697a      	ldr	r2, [r7, #20]
 800221e:	4313      	orrs	r3, r2
 8002220:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	4a1d      	ldr	r2, [pc, #116]	@ (800229c <TIM_OC3_SetConfig+0xd0>)
 8002226:	4293      	cmp	r3, r2
 8002228:	d10d      	bne.n	8002246 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800222a:	697b      	ldr	r3, [r7, #20]
 800222c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002230:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002232:	683b      	ldr	r3, [r7, #0]
 8002234:	68db      	ldr	r3, [r3, #12]
 8002236:	021b      	lsls	r3, r3, #8
 8002238:	697a      	ldr	r2, [r7, #20]
 800223a:	4313      	orrs	r3, r2
 800223c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800223e:	697b      	ldr	r3, [r7, #20]
 8002240:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002244:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	4a14      	ldr	r2, [pc, #80]	@ (800229c <TIM_OC3_SetConfig+0xd0>)
 800224a:	4293      	cmp	r3, r2
 800224c:	d113      	bne.n	8002276 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800224e:	693b      	ldr	r3, [r7, #16]
 8002250:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002254:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002256:	693b      	ldr	r3, [r7, #16]
 8002258:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800225c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800225e:	683b      	ldr	r3, [r7, #0]
 8002260:	695b      	ldr	r3, [r3, #20]
 8002262:	011b      	lsls	r3, r3, #4
 8002264:	693a      	ldr	r2, [r7, #16]
 8002266:	4313      	orrs	r3, r2
 8002268:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800226a:	683b      	ldr	r3, [r7, #0]
 800226c:	699b      	ldr	r3, [r3, #24]
 800226e:	011b      	lsls	r3, r3, #4
 8002270:	693a      	ldr	r2, [r7, #16]
 8002272:	4313      	orrs	r3, r2
 8002274:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	693a      	ldr	r2, [r7, #16]
 800227a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	68fa      	ldr	r2, [r7, #12]
 8002280:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002282:	683b      	ldr	r3, [r7, #0]
 8002284:	685a      	ldr	r2, [r3, #4]
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	697a      	ldr	r2, [r7, #20]
 800228e:	621a      	str	r2, [r3, #32]
}
 8002290:	bf00      	nop
 8002292:	371c      	adds	r7, #28
 8002294:	46bd      	mov	sp, r7
 8002296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229a:	4770      	bx	lr
 800229c:	40010000 	.word	0x40010000

080022a0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80022a0:	b480      	push	{r7}
 80022a2:	b087      	sub	sp, #28
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	6078      	str	r0, [r7, #4]
 80022a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	6a1b      	ldr	r3, [r3, #32]
 80022ae:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	6a1b      	ldr	r3, [r3, #32]
 80022b4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	685b      	ldr	r3, [r3, #4]
 80022c0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	69db      	ldr	r3, [r3, #28]
 80022c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80022ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80022d6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80022d8:	683b      	ldr	r3, [r7, #0]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	021b      	lsls	r3, r3, #8
 80022de:	68fa      	ldr	r2, [r7, #12]
 80022e0:	4313      	orrs	r3, r2
 80022e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80022e4:	693b      	ldr	r3, [r7, #16]
 80022e6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80022ea:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80022ec:	683b      	ldr	r3, [r7, #0]
 80022ee:	689b      	ldr	r3, [r3, #8]
 80022f0:	031b      	lsls	r3, r3, #12
 80022f2:	693a      	ldr	r2, [r7, #16]
 80022f4:	4313      	orrs	r3, r2
 80022f6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	4a10      	ldr	r2, [pc, #64]	@ (800233c <TIM_OC4_SetConfig+0x9c>)
 80022fc:	4293      	cmp	r3, r2
 80022fe:	d109      	bne.n	8002314 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002300:	697b      	ldr	r3, [r7, #20]
 8002302:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002306:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002308:	683b      	ldr	r3, [r7, #0]
 800230a:	695b      	ldr	r3, [r3, #20]
 800230c:	019b      	lsls	r3, r3, #6
 800230e:	697a      	ldr	r2, [r7, #20]
 8002310:	4313      	orrs	r3, r2
 8002312:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	697a      	ldr	r2, [r7, #20]
 8002318:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	68fa      	ldr	r2, [r7, #12]
 800231e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002320:	683b      	ldr	r3, [r7, #0]
 8002322:	685a      	ldr	r2, [r3, #4]
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	693a      	ldr	r2, [r7, #16]
 800232c:	621a      	str	r2, [r3, #32]
}
 800232e:	bf00      	nop
 8002330:	371c      	adds	r7, #28
 8002332:	46bd      	mov	sp, r7
 8002334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002338:	4770      	bx	lr
 800233a:	bf00      	nop
 800233c:	40010000 	.word	0x40010000

08002340 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8002340:	b580      	push	{r7, lr}
 8002342:	b086      	sub	sp, #24
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
 8002348:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800234a:	2300      	movs	r3, #0
 800234c:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	689b      	ldr	r3, [r3, #8]
 8002354:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002356:	693b      	ldr	r3, [r7, #16]
 8002358:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800235c:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 800235e:	683b      	ldr	r3, [r7, #0]
 8002360:	685b      	ldr	r3, [r3, #4]
 8002362:	693a      	ldr	r2, [r7, #16]
 8002364:	4313      	orrs	r3, r2
 8002366:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8002368:	693b      	ldr	r3, [r7, #16]
 800236a:	f023 0307 	bic.w	r3, r3, #7
 800236e:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8002370:	683b      	ldr	r3, [r7, #0]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	693a      	ldr	r2, [r7, #16]
 8002376:	4313      	orrs	r3, r2
 8002378:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	693a      	ldr	r2, [r7, #16]
 8002380:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8002382:	683b      	ldr	r3, [r7, #0]
 8002384:	685b      	ldr	r3, [r3, #4]
 8002386:	2b70      	cmp	r3, #112	@ 0x70
 8002388:	d01a      	beq.n	80023c0 <TIM_SlaveTimer_SetConfig+0x80>
 800238a:	2b70      	cmp	r3, #112	@ 0x70
 800238c:	d860      	bhi.n	8002450 <TIM_SlaveTimer_SetConfig+0x110>
 800238e:	2b60      	cmp	r3, #96	@ 0x60
 8002390:	d054      	beq.n	800243c <TIM_SlaveTimer_SetConfig+0xfc>
 8002392:	2b60      	cmp	r3, #96	@ 0x60
 8002394:	d85c      	bhi.n	8002450 <TIM_SlaveTimer_SetConfig+0x110>
 8002396:	2b50      	cmp	r3, #80	@ 0x50
 8002398:	d046      	beq.n	8002428 <TIM_SlaveTimer_SetConfig+0xe8>
 800239a:	2b50      	cmp	r3, #80	@ 0x50
 800239c:	d858      	bhi.n	8002450 <TIM_SlaveTimer_SetConfig+0x110>
 800239e:	2b40      	cmp	r3, #64	@ 0x40
 80023a0:	d019      	beq.n	80023d6 <TIM_SlaveTimer_SetConfig+0x96>
 80023a2:	2b40      	cmp	r3, #64	@ 0x40
 80023a4:	d854      	bhi.n	8002450 <TIM_SlaveTimer_SetConfig+0x110>
 80023a6:	2b30      	cmp	r3, #48	@ 0x30
 80023a8:	d055      	beq.n	8002456 <TIM_SlaveTimer_SetConfig+0x116>
 80023aa:	2b30      	cmp	r3, #48	@ 0x30
 80023ac:	d850      	bhi.n	8002450 <TIM_SlaveTimer_SetConfig+0x110>
 80023ae:	2b20      	cmp	r3, #32
 80023b0:	d051      	beq.n	8002456 <TIM_SlaveTimer_SetConfig+0x116>
 80023b2:	2b20      	cmp	r3, #32
 80023b4:	d84c      	bhi.n	8002450 <TIM_SlaveTimer_SetConfig+0x110>
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d04d      	beq.n	8002456 <TIM_SlaveTimer_SetConfig+0x116>
 80023ba:	2b10      	cmp	r3, #16
 80023bc:	d04b      	beq.n	8002456 <TIM_SlaveTimer_SetConfig+0x116>
 80023be:	e047      	b.n	8002450 <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 80023c4:	683b      	ldr	r3, [r7, #0]
 80023c6:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 80023c8:	683b      	ldr	r3, [r7, #0]
 80023ca:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 80023cc:	683b      	ldr	r3, [r7, #0]
 80023ce:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 80023d0:	f000 f8a6 	bl	8002520 <TIM_ETR_SetConfig>
      break;
 80023d4:	e040      	b.n	8002458 <TIM_SlaveTimer_SetConfig+0x118>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 80023d6:	683b      	ldr	r3, [r7, #0]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	2b05      	cmp	r3, #5
 80023dc:	d101      	bne.n	80023e2 <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 80023de:	2301      	movs	r3, #1
 80023e0:	e03b      	b.n	800245a <TIM_SlaveTimer_SetConfig+0x11a>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	6a1b      	ldr	r3, [r3, #32]
 80023e8:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	6a1a      	ldr	r2, [r3, #32]
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	f022 0201 	bic.w	r2, r2, #1
 80023f8:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	699b      	ldr	r3, [r3, #24]
 8002400:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002402:	68bb      	ldr	r3, [r7, #8]
 8002404:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002408:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 800240a:	683b      	ldr	r3, [r7, #0]
 800240c:	691b      	ldr	r3, [r3, #16]
 800240e:	011b      	lsls	r3, r3, #4
 8002410:	68ba      	ldr	r2, [r7, #8]
 8002412:	4313      	orrs	r3, r2
 8002414:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	68ba      	ldr	r2, [r7, #8]
 800241c:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	68fa      	ldr	r2, [r7, #12]
 8002424:	621a      	str	r2, [r3, #32]
      break;
 8002426:	e017      	b.n	8002458 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 800242c:	683b      	ldr	r3, [r7, #0]
 800242e:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8002430:	683b      	ldr	r3, [r7, #0]
 8002432:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002434:	461a      	mov	r2, r3
 8002436:	f000 f814 	bl	8002462 <TIM_TI1_ConfigInputStage>
      break;
 800243a:	e00d      	b.n	8002458 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8002440:	683b      	ldr	r3, [r7, #0]
 8002442:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8002444:	683b      	ldr	r3, [r7, #0]
 8002446:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002448:	461a      	mov	r2, r3
 800244a:	f000 f839 	bl	80024c0 <TIM_TI2_ConfigInputStage>
      break;
 800244e:	e003      	b.n	8002458 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 8002450:	2301      	movs	r3, #1
 8002452:	75fb      	strb	r3, [r7, #23]
      break;
 8002454:	e000      	b.n	8002458 <TIM_SlaveTimer_SetConfig+0x118>
      break;
 8002456:	bf00      	nop
  }

  return status;
 8002458:	7dfb      	ldrb	r3, [r7, #23]
}
 800245a:	4618      	mov	r0, r3
 800245c:	3718      	adds	r7, #24
 800245e:	46bd      	mov	sp, r7
 8002460:	bd80      	pop	{r7, pc}

08002462 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002462:	b480      	push	{r7}
 8002464:	b087      	sub	sp, #28
 8002466:	af00      	add	r7, sp, #0
 8002468:	60f8      	str	r0, [r7, #12]
 800246a:	60b9      	str	r1, [r7, #8]
 800246c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	6a1b      	ldr	r3, [r3, #32]
 8002472:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	6a1b      	ldr	r3, [r3, #32]
 8002478:	f023 0201 	bic.w	r2, r3, #1
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	699b      	ldr	r3, [r3, #24]
 8002484:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002486:	693b      	ldr	r3, [r7, #16]
 8002488:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800248c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	011b      	lsls	r3, r3, #4
 8002492:	693a      	ldr	r2, [r7, #16]
 8002494:	4313      	orrs	r3, r2
 8002496:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002498:	697b      	ldr	r3, [r7, #20]
 800249a:	f023 030a 	bic.w	r3, r3, #10
 800249e:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80024a0:	697a      	ldr	r2, [r7, #20]
 80024a2:	68bb      	ldr	r3, [r7, #8]
 80024a4:	4313      	orrs	r3, r2
 80024a6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	693a      	ldr	r2, [r7, #16]
 80024ac:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	697a      	ldr	r2, [r7, #20]
 80024b2:	621a      	str	r2, [r3, #32]
}
 80024b4:	bf00      	nop
 80024b6:	371c      	adds	r7, #28
 80024b8:	46bd      	mov	sp, r7
 80024ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024be:	4770      	bx	lr

080024c0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80024c0:	b480      	push	{r7}
 80024c2:	b087      	sub	sp, #28
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	60f8      	str	r0, [r7, #12]
 80024c8:	60b9      	str	r1, [r7, #8]
 80024ca:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	6a1b      	ldr	r3, [r3, #32]
 80024d0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	6a1b      	ldr	r3, [r3, #32]
 80024d6:	f023 0210 	bic.w	r2, r3, #16
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	699b      	ldr	r3, [r3, #24]
 80024e2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80024e4:	693b      	ldr	r3, [r7, #16]
 80024e6:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80024ea:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	031b      	lsls	r3, r3, #12
 80024f0:	693a      	ldr	r2, [r7, #16]
 80024f2:	4313      	orrs	r3, r2
 80024f4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80024f6:	697b      	ldr	r3, [r7, #20]
 80024f8:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80024fc:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80024fe:	68bb      	ldr	r3, [r7, #8]
 8002500:	011b      	lsls	r3, r3, #4
 8002502:	697a      	ldr	r2, [r7, #20]
 8002504:	4313      	orrs	r3, r2
 8002506:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	693a      	ldr	r2, [r7, #16]
 800250c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	697a      	ldr	r2, [r7, #20]
 8002512:	621a      	str	r2, [r3, #32]
}
 8002514:	bf00      	nop
 8002516:	371c      	adds	r7, #28
 8002518:	46bd      	mov	sp, r7
 800251a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251e:	4770      	bx	lr

08002520 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002520:	b480      	push	{r7}
 8002522:	b087      	sub	sp, #28
 8002524:	af00      	add	r7, sp, #0
 8002526:	60f8      	str	r0, [r7, #12]
 8002528:	60b9      	str	r1, [r7, #8]
 800252a:	607a      	str	r2, [r7, #4]
 800252c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	689b      	ldr	r3, [r3, #8]
 8002532:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002534:	697b      	ldr	r3, [r7, #20]
 8002536:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800253a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800253c:	683b      	ldr	r3, [r7, #0]
 800253e:	021a      	lsls	r2, r3, #8
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	431a      	orrs	r2, r3
 8002544:	68bb      	ldr	r3, [r7, #8]
 8002546:	4313      	orrs	r3, r2
 8002548:	697a      	ldr	r2, [r7, #20]
 800254a:	4313      	orrs	r3, r2
 800254c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	697a      	ldr	r2, [r7, #20]
 8002552:	609a      	str	r2, [r3, #8]
}
 8002554:	bf00      	nop
 8002556:	371c      	adds	r7, #28
 8002558:	46bd      	mov	sp, r7
 800255a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800255e:	4770      	bx	lr

08002560 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002560:	b480      	push	{r7}
 8002562:	b085      	sub	sp, #20
 8002564:	af00      	add	r7, sp, #0
 8002566:	6078      	str	r0, [r7, #4]
 8002568:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002570:	2b01      	cmp	r3, #1
 8002572:	d101      	bne.n	8002578 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002574:	2302      	movs	r3, #2
 8002576:	e050      	b.n	800261a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	2201      	movs	r2, #1
 800257c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	2202      	movs	r2, #2
 8002584:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	685b      	ldr	r3, [r3, #4]
 800258e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	689b      	ldr	r3, [r3, #8]
 8002596:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800259e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80025a0:	683b      	ldr	r3, [r7, #0]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	68fa      	ldr	r2, [r7, #12]
 80025a6:	4313      	orrs	r3, r2
 80025a8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	68fa      	ldr	r2, [r7, #12]
 80025b0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	4a1c      	ldr	r2, [pc, #112]	@ (8002628 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80025b8:	4293      	cmp	r3, r2
 80025ba:	d018      	beq.n	80025ee <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80025c4:	d013      	beq.n	80025ee <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	4a18      	ldr	r2, [pc, #96]	@ (800262c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80025cc:	4293      	cmp	r3, r2
 80025ce:	d00e      	beq.n	80025ee <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	4a16      	ldr	r2, [pc, #88]	@ (8002630 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80025d6:	4293      	cmp	r3, r2
 80025d8:	d009      	beq.n	80025ee <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	4a15      	ldr	r2, [pc, #84]	@ (8002634 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80025e0:	4293      	cmp	r3, r2
 80025e2:	d004      	beq.n	80025ee <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	4a13      	ldr	r2, [pc, #76]	@ (8002638 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80025ea:	4293      	cmp	r3, r2
 80025ec:	d10c      	bne.n	8002608 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80025ee:	68bb      	ldr	r3, [r7, #8]
 80025f0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80025f4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80025f6:	683b      	ldr	r3, [r7, #0]
 80025f8:	685b      	ldr	r3, [r3, #4]
 80025fa:	68ba      	ldr	r2, [r7, #8]
 80025fc:	4313      	orrs	r3, r2
 80025fe:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	68ba      	ldr	r2, [r7, #8]
 8002606:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	2201      	movs	r2, #1
 800260c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	2200      	movs	r2, #0
 8002614:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8002618:	2300      	movs	r3, #0
}
 800261a:	4618      	mov	r0, r3
 800261c:	3714      	adds	r7, #20
 800261e:	46bd      	mov	sp, r7
 8002620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002624:	4770      	bx	lr
 8002626:	bf00      	nop
 8002628:	40010000 	.word	0x40010000
 800262c:	40000400 	.word	0x40000400
 8002630:	40000800 	.word	0x40000800
 8002634:	40000c00 	.word	0x40000c00
 8002638:	40014000 	.word	0x40014000

0800263c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800263c:	b480      	push	{r7}
 800263e:	b083      	sub	sp, #12
 8002640:	af00      	add	r7, sp, #0
 8002642:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002644:	bf00      	nop
 8002646:	370c      	adds	r7, #12
 8002648:	46bd      	mov	sp, r7
 800264a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264e:	4770      	bx	lr

08002650 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002650:	b480      	push	{r7}
 8002652:	b083      	sub	sp, #12
 8002654:	af00      	add	r7, sp, #0
 8002656:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002658:	bf00      	nop
 800265a:	370c      	adds	r7, #12
 800265c:	46bd      	mov	sp, r7
 800265e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002662:	4770      	bx	lr

08002664 <LL_EXTI_EnableIT_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 8002664:	b480      	push	{r7}
 8002666:	b083      	sub	sp, #12
 8002668:	af00      	add	r7, sp, #0
 800266a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR, ExtiLine);
 800266c:	4b05      	ldr	r3, [pc, #20]	@ (8002684 <LL_EXTI_EnableIT_0_31+0x20>)
 800266e:	681a      	ldr	r2, [r3, #0]
 8002670:	4904      	ldr	r1, [pc, #16]	@ (8002684 <LL_EXTI_EnableIT_0_31+0x20>)
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	4313      	orrs	r3, r2
 8002676:	600b      	str	r3, [r1, #0]
}
 8002678:	bf00      	nop
 800267a:	370c      	adds	r7, #12
 800267c:	46bd      	mov	sp, r7
 800267e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002682:	4770      	bx	lr
 8002684:	40013c00 	.word	0x40013c00

08002688 <LL_EXTI_DisableIT_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableIT_0_31(uint32_t ExtiLine)
{
 8002688:	b480      	push	{r7}
 800268a:	b083      	sub	sp, #12
 800268c:	af00      	add	r7, sp, #0
 800268e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR, ExtiLine);
 8002690:	4b06      	ldr	r3, [pc, #24]	@ (80026ac <LL_EXTI_DisableIT_0_31+0x24>)
 8002692:	681a      	ldr	r2, [r3, #0]
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	43db      	mvns	r3, r3
 8002698:	4904      	ldr	r1, [pc, #16]	@ (80026ac <LL_EXTI_DisableIT_0_31+0x24>)
 800269a:	4013      	ands	r3, r2
 800269c:	600b      	str	r3, [r1, #0]
}
 800269e:	bf00      	nop
 80026a0:	370c      	adds	r7, #12
 80026a2:	46bd      	mov	sp, r7
 80026a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a8:	4770      	bx	lr
 80026aa:	bf00      	nop
 80026ac:	40013c00 	.word	0x40013c00

080026b0 <LL_EXTI_EnableEvent_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableEvent_0_31(uint32_t ExtiLine)
{
 80026b0:	b480      	push	{r7}
 80026b2:	b083      	sub	sp, #12
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR, ExtiLine);
 80026b8:	4b05      	ldr	r3, [pc, #20]	@ (80026d0 <LL_EXTI_EnableEvent_0_31+0x20>)
 80026ba:	685a      	ldr	r2, [r3, #4]
 80026bc:	4904      	ldr	r1, [pc, #16]	@ (80026d0 <LL_EXTI_EnableEvent_0_31+0x20>)
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	4313      	orrs	r3, r2
 80026c2:	604b      	str	r3, [r1, #4]

}
 80026c4:	bf00      	nop
 80026c6:	370c      	adds	r7, #12
 80026c8:	46bd      	mov	sp, r7
 80026ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ce:	4770      	bx	lr
 80026d0:	40013c00 	.word	0x40013c00

080026d4 <LL_EXTI_DisableEvent_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableEvent_0_31(uint32_t ExtiLine)
{
 80026d4:	b480      	push	{r7}
 80026d6:	b083      	sub	sp, #12
 80026d8:	af00      	add	r7, sp, #0
 80026da:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR, ExtiLine);
 80026dc:	4b06      	ldr	r3, [pc, #24]	@ (80026f8 <LL_EXTI_DisableEvent_0_31+0x24>)
 80026de:	685a      	ldr	r2, [r3, #4]
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	43db      	mvns	r3, r3
 80026e4:	4904      	ldr	r1, [pc, #16]	@ (80026f8 <LL_EXTI_DisableEvent_0_31+0x24>)
 80026e6:	4013      	ands	r3, r2
 80026e8:	604b      	str	r3, [r1, #4]
}
 80026ea:	bf00      	nop
 80026ec:	370c      	adds	r7, #12
 80026ee:	46bd      	mov	sp, r7
 80026f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f4:	4770      	bx	lr
 80026f6:	bf00      	nop
 80026f8:	40013c00 	.word	0x40013c00

080026fc <LL_EXTI_EnableRisingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 80026fc:	b480      	push	{r7}
 80026fe:	b083      	sub	sp, #12
 8002700:	af00      	add	r7, sp, #0
 8002702:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR, ExtiLine);
 8002704:	4b05      	ldr	r3, [pc, #20]	@ (800271c <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8002706:	689a      	ldr	r2, [r3, #8]
 8002708:	4904      	ldr	r1, [pc, #16]	@ (800271c <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	4313      	orrs	r3, r2
 800270e:	608b      	str	r3, [r1, #8]

}
 8002710:	bf00      	nop
 8002712:	370c      	adds	r7, #12
 8002714:	46bd      	mov	sp, r7
 8002716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800271a:	4770      	bx	lr
 800271c:	40013c00 	.word	0x40013c00

08002720 <LL_EXTI_DisableRisingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_0_31(uint32_t ExtiLine)
{
 8002720:	b480      	push	{r7}
 8002722:	b083      	sub	sp, #12
 8002724:	af00      	add	r7, sp, #0
 8002726:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR, ExtiLine);
 8002728:	4b06      	ldr	r3, [pc, #24]	@ (8002744 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 800272a:	689a      	ldr	r2, [r3, #8]
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	43db      	mvns	r3, r3
 8002730:	4904      	ldr	r1, [pc, #16]	@ (8002744 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8002732:	4013      	ands	r3, r2
 8002734:	608b      	str	r3, [r1, #8]

}
 8002736:	bf00      	nop
 8002738:	370c      	adds	r7, #12
 800273a:	46bd      	mov	sp, r7
 800273c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002740:	4770      	bx	lr
 8002742:	bf00      	nop
 8002744:	40013c00 	.word	0x40013c00

08002748 <LL_EXTI_EnableFallingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_0_31(uint32_t ExtiLine)
{
 8002748:	b480      	push	{r7}
 800274a:	b083      	sub	sp, #12
 800274c:	af00      	add	r7, sp, #0
 800274e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR, ExtiLine);
 8002750:	4b05      	ldr	r3, [pc, #20]	@ (8002768 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8002752:	68da      	ldr	r2, [r3, #12]
 8002754:	4904      	ldr	r1, [pc, #16]	@ (8002768 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	4313      	orrs	r3, r2
 800275a:	60cb      	str	r3, [r1, #12]
}
 800275c:	bf00      	nop
 800275e:	370c      	adds	r7, #12
 8002760:	46bd      	mov	sp, r7
 8002762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002766:	4770      	bx	lr
 8002768:	40013c00 	.word	0x40013c00

0800276c <LL_EXTI_DisableFallingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_0_31(uint32_t ExtiLine)
{
 800276c:	b480      	push	{r7}
 800276e:	b083      	sub	sp, #12
 8002770:	af00      	add	r7, sp, #0
 8002772:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR, ExtiLine);
 8002774:	4b06      	ldr	r3, [pc, #24]	@ (8002790 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8002776:	68da      	ldr	r2, [r3, #12]
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	43db      	mvns	r3, r3
 800277c:	4904      	ldr	r1, [pc, #16]	@ (8002790 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 800277e:	4013      	ands	r3, r2
 8002780:	60cb      	str	r3, [r1, #12]
}
 8002782:	bf00      	nop
 8002784:	370c      	adds	r7, #12
 8002786:	46bd      	mov	sp, r7
 8002788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800278c:	4770      	bx	lr
 800278e:	bf00      	nop
 8002790:	40013c00 	.word	0x40013c00

08002794 <LL_EXTI_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: EXTI registers are initialized
  *          - ERROR: not applicable
  */
uint32_t LL_EXTI_Init(LL_EXTI_InitTypeDef *EXTI_InitStruct)
{
 8002794:	b580      	push	{r7, lr}
 8002796:	b084      	sub	sp, #16
 8002798:	af00      	add	r7, sp, #0
 800279a:	6078      	str	r0, [r7, #4]
  ErrorStatus status = SUCCESS;
 800279c:	2300      	movs	r3, #0
 800279e:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_EXTI_LINE_0_31(EXTI_InitStruct->Line_0_31));
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->LineCommand));
  assert_param(IS_LL_EXTI_MODE(EXTI_InitStruct->Mode));

  /* ENABLE LineCommand */
  if (EXTI_InitStruct->LineCommand != DISABLE)
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	791b      	ldrb	r3, [r3, #4]
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d065      	beq.n	8002874 <LL_EXTI_Init+0xe0>
  {
    assert_param(IS_LL_EXTI_TRIGGER(EXTI_InitStruct->Trigger));

    /* Configure EXTI Lines in range from 0 to 31 */
    if (EXTI_InitStruct->Line_0_31 != LL_EXTI_LINE_NONE)
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d06b      	beq.n	8002888 <LL_EXTI_Init+0xf4>
    {
      switch (EXTI_InitStruct->Mode)
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	795b      	ldrb	r3, [r3, #5]
 80027b4:	2b02      	cmp	r3, #2
 80027b6:	d01c      	beq.n	80027f2 <LL_EXTI_Init+0x5e>
 80027b8:	2b02      	cmp	r3, #2
 80027ba:	dc25      	bgt.n	8002808 <LL_EXTI_Init+0x74>
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d002      	beq.n	80027c6 <LL_EXTI_Init+0x32>
 80027c0:	2b01      	cmp	r3, #1
 80027c2:	d00b      	beq.n	80027dc <LL_EXTI_Init+0x48>
 80027c4:	e020      	b.n	8002808 <LL_EXTI_Init+0x74>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	4618      	mov	r0, r3
 80027cc:	f7ff ff82 	bl	80026d4 <LL_EXTI_DisableEvent_0_31>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	4618      	mov	r0, r3
 80027d6:	f7ff ff45 	bl	8002664 <LL_EXTI_EnableIT_0_31>
          break;
 80027da:	e018      	b.n	800280e <LL_EXTI_Init+0x7a>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	4618      	mov	r0, r3
 80027e2:	f7ff ff51 	bl	8002688 <LL_EXTI_DisableIT_0_31>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	4618      	mov	r0, r3
 80027ec:	f7ff ff60 	bl	80026b0 <LL_EXTI_EnableEvent_0_31>
          break;
 80027f0:	e00d      	b.n	800280e <LL_EXTI_Init+0x7a>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT & Event on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	4618      	mov	r0, r3
 80027f8:	f7ff ff34 	bl	8002664 <LL_EXTI_EnableIT_0_31>
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	4618      	mov	r0, r3
 8002802:	f7ff ff55 	bl	80026b0 <LL_EXTI_EnableEvent_0_31>
          break;
 8002806:	e002      	b.n	800280e <LL_EXTI_Init+0x7a>
        default:
          status = ERROR;
 8002808:	2301      	movs	r3, #1
 800280a:	73fb      	strb	r3, [r7, #15]
          break;
 800280c:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	799b      	ldrb	r3, [r3, #6]
 8002812:	2b00      	cmp	r3, #0
 8002814:	d038      	beq.n	8002888 <LL_EXTI_Init+0xf4>
      {
        switch (EXTI_InitStruct->Trigger)
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	799b      	ldrb	r3, [r3, #6]
 800281a:	2b03      	cmp	r3, #3
 800281c:	d01c      	beq.n	8002858 <LL_EXTI_Init+0xc4>
 800281e:	2b03      	cmp	r3, #3
 8002820:	dc25      	bgt.n	800286e <LL_EXTI_Init+0xda>
 8002822:	2b01      	cmp	r3, #1
 8002824:	d002      	beq.n	800282c <LL_EXTI_Init+0x98>
 8002826:	2b02      	cmp	r3, #2
 8002828:	d00b      	beq.n	8002842 <LL_EXTI_Init+0xae>
 800282a:	e020      	b.n	800286e <LL_EXTI_Init+0xda>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	4618      	mov	r0, r3
 8002832:	f7ff ff9b 	bl	800276c <LL_EXTI_DisableFallingTrig_0_31>
            /* Then Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	4618      	mov	r0, r3
 800283c:	f7ff ff5e 	bl	80026fc <LL_EXTI_EnableRisingTrig_0_31>
            break;
 8002840:	e022      	b.n	8002888 <LL_EXTI_Init+0xf4>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	4618      	mov	r0, r3
 8002848:	f7ff ff6a 	bl	8002720 <LL_EXTI_DisableRisingTrig_0_31>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	4618      	mov	r0, r3
 8002852:	f7ff ff79 	bl	8002748 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 8002856:	e017      	b.n	8002888 <LL_EXTI_Init+0xf4>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	4618      	mov	r0, r3
 800285e:	f7ff ff4d 	bl	80026fc <LL_EXTI_EnableRisingTrig_0_31>
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	4618      	mov	r0, r3
 8002868:	f7ff ff6e 	bl	8002748 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 800286c:	e00c      	b.n	8002888 <LL_EXTI_Init+0xf4>
          default:
            status = ERROR;
 800286e:	2301      	movs	r3, #1
 8002870:	73fb      	strb	r3, [r7, #15]
            break;
 8002872:	e009      	b.n	8002888 <LL_EXTI_Init+0xf4>
  }
  /* DISABLE LineCommand */
  else
  {
    /* De-configure EXTI Lines in range from 0 to 31 */
    LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	4618      	mov	r0, r3
 800287a:	f7ff ff05 	bl	8002688 <LL_EXTI_DisableIT_0_31>
    LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	4618      	mov	r0, r3
 8002884:	f7ff ff26 	bl	80026d4 <LL_EXTI_DisableEvent_0_31>
  }
  return status;
 8002888:	7bfb      	ldrb	r3, [r7, #15]
}
 800288a:	4618      	mov	r0, r3
 800288c:	3710      	adds	r7, #16
 800288e:	46bd      	mov	sp, r7
 8002890:	bd80      	pop	{r7, pc}

08002892 <LL_GPIO_SetPinMode>:
{
 8002892:	b480      	push	{r7}
 8002894:	b08b      	sub	sp, #44	@ 0x2c
 8002896:	af00      	add	r7, sp, #0
 8002898:	60f8      	str	r0, [r7, #12]
 800289a:	60b9      	str	r1, [r7, #8]
 800289c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	681a      	ldr	r2, [r3, #0]
 80028a2:	68bb      	ldr	r3, [r7, #8]
 80028a4:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028a6:	697b      	ldr	r3, [r7, #20]
 80028a8:	fa93 f3a3 	rbit	r3, r3
 80028ac:	613b      	str	r3, [r7, #16]
  return result;
 80028ae:	693b      	ldr	r3, [r7, #16]
 80028b0:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80028b2:	69bb      	ldr	r3, [r7, #24]
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d101      	bne.n	80028bc <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 80028b8:	2320      	movs	r3, #32
 80028ba:	e003      	b.n	80028c4 <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 80028bc:	69bb      	ldr	r3, [r7, #24]
 80028be:	fab3 f383 	clz	r3, r3
 80028c2:	b2db      	uxtb	r3, r3
 80028c4:	005b      	lsls	r3, r3, #1
 80028c6:	2103      	movs	r1, #3
 80028c8:	fa01 f303 	lsl.w	r3, r1, r3
 80028cc:	43db      	mvns	r3, r3
 80028ce:	401a      	ands	r2, r3
 80028d0:	68bb      	ldr	r3, [r7, #8]
 80028d2:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028d4:	6a3b      	ldr	r3, [r7, #32]
 80028d6:	fa93 f3a3 	rbit	r3, r3
 80028da:	61fb      	str	r3, [r7, #28]
  return result;
 80028dc:	69fb      	ldr	r3, [r7, #28]
 80028de:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 80028e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d101      	bne.n	80028ea <LL_GPIO_SetPinMode+0x58>
    return 32U;
 80028e6:	2320      	movs	r3, #32
 80028e8:	e003      	b.n	80028f2 <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 80028ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028ec:	fab3 f383 	clz	r3, r3
 80028f0:	b2db      	uxtb	r3, r3
 80028f2:	005b      	lsls	r3, r3, #1
 80028f4:	6879      	ldr	r1, [r7, #4]
 80028f6:	fa01 f303 	lsl.w	r3, r1, r3
 80028fa:	431a      	orrs	r2, r3
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	601a      	str	r2, [r3, #0]
}
 8002900:	bf00      	nop
 8002902:	372c      	adds	r7, #44	@ 0x2c
 8002904:	46bd      	mov	sp, r7
 8002906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800290a:	4770      	bx	lr

0800290c <LL_GPIO_SetPinOutputType>:
{
 800290c:	b480      	push	{r7}
 800290e:	b085      	sub	sp, #20
 8002910:	af00      	add	r7, sp, #0
 8002912:	60f8      	str	r0, [r7, #12]
 8002914:	60b9      	str	r1, [r7, #8]
 8002916:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	685a      	ldr	r2, [r3, #4]
 800291c:	68bb      	ldr	r3, [r7, #8]
 800291e:	43db      	mvns	r3, r3
 8002920:	401a      	ands	r2, r3
 8002922:	68bb      	ldr	r3, [r7, #8]
 8002924:	6879      	ldr	r1, [r7, #4]
 8002926:	fb01 f303 	mul.w	r3, r1, r3
 800292a:	431a      	orrs	r2, r3
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	605a      	str	r2, [r3, #4]
}
 8002930:	bf00      	nop
 8002932:	3714      	adds	r7, #20
 8002934:	46bd      	mov	sp, r7
 8002936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800293a:	4770      	bx	lr

0800293c <LL_GPIO_SetPinSpeed>:
{
 800293c:	b480      	push	{r7}
 800293e:	b08b      	sub	sp, #44	@ 0x2c
 8002940:	af00      	add	r7, sp, #0
 8002942:	60f8      	str	r0, [r7, #12]
 8002944:	60b9      	str	r1, [r7, #8]
 8002946:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	689a      	ldr	r2, [r3, #8]
 800294c:	68bb      	ldr	r3, [r7, #8]
 800294e:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002950:	697b      	ldr	r3, [r7, #20]
 8002952:	fa93 f3a3 	rbit	r3, r3
 8002956:	613b      	str	r3, [r7, #16]
  return result;
 8002958:	693b      	ldr	r3, [r7, #16]
 800295a:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800295c:	69bb      	ldr	r3, [r7, #24]
 800295e:	2b00      	cmp	r3, #0
 8002960:	d101      	bne.n	8002966 <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 8002962:	2320      	movs	r3, #32
 8002964:	e003      	b.n	800296e <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 8002966:	69bb      	ldr	r3, [r7, #24]
 8002968:	fab3 f383 	clz	r3, r3
 800296c:	b2db      	uxtb	r3, r3
 800296e:	005b      	lsls	r3, r3, #1
 8002970:	2103      	movs	r1, #3
 8002972:	fa01 f303 	lsl.w	r3, r1, r3
 8002976:	43db      	mvns	r3, r3
 8002978:	401a      	ands	r2, r3
 800297a:	68bb      	ldr	r3, [r7, #8]
 800297c:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800297e:	6a3b      	ldr	r3, [r7, #32]
 8002980:	fa93 f3a3 	rbit	r3, r3
 8002984:	61fb      	str	r3, [r7, #28]
  return result;
 8002986:	69fb      	ldr	r3, [r7, #28]
 8002988:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 800298a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800298c:	2b00      	cmp	r3, #0
 800298e:	d101      	bne.n	8002994 <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 8002990:	2320      	movs	r3, #32
 8002992:	e003      	b.n	800299c <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 8002994:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002996:	fab3 f383 	clz	r3, r3
 800299a:	b2db      	uxtb	r3, r3
 800299c:	005b      	lsls	r3, r3, #1
 800299e:	6879      	ldr	r1, [r7, #4]
 80029a0:	fa01 f303 	lsl.w	r3, r1, r3
 80029a4:	431a      	orrs	r2, r3
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	609a      	str	r2, [r3, #8]
}
 80029aa:	bf00      	nop
 80029ac:	372c      	adds	r7, #44	@ 0x2c
 80029ae:	46bd      	mov	sp, r7
 80029b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b4:	4770      	bx	lr

080029b6 <LL_GPIO_SetPinPull>:
{
 80029b6:	b480      	push	{r7}
 80029b8:	b08b      	sub	sp, #44	@ 0x2c
 80029ba:	af00      	add	r7, sp, #0
 80029bc:	60f8      	str	r0, [r7, #12]
 80029be:	60b9      	str	r1, [r7, #8]
 80029c0:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	68da      	ldr	r2, [r3, #12]
 80029c6:	68bb      	ldr	r3, [r7, #8]
 80029c8:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029ca:	697b      	ldr	r3, [r7, #20]
 80029cc:	fa93 f3a3 	rbit	r3, r3
 80029d0:	613b      	str	r3, [r7, #16]
  return result;
 80029d2:	693b      	ldr	r3, [r7, #16]
 80029d4:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80029d6:	69bb      	ldr	r3, [r7, #24]
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d101      	bne.n	80029e0 <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 80029dc:	2320      	movs	r3, #32
 80029de:	e003      	b.n	80029e8 <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 80029e0:	69bb      	ldr	r3, [r7, #24]
 80029e2:	fab3 f383 	clz	r3, r3
 80029e6:	b2db      	uxtb	r3, r3
 80029e8:	005b      	lsls	r3, r3, #1
 80029ea:	2103      	movs	r1, #3
 80029ec:	fa01 f303 	lsl.w	r3, r1, r3
 80029f0:	43db      	mvns	r3, r3
 80029f2:	401a      	ands	r2, r3
 80029f4:	68bb      	ldr	r3, [r7, #8]
 80029f6:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029f8:	6a3b      	ldr	r3, [r7, #32]
 80029fa:	fa93 f3a3 	rbit	r3, r3
 80029fe:	61fb      	str	r3, [r7, #28]
  return result;
 8002a00:	69fb      	ldr	r3, [r7, #28]
 8002a02:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8002a04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d101      	bne.n	8002a0e <LL_GPIO_SetPinPull+0x58>
    return 32U;
 8002a0a:	2320      	movs	r3, #32
 8002a0c:	e003      	b.n	8002a16 <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 8002a0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a10:	fab3 f383 	clz	r3, r3
 8002a14:	b2db      	uxtb	r3, r3
 8002a16:	005b      	lsls	r3, r3, #1
 8002a18:	6879      	ldr	r1, [r7, #4]
 8002a1a:	fa01 f303 	lsl.w	r3, r1, r3
 8002a1e:	431a      	orrs	r2, r3
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	60da      	str	r2, [r3, #12]
}
 8002a24:	bf00      	nop
 8002a26:	372c      	adds	r7, #44	@ 0x2c
 8002a28:	46bd      	mov	sp, r7
 8002a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a2e:	4770      	bx	lr

08002a30 <LL_GPIO_SetAFPin_0_7>:
{
 8002a30:	b480      	push	{r7}
 8002a32:	b08b      	sub	sp, #44	@ 0x2c
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	60f8      	str	r0, [r7, #12]
 8002a38:	60b9      	str	r1, [r7, #8]
 8002a3a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	6a1a      	ldr	r2, [r3, #32]
 8002a40:	68bb      	ldr	r3, [r7, #8]
 8002a42:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a44:	697b      	ldr	r3, [r7, #20]
 8002a46:	fa93 f3a3 	rbit	r3, r3
 8002a4a:	613b      	str	r3, [r7, #16]
  return result;
 8002a4c:	693b      	ldr	r3, [r7, #16]
 8002a4e:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002a50:	69bb      	ldr	r3, [r7, #24]
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d101      	bne.n	8002a5a <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 8002a56:	2320      	movs	r3, #32
 8002a58:	e003      	b.n	8002a62 <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 8002a5a:	69bb      	ldr	r3, [r7, #24]
 8002a5c:	fab3 f383 	clz	r3, r3
 8002a60:	b2db      	uxtb	r3, r3
 8002a62:	009b      	lsls	r3, r3, #2
 8002a64:	210f      	movs	r1, #15
 8002a66:	fa01 f303 	lsl.w	r3, r1, r3
 8002a6a:	43db      	mvns	r3, r3
 8002a6c:	401a      	ands	r2, r3
 8002a6e:	68bb      	ldr	r3, [r7, #8]
 8002a70:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a72:	6a3b      	ldr	r3, [r7, #32]
 8002a74:	fa93 f3a3 	rbit	r3, r3
 8002a78:	61fb      	str	r3, [r7, #28]
  return result;
 8002a7a:	69fb      	ldr	r3, [r7, #28]
 8002a7c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8002a7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d101      	bne.n	8002a88 <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 8002a84:	2320      	movs	r3, #32
 8002a86:	e003      	b.n	8002a90 <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 8002a88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a8a:	fab3 f383 	clz	r3, r3
 8002a8e:	b2db      	uxtb	r3, r3
 8002a90:	009b      	lsls	r3, r3, #2
 8002a92:	6879      	ldr	r1, [r7, #4]
 8002a94:	fa01 f303 	lsl.w	r3, r1, r3
 8002a98:	431a      	orrs	r2, r3
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	621a      	str	r2, [r3, #32]
}
 8002a9e:	bf00      	nop
 8002aa0:	372c      	adds	r7, #44	@ 0x2c
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa8:	4770      	bx	lr

08002aaa <LL_GPIO_SetAFPin_8_15>:
{
 8002aaa:	b480      	push	{r7}
 8002aac:	b08b      	sub	sp, #44	@ 0x2c
 8002aae:	af00      	add	r7, sp, #0
 8002ab0:	60f8      	str	r0, [r7, #12]
 8002ab2:	60b9      	str	r1, [r7, #8]
 8002ab4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002aba:	68bb      	ldr	r3, [r7, #8]
 8002abc:	0a1b      	lsrs	r3, r3, #8
 8002abe:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ac0:	697b      	ldr	r3, [r7, #20]
 8002ac2:	fa93 f3a3 	rbit	r3, r3
 8002ac6:	613b      	str	r3, [r7, #16]
  return result;
 8002ac8:	693b      	ldr	r3, [r7, #16]
 8002aca:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002acc:	69bb      	ldr	r3, [r7, #24]
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d101      	bne.n	8002ad6 <LL_GPIO_SetAFPin_8_15+0x2c>
    return 32U;
 8002ad2:	2320      	movs	r3, #32
 8002ad4:	e003      	b.n	8002ade <LL_GPIO_SetAFPin_8_15+0x34>
  return __builtin_clz(value);
 8002ad6:	69bb      	ldr	r3, [r7, #24]
 8002ad8:	fab3 f383 	clz	r3, r3
 8002adc:	b2db      	uxtb	r3, r3
 8002ade:	009b      	lsls	r3, r3, #2
 8002ae0:	210f      	movs	r1, #15
 8002ae2:	fa01 f303 	lsl.w	r3, r1, r3
 8002ae6:	43db      	mvns	r3, r3
 8002ae8:	401a      	ands	r2, r3
 8002aea:	68bb      	ldr	r3, [r7, #8]
 8002aec:	0a1b      	lsrs	r3, r3, #8
 8002aee:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002af0:	6a3b      	ldr	r3, [r7, #32]
 8002af2:	fa93 f3a3 	rbit	r3, r3
 8002af6:	61fb      	str	r3, [r7, #28]
  return result;
 8002af8:	69fb      	ldr	r3, [r7, #28]
 8002afa:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8002afc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d101      	bne.n	8002b06 <LL_GPIO_SetAFPin_8_15+0x5c>
    return 32U;
 8002b02:	2320      	movs	r3, #32
 8002b04:	e003      	b.n	8002b0e <LL_GPIO_SetAFPin_8_15+0x64>
  return __builtin_clz(value);
 8002b06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b08:	fab3 f383 	clz	r3, r3
 8002b0c:	b2db      	uxtb	r3, r3
 8002b0e:	009b      	lsls	r3, r3, #2
 8002b10:	6879      	ldr	r1, [r7, #4]
 8002b12:	fa01 f303 	lsl.w	r3, r1, r3
 8002b16:	431a      	orrs	r2, r3
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8002b1c:	bf00      	nop
 8002b1e:	372c      	adds	r7, #44	@ 0x2c
 8002b20:	46bd      	mov	sp, r7
 8002b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b26:	4770      	bx	lr

08002b28 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8002b28:	b580      	push	{r7, lr}
 8002b2a:	b08a      	sub	sp, #40	@ 0x28
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	6078      	str	r0, [r7, #4]
 8002b30:	6039      	str	r1, [r7, #0]
  uint32_t pinpos     = 0x00000000U;
 8002b32:	2300      	movs	r3, #0
 8002b34:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t currentpin = 0x00000000U;
 8002b36:	2300      	movs	r3, #0
 8002b38:	623b      	str	r3, [r7, #32]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8002b3a:	683b      	ldr	r3, [r7, #0]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	61bb      	str	r3, [r7, #24]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b40:	69bb      	ldr	r3, [r7, #24]
 8002b42:	fa93 f3a3 	rbit	r3, r3
 8002b46:	617b      	str	r3, [r7, #20]
  return result;
 8002b48:	697b      	ldr	r3, [r7, #20]
 8002b4a:	61fb      	str	r3, [r7, #28]
  if (value == 0U)
 8002b4c:	69fb      	ldr	r3, [r7, #28]
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d101      	bne.n	8002b56 <LL_GPIO_Init+0x2e>
    return 32U;
 8002b52:	2320      	movs	r3, #32
 8002b54:	e003      	b.n	8002b5e <LL_GPIO_Init+0x36>
  return __builtin_clz(value);
 8002b56:	69fb      	ldr	r3, [r7, #28]
 8002b58:	fab3 f383 	clz	r3, r3
 8002b5c:	b2db      	uxtb	r3, r3
 8002b5e:	627b      	str	r3, [r7, #36]	@ 0x24
  
  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8002b60:	e057      	b.n	8002c12 <LL_GPIO_Init+0xea>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 8002b62:	683b      	ldr	r3, [r7, #0]
 8002b64:	681a      	ldr	r2, [r3, #0]
 8002b66:	2101      	movs	r1, #1
 8002b68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b6a:	fa01 f303 	lsl.w	r3, r1, r3
 8002b6e:	4013      	ands	r3, r2
 8002b70:	623b      	str	r3, [r7, #32]
    
    if (currentpin)
 8002b72:	6a3b      	ldr	r3, [r7, #32]
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d049      	beq.n	8002c0c <LL_GPIO_Init+0xe4>
    {
      
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8002b78:	683b      	ldr	r3, [r7, #0]
 8002b7a:	685b      	ldr	r3, [r3, #4]
 8002b7c:	2b01      	cmp	r3, #1
 8002b7e:	d003      	beq.n	8002b88 <LL_GPIO_Init+0x60>
 8002b80:	683b      	ldr	r3, [r7, #0]
 8002b82:	685b      	ldr	r3, [r3, #4]
 8002b84:	2b02      	cmp	r3, #2
 8002b86:	d10d      	bne.n	8002ba4 <LL_GPIO_Init+0x7c>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
        
        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8002b88:	683b      	ldr	r3, [r7, #0]
 8002b8a:	689b      	ldr	r3, [r3, #8]
 8002b8c:	461a      	mov	r2, r3
 8002b8e:	6a39      	ldr	r1, [r7, #32]
 8002b90:	6878      	ldr	r0, [r7, #4]
 8002b92:	f7ff fed3 	bl	800293c <LL_GPIO_SetPinSpeed>
        
        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));
        
        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 8002b96:	683b      	ldr	r3, [r7, #0]
 8002b98:	68db      	ldr	r3, [r3, #12]
 8002b9a:	461a      	mov	r2, r3
 8002b9c:	6a39      	ldr	r1, [r7, #32]
 8002b9e:	6878      	ldr	r0, [r7, #4]
 8002ba0:	f7ff feb4 	bl	800290c <LL_GPIO_SetPinOutputType>
      }
      
      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8002ba4:	683b      	ldr	r3, [r7, #0]
 8002ba6:	691b      	ldr	r3, [r3, #16]
 8002ba8:	461a      	mov	r2, r3
 8002baa:	6a39      	ldr	r1, [r7, #32]
 8002bac:	6878      	ldr	r0, [r7, #4]
 8002bae:	f7ff ff02 	bl	80029b6 <LL_GPIO_SetPinPull>
      
      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8002bb2:	683b      	ldr	r3, [r7, #0]
 8002bb4:	685b      	ldr	r3, [r3, #4]
 8002bb6:	2b02      	cmp	r3, #2
 8002bb8:	d121      	bne.n	8002bfe <LL_GPIO_Init+0xd6>
 8002bba:	6a3b      	ldr	r3, [r7, #32]
 8002bbc:	60fb      	str	r3, [r7, #12]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	fa93 f3a3 	rbit	r3, r3
 8002bc4:	60bb      	str	r3, [r7, #8]
  return result;
 8002bc6:	68bb      	ldr	r3, [r7, #8]
 8002bc8:	613b      	str	r3, [r7, #16]
  if (value == 0U)
 8002bca:	693b      	ldr	r3, [r7, #16]
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d101      	bne.n	8002bd4 <LL_GPIO_Init+0xac>
    return 32U;
 8002bd0:	2320      	movs	r3, #32
 8002bd2:	e003      	b.n	8002bdc <LL_GPIO_Init+0xb4>
  return __builtin_clz(value);
 8002bd4:	693b      	ldr	r3, [r7, #16]
 8002bd6:	fab3 f383 	clz	r3, r3
 8002bda:	b2db      	uxtb	r3, r3
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));
        
        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 8002bdc:	2b07      	cmp	r3, #7
 8002bde:	d807      	bhi.n	8002bf0 <LL_GPIO_Init+0xc8>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8002be0:	683b      	ldr	r3, [r7, #0]
 8002be2:	695b      	ldr	r3, [r3, #20]
 8002be4:	461a      	mov	r2, r3
 8002be6:	6a39      	ldr	r1, [r7, #32]
 8002be8:	6878      	ldr	r0, [r7, #4]
 8002bea:	f7ff ff21 	bl	8002a30 <LL_GPIO_SetAFPin_0_7>
 8002bee:	e006      	b.n	8002bfe <LL_GPIO_Init+0xd6>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8002bf0:	683b      	ldr	r3, [r7, #0]
 8002bf2:	695b      	ldr	r3, [r3, #20]
 8002bf4:	461a      	mov	r2, r3
 8002bf6:	6a39      	ldr	r1, [r7, #32]
 8002bf8:	6878      	ldr	r0, [r7, #4]
 8002bfa:	f7ff ff56 	bl	8002aaa <LL_GPIO_SetAFPin_8_15>
        }
      }
      
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8002bfe:	683b      	ldr	r3, [r7, #0]
 8002c00:	685b      	ldr	r3, [r3, #4]
 8002c02:	461a      	mov	r2, r3
 8002c04:	6a39      	ldr	r1, [r7, #32]
 8002c06:	6878      	ldr	r0, [r7, #4]
 8002c08:	f7ff fe43 	bl	8002892 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8002c0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c0e:	3301      	adds	r3, #1
 8002c10:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8002c12:	683b      	ldr	r3, [r7, #0]
 8002c14:	681a      	ldr	r2, [r3, #0]
 8002c16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c18:	fa22 f303 	lsr.w	r3, r2, r3
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d1a0      	bne.n	8002b62 <LL_GPIO_Init+0x3a>
  }

  return (SUCCESS);
 8002c20:	2300      	movs	r3, #0
}
 8002c22:	4618      	mov	r0, r3
 8002c24:	3728      	adds	r7, #40	@ 0x28
 8002c26:	46bd      	mov	sp, r7
 8002c28:	bd80      	pop	{r7, pc}
	...

08002c2c <LL_RCC_GetSysClkSource>:
{
 8002c2c:	b480      	push	{r7}
 8002c2e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8002c30:	4b04      	ldr	r3, [pc, #16]	@ (8002c44 <LL_RCC_GetSysClkSource+0x18>)
 8002c32:	689b      	ldr	r3, [r3, #8]
 8002c34:	f003 030c 	and.w	r3, r3, #12
}
 8002c38:	4618      	mov	r0, r3
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c40:	4770      	bx	lr
 8002c42:	bf00      	nop
 8002c44:	40023800 	.word	0x40023800

08002c48 <LL_RCC_GetAHBPrescaler>:
{
 8002c48:	b480      	push	{r7}
 8002c4a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8002c4c:	4b04      	ldr	r3, [pc, #16]	@ (8002c60 <LL_RCC_GetAHBPrescaler+0x18>)
 8002c4e:	689b      	ldr	r3, [r3, #8]
 8002c50:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8002c54:	4618      	mov	r0, r3
 8002c56:	46bd      	mov	sp, r7
 8002c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c5c:	4770      	bx	lr
 8002c5e:	bf00      	nop
 8002c60:	40023800 	.word	0x40023800

08002c64 <LL_RCC_GetAPB1Prescaler>:
{
 8002c64:	b480      	push	{r7}
 8002c66:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8002c68:	4b04      	ldr	r3, [pc, #16]	@ (8002c7c <LL_RCC_GetAPB1Prescaler+0x18>)
 8002c6a:	689b      	ldr	r3, [r3, #8]
 8002c6c:	f403 53e0 	and.w	r3, r3, #7168	@ 0x1c00
}
 8002c70:	4618      	mov	r0, r3
 8002c72:	46bd      	mov	sp, r7
 8002c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c78:	4770      	bx	lr
 8002c7a:	bf00      	nop
 8002c7c:	40023800 	.word	0x40023800

08002c80 <LL_RCC_GetAPB2Prescaler>:
{
 8002c80:	b480      	push	{r7}
 8002c82:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8002c84:	4b04      	ldr	r3, [pc, #16]	@ (8002c98 <LL_RCC_GetAPB2Prescaler+0x18>)
 8002c86:	689b      	ldr	r3, [r3, #8]
 8002c88:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 8002c8c:	4618      	mov	r0, r3
 8002c8e:	46bd      	mov	sp, r7
 8002c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c94:	4770      	bx	lr
 8002c96:	bf00      	nop
 8002c98:	40023800 	.word	0x40023800

08002c9c <LL_RCC_PLL_GetMainSource>:
  * @retval Returned value can be one of the following values:
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8002c9c:	b480      	push	{r7}
 8002c9e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8002ca0:	4b04      	ldr	r3, [pc, #16]	@ (8002cb4 <LL_RCC_PLL_GetMainSource+0x18>)
 8002ca2:	685b      	ldr	r3, [r3, #4]
 8002ca4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
}
 8002ca8:	4618      	mov	r0, r3
 8002caa:	46bd      	mov	sp, r7
 8002cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb0:	4770      	bx	lr
 8002cb2:	bf00      	nop
 8002cb4:	40023800 	.word	0x40023800

08002cb8 <LL_RCC_PLL_GetN>:
  * @retval Between 50/192(*) and 432
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8002cb8:	b480      	push	{r7}
 8002cba:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8002cbc:	4b04      	ldr	r3, [pc, #16]	@ (8002cd0 <LL_RCC_PLL_GetN+0x18>)
 8002cbe:	685b      	ldr	r3, [r3, #4]
 8002cc0:	099b      	lsrs	r3, r3, #6
 8002cc2:	f3c3 0308 	ubfx	r3, r3, #0, #9
}
 8002cc6:	4618      	mov	r0, r3
 8002cc8:	46bd      	mov	sp, r7
 8002cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cce:	4770      	bx	lr
 8002cd0:	40023800 	.word	0x40023800

08002cd4 <LL_RCC_PLL_GetP>:
  *         @arg @ref LL_RCC_PLLP_DIV_4
  *         @arg @ref LL_RCC_PLLP_DIV_6
  *         @arg @ref LL_RCC_PLLP_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetP(void)
{
 8002cd4:	b480      	push	{r7}
 8002cd6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP));
 8002cd8:	4b04      	ldr	r3, [pc, #16]	@ (8002cec <LL_RCC_PLL_GetP+0x18>)
 8002cda:	685b      	ldr	r3, [r3, #4]
 8002cdc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
}
 8002ce0:	4618      	mov	r0, r3
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce8:	4770      	bx	lr
 8002cea:	bf00      	nop
 8002cec:	40023800 	.word	0x40023800

08002cf0 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_61
  *         @arg @ref LL_RCC_PLLM_DIV_62
  *         @arg @ref LL_RCC_PLLM_DIV_63
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8002cf0:	b480      	push	{r7}
 8002cf2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8002cf4:	4b04      	ldr	r3, [pc, #16]	@ (8002d08 <LL_RCC_PLL_GetDivider+0x18>)
 8002cf6:	685b      	ldr	r3, [r3, #4]
 8002cf8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
}
 8002cfc:	4618      	mov	r0, r3
 8002cfe:	46bd      	mov	sp, r7
 8002d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d04:	4770      	bx	lr
 8002d06:	bf00      	nop
 8002d08:	40023800 	.word	0x40023800

08002d0c <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 8002d0c:	b580      	push	{r7, lr}
 8002d0e:	b082      	sub	sp, #8
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 8002d14:	f000 f820 	bl	8002d58 <RCC_GetSystemClockFreq>
 8002d18:	4602      	mov	r2, r0
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	4618      	mov	r0, r3
 8002d24:	f000 f840 	bl	8002da8 <RCC_GetHCLKClockFreq>
 8002d28:	4602      	mov	r2, r0
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	685b      	ldr	r3, [r3, #4]
 8002d32:	4618      	mov	r0, r3
 8002d34:	f000 f84e 	bl	8002dd4 <RCC_GetPCLK1ClockFreq>
 8002d38:	4602      	mov	r2, r0
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	609a      	str	r2, [r3, #8]

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	685b      	ldr	r3, [r3, #4]
 8002d42:	4618      	mov	r0, r3
 8002d44:	f000 f85a 	bl	8002dfc <RCC_GetPCLK2ClockFreq>
 8002d48:	4602      	mov	r2, r0
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	60da      	str	r2, [r3, #12]
}
 8002d4e:	bf00      	nop
 8002d50:	3708      	adds	r7, #8
 8002d52:	46bd      	mov	sp, r7
 8002d54:	bd80      	pop	{r7, pc}
	...

08002d58 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 8002d58:	b580      	push	{r7, lr}
 8002d5a:	b082      	sub	sp, #8
 8002d5c:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 8002d5e:	2300      	movs	r3, #0
 8002d60:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 8002d62:	f7ff ff63 	bl	8002c2c <LL_RCC_GetSysClkSource>
 8002d66:	4603      	mov	r3, r0
 8002d68:	2b08      	cmp	r3, #8
 8002d6a:	d00c      	beq.n	8002d86 <RCC_GetSystemClockFreq+0x2e>
 8002d6c:	2b08      	cmp	r3, #8
 8002d6e:	d80f      	bhi.n	8002d90 <RCC_GetSystemClockFreq+0x38>
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d002      	beq.n	8002d7a <RCC_GetSystemClockFreq+0x22>
 8002d74:	2b04      	cmp	r3, #4
 8002d76:	d003      	beq.n	8002d80 <RCC_GetSystemClockFreq+0x28>
 8002d78:	e00a      	b.n	8002d90 <RCC_GetSystemClockFreq+0x38>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 8002d7a:	4b09      	ldr	r3, [pc, #36]	@ (8002da0 <RCC_GetSystemClockFreq+0x48>)
 8002d7c:	607b      	str	r3, [r7, #4]
      break;
 8002d7e:	e00a      	b.n	8002d96 <RCC_GetSystemClockFreq+0x3e>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 8002d80:	4b08      	ldr	r3, [pc, #32]	@ (8002da4 <RCC_GetSystemClockFreq+0x4c>)
 8002d82:	607b      	str	r3, [r7, #4]
      break;
 8002d84:	e007      	b.n	8002d96 <RCC_GetSystemClockFreq+0x3e>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLL);
 8002d86:	2008      	movs	r0, #8
 8002d88:	f000 f84c 	bl	8002e24 <RCC_PLL_GetFreqDomain_SYS>
 8002d8c:	6078      	str	r0, [r7, #4]
      break;
 8002d8e:	e002      	b.n	8002d96 <RCC_GetSystemClockFreq+0x3e>
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLLR);
      break;
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

    default:
      frequency = HSI_VALUE;
 8002d90:	4b03      	ldr	r3, [pc, #12]	@ (8002da0 <RCC_GetSystemClockFreq+0x48>)
 8002d92:	607b      	str	r3, [r7, #4]
      break;
 8002d94:	bf00      	nop
  }

  return frequency;
 8002d96:	687b      	ldr	r3, [r7, #4]
}
 8002d98:	4618      	mov	r0, r3
 8002d9a:	3708      	adds	r7, #8
 8002d9c:	46bd      	mov	sp, r7
 8002d9e:	bd80      	pop	{r7, pc}
 8002da0:	00f42400 	.word	0x00f42400
 8002da4:	007a1200 	.word	0x007a1200

08002da8 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 8002da8:	b580      	push	{r7, lr}
 8002daa:	b082      	sub	sp, #8
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8002db0:	f7ff ff4a 	bl	8002c48 <LL_RCC_GetAHBPrescaler>
 8002db4:	4603      	mov	r3, r0
 8002db6:	091b      	lsrs	r3, r3, #4
 8002db8:	f003 030f 	and.w	r3, r3, #15
 8002dbc:	4a04      	ldr	r2, [pc, #16]	@ (8002dd0 <RCC_GetHCLKClockFreq+0x28>)
 8002dbe:	5cd3      	ldrb	r3, [r2, r3]
 8002dc0:	461a      	mov	r2, r3
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	40d3      	lsrs	r3, r2
}
 8002dc6:	4618      	mov	r0, r3
 8002dc8:	3708      	adds	r7, #8
 8002dca:	46bd      	mov	sp, r7
 8002dcc:	bd80      	pop	{r7, pc}
 8002dce:	bf00      	nop
 8002dd0:	080034b8 	.word	0x080034b8

08002dd4 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 8002dd4:	b580      	push	{r7, lr}
 8002dd6:	b082      	sub	sp, #8
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8002ddc:	f7ff ff42 	bl	8002c64 <LL_RCC_GetAPB1Prescaler>
 8002de0:	4603      	mov	r3, r0
 8002de2:	0a9b      	lsrs	r3, r3, #10
 8002de4:	4a04      	ldr	r2, [pc, #16]	@ (8002df8 <RCC_GetPCLK1ClockFreq+0x24>)
 8002de6:	5cd3      	ldrb	r3, [r2, r3]
 8002de8:	461a      	mov	r2, r3
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	40d3      	lsrs	r3, r2
}
 8002dee:	4618      	mov	r0, r3
 8002df0:	3708      	adds	r7, #8
 8002df2:	46bd      	mov	sp, r7
 8002df4:	bd80      	pop	{r7, pc}
 8002df6:	bf00      	nop
 8002df8:	080034c8 	.word	0x080034c8

08002dfc <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 8002dfc:	b580      	push	{r7, lr}
 8002dfe:	b082      	sub	sp, #8
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 8002e04:	f7ff ff3c 	bl	8002c80 <LL_RCC_GetAPB2Prescaler>
 8002e08:	4603      	mov	r3, r0
 8002e0a:	0b5b      	lsrs	r3, r3, #13
 8002e0c:	4a04      	ldr	r2, [pc, #16]	@ (8002e20 <RCC_GetPCLK2ClockFreq+0x24>)
 8002e0e:	5cd3      	ldrb	r3, [r2, r3]
 8002e10:	461a      	mov	r2, r3
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	40d3      	lsrs	r3, r2
}
 8002e16:	4618      	mov	r0, r3
 8002e18:	3708      	adds	r7, #8
 8002e1a:	46bd      	mov	sp, r7
 8002e1c:	bd80      	pop	{r7, pc}
 8002e1e:	bf00      	nop
 8002e20:	080034c8 	.word	0x080034c8

08002e24 <RCC_PLL_GetFreqDomain_SYS>:
  * @brief  Return PLL clock frequency used for system domain
  * @param  SYSCLK_Source System clock source
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(uint32_t SYSCLK_Source)
{
 8002e24:	b590      	push	{r4, r7, lr}
 8002e26:	b087      	sub	sp, #28
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	6078      	str	r0, [r7, #4]
  uint32_t pllinputfreq = 0U;
 8002e2c:	2300      	movs	r3, #0
 8002e2e:	617b      	str	r3, [r7, #20]
  uint32_t pllsource = 0U;
 8002e30:	2300      	movs	r3, #0
 8002e32:	60fb      	str	r3, [r7, #12]
  uint32_t plloutputfreq = 0U;
 8002e34:	2300      	movs	r3, #0
 8002e36:	613b      	str	r3, [r7, #16]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
     SYSCLK = PLL_VCO / (PLLP or PLLR)
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 8002e38:	f7ff ff30 	bl	8002c9c <LL_RCC_PLL_GetMainSource>
 8002e3c:	60f8      	str	r0, [r7, #12]

  switch (pllsource)
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d004      	beq.n	8002e4e <RCC_PLL_GetFreqDomain_SYS+0x2a>
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002e4a:	d003      	beq.n	8002e54 <RCC_PLL_GetFreqDomain_SYS+0x30>
 8002e4c:	e005      	b.n	8002e5a <RCC_PLL_GetFreqDomain_SYS+0x36>
  {
    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 8002e4e:	4b12      	ldr	r3, [pc, #72]	@ (8002e98 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 8002e50:	617b      	str	r3, [r7, #20]
      break;
 8002e52:	e005      	b.n	8002e60 <RCC_PLL_GetFreqDomain_SYS+0x3c>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 8002e54:	4b11      	ldr	r3, [pc, #68]	@ (8002e9c <RCC_PLL_GetFreqDomain_SYS+0x78>)
 8002e56:	617b      	str	r3, [r7, #20]
      break;
 8002e58:	e002      	b.n	8002e60 <RCC_PLL_GetFreqDomain_SYS+0x3c>

    default:
      pllinputfreq = HSI_VALUE;
 8002e5a:	4b0f      	ldr	r3, [pc, #60]	@ (8002e98 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 8002e5c:	617b      	str	r3, [r7, #20]
      break;
 8002e5e:	bf00      	nop
  }

  if (SYSCLK_Source == LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	2b08      	cmp	r3, #8
 8002e64:	d113      	bne.n	8002e8e <RCC_PLL_GetFreqDomain_SYS+0x6a>
  {
    plloutputfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8002e66:	f7ff ff43 	bl	8002cf0 <LL_RCC_PLL_GetDivider>
 8002e6a:	4602      	mov	r2, r0
 8002e6c:	697b      	ldr	r3, [r7, #20]
 8002e6e:	fbb3 f4f2 	udiv	r4, r3, r2
 8002e72:	f7ff ff21 	bl	8002cb8 <LL_RCC_PLL_GetN>
 8002e76:	4603      	mov	r3, r0
 8002e78:	fb03 f404 	mul.w	r4, r3, r4
 8002e7c:	f7ff ff2a 	bl	8002cd4 <LL_RCC_PLL_GetP>
 8002e80:	4603      	mov	r3, r0
 8002e82:	0c1b      	lsrs	r3, r3, #16
 8002e84:	3301      	adds	r3, #1
 8002e86:	005b      	lsls	r3, r3, #1
 8002e88:	fbb4 f3f3 	udiv	r3, r4, r3
 8002e8c:	613b      	str	r3, [r7, #16]
    plloutputfreq = __LL_RCC_CALC_PLLRCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
                                               LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

  return plloutputfreq;
 8002e8e:	693b      	ldr	r3, [r7, #16]
}
 8002e90:	4618      	mov	r0, r3
 8002e92:	371c      	adds	r7, #28
 8002e94:	46bd      	mov	sp, r7
 8002e96:	bd90      	pop	{r4, r7, pc}
 8002e98:	00f42400 	.word	0x00f42400
 8002e9c:	007a1200 	.word	0x007a1200

08002ea0 <LL_USART_IsEnabled>:
{
 8002ea0:	b480      	push	{r7}
 8002ea2:	b083      	sub	sp, #12
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE));
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	68db      	ldr	r3, [r3, #12]
 8002eac:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002eb0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002eb4:	bf0c      	ite	eq
 8002eb6:	2301      	moveq	r3, #1
 8002eb8:	2300      	movne	r3, #0
 8002eba:	b2db      	uxtb	r3, r3
}
 8002ebc:	4618      	mov	r0, r3
 8002ebe:	370c      	adds	r7, #12
 8002ec0:	46bd      	mov	sp, r7
 8002ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec6:	4770      	bx	lr

08002ec8 <LL_USART_SetStopBitsLength>:
{
 8002ec8:	b480      	push	{r7}
 8002eca:	b083      	sub	sp, #12
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	6078      	str	r0, [r7, #4]
 8002ed0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	691b      	ldr	r3, [r3, #16]
 8002ed6:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002eda:	683b      	ldr	r3, [r7, #0]
 8002edc:	431a      	orrs	r2, r3
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	611a      	str	r2, [r3, #16]
}
 8002ee2:	bf00      	nop
 8002ee4:	370c      	adds	r7, #12
 8002ee6:	46bd      	mov	sp, r7
 8002ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eec:	4770      	bx	lr

08002eee <LL_USART_SetHWFlowCtrl>:
{
 8002eee:	b480      	push	{r7}
 8002ef0:	b083      	sub	sp, #12
 8002ef2:	af00      	add	r7, sp, #0
 8002ef4:	6078      	str	r0, [r7, #4]
 8002ef6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	695b      	ldr	r3, [r3, #20]
 8002efc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002f00:	683b      	ldr	r3, [r7, #0]
 8002f02:	431a      	orrs	r2, r3
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	615a      	str	r2, [r3, #20]
}
 8002f08:	bf00      	nop
 8002f0a:	370c      	adds	r7, #12
 8002f0c:	46bd      	mov	sp, r7
 8002f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f12:	4770      	bx	lr

08002f14 <LL_USART_SetBaudRate>:
{
 8002f14:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002f18:	b0c0      	sub	sp, #256	@ 0x100
 8002f1a:	af00      	add	r7, sp, #0
 8002f1c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8002f20:	f8c7 10f8 	str.w	r1, [r7, #248]	@ 0xf8
 8002f24:	f8c7 20f4 	str.w	r2, [r7, #244]	@ 0xf4
 8002f28:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 8002f2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002f30:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002f34:	f040 810c 	bne.w	8003150 <LL_USART_SetBaudRate+0x23c>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 8002f38:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8002f3c:	2200      	movs	r2, #0
 8002f3e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8002f42:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8002f46:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8002f4a:	4622      	mov	r2, r4
 8002f4c:	462b      	mov	r3, r5
 8002f4e:	1891      	adds	r1, r2, r2
 8002f50:	6639      	str	r1, [r7, #96]	@ 0x60
 8002f52:	415b      	adcs	r3, r3
 8002f54:	667b      	str	r3, [r7, #100]	@ 0x64
 8002f56:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 8002f5a:	4621      	mov	r1, r4
 8002f5c:	eb12 0801 	adds.w	r8, r2, r1
 8002f60:	4629      	mov	r1, r5
 8002f62:	eb43 0901 	adc.w	r9, r3, r1
 8002f66:	f04f 0200 	mov.w	r2, #0
 8002f6a:	f04f 0300 	mov.w	r3, #0
 8002f6e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002f72:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002f76:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002f7a:	4690      	mov	r8, r2
 8002f7c:	4699      	mov	r9, r3
 8002f7e:	4623      	mov	r3, r4
 8002f80:	eb18 0303 	adds.w	r3, r8, r3
 8002f84:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8002f88:	462b      	mov	r3, r5
 8002f8a:	eb49 0303 	adc.w	r3, r9, r3
 8002f8e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8002f92:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8002f96:	2200      	movs	r2, #0
 8002f98:	469a      	mov	sl, r3
 8002f9a:	4693      	mov	fp, r2
 8002f9c:	eb1a 030a 	adds.w	r3, sl, sl
 8002fa0:	65bb      	str	r3, [r7, #88]	@ 0x58
 8002fa2:	eb4b 030b 	adc.w	r3, fp, fp
 8002fa6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002fa8:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002fac:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8002fb0:	f7fd f910 	bl	80001d4 <__aeabi_uldivmod>
 8002fb4:	4602      	mov	r2, r0
 8002fb6:	460b      	mov	r3, r1
 8002fb8:	4b64      	ldr	r3, [pc, #400]	@ (800314c <LL_USART_SetBaudRate+0x238>)
 8002fba:	fba3 2302 	umull	r2, r3, r3, r2
 8002fbe:	095b      	lsrs	r3, r3, #5
 8002fc0:	b29b      	uxth	r3, r3
 8002fc2:	011b      	lsls	r3, r3, #4
 8002fc4:	b29c      	uxth	r4, r3
 8002fc6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8002fca:	2200      	movs	r2, #0
 8002fcc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8002fd0:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8002fd4:	e9d7 8936 	ldrd	r8, r9, [r7, #216]	@ 0xd8
 8002fd8:	4642      	mov	r2, r8
 8002fda:	464b      	mov	r3, r9
 8002fdc:	1891      	adds	r1, r2, r2
 8002fde:	6539      	str	r1, [r7, #80]	@ 0x50
 8002fe0:	415b      	adcs	r3, r3
 8002fe2:	657b      	str	r3, [r7, #84]	@ 0x54
 8002fe4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8002fe8:	4641      	mov	r1, r8
 8002fea:	1851      	adds	r1, r2, r1
 8002fec:	64b9      	str	r1, [r7, #72]	@ 0x48
 8002fee:	4649      	mov	r1, r9
 8002ff0:	414b      	adcs	r3, r1
 8002ff2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002ff4:	f04f 0200 	mov.w	r2, #0
 8002ff8:	f04f 0300 	mov.w	r3, #0
 8002ffc:	e9d7 ab12 	ldrd	sl, fp, [r7, #72]	@ 0x48
 8003000:	4659      	mov	r1, fp
 8003002:	00cb      	lsls	r3, r1, #3
 8003004:	4651      	mov	r1, sl
 8003006:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800300a:	4651      	mov	r1, sl
 800300c:	00ca      	lsls	r2, r1, #3
 800300e:	4610      	mov	r0, r2
 8003010:	4619      	mov	r1, r3
 8003012:	4603      	mov	r3, r0
 8003014:	4642      	mov	r2, r8
 8003016:	189b      	adds	r3, r3, r2
 8003018:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800301c:	464b      	mov	r3, r9
 800301e:	460a      	mov	r2, r1
 8003020:	eb42 0303 	adc.w	r3, r2, r3
 8003024:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8003028:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800302c:	2200      	movs	r2, #0
 800302e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003032:	f8c7 20cc 	str.w	r2, [r7, #204]	@ 0xcc
 8003036:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 800303a:	460b      	mov	r3, r1
 800303c:	18db      	adds	r3, r3, r3
 800303e:	643b      	str	r3, [r7, #64]	@ 0x40
 8003040:	4613      	mov	r3, r2
 8003042:	eb42 0303 	adc.w	r3, r2, r3
 8003046:	647b      	str	r3, [r7, #68]	@ 0x44
 8003048:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800304c:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	@ 0xd0
 8003050:	f7fd f8c0 	bl	80001d4 <__aeabi_uldivmod>
 8003054:	4602      	mov	r2, r0
 8003056:	460b      	mov	r3, r1
 8003058:	4611      	mov	r1, r2
 800305a:	4b3c      	ldr	r3, [pc, #240]	@ (800314c <LL_USART_SetBaudRate+0x238>)
 800305c:	fba3 2301 	umull	r2, r3, r3, r1
 8003060:	095b      	lsrs	r3, r3, #5
 8003062:	2264      	movs	r2, #100	@ 0x64
 8003064:	fb02 f303 	mul.w	r3, r2, r3
 8003068:	1acb      	subs	r3, r1, r3
 800306a:	00db      	lsls	r3, r3, #3
 800306c:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8003070:	4b36      	ldr	r3, [pc, #216]	@ (800314c <LL_USART_SetBaudRate+0x238>)
 8003072:	fba3 2302 	umull	r2, r3, r3, r2
 8003076:	095b      	lsrs	r3, r3, #5
 8003078:	b29b      	uxth	r3, r3
 800307a:	005b      	lsls	r3, r3, #1
 800307c:	b29b      	uxth	r3, r3
 800307e:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8003082:	b29b      	uxth	r3, r3
 8003084:	4423      	add	r3, r4
 8003086:	b29c      	uxth	r4, r3
 8003088:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800308c:	2200      	movs	r2, #0
 800308e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003092:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8003096:	e9d7 8930 	ldrd	r8, r9, [r7, #192]	@ 0xc0
 800309a:	4642      	mov	r2, r8
 800309c:	464b      	mov	r3, r9
 800309e:	1891      	adds	r1, r2, r2
 80030a0:	63b9      	str	r1, [r7, #56]	@ 0x38
 80030a2:	415b      	adcs	r3, r3
 80030a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80030a6:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80030aa:	4641      	mov	r1, r8
 80030ac:	1851      	adds	r1, r2, r1
 80030ae:	6339      	str	r1, [r7, #48]	@ 0x30
 80030b0:	4649      	mov	r1, r9
 80030b2:	414b      	adcs	r3, r1
 80030b4:	637b      	str	r3, [r7, #52]	@ 0x34
 80030b6:	f04f 0200 	mov.w	r2, #0
 80030ba:	f04f 0300 	mov.w	r3, #0
 80030be:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80030c2:	4659      	mov	r1, fp
 80030c4:	00cb      	lsls	r3, r1, #3
 80030c6:	4651      	mov	r1, sl
 80030c8:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80030cc:	4651      	mov	r1, sl
 80030ce:	00ca      	lsls	r2, r1, #3
 80030d0:	4610      	mov	r0, r2
 80030d2:	4619      	mov	r1, r3
 80030d4:	4603      	mov	r3, r0
 80030d6:	4642      	mov	r2, r8
 80030d8:	189b      	adds	r3, r3, r2
 80030da:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80030de:	464b      	mov	r3, r9
 80030e0:	460a      	mov	r2, r1
 80030e2:	eb42 0303 	adc.w	r3, r2, r3
 80030e6:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80030ea:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80030ee:	2200      	movs	r2, #0
 80030f0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80030f4:	f8c7 20b4 	str.w	r2, [r7, #180]	@ 0xb4
 80030f8:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 80030fc:	460b      	mov	r3, r1
 80030fe:	18db      	adds	r3, r3, r3
 8003100:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003102:	4613      	mov	r3, r2
 8003104:	eb42 0303 	adc.w	r3, r2, r3
 8003108:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800310a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800310e:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	@ 0xb8
 8003112:	f7fd f85f 	bl	80001d4 <__aeabi_uldivmod>
 8003116:	4602      	mov	r2, r0
 8003118:	460b      	mov	r3, r1
 800311a:	4b0c      	ldr	r3, [pc, #48]	@ (800314c <LL_USART_SetBaudRate+0x238>)
 800311c:	fba3 1302 	umull	r1, r3, r3, r2
 8003120:	095b      	lsrs	r3, r3, #5
 8003122:	2164      	movs	r1, #100	@ 0x64
 8003124:	fb01 f303 	mul.w	r3, r1, r3
 8003128:	1ad3      	subs	r3, r2, r3
 800312a:	00db      	lsls	r3, r3, #3
 800312c:	3332      	adds	r3, #50	@ 0x32
 800312e:	4a07      	ldr	r2, [pc, #28]	@ (800314c <LL_USART_SetBaudRate+0x238>)
 8003130:	fba2 2303 	umull	r2, r3, r2, r3
 8003134:	095b      	lsrs	r3, r3, #5
 8003136:	b29b      	uxth	r3, r3
 8003138:	f003 0307 	and.w	r3, r3, #7
 800313c:	b29b      	uxth	r3, r3
 800313e:	4423      	add	r3, r4
 8003140:	b29b      	uxth	r3, r3
 8003142:	461a      	mov	r2, r3
 8003144:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003148:	609a      	str	r2, [r3, #8]
}
 800314a:	e108      	b.n	800335e <LL_USART_SetBaudRate+0x44a>
 800314c:	51eb851f 	.word	0x51eb851f
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8003150:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8003154:	2200      	movs	r2, #0
 8003156:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800315a:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800315e:	e9d7 892a 	ldrd	r8, r9, [r7, #168]	@ 0xa8
 8003162:	4642      	mov	r2, r8
 8003164:	464b      	mov	r3, r9
 8003166:	1891      	adds	r1, r2, r2
 8003168:	6239      	str	r1, [r7, #32]
 800316a:	415b      	adcs	r3, r3
 800316c:	627b      	str	r3, [r7, #36]	@ 0x24
 800316e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003172:	4641      	mov	r1, r8
 8003174:	1854      	adds	r4, r2, r1
 8003176:	4649      	mov	r1, r9
 8003178:	eb43 0501 	adc.w	r5, r3, r1
 800317c:	f04f 0200 	mov.w	r2, #0
 8003180:	f04f 0300 	mov.w	r3, #0
 8003184:	00eb      	lsls	r3, r5, #3
 8003186:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800318a:	00e2      	lsls	r2, r4, #3
 800318c:	4614      	mov	r4, r2
 800318e:	461d      	mov	r5, r3
 8003190:	4643      	mov	r3, r8
 8003192:	18e3      	adds	r3, r4, r3
 8003194:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003198:	464b      	mov	r3, r9
 800319a:	eb45 0303 	adc.w	r3, r5, r3
 800319e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80031a2:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80031a6:	2200      	movs	r2, #0
 80031a8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80031ac:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 80031b0:	f04f 0200 	mov.w	r2, #0
 80031b4:	f04f 0300 	mov.w	r3, #0
 80031b8:	e9d7 4526 	ldrd	r4, r5, [r7, #152]	@ 0x98
 80031bc:	4629      	mov	r1, r5
 80031be:	008b      	lsls	r3, r1, #2
 80031c0:	4621      	mov	r1, r4
 80031c2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80031c6:	4621      	mov	r1, r4
 80031c8:	008a      	lsls	r2, r1, #2
 80031ca:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	@ 0xa0
 80031ce:	f7fd f801 	bl	80001d4 <__aeabi_uldivmod>
 80031d2:	4602      	mov	r2, r0
 80031d4:	460b      	mov	r3, r1
 80031d6:	4b65      	ldr	r3, [pc, #404]	@ (800336c <LL_USART_SetBaudRate+0x458>)
 80031d8:	fba3 2302 	umull	r2, r3, r3, r2
 80031dc:	095b      	lsrs	r3, r3, #5
 80031de:	b29b      	uxth	r3, r3
 80031e0:	011b      	lsls	r3, r3, #4
 80031e2:	b29c      	uxth	r4, r3
 80031e4:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80031e8:	2200      	movs	r2, #0
 80031ea:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80031ee:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80031f2:	e9d7 8924 	ldrd	r8, r9, [r7, #144]	@ 0x90
 80031f6:	4642      	mov	r2, r8
 80031f8:	464b      	mov	r3, r9
 80031fa:	1891      	adds	r1, r2, r2
 80031fc:	61b9      	str	r1, [r7, #24]
 80031fe:	415b      	adcs	r3, r3
 8003200:	61fb      	str	r3, [r7, #28]
 8003202:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003206:	4641      	mov	r1, r8
 8003208:	1851      	adds	r1, r2, r1
 800320a:	6139      	str	r1, [r7, #16]
 800320c:	4649      	mov	r1, r9
 800320e:	414b      	adcs	r3, r1
 8003210:	617b      	str	r3, [r7, #20]
 8003212:	f04f 0200 	mov.w	r2, #0
 8003216:	f04f 0300 	mov.w	r3, #0
 800321a:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800321e:	4659      	mov	r1, fp
 8003220:	00cb      	lsls	r3, r1, #3
 8003222:	4651      	mov	r1, sl
 8003224:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003228:	4651      	mov	r1, sl
 800322a:	00ca      	lsls	r2, r1, #3
 800322c:	4610      	mov	r0, r2
 800322e:	4619      	mov	r1, r3
 8003230:	4603      	mov	r3, r0
 8003232:	4642      	mov	r2, r8
 8003234:	189b      	adds	r3, r3, r2
 8003236:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800323a:	464b      	mov	r3, r9
 800323c:	460a      	mov	r2, r1
 800323e:	eb42 0303 	adc.w	r3, r2, r3
 8003242:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8003246:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800324a:	2200      	movs	r2, #0
 800324c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003250:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8003254:	f04f 0200 	mov.w	r2, #0
 8003258:	f04f 0300 	mov.w	r3, #0
 800325c:	e9d7 8920 	ldrd	r8, r9, [r7, #128]	@ 0x80
 8003260:	4649      	mov	r1, r9
 8003262:	008b      	lsls	r3, r1, #2
 8003264:	4641      	mov	r1, r8
 8003266:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800326a:	4641      	mov	r1, r8
 800326c:	008a      	lsls	r2, r1, #2
 800326e:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	@ 0x88
 8003272:	f7fc ffaf 	bl	80001d4 <__aeabi_uldivmod>
 8003276:	4602      	mov	r2, r0
 8003278:	460b      	mov	r3, r1
 800327a:	4611      	mov	r1, r2
 800327c:	4b3b      	ldr	r3, [pc, #236]	@ (800336c <LL_USART_SetBaudRate+0x458>)
 800327e:	fba3 2301 	umull	r2, r3, r3, r1
 8003282:	095b      	lsrs	r3, r3, #5
 8003284:	2264      	movs	r2, #100	@ 0x64
 8003286:	fb02 f303 	mul.w	r3, r2, r3
 800328a:	1acb      	subs	r3, r1, r3
 800328c:	011b      	lsls	r3, r3, #4
 800328e:	3332      	adds	r3, #50	@ 0x32
 8003290:	4a36      	ldr	r2, [pc, #216]	@ (800336c <LL_USART_SetBaudRate+0x458>)
 8003292:	fba2 2303 	umull	r2, r3, r2, r3
 8003296:	095b      	lsrs	r3, r3, #5
 8003298:	b29b      	uxth	r3, r3
 800329a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800329e:	b29b      	uxth	r3, r3
 80032a0:	4423      	add	r3, r4
 80032a2:	b29c      	uxth	r4, r3
 80032a4:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80032a8:	2200      	movs	r2, #0
 80032aa:	67bb      	str	r3, [r7, #120]	@ 0x78
 80032ac:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80032ae:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80032b2:	4642      	mov	r2, r8
 80032b4:	464b      	mov	r3, r9
 80032b6:	1891      	adds	r1, r2, r2
 80032b8:	60b9      	str	r1, [r7, #8]
 80032ba:	415b      	adcs	r3, r3
 80032bc:	60fb      	str	r3, [r7, #12]
 80032be:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80032c2:	4641      	mov	r1, r8
 80032c4:	1851      	adds	r1, r2, r1
 80032c6:	6039      	str	r1, [r7, #0]
 80032c8:	4649      	mov	r1, r9
 80032ca:	414b      	adcs	r3, r1
 80032cc:	607b      	str	r3, [r7, #4]
 80032ce:	f04f 0200 	mov.w	r2, #0
 80032d2:	f04f 0300 	mov.w	r3, #0
 80032d6:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80032da:	4659      	mov	r1, fp
 80032dc:	00cb      	lsls	r3, r1, #3
 80032de:	4651      	mov	r1, sl
 80032e0:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80032e4:	4651      	mov	r1, sl
 80032e6:	00ca      	lsls	r2, r1, #3
 80032e8:	4610      	mov	r0, r2
 80032ea:	4619      	mov	r1, r3
 80032ec:	4603      	mov	r3, r0
 80032ee:	4642      	mov	r2, r8
 80032f0:	189b      	adds	r3, r3, r2
 80032f2:	673b      	str	r3, [r7, #112]	@ 0x70
 80032f4:	464b      	mov	r3, r9
 80032f6:	460a      	mov	r2, r1
 80032f8:	eb42 0303 	adc.w	r3, r2, r3
 80032fc:	677b      	str	r3, [r7, #116]	@ 0x74
 80032fe:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8003302:	2200      	movs	r2, #0
 8003304:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003306:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003308:	f04f 0200 	mov.w	r2, #0
 800330c:	f04f 0300 	mov.w	r3, #0
 8003310:	e9d7 891a 	ldrd	r8, r9, [r7, #104]	@ 0x68
 8003314:	4649      	mov	r1, r9
 8003316:	008b      	lsls	r3, r1, #2
 8003318:	4641      	mov	r1, r8
 800331a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800331e:	4641      	mov	r1, r8
 8003320:	008a      	lsls	r2, r1, #2
 8003322:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 8003326:	f7fc ff55 	bl	80001d4 <__aeabi_uldivmod>
 800332a:	4602      	mov	r2, r0
 800332c:	460b      	mov	r3, r1
 800332e:	4b0f      	ldr	r3, [pc, #60]	@ (800336c <LL_USART_SetBaudRate+0x458>)
 8003330:	fba3 1302 	umull	r1, r3, r3, r2
 8003334:	095b      	lsrs	r3, r3, #5
 8003336:	2164      	movs	r1, #100	@ 0x64
 8003338:	fb01 f303 	mul.w	r3, r1, r3
 800333c:	1ad3      	subs	r3, r2, r3
 800333e:	011b      	lsls	r3, r3, #4
 8003340:	3332      	adds	r3, #50	@ 0x32
 8003342:	4a0a      	ldr	r2, [pc, #40]	@ (800336c <LL_USART_SetBaudRate+0x458>)
 8003344:	fba2 2303 	umull	r2, r3, r2, r3
 8003348:	095b      	lsrs	r3, r3, #5
 800334a:	b29b      	uxth	r3, r3
 800334c:	f003 030f 	and.w	r3, r3, #15
 8003350:	b29b      	uxth	r3, r3
 8003352:	4423      	add	r3, r4
 8003354:	b29b      	uxth	r3, r3
 8003356:	461a      	mov	r2, r3
 8003358:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800335c:	609a      	str	r2, [r3, #8]
}
 800335e:	bf00      	nop
 8003360:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8003364:	46bd      	mov	sp, r7
 8003366:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800336a:	bf00      	nop
 800336c:	51eb851f 	.word	0x51eb851f

08003370 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, const LL_USART_InitTypeDef *USART_InitStruct)
{
 8003370:	b580      	push	{r7, lr}
 8003372:	b088      	sub	sp, #32
 8003374:	af00      	add	r7, sp, #0
 8003376:	6078      	str	r0, [r7, #4]
 8003378:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 800337a:	2301      	movs	r3, #1
 800337c:	77fb      	strb	r3, [r7, #31]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 800337e:	2300      	movs	r3, #0
 8003380:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 8003382:	6878      	ldr	r0, [r7, #4]
 8003384:	f7ff fd8c 	bl	8002ea0 <LL_USART_IsEnabled>
 8003388:	4603      	mov	r3, r0
 800338a:	2b00      	cmp	r3, #0
 800338c:	d149      	bne.n	8003422 <LL_USART_Init+0xb2>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	68db      	ldr	r3, [r3, #12]
 8003392:	f423 4316 	bic.w	r3, r3, #38400	@ 0x9600
 8003396:	f023 030c 	bic.w	r3, r3, #12
 800339a:	683a      	ldr	r2, [r7, #0]
 800339c:	6851      	ldr	r1, [r2, #4]
 800339e:	683a      	ldr	r2, [r7, #0]
 80033a0:	68d2      	ldr	r2, [r2, #12]
 80033a2:	4311      	orrs	r1, r2
 80033a4:	683a      	ldr	r2, [r7, #0]
 80033a6:	6912      	ldr	r2, [r2, #16]
 80033a8:	4311      	orrs	r1, r2
 80033aa:	683a      	ldr	r2, [r7, #0]
 80033ac:	6992      	ldr	r2, [r2, #24]
 80033ae:	430a      	orrs	r2, r1
 80033b0:	431a      	orrs	r2, r3
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	60da      	str	r2, [r3, #12]
    /*---------------------------- USART CR2 Configuration -----------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 80033b6:	683b      	ldr	r3, [r7, #0]
 80033b8:	689b      	ldr	r3, [r3, #8]
 80033ba:	4619      	mov	r1, r3
 80033bc:	6878      	ldr	r0, [r7, #4]
 80033be:	f7ff fd83 	bl	8002ec8 <LL_USART_SetStopBitsLength>

    /*---------------------------- USART CR3 Configuration -----------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 80033c2:	683b      	ldr	r3, [r7, #0]
 80033c4:	695b      	ldr	r3, [r3, #20]
 80033c6:	4619      	mov	r1, r3
 80033c8:	6878      	ldr	r0, [r7, #4]
 80033ca:	f7ff fd90 	bl	8002eee <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration -----------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 80033ce:	f107 0308 	add.w	r3, r7, #8
 80033d2:	4618      	mov	r0, r3
 80033d4:	f7ff fc9a 	bl	8002d0c <LL_RCC_GetSystemClocksFreq>
    if (USARTx == USART1)
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	4a14      	ldr	r2, [pc, #80]	@ (800342c <LL_USART_Init+0xbc>)
 80033dc:	4293      	cmp	r3, r2
 80033de:	d102      	bne.n	80033e6 <LL_USART_Init+0x76>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 80033e0:	697b      	ldr	r3, [r7, #20]
 80033e2:	61bb      	str	r3, [r7, #24]
 80033e4:	e00c      	b.n	8003400 <LL_USART_Init+0x90>
    }
    else if (USARTx == USART2)
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	4a11      	ldr	r2, [pc, #68]	@ (8003430 <LL_USART_Init+0xc0>)
 80033ea:	4293      	cmp	r3, r2
 80033ec:	d102      	bne.n	80033f4 <LL_USART_Init+0x84>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 80033ee:	693b      	ldr	r3, [r7, #16]
 80033f0:	61bb      	str	r3, [r7, #24]
 80033f2:	e005      	b.n	8003400 <LL_USART_Init+0x90>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
    }
#endif /* USART3 */
#if defined(USART6)
    else if (USARTx == USART6)
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	4a0f      	ldr	r2, [pc, #60]	@ (8003434 <LL_USART_Init+0xc4>)
 80033f8:	4293      	cmp	r3, r2
 80033fa:	d101      	bne.n	8003400 <LL_USART_Init+0x90>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 80033fc:	697b      	ldr	r3, [r7, #20]
 80033fe:	61bb      	str	r3, [r7, #24]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 8003400:	69bb      	ldr	r3, [r7, #24]
 8003402:	2b00      	cmp	r3, #0
 8003404:	d00d      	beq.n	8003422 <LL_USART_Init+0xb2>
        && (USART_InitStruct->BaudRate != 0U))
 8003406:	683b      	ldr	r3, [r7, #0]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	2b00      	cmp	r3, #0
 800340c:	d009      	beq.n	8003422 <LL_USART_Init+0xb2>
    {
      status = SUCCESS;
 800340e:	2300      	movs	r3, #0
 8003410:	77fb      	strb	r3, [r7, #31]
      LL_USART_SetBaudRate(USARTx,
                           periphclk,
                           USART_InitStruct->OverSampling,
 8003412:	683b      	ldr	r3, [r7, #0]
 8003414:	699a      	ldr	r2, [r3, #24]
                           USART_InitStruct->BaudRate);
 8003416:	683b      	ldr	r3, [r7, #0]
 8003418:	681b      	ldr	r3, [r3, #0]
      LL_USART_SetBaudRate(USARTx,
 800341a:	69b9      	ldr	r1, [r7, #24]
 800341c:	6878      	ldr	r0, [r7, #4]
 800341e:	f7ff fd79 	bl	8002f14 <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MIN(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 8003422:	7ffb      	ldrb	r3, [r7, #31]
}
 8003424:	4618      	mov	r0, r3
 8003426:	3720      	adds	r7, #32
 8003428:	46bd      	mov	sp, r7
 800342a:	bd80      	pop	{r7, pc}
 800342c:	40011000 	.word	0x40011000
 8003430:	40004400 	.word	0x40004400
 8003434:	40011400 	.word	0x40011400

08003438 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 8003438:	b480      	push	{r7}
 800343a:	b083      	sub	sp, #12
 800343c:	af00      	add	r7, sp, #0
 800343e:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8003440:	4a04      	ldr	r2, [pc, #16]	@ (8003454 <LL_SetSystemCoreClock+0x1c>)
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	6013      	str	r3, [r2, #0]
}
 8003446:	bf00      	nop
 8003448:	370c      	adds	r7, #12
 800344a:	46bd      	mov	sp, r7
 800344c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003450:	4770      	bx	lr
 8003452:	bf00      	nop
 8003454:	20000000 	.word	0x20000000

08003458 <__libc_init_array>:
 8003458:	b570      	push	{r4, r5, r6, lr}
 800345a:	4d0d      	ldr	r5, [pc, #52]	@ (8003490 <__libc_init_array+0x38>)
 800345c:	4c0d      	ldr	r4, [pc, #52]	@ (8003494 <__libc_init_array+0x3c>)
 800345e:	1b64      	subs	r4, r4, r5
 8003460:	10a4      	asrs	r4, r4, #2
 8003462:	2600      	movs	r6, #0
 8003464:	42a6      	cmp	r6, r4
 8003466:	d109      	bne.n	800347c <__libc_init_array+0x24>
 8003468:	4d0b      	ldr	r5, [pc, #44]	@ (8003498 <__libc_init_array+0x40>)
 800346a:	4c0c      	ldr	r4, [pc, #48]	@ (800349c <__libc_init_array+0x44>)
 800346c:	f000 f818 	bl	80034a0 <_init>
 8003470:	1b64      	subs	r4, r4, r5
 8003472:	10a4      	asrs	r4, r4, #2
 8003474:	2600      	movs	r6, #0
 8003476:	42a6      	cmp	r6, r4
 8003478:	d105      	bne.n	8003486 <__libc_init_array+0x2e>
 800347a:	bd70      	pop	{r4, r5, r6, pc}
 800347c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003480:	4798      	blx	r3
 8003482:	3601      	adds	r6, #1
 8003484:	e7ee      	b.n	8003464 <__libc_init_array+0xc>
 8003486:	f855 3b04 	ldr.w	r3, [r5], #4
 800348a:	4798      	blx	r3
 800348c:	3601      	adds	r6, #1
 800348e:	e7f2      	b.n	8003476 <__libc_init_array+0x1e>
 8003490:	080034d8 	.word	0x080034d8
 8003494:	080034d8 	.word	0x080034d8
 8003498:	080034d8 	.word	0x080034d8
 800349c:	080034dc 	.word	0x080034dc

080034a0 <_init>:
 80034a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80034a2:	bf00      	nop
 80034a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80034a6:	bc08      	pop	{r3}
 80034a8:	469e      	mov	lr, r3
 80034aa:	4770      	bx	lr

080034ac <_fini>:
 80034ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80034ae:	bf00      	nop
 80034b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80034b2:	bc08      	pop	{r3}
 80034b4:	469e      	mov	lr, r3
 80034b6:	4770      	bx	lr
