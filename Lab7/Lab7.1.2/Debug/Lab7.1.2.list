
Lab7.1.2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001a5c  08000194  08000194  00001194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08001bf0  08001bf0  00002bf0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001c08  08001c08  00003004  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08001c08  08001c08  00002c08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08001c10  08001c10  00003004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001c10  08001c10  00002c10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08001c14  08001c14  00002c14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000004  20000000  08001c18  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000004  08001c1c  00003004  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000020  08001c1c  00003020  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00003004  2**0
                  CONTENTS, READONLY
 12 .debug_info   000039cd  00000000  00000000  00003034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000e29  00000000  00000000  00006a01  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000530  00000000  00000000  00007830  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000003c4  00000000  00000000  00007d60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00010323  00000000  00000000  00008124  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00004264  00000000  00000000  00018447  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0005c448  00000000  00000000  0001c6ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00078af3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000145c  00000000  00000000  00078b38  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  00079f94  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	@ (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000004 	.word	0x20000004
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08001bd8 	.word	0x08001bd8

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	@ (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	@ (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	@ (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000008 	.word	0x20000008
 80001d0:	08001bd8 	.word	0x08001bd8

080001d4 <__aeabi_uldivmod>:
 80001d4:	b953      	cbnz	r3, 80001ec <__aeabi_uldivmod+0x18>
 80001d6:	b94a      	cbnz	r2, 80001ec <__aeabi_uldivmod+0x18>
 80001d8:	2900      	cmp	r1, #0
 80001da:	bf08      	it	eq
 80001dc:	2800      	cmpeq	r0, #0
 80001de:	bf1c      	itt	ne
 80001e0:	f04f 31ff 	movne.w	r1, #4294967295
 80001e4:	f04f 30ff 	movne.w	r0, #4294967295
 80001e8:	f000 b988 	b.w	80004fc <__aeabi_idiv0>
 80001ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f4:	f000 f806 	bl	8000204 <__udivmoddi4>
 80001f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000200:	b004      	add	sp, #16
 8000202:	4770      	bx	lr

08000204 <__udivmoddi4>:
 8000204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000208:	9d08      	ldr	r5, [sp, #32]
 800020a:	468e      	mov	lr, r1
 800020c:	4604      	mov	r4, r0
 800020e:	4688      	mov	r8, r1
 8000210:	2b00      	cmp	r3, #0
 8000212:	d14a      	bne.n	80002aa <__udivmoddi4+0xa6>
 8000214:	428a      	cmp	r2, r1
 8000216:	4617      	mov	r7, r2
 8000218:	d962      	bls.n	80002e0 <__udivmoddi4+0xdc>
 800021a:	fab2 f682 	clz	r6, r2
 800021e:	b14e      	cbz	r6, 8000234 <__udivmoddi4+0x30>
 8000220:	f1c6 0320 	rsb	r3, r6, #32
 8000224:	fa01 f806 	lsl.w	r8, r1, r6
 8000228:	fa20 f303 	lsr.w	r3, r0, r3
 800022c:	40b7      	lsls	r7, r6
 800022e:	ea43 0808 	orr.w	r8, r3, r8
 8000232:	40b4      	lsls	r4, r6
 8000234:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000238:	fa1f fc87 	uxth.w	ip, r7
 800023c:	fbb8 f1fe 	udiv	r1, r8, lr
 8000240:	0c23      	lsrs	r3, r4, #16
 8000242:	fb0e 8811 	mls	r8, lr, r1, r8
 8000246:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800024a:	fb01 f20c 	mul.w	r2, r1, ip
 800024e:	429a      	cmp	r2, r3
 8000250:	d909      	bls.n	8000266 <__udivmoddi4+0x62>
 8000252:	18fb      	adds	r3, r7, r3
 8000254:	f101 30ff 	add.w	r0, r1, #4294967295
 8000258:	f080 80ea 	bcs.w	8000430 <__udivmoddi4+0x22c>
 800025c:	429a      	cmp	r2, r3
 800025e:	f240 80e7 	bls.w	8000430 <__udivmoddi4+0x22c>
 8000262:	3902      	subs	r1, #2
 8000264:	443b      	add	r3, r7
 8000266:	1a9a      	subs	r2, r3, r2
 8000268:	b2a3      	uxth	r3, r4
 800026a:	fbb2 f0fe 	udiv	r0, r2, lr
 800026e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000272:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000276:	fb00 fc0c 	mul.w	ip, r0, ip
 800027a:	459c      	cmp	ip, r3
 800027c:	d909      	bls.n	8000292 <__udivmoddi4+0x8e>
 800027e:	18fb      	adds	r3, r7, r3
 8000280:	f100 32ff 	add.w	r2, r0, #4294967295
 8000284:	f080 80d6 	bcs.w	8000434 <__udivmoddi4+0x230>
 8000288:	459c      	cmp	ip, r3
 800028a:	f240 80d3 	bls.w	8000434 <__udivmoddi4+0x230>
 800028e:	443b      	add	r3, r7
 8000290:	3802      	subs	r0, #2
 8000292:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000296:	eba3 030c 	sub.w	r3, r3, ip
 800029a:	2100      	movs	r1, #0
 800029c:	b11d      	cbz	r5, 80002a6 <__udivmoddi4+0xa2>
 800029e:	40f3      	lsrs	r3, r6
 80002a0:	2200      	movs	r2, #0
 80002a2:	e9c5 3200 	strd	r3, r2, [r5]
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	428b      	cmp	r3, r1
 80002ac:	d905      	bls.n	80002ba <__udivmoddi4+0xb6>
 80002ae:	b10d      	cbz	r5, 80002b4 <__udivmoddi4+0xb0>
 80002b0:	e9c5 0100 	strd	r0, r1, [r5]
 80002b4:	2100      	movs	r1, #0
 80002b6:	4608      	mov	r0, r1
 80002b8:	e7f5      	b.n	80002a6 <__udivmoddi4+0xa2>
 80002ba:	fab3 f183 	clz	r1, r3
 80002be:	2900      	cmp	r1, #0
 80002c0:	d146      	bne.n	8000350 <__udivmoddi4+0x14c>
 80002c2:	4573      	cmp	r3, lr
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xc8>
 80002c6:	4282      	cmp	r2, r0
 80002c8:	f200 8105 	bhi.w	80004d6 <__udivmoddi4+0x2d2>
 80002cc:	1a84      	subs	r4, r0, r2
 80002ce:	eb6e 0203 	sbc.w	r2, lr, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	4690      	mov	r8, r2
 80002d6:	2d00      	cmp	r5, #0
 80002d8:	d0e5      	beq.n	80002a6 <__udivmoddi4+0xa2>
 80002da:	e9c5 4800 	strd	r4, r8, [r5]
 80002de:	e7e2      	b.n	80002a6 <__udivmoddi4+0xa2>
 80002e0:	2a00      	cmp	r2, #0
 80002e2:	f000 8090 	beq.w	8000406 <__udivmoddi4+0x202>
 80002e6:	fab2 f682 	clz	r6, r2
 80002ea:	2e00      	cmp	r6, #0
 80002ec:	f040 80a4 	bne.w	8000438 <__udivmoddi4+0x234>
 80002f0:	1a8a      	subs	r2, r1, r2
 80002f2:	0c03      	lsrs	r3, r0, #16
 80002f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002f8:	b280      	uxth	r0, r0
 80002fa:	b2bc      	uxth	r4, r7
 80002fc:	2101      	movs	r1, #1
 80002fe:	fbb2 fcfe 	udiv	ip, r2, lr
 8000302:	fb0e 221c 	mls	r2, lr, ip, r2
 8000306:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800030a:	fb04 f20c 	mul.w	r2, r4, ip
 800030e:	429a      	cmp	r2, r3
 8000310:	d907      	bls.n	8000322 <__udivmoddi4+0x11e>
 8000312:	18fb      	adds	r3, r7, r3
 8000314:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000318:	d202      	bcs.n	8000320 <__udivmoddi4+0x11c>
 800031a:	429a      	cmp	r2, r3
 800031c:	f200 80e0 	bhi.w	80004e0 <__udivmoddi4+0x2dc>
 8000320:	46c4      	mov	ip, r8
 8000322:	1a9b      	subs	r3, r3, r2
 8000324:	fbb3 f2fe 	udiv	r2, r3, lr
 8000328:	fb0e 3312 	mls	r3, lr, r2, r3
 800032c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000330:	fb02 f404 	mul.w	r4, r2, r4
 8000334:	429c      	cmp	r4, r3
 8000336:	d907      	bls.n	8000348 <__udivmoddi4+0x144>
 8000338:	18fb      	adds	r3, r7, r3
 800033a:	f102 30ff 	add.w	r0, r2, #4294967295
 800033e:	d202      	bcs.n	8000346 <__udivmoddi4+0x142>
 8000340:	429c      	cmp	r4, r3
 8000342:	f200 80ca 	bhi.w	80004da <__udivmoddi4+0x2d6>
 8000346:	4602      	mov	r2, r0
 8000348:	1b1b      	subs	r3, r3, r4
 800034a:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800034e:	e7a5      	b.n	800029c <__udivmoddi4+0x98>
 8000350:	f1c1 0620 	rsb	r6, r1, #32
 8000354:	408b      	lsls	r3, r1
 8000356:	fa22 f706 	lsr.w	r7, r2, r6
 800035a:	431f      	orrs	r7, r3
 800035c:	fa0e f401 	lsl.w	r4, lr, r1
 8000360:	fa20 f306 	lsr.w	r3, r0, r6
 8000364:	fa2e fe06 	lsr.w	lr, lr, r6
 8000368:	ea4f 4917 	mov.w	r9, r7, lsr #16
 800036c:	4323      	orrs	r3, r4
 800036e:	fa00 f801 	lsl.w	r8, r0, r1
 8000372:	fa1f fc87 	uxth.w	ip, r7
 8000376:	fbbe f0f9 	udiv	r0, lr, r9
 800037a:	0c1c      	lsrs	r4, r3, #16
 800037c:	fb09 ee10 	mls	lr, r9, r0, lr
 8000380:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000384:	fb00 fe0c 	mul.w	lr, r0, ip
 8000388:	45a6      	cmp	lr, r4
 800038a:	fa02 f201 	lsl.w	r2, r2, r1
 800038e:	d909      	bls.n	80003a4 <__udivmoddi4+0x1a0>
 8000390:	193c      	adds	r4, r7, r4
 8000392:	f100 3aff 	add.w	sl, r0, #4294967295
 8000396:	f080 809c 	bcs.w	80004d2 <__udivmoddi4+0x2ce>
 800039a:	45a6      	cmp	lr, r4
 800039c:	f240 8099 	bls.w	80004d2 <__udivmoddi4+0x2ce>
 80003a0:	3802      	subs	r0, #2
 80003a2:	443c      	add	r4, r7
 80003a4:	eba4 040e 	sub.w	r4, r4, lr
 80003a8:	fa1f fe83 	uxth.w	lr, r3
 80003ac:	fbb4 f3f9 	udiv	r3, r4, r9
 80003b0:	fb09 4413 	mls	r4, r9, r3, r4
 80003b4:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003b8:	fb03 fc0c 	mul.w	ip, r3, ip
 80003bc:	45a4      	cmp	ip, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1ce>
 80003c0:	193c      	adds	r4, r7, r4
 80003c2:	f103 3eff 	add.w	lr, r3, #4294967295
 80003c6:	f080 8082 	bcs.w	80004ce <__udivmoddi4+0x2ca>
 80003ca:	45a4      	cmp	ip, r4
 80003cc:	d97f      	bls.n	80004ce <__udivmoddi4+0x2ca>
 80003ce:	3b02      	subs	r3, #2
 80003d0:	443c      	add	r4, r7
 80003d2:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003d6:	eba4 040c 	sub.w	r4, r4, ip
 80003da:	fba0 ec02 	umull	lr, ip, r0, r2
 80003de:	4564      	cmp	r4, ip
 80003e0:	4673      	mov	r3, lr
 80003e2:	46e1      	mov	r9, ip
 80003e4:	d362      	bcc.n	80004ac <__udivmoddi4+0x2a8>
 80003e6:	d05f      	beq.n	80004a8 <__udivmoddi4+0x2a4>
 80003e8:	b15d      	cbz	r5, 8000402 <__udivmoddi4+0x1fe>
 80003ea:	ebb8 0203 	subs.w	r2, r8, r3
 80003ee:	eb64 0409 	sbc.w	r4, r4, r9
 80003f2:	fa04 f606 	lsl.w	r6, r4, r6
 80003f6:	fa22 f301 	lsr.w	r3, r2, r1
 80003fa:	431e      	orrs	r6, r3
 80003fc:	40cc      	lsrs	r4, r1
 80003fe:	e9c5 6400 	strd	r6, r4, [r5]
 8000402:	2100      	movs	r1, #0
 8000404:	e74f      	b.n	80002a6 <__udivmoddi4+0xa2>
 8000406:	fbb1 fcf2 	udiv	ip, r1, r2
 800040a:	0c01      	lsrs	r1, r0, #16
 800040c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000410:	b280      	uxth	r0, r0
 8000412:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000416:	463b      	mov	r3, r7
 8000418:	4638      	mov	r0, r7
 800041a:	463c      	mov	r4, r7
 800041c:	46b8      	mov	r8, r7
 800041e:	46be      	mov	lr, r7
 8000420:	2620      	movs	r6, #32
 8000422:	fbb1 f1f7 	udiv	r1, r1, r7
 8000426:	eba2 0208 	sub.w	r2, r2, r8
 800042a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800042e:	e766      	b.n	80002fe <__udivmoddi4+0xfa>
 8000430:	4601      	mov	r1, r0
 8000432:	e718      	b.n	8000266 <__udivmoddi4+0x62>
 8000434:	4610      	mov	r0, r2
 8000436:	e72c      	b.n	8000292 <__udivmoddi4+0x8e>
 8000438:	f1c6 0220 	rsb	r2, r6, #32
 800043c:	fa2e f302 	lsr.w	r3, lr, r2
 8000440:	40b7      	lsls	r7, r6
 8000442:	40b1      	lsls	r1, r6
 8000444:	fa20 f202 	lsr.w	r2, r0, r2
 8000448:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800044c:	430a      	orrs	r2, r1
 800044e:	fbb3 f8fe 	udiv	r8, r3, lr
 8000452:	b2bc      	uxth	r4, r7
 8000454:	fb0e 3318 	mls	r3, lr, r8, r3
 8000458:	0c11      	lsrs	r1, r2, #16
 800045a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045e:	fb08 f904 	mul.w	r9, r8, r4
 8000462:	40b0      	lsls	r0, r6
 8000464:	4589      	cmp	r9, r1
 8000466:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800046a:	b280      	uxth	r0, r0
 800046c:	d93e      	bls.n	80004ec <__udivmoddi4+0x2e8>
 800046e:	1879      	adds	r1, r7, r1
 8000470:	f108 3cff 	add.w	ip, r8, #4294967295
 8000474:	d201      	bcs.n	800047a <__udivmoddi4+0x276>
 8000476:	4589      	cmp	r9, r1
 8000478:	d81f      	bhi.n	80004ba <__udivmoddi4+0x2b6>
 800047a:	eba1 0109 	sub.w	r1, r1, r9
 800047e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000482:	fb09 f804 	mul.w	r8, r9, r4
 8000486:	fb0e 1119 	mls	r1, lr, r9, r1
 800048a:	b292      	uxth	r2, r2
 800048c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000490:	4542      	cmp	r2, r8
 8000492:	d229      	bcs.n	80004e8 <__udivmoddi4+0x2e4>
 8000494:	18ba      	adds	r2, r7, r2
 8000496:	f109 31ff 	add.w	r1, r9, #4294967295
 800049a:	d2c4      	bcs.n	8000426 <__udivmoddi4+0x222>
 800049c:	4542      	cmp	r2, r8
 800049e:	d2c2      	bcs.n	8000426 <__udivmoddi4+0x222>
 80004a0:	f1a9 0102 	sub.w	r1, r9, #2
 80004a4:	443a      	add	r2, r7
 80004a6:	e7be      	b.n	8000426 <__udivmoddi4+0x222>
 80004a8:	45f0      	cmp	r8, lr
 80004aa:	d29d      	bcs.n	80003e8 <__udivmoddi4+0x1e4>
 80004ac:	ebbe 0302 	subs.w	r3, lr, r2
 80004b0:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004b4:	3801      	subs	r0, #1
 80004b6:	46e1      	mov	r9, ip
 80004b8:	e796      	b.n	80003e8 <__udivmoddi4+0x1e4>
 80004ba:	eba7 0909 	sub.w	r9, r7, r9
 80004be:	4449      	add	r1, r9
 80004c0:	f1a8 0c02 	sub.w	ip, r8, #2
 80004c4:	fbb1 f9fe 	udiv	r9, r1, lr
 80004c8:	fb09 f804 	mul.w	r8, r9, r4
 80004cc:	e7db      	b.n	8000486 <__udivmoddi4+0x282>
 80004ce:	4673      	mov	r3, lr
 80004d0:	e77f      	b.n	80003d2 <__udivmoddi4+0x1ce>
 80004d2:	4650      	mov	r0, sl
 80004d4:	e766      	b.n	80003a4 <__udivmoddi4+0x1a0>
 80004d6:	4608      	mov	r0, r1
 80004d8:	e6fd      	b.n	80002d6 <__udivmoddi4+0xd2>
 80004da:	443b      	add	r3, r7
 80004dc:	3a02      	subs	r2, #2
 80004de:	e733      	b.n	8000348 <__udivmoddi4+0x144>
 80004e0:	f1ac 0c02 	sub.w	ip, ip, #2
 80004e4:	443b      	add	r3, r7
 80004e6:	e71c      	b.n	8000322 <__udivmoddi4+0x11e>
 80004e8:	4649      	mov	r1, r9
 80004ea:	e79c      	b.n	8000426 <__udivmoddi4+0x222>
 80004ec:	eba1 0109 	sub.w	r1, r1, r9
 80004f0:	46c4      	mov	ip, r8
 80004f2:	fbb1 f9fe 	udiv	r9, r1, lr
 80004f6:	fb09 f804 	mul.w	r8, r9, r4
 80004fa:	e7c4      	b.n	8000486 <__udivmoddi4+0x282>

080004fc <__aeabi_idiv0>:
 80004fc:	4770      	bx	lr
 80004fe:	bf00      	nop

08000500 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000500:	b480      	push	{r7}
 8000502:	b085      	sub	sp, #20
 8000504:	af00      	add	r7, sp, #0
 8000506:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000508:	687b      	ldr	r3, [r7, #4]
 800050a:	f003 0307 	and.w	r3, r3, #7
 800050e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000510:	4b0c      	ldr	r3, [pc, #48]	@ (8000544 <__NVIC_SetPriorityGrouping+0x44>)
 8000512:	68db      	ldr	r3, [r3, #12]
 8000514:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000516:	68ba      	ldr	r2, [r7, #8]
 8000518:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800051c:	4013      	ands	r3, r2
 800051e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000520:	68fb      	ldr	r3, [r7, #12]
 8000522:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000524:	68bb      	ldr	r3, [r7, #8]
 8000526:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000528:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800052c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000530:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000532:	4a04      	ldr	r2, [pc, #16]	@ (8000544 <__NVIC_SetPriorityGrouping+0x44>)
 8000534:	68bb      	ldr	r3, [r7, #8]
 8000536:	60d3      	str	r3, [r2, #12]
}
 8000538:	bf00      	nop
 800053a:	3714      	adds	r7, #20
 800053c:	46bd      	mov	sp, r7
 800053e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000542:	4770      	bx	lr
 8000544:	e000ed00 	.word	0xe000ed00

08000548 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 8000548:	b480      	push	{r7}
 800054a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 800054c:	4b05      	ldr	r3, [pc, #20]	@ (8000564 <LL_RCC_HSI_Enable+0x1c>)
 800054e:	681b      	ldr	r3, [r3, #0]
 8000550:	4a04      	ldr	r2, [pc, #16]	@ (8000564 <LL_RCC_HSI_Enable+0x1c>)
 8000552:	f043 0301 	orr.w	r3, r3, #1
 8000556:	6013      	str	r3, [r2, #0]
}
 8000558:	bf00      	nop
 800055a:	46bd      	mov	sp, r7
 800055c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000560:	4770      	bx	lr
 8000562:	bf00      	nop
 8000564:	40023800 	.word	0x40023800

08000568 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8000568:	b480      	push	{r7}
 800056a:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 800056c:	4b06      	ldr	r3, [pc, #24]	@ (8000588 <LL_RCC_HSI_IsReady+0x20>)
 800056e:	681b      	ldr	r3, [r3, #0]
 8000570:	f003 0302 	and.w	r3, r3, #2
 8000574:	2b02      	cmp	r3, #2
 8000576:	bf0c      	ite	eq
 8000578:	2301      	moveq	r3, #1
 800057a:	2300      	movne	r3, #0
 800057c:	b2db      	uxtb	r3, r3
}
 800057e:	4618      	mov	r0, r3
 8000580:	46bd      	mov	sp, r7
 8000582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000586:	4770      	bx	lr
 8000588:	40023800 	.word	0x40023800

0800058c <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll CR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 31
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 800058c:	b480      	push	{r7}
 800058e:	b083      	sub	sp, #12
 8000590:	af00      	add	r7, sp, #0
 8000592:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_HSITRIM, Value << RCC_CR_HSITRIM_Pos);
 8000594:	4b07      	ldr	r3, [pc, #28]	@ (80005b4 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 8000596:	681b      	ldr	r3, [r3, #0]
 8000598:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	00db      	lsls	r3, r3, #3
 80005a0:	4904      	ldr	r1, [pc, #16]	@ (80005b4 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 80005a2:	4313      	orrs	r3, r2
 80005a4:	600b      	str	r3, [r1, #0]
}
 80005a6:	bf00      	nop
 80005a8:	370c      	adds	r7, #12
 80005aa:	46bd      	mov	sp, r7
 80005ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b0:	4770      	bx	lr
 80005b2:	bf00      	nop
 80005b4:	40023800 	.word	0x40023800

080005b8 <LL_RCC_SetSysClkSource>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 80005b8:	b480      	push	{r7}
 80005ba:	b083      	sub	sp, #12
 80005bc:	af00      	add	r7, sp, #0
 80005be:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80005c0:	4b06      	ldr	r3, [pc, #24]	@ (80005dc <LL_RCC_SetSysClkSource+0x24>)
 80005c2:	689b      	ldr	r3, [r3, #8]
 80005c4:	f023 0203 	bic.w	r2, r3, #3
 80005c8:	4904      	ldr	r1, [pc, #16]	@ (80005dc <LL_RCC_SetSysClkSource+0x24>)
 80005ca:	687b      	ldr	r3, [r7, #4]
 80005cc:	4313      	orrs	r3, r2
 80005ce:	608b      	str	r3, [r1, #8]
}
 80005d0:	bf00      	nop
 80005d2:	370c      	adds	r7, #12
 80005d4:	46bd      	mov	sp, r7
 80005d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005da:	4770      	bx	lr
 80005dc:	40023800 	.word	0x40023800

080005e0 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLLR (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 80005e0:	b480      	push	{r7}
 80005e2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80005e4:	4b04      	ldr	r3, [pc, #16]	@ (80005f8 <LL_RCC_GetSysClkSource+0x18>)
 80005e6:	689b      	ldr	r3, [r3, #8]
 80005e8:	f003 030c 	and.w	r3, r3, #12
}
 80005ec:	4618      	mov	r0, r3
 80005ee:	46bd      	mov	sp, r7
 80005f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f4:	4770      	bx	lr
 80005f6:	bf00      	nop
 80005f8:	40023800 	.word	0x40023800

080005fc <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 80005fc:	b480      	push	{r7}
 80005fe:	b083      	sub	sp, #12
 8000600:	af00      	add	r7, sp, #0
 8000602:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8000604:	4b06      	ldr	r3, [pc, #24]	@ (8000620 <LL_RCC_SetAHBPrescaler+0x24>)
 8000606:	689b      	ldr	r3, [r3, #8]
 8000608:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800060c:	4904      	ldr	r1, [pc, #16]	@ (8000620 <LL_RCC_SetAHBPrescaler+0x24>)
 800060e:	687b      	ldr	r3, [r7, #4]
 8000610:	4313      	orrs	r3, r2
 8000612:	608b      	str	r3, [r1, #8]
}
 8000614:	bf00      	nop
 8000616:	370c      	adds	r7, #12
 8000618:	46bd      	mov	sp, r7
 800061a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800061e:	4770      	bx	lr
 8000620:	40023800 	.word	0x40023800

08000624 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8000624:	b480      	push	{r7}
 8000626:	b083      	sub	sp, #12
 8000628:	af00      	add	r7, sp, #0
 800062a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 800062c:	4b06      	ldr	r3, [pc, #24]	@ (8000648 <LL_RCC_SetAPB1Prescaler+0x24>)
 800062e:	689b      	ldr	r3, [r3, #8]
 8000630:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8000634:	4904      	ldr	r1, [pc, #16]	@ (8000648 <LL_RCC_SetAPB1Prescaler+0x24>)
 8000636:	687b      	ldr	r3, [r7, #4]
 8000638:	4313      	orrs	r3, r2
 800063a:	608b      	str	r3, [r1, #8]
}
 800063c:	bf00      	nop
 800063e:	370c      	adds	r7, #12
 8000640:	46bd      	mov	sp, r7
 8000642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000646:	4770      	bx	lr
 8000648:	40023800 	.word	0x40023800

0800064c <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 800064c:	b480      	push	{r7}
 800064e:	b083      	sub	sp, #12
 8000650:	af00      	add	r7, sp, #0
 8000652:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8000654:	4b06      	ldr	r3, [pc, #24]	@ (8000670 <LL_RCC_SetAPB2Prescaler+0x24>)
 8000656:	689b      	ldr	r3, [r3, #8]
 8000658:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800065c:	4904      	ldr	r1, [pc, #16]	@ (8000670 <LL_RCC_SetAPB2Prescaler+0x24>)
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	4313      	orrs	r3, r2
 8000662:	608b      	str	r3, [r1, #8]
}
 8000664:	bf00      	nop
 8000666:	370c      	adds	r7, #12
 8000668:	46bd      	mov	sp, r7
 800066a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800066e:	4770      	bx	lr
 8000670:	40023800 	.word	0x40023800

08000674 <LL_RCC_SetTIMPrescaler>:
  *         @arg @ref LL_RCC_TIM_PRESCALER_TWICE
  *         @arg @ref LL_RCC_TIM_PRESCALER_FOUR_TIMES
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetTIMPrescaler(uint32_t Prescaler)
{
 8000674:	b480      	push	{r7}
 8000676:	b083      	sub	sp, #12
 8000678:	af00      	add	r7, sp, #0
 800067a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->DCKCFGR, RCC_DCKCFGR_TIMPRE, Prescaler);
 800067c:	4b07      	ldr	r3, [pc, #28]	@ (800069c <LL_RCC_SetTIMPrescaler+0x28>)
 800067e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000682:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8000686:	4905      	ldr	r1, [pc, #20]	@ (800069c <LL_RCC_SetTIMPrescaler+0x28>)
 8000688:	687b      	ldr	r3, [r7, #4]
 800068a:	4313      	orrs	r3, r2
 800068c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
}
 8000690:	bf00      	nop
 8000692:	370c      	adds	r7, #12
 8000694:	46bd      	mov	sp, r7
 8000696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800069a:	4770      	bx	lr
 800069c:	40023800 	.word	0x40023800

080006a0 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 80006a0:	b480      	push	{r7}
 80006a2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 80006a4:	4b05      	ldr	r3, [pc, #20]	@ (80006bc <LL_RCC_PLL_Enable+0x1c>)
 80006a6:	681b      	ldr	r3, [r3, #0]
 80006a8:	4a04      	ldr	r2, [pc, #16]	@ (80006bc <LL_RCC_PLL_Enable+0x1c>)
 80006aa:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80006ae:	6013      	str	r3, [r2, #0]
}
 80006b0:	bf00      	nop
 80006b2:	46bd      	mov	sp, r7
 80006b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b8:	4770      	bx	lr
 80006ba:	bf00      	nop
 80006bc:	40023800 	.word	0x40023800

080006c0 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 80006c0:	b480      	push	{r7}
 80006c2:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY));
 80006c4:	4b07      	ldr	r3, [pc, #28]	@ (80006e4 <LL_RCC_PLL_IsReady+0x24>)
 80006c6:	681b      	ldr	r3, [r3, #0]
 80006c8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80006cc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80006d0:	bf0c      	ite	eq
 80006d2:	2301      	moveq	r3, #1
 80006d4:	2300      	movne	r3, #0
 80006d6:	b2db      	uxtb	r3, r3
}
 80006d8:	4618      	mov	r0, r3
 80006da:	46bd      	mov	sp, r7
 80006dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e0:	4770      	bx	lr
 80006e2:	bf00      	nop
 80006e4:	40023800 	.word	0x40023800

080006e8 <LL_RCC_PLL_ConfigDomain_SYS>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLM, uint32_t PLLN, uint32_t PLLP_R)
{
 80006e8:	b480      	push	{r7}
 80006ea:	b085      	sub	sp, #20
 80006ec:	af00      	add	r7, sp, #0
 80006ee:	60f8      	str	r0, [r7, #12]
 80006f0:	60b9      	str	r1, [r7, #8]
 80006f2:	607a      	str	r2, [r7, #4]
 80006f4:	603b      	str	r3, [r7, #0]
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM | RCC_PLLCFGR_PLLN,
 80006f6:	4b0d      	ldr	r3, [pc, #52]	@ (800072c <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 80006f8:	685a      	ldr	r2, [r3, #4]
 80006fa:	4b0d      	ldr	r3, [pc, #52]	@ (8000730 <LL_RCC_PLL_ConfigDomain_SYS+0x48>)
 80006fc:	4013      	ands	r3, r2
 80006fe:	68f9      	ldr	r1, [r7, #12]
 8000700:	68ba      	ldr	r2, [r7, #8]
 8000702:	4311      	orrs	r1, r2
 8000704:	687a      	ldr	r2, [r7, #4]
 8000706:	0192      	lsls	r2, r2, #6
 8000708:	430a      	orrs	r2, r1
 800070a:	4908      	ldr	r1, [pc, #32]	@ (800072c <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 800070c:	4313      	orrs	r3, r2
 800070e:	604b      	str	r3, [r1, #4]
             Source | PLLM | PLLN << RCC_PLLCFGR_PLLN_Pos);
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLP, PLLP_R);
 8000710:	4b06      	ldr	r3, [pc, #24]	@ (800072c <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 8000712:	685b      	ldr	r3, [r3, #4]
 8000714:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8000718:	4904      	ldr	r1, [pc, #16]	@ (800072c <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 800071a:	683b      	ldr	r3, [r7, #0]
 800071c:	4313      	orrs	r3, r2
 800071e:	604b      	str	r3, [r1, #4]
#if defined(RCC_PLLR_SYSCLK_SUPPORT)
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLR, PLLP_R);
#endif /* RCC_PLLR_SYSCLK_SUPPORT */
}
 8000720:	bf00      	nop
 8000722:	3714      	adds	r7, #20
 8000724:	46bd      	mov	sp, r7
 8000726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800072a:	4770      	bx	lr
 800072c:	40023800 	.word	0x40023800
 8000730:	ffbf8000 	.word	0xffbf8000

08000734 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000734:	b480      	push	{r7}
 8000736:	b085      	sub	sp, #20
 8000738:	af00      	add	r7, sp, #0
 800073a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 800073c:	4b08      	ldr	r3, [pc, #32]	@ (8000760 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800073e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000740:	4907      	ldr	r1, [pc, #28]	@ (8000760 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000742:	687b      	ldr	r3, [r7, #4]
 8000744:	4313      	orrs	r3, r2
 8000746:	630b      	str	r3, [r1, #48]	@ 0x30
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8000748:	4b05      	ldr	r3, [pc, #20]	@ (8000760 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800074a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800074c:	687b      	ldr	r3, [r7, #4]
 800074e:	4013      	ands	r3, r2
 8000750:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000752:	68fb      	ldr	r3, [r7, #12]
}
 8000754:	bf00      	nop
 8000756:	3714      	adds	r7, #20
 8000758:	46bd      	mov	sp, r7
 800075a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800075e:	4770      	bx	lr
 8000760:	40023800 	.word	0x40023800

08000764 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000764:	b480      	push	{r7}
 8000766:	b085      	sub	sp, #20
 8000768:	af00      	add	r7, sp, #0
 800076a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 800076c:	4b08      	ldr	r3, [pc, #32]	@ (8000790 <LL_APB1_GRP1_EnableClock+0x2c>)
 800076e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000770:	4907      	ldr	r1, [pc, #28]	@ (8000790 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000772:	687b      	ldr	r3, [r7, #4]
 8000774:	4313      	orrs	r3, r2
 8000776:	640b      	str	r3, [r1, #64]	@ 0x40
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8000778:	4b05      	ldr	r3, [pc, #20]	@ (8000790 <LL_APB1_GRP1_EnableClock+0x2c>)
 800077a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	4013      	ands	r3, r2
 8000780:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000782:	68fb      	ldr	r3, [r7, #12]
}
 8000784:	bf00      	nop
 8000786:	3714      	adds	r7, #20
 8000788:	46bd      	mov	sp, r7
 800078a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800078e:	4770      	bx	lr
 8000790:	40023800 	.word	0x40023800

08000794 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000794:	b480      	push	{r7}
 8000796:	b085      	sub	sp, #20
 8000798:	af00      	add	r7, sp, #0
 800079a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 800079c:	4b08      	ldr	r3, [pc, #32]	@ (80007c0 <LL_APB2_GRP1_EnableClock+0x2c>)
 800079e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80007a0:	4907      	ldr	r1, [pc, #28]	@ (80007c0 <LL_APB2_GRP1_EnableClock+0x2c>)
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	4313      	orrs	r3, r2
 80007a6:	644b      	str	r3, [r1, #68]	@ 0x44
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80007a8:	4b05      	ldr	r3, [pc, #20]	@ (80007c0 <LL_APB2_GRP1_EnableClock+0x2c>)
 80007aa:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	4013      	ands	r3, r2
 80007b0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80007b2:	68fb      	ldr	r3, [r7, #12]
}
 80007b4:	bf00      	nop
 80007b6:	3714      	adds	r7, #20
 80007b8:	46bd      	mov	sp, r7
 80007ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007be:	4770      	bx	lr
 80007c0:	40023800 	.word	0x40023800

080007c4 <LL_SYSCFG_SetEXTISource>:
  *         @arg @ref LL_SYSCFG_EXTI_LINE14
  *         @arg @ref LL_SYSCFG_EXTI_LINE15
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_SetEXTISource(uint32_t Port, uint32_t Line)
{
 80007c4:	b480      	push	{r7}
 80007c6:	b087      	sub	sp, #28
 80007c8:	af00      	add	r7, sp, #0
 80007ca:	6078      	str	r0, [r7, #4]
 80007cc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SYSCFG->EXTICR[Line & 0xFF], (Line >> 16), Port << POSITION_VAL((Line >> 16)));
 80007ce:	4a17      	ldr	r2, [pc, #92]	@ (800082c <LL_SYSCFG_SetEXTISource+0x68>)
 80007d0:	683b      	ldr	r3, [r7, #0]
 80007d2:	b2db      	uxtb	r3, r3
 80007d4:	3302      	adds	r3, #2
 80007d6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80007da:	683b      	ldr	r3, [r7, #0]
 80007dc:	0c1b      	lsrs	r3, r3, #16
 80007de:	43db      	mvns	r3, r3
 80007e0:	ea02 0103 	and.w	r1, r2, r3
 80007e4:	683b      	ldr	r3, [r7, #0]
 80007e6:	0c1b      	lsrs	r3, r3, #16
 80007e8:	613b      	str	r3, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80007ea:	693b      	ldr	r3, [r7, #16]
 80007ec:	fa93 f3a3 	rbit	r3, r3
 80007f0:	60fb      	str	r3, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80007f2:	68fb      	ldr	r3, [r7, #12]
 80007f4:	617b      	str	r3, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80007f6:	697b      	ldr	r3, [r7, #20]
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	d101      	bne.n	8000800 <LL_SYSCFG_SetEXTISource+0x3c>
  {
    return 32U;
 80007fc:	2320      	movs	r3, #32
 80007fe:	e003      	b.n	8000808 <LL_SYSCFG_SetEXTISource+0x44>
  }
  return __builtin_clz(value);
 8000800:	697b      	ldr	r3, [r7, #20]
 8000802:	fab3 f383 	clz	r3, r3
 8000806:	b2db      	uxtb	r3, r3
 8000808:	461a      	mov	r2, r3
 800080a:	687b      	ldr	r3, [r7, #4]
 800080c:	fa03 f202 	lsl.w	r2, r3, r2
 8000810:	4806      	ldr	r0, [pc, #24]	@ (800082c <LL_SYSCFG_SetEXTISource+0x68>)
 8000812:	683b      	ldr	r3, [r7, #0]
 8000814:	b2db      	uxtb	r3, r3
 8000816:	430a      	orrs	r2, r1
 8000818:	3302      	adds	r3, #2
 800081a:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
 800081e:	bf00      	nop
 8000820:	371c      	adds	r7, #28
 8000822:	46bd      	mov	sp, r7
 8000824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000828:	4770      	bx	lr
 800082a:	bf00      	nop
 800082c:	40013800 	.word	0x40013800

08000830 <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_14
  *         @arg @ref LL_FLASH_LATENCY_15
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 8000830:	b480      	push	{r7}
 8000832:	b083      	sub	sp, #12
 8000834:	af00      	add	r7, sp, #0
 8000836:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8000838:	4b06      	ldr	r3, [pc, #24]	@ (8000854 <LL_FLASH_SetLatency+0x24>)
 800083a:	681b      	ldr	r3, [r3, #0]
 800083c:	f023 0207 	bic.w	r2, r3, #7
 8000840:	4904      	ldr	r1, [pc, #16]	@ (8000854 <LL_FLASH_SetLatency+0x24>)
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	4313      	orrs	r3, r2
 8000846:	600b      	str	r3, [r1, #0]
}
 8000848:	bf00      	nop
 800084a:	370c      	adds	r7, #12
 800084c:	46bd      	mov	sp, r7
 800084e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000852:	4770      	bx	lr
 8000854:	40023c00 	.word	0x40023c00

08000858 <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_13
  *         @arg @ref LL_FLASH_LATENCY_14
  *         @arg @ref LL_FLASH_LATENCY_15
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 8000858:	b480      	push	{r7}
 800085a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 800085c:	4b04      	ldr	r3, [pc, #16]	@ (8000870 <LL_FLASH_GetLatency+0x18>)
 800085e:	681b      	ldr	r3, [r3, #0]
 8000860:	f003 0307 	and.w	r3, r3, #7
}
 8000864:	4618      	mov	r0, r3
 8000866:	46bd      	mov	sp, r7
 8000868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800086c:	4770      	bx	lr
 800086e:	bf00      	nop
 8000870:	40023c00 	.word	0x40023c00

08000874 <LL_PWR_SetRegulVoltageScaling>:
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE3
  *         (*) LL_PWR_REGU_VOLTAGE_SCALE1 is not available for STM32F401xx devices
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRegulVoltageScaling(uint32_t VoltageScaling)
{
 8000874:	b480      	push	{r7}
 8000876:	b083      	sub	sp, #12
 8000878:	af00      	add	r7, sp, #0
 800087a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR, PWR_CR_VOS, VoltageScaling);
 800087c:	4b06      	ldr	r3, [pc, #24]	@ (8000898 <LL_PWR_SetRegulVoltageScaling+0x24>)
 800087e:	681b      	ldr	r3, [r3, #0]
 8000880:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8000884:	4904      	ldr	r1, [pc, #16]	@ (8000898 <LL_PWR_SetRegulVoltageScaling+0x24>)
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	4313      	orrs	r3, r2
 800088a:	600b      	str	r3, [r1, #0]
}
 800088c:	bf00      	nop
 800088e:	370c      	adds	r7, #12
 8000890:	46bd      	mov	sp, r7
 8000892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000896:	4770      	bx	lr
 8000898:	40007000 	.word	0x40007000

0800089c <LL_PWR_IsActiveFlag_VOS>:
  * @brief  Indicate whether the Regulator is ready in the selected voltage range or if its output voltage is still changing to the required voltage level
  * @rmtoll CSR   VOS       LL_PWR_IsActiveFlag_VOS
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_VOS(void)
{
 800089c:	b480      	push	{r7}
 800089e:	af00      	add	r7, sp, #0
  return (READ_BIT(PWR->CSR, LL_PWR_CSR_VOS) == (LL_PWR_CSR_VOS));
 80008a0:	4b07      	ldr	r3, [pc, #28]	@ (80008c0 <LL_PWR_IsActiveFlag_VOS+0x24>)
 80008a2:	685b      	ldr	r3, [r3, #4]
 80008a4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80008a8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80008ac:	bf0c      	ite	eq
 80008ae:	2301      	moveq	r3, #1
 80008b0:	2300      	movne	r3, #0
 80008b2:	b2db      	uxtb	r3, r3
}
 80008b4:	4618      	mov	r0, r3
 80008b6:	46bd      	mov	sp, r7
 80008b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008bc:	4770      	bx	lr
 80008be:	bf00      	nop
 80008c0:	40007000 	.word	0x40007000

080008c4 <LL_USART_Enable>:
  * @rmtoll CR1          UE            LL_USART_Enable
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_Enable(USART_TypeDef *USARTx)
{
 80008c4:	b480      	push	{r7}
 80008c6:	b083      	sub	sp, #12
 80008c8:	af00      	add	r7, sp, #0
 80008ca:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	68db      	ldr	r3, [r3, #12]
 80008d0:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	60da      	str	r2, [r3, #12]
}
 80008d8:	bf00      	nop
 80008da:	370c      	adds	r7, #12
 80008dc:	46bd      	mov	sp, r7
 80008de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e2:	4770      	bx	lr

080008e4 <LL_USART_ConfigAsyncMode>:
  *         CR3          HDSEL         LL_USART_ConfigAsyncMode
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ConfigAsyncMode(USART_TypeDef *USARTx)
{
 80008e4:	b480      	push	{r7}
 80008e6:	b083      	sub	sp, #12
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	6078      	str	r0, [r7, #4]
  /* In Asynchronous mode, the following bits must be kept cleared:
  - LINEN, CLKEN bits in the USART_CR2 register,
  - SCEN, IREN and HDSEL bits in the USART_CR3 register.*/
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	691b      	ldr	r3, [r3, #16]
 80008f0:	f423 4290 	bic.w	r2, r3, #18432	@ 0x4800
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	695b      	ldr	r3, [r3, #20]
 80008fc:	f023 022a 	bic.w	r2, r3, #42	@ 0x2a
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	615a      	str	r2, [r3, #20]
}
 8000904:	bf00      	nop
 8000906:	370c      	adds	r7, #12
 8000908:	46bd      	mov	sp, r7
 800090a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800090e:	4770      	bx	lr

08000910 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 8000910:	b480      	push	{r7}
 8000912:	b08b      	sub	sp, #44	@ 0x2c
 8000914:	af00      	add	r7, sp, #0
 8000916:	60f8      	str	r0, [r7, #12]
 8000918:	60b9      	str	r1, [r7, #8]
 800091a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 800091c:	68fb      	ldr	r3, [r7, #12]
 800091e:	681a      	ldr	r2, [r3, #0]
 8000920:	68bb      	ldr	r3, [r7, #8]
 8000922:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000924:	697b      	ldr	r3, [r7, #20]
 8000926:	fa93 f3a3 	rbit	r3, r3
 800092a:	613b      	str	r3, [r7, #16]
  return result;
 800092c:	693b      	ldr	r3, [r7, #16]
 800092e:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8000930:	69bb      	ldr	r3, [r7, #24]
 8000932:	2b00      	cmp	r3, #0
 8000934:	d101      	bne.n	800093a <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 8000936:	2320      	movs	r3, #32
 8000938:	e003      	b.n	8000942 <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 800093a:	69bb      	ldr	r3, [r7, #24]
 800093c:	fab3 f383 	clz	r3, r3
 8000940:	b2db      	uxtb	r3, r3
 8000942:	005b      	lsls	r3, r3, #1
 8000944:	2103      	movs	r1, #3
 8000946:	fa01 f303 	lsl.w	r3, r1, r3
 800094a:	43db      	mvns	r3, r3
 800094c:	401a      	ands	r2, r3
 800094e:	68bb      	ldr	r3, [r7, #8]
 8000950:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000952:	6a3b      	ldr	r3, [r7, #32]
 8000954:	fa93 f3a3 	rbit	r3, r3
 8000958:	61fb      	str	r3, [r7, #28]
  return result;
 800095a:	69fb      	ldr	r3, [r7, #28]
 800095c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 800095e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000960:	2b00      	cmp	r3, #0
 8000962:	d101      	bne.n	8000968 <LL_GPIO_SetPinMode+0x58>
    return 32U;
 8000964:	2320      	movs	r3, #32
 8000966:	e003      	b.n	8000970 <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 8000968:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800096a:	fab3 f383 	clz	r3, r3
 800096e:	b2db      	uxtb	r3, r3
 8000970:	005b      	lsls	r3, r3, #1
 8000972:	6879      	ldr	r1, [r7, #4]
 8000974:	fa01 f303 	lsl.w	r3, r1, r3
 8000978:	431a      	orrs	r2, r3
 800097a:	68fb      	ldr	r3, [r7, #12]
 800097c:	601a      	str	r2, [r3, #0]
}
 800097e:	bf00      	nop
 8000980:	372c      	adds	r7, #44	@ 0x2c
 8000982:	46bd      	mov	sp, r7
 8000984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000988:	4770      	bx	lr

0800098a <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 800098a:	b480      	push	{r7}
 800098c:	b08b      	sub	sp, #44	@ 0x2c
 800098e:	af00      	add	r7, sp, #0
 8000990:	60f8      	str	r0, [r7, #12]
 8000992:	60b9      	str	r1, [r7, #8]
 8000994:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8000996:	68fb      	ldr	r3, [r7, #12]
 8000998:	68da      	ldr	r2, [r3, #12]
 800099a:	68bb      	ldr	r3, [r7, #8]
 800099c:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800099e:	697b      	ldr	r3, [r7, #20]
 80009a0:	fa93 f3a3 	rbit	r3, r3
 80009a4:	613b      	str	r3, [r7, #16]
  return result;
 80009a6:	693b      	ldr	r3, [r7, #16]
 80009a8:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80009aa:	69bb      	ldr	r3, [r7, #24]
 80009ac:	2b00      	cmp	r3, #0
 80009ae:	d101      	bne.n	80009b4 <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 80009b0:	2320      	movs	r3, #32
 80009b2:	e003      	b.n	80009bc <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 80009b4:	69bb      	ldr	r3, [r7, #24]
 80009b6:	fab3 f383 	clz	r3, r3
 80009ba:	b2db      	uxtb	r3, r3
 80009bc:	005b      	lsls	r3, r3, #1
 80009be:	2103      	movs	r1, #3
 80009c0:	fa01 f303 	lsl.w	r3, r1, r3
 80009c4:	43db      	mvns	r3, r3
 80009c6:	401a      	ands	r2, r3
 80009c8:	68bb      	ldr	r3, [r7, #8]
 80009ca:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80009cc:	6a3b      	ldr	r3, [r7, #32]
 80009ce:	fa93 f3a3 	rbit	r3, r3
 80009d2:	61fb      	str	r3, [r7, #28]
  return result;
 80009d4:	69fb      	ldr	r3, [r7, #28]
 80009d6:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 80009d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80009da:	2b00      	cmp	r3, #0
 80009dc:	d101      	bne.n	80009e2 <LL_GPIO_SetPinPull+0x58>
    return 32U;
 80009de:	2320      	movs	r3, #32
 80009e0:	e003      	b.n	80009ea <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 80009e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80009e4:	fab3 f383 	clz	r3, r3
 80009e8:	b2db      	uxtb	r3, r3
 80009ea:	005b      	lsls	r3, r3, #1
 80009ec:	6879      	ldr	r1, [r7, #4]
 80009ee:	fa01 f303 	lsl.w	r3, r1, r3
 80009f2:	431a      	orrs	r2, r3
 80009f4:	68fb      	ldr	r3, [r7, #12]
 80009f6:	60da      	str	r2, [r3, #12]
}
 80009f8:	bf00      	nop
 80009fa:	372c      	adds	r7, #44	@ 0x2c
 80009fc:	46bd      	mov	sp, r7
 80009fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a02:	4770      	bx	lr

08000a04 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000a04:	b480      	push	{r7}
 8000a06:	b083      	sub	sp, #12
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	6078      	str	r0, [r7, #4]
 8000a0c:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8000a0e:	683b      	ldr	r3, [r7, #0]
 8000a10:	041a      	lsls	r2, r3, #16
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	619a      	str	r2, [r3, #24]
}
 8000a16:	bf00      	nop
 8000a18:	370c      	adds	r7, #12
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a20:	4770      	bx	lr
	...

08000a24 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000a24:	b580      	push	{r7, lr}
 8000a26:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
 8000a28:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8000a2c:	f7ff feb2 	bl	8000794 <LL_APB2_GRP1_EnableClock>
	LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 8000a30:	f04f 5080 	mov.w	r0, #268435456	@ 0x10000000
 8000a34:	f7ff fe96 	bl	8000764 <LL_APB1_GRP1_EnableClock>

	/* System interrupt init*/
	NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a38:	2003      	movs	r0, #3
 8000a3a:	f7ff fd61 	bl	8000500 <__NVIC_SetPriorityGrouping>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000a3e:	f000 f821 	bl	8000a84 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000a42:	f000 f8bf 	bl	8000bc4 <MX_GPIO_Init>
	MX_USART2_UART_Init();
 8000a46:	f000 f86d 	bl	8000b24 <MX_USART2_UART_Init>
	/* USER CODE BEGIN 2 */
	LL_GPIO_WriteReg(GPIOA, ODR, 0x00);
 8000a4a:	4b0c      	ldr	r3, [pc, #48]	@ (8000a7c <main+0x58>)
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	615a      	str	r2, [r3, #20]
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {

		// If button is not pressed (USER BUTTON is active-low)
		if ((LL_GPIO_ReadReg(GPIOC, IDR) & 0x02000) == 0x02000) {
 8000a50:	4b0b      	ldr	r3, [pc, #44]	@ (8000a80 <main+0x5c>)
 8000a52:	691b      	ldr	r3, [r3, #16]
 8000a54:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000a58:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000a5c:	d106      	bne.n	8000a6c <main+0x48>
			LL_GPIO_WriteReg(GPIOA, ODR, (LL_GPIO_ReadReg(GPIOA, ODR) & 0xFFFFFFDF));
 8000a5e:	4b07      	ldr	r3, [pc, #28]	@ (8000a7c <main+0x58>)
 8000a60:	695b      	ldr	r3, [r3, #20]
 8000a62:	4a06      	ldr	r2, [pc, #24]	@ (8000a7c <main+0x58>)
 8000a64:	f023 0320 	bic.w	r3, r3, #32
 8000a68:	6153      	str	r3, [r2, #20]
 8000a6a:	e7f1      	b.n	8000a50 <main+0x2c>

		}
		else{

			LL_GPIO_WriteReg(GPIOA, ODR, (LL_GPIO_ReadReg(GPIOA, ODR) | 0x020));
 8000a6c:	4b03      	ldr	r3, [pc, #12]	@ (8000a7c <main+0x58>)
 8000a6e:	695b      	ldr	r3, [r3, #20]
 8000a70:	4a02      	ldr	r2, [pc, #8]	@ (8000a7c <main+0x58>)
 8000a72:	f043 0320 	orr.w	r3, r3, #32
 8000a76:	6153      	str	r3, [r2, #20]
		if ((LL_GPIO_ReadReg(GPIOC, IDR) & 0x02000) == 0x02000) {
 8000a78:	e7ea      	b.n	8000a50 <main+0x2c>
 8000a7a:	bf00      	nop
 8000a7c:	40020000 	.word	0x40020000
 8000a80:	40020800 	.word	0x40020800

08000a84 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000a84:	b580      	push	{r7, lr}
 8000a86:	af00      	add	r7, sp, #0
	LL_FLASH_SetLatency(LL_FLASH_LATENCY_2);
 8000a88:	2002      	movs	r0, #2
 8000a8a:	f7ff fed1 	bl	8000830 <LL_FLASH_SetLatency>
	while (LL_FLASH_GetLatency() != LL_FLASH_LATENCY_2) {
 8000a8e:	bf00      	nop
 8000a90:	f7ff fee2 	bl	8000858 <LL_FLASH_GetLatency>
 8000a94:	4603      	mov	r3, r0
 8000a96:	2b02      	cmp	r3, #2
 8000a98:	d1fa      	bne.n	8000a90 <SystemClock_Config+0xc>
	}
	LL_PWR_SetRegulVoltageScaling(LL_PWR_REGU_VOLTAGE_SCALE2);
 8000a9a:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8000a9e:	f7ff fee9 	bl	8000874 <LL_PWR_SetRegulVoltageScaling>
	LL_RCC_HSI_SetCalibTrimming(16);
 8000aa2:	2010      	movs	r0, #16
 8000aa4:	f7ff fd72 	bl	800058c <LL_RCC_HSI_SetCalibTrimming>
	LL_RCC_HSI_Enable();
 8000aa8:	f7ff fd4e 	bl	8000548 <LL_RCC_HSI_Enable>

	/* Wait till HSI is ready */
	while (LL_RCC_HSI_IsReady() != 1) {
 8000aac:	bf00      	nop
 8000aae:	f7ff fd5b 	bl	8000568 <LL_RCC_HSI_IsReady>
 8000ab2:	4603      	mov	r3, r0
 8000ab4:	2b01      	cmp	r3, #1
 8000ab6:	d1fa      	bne.n	8000aae <SystemClock_Config+0x2a>

	}
	LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSI, LL_RCC_PLLM_DIV_16, 336,
 8000ab8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000abc:	f44f 72a8 	mov.w	r2, #336	@ 0x150
 8000ac0:	2110      	movs	r1, #16
 8000ac2:	2000      	movs	r0, #0
 8000ac4:	f7ff fe10 	bl	80006e8 <LL_RCC_PLL_ConfigDomain_SYS>
			LL_RCC_PLLP_DIV_4);
	LL_RCC_PLL_Enable();
 8000ac8:	f7ff fdea 	bl	80006a0 <LL_RCC_PLL_Enable>

	/* Wait till PLL is ready */
	while (LL_RCC_PLL_IsReady() != 1) {
 8000acc:	bf00      	nop
 8000ace:	f7ff fdf7 	bl	80006c0 <LL_RCC_PLL_IsReady>
 8000ad2:	4603      	mov	r3, r0
 8000ad4:	2b01      	cmp	r3, #1
 8000ad6:	d1fa      	bne.n	8000ace <SystemClock_Config+0x4a>

	}
	while (LL_PWR_IsActiveFlag_VOS() == 0) {
 8000ad8:	bf00      	nop
 8000ada:	f7ff fedf 	bl	800089c <LL_PWR_IsActiveFlag_VOS>
 8000ade:	4603      	mov	r3, r0
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	d0fa      	beq.n	8000ada <SystemClock_Config+0x56>
	}
	LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 8000ae4:	2000      	movs	r0, #0
 8000ae6:	f7ff fd89 	bl	80005fc <LL_RCC_SetAHBPrescaler>
	LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_2);
 8000aea:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8000aee:	f7ff fd99 	bl	8000624 <LL_RCC_SetAPB1Prescaler>
	LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);
 8000af2:	2000      	movs	r0, #0
 8000af4:	f7ff fdaa 	bl	800064c <LL_RCC_SetAPB2Prescaler>
	LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
 8000af8:	2002      	movs	r0, #2
 8000afa:	f7ff fd5d 	bl	80005b8 <LL_RCC_SetSysClkSource>

	/* Wait till System clock is ready */
	while (LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL) {
 8000afe:	bf00      	nop
 8000b00:	f7ff fd6e 	bl	80005e0 <LL_RCC_GetSysClkSource>
 8000b04:	4603      	mov	r3, r0
 8000b06:	2b08      	cmp	r3, #8
 8000b08:	d1fa      	bne.n	8000b00 <SystemClock_Config+0x7c>

	}
	LL_Init1msTick(84000000);
 8000b0a:	4805      	ldr	r0, [pc, #20]	@ (8000b20 <SystemClock_Config+0x9c>)
 8000b0c:	f001 f822 	bl	8001b54 <LL_Init1msTick>
	LL_SetSystemCoreClock(84000000);
 8000b10:	4803      	ldr	r0, [pc, #12]	@ (8000b20 <SystemClock_Config+0x9c>)
 8000b12:	f001 f82d 	bl	8001b70 <LL_SetSystemCoreClock>
	LL_RCC_SetTIMPrescaler(LL_RCC_TIM_PRESCALER_TWICE);
 8000b16:	2000      	movs	r0, #0
 8000b18:	f7ff fdac 	bl	8000674 <LL_RCC_SetTIMPrescaler>
}
 8000b1c:	bf00      	nop
 8000b1e:	bd80      	pop	{r7, pc}
 8000b20:	0501bd00 	.word	0x0501bd00

08000b24 <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 8000b24:	b580      	push	{r7, lr}
 8000b26:	b08e      	sub	sp, #56	@ 0x38
 8000b28:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN USART2_Init 0 */

	/* USER CODE END USART2_Init 0 */

	LL_USART_InitTypeDef USART_InitStruct = { 0 };
 8000b2a:	f107 031c 	add.w	r3, r7, #28
 8000b2e:	2200      	movs	r2, #0
 8000b30:	601a      	str	r2, [r3, #0]
 8000b32:	605a      	str	r2, [r3, #4]
 8000b34:	609a      	str	r2, [r3, #8]
 8000b36:	60da      	str	r2, [r3, #12]
 8000b38:	611a      	str	r2, [r3, #16]
 8000b3a:	615a      	str	r2, [r3, #20]
 8000b3c:	619a      	str	r2, [r3, #24]

	LL_GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000b3e:	1d3b      	adds	r3, r7, #4
 8000b40:	2200      	movs	r2, #0
 8000b42:	601a      	str	r2, [r3, #0]
 8000b44:	605a      	str	r2, [r3, #4]
 8000b46:	609a      	str	r2, [r3, #8]
 8000b48:	60da      	str	r2, [r3, #12]
 8000b4a:	611a      	str	r2, [r3, #16]
 8000b4c:	615a      	str	r2, [r3, #20]

	/* Peripheral clock enable */
	LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART2);
 8000b4e:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 8000b52:	f7ff fe07 	bl	8000764 <LL_APB1_GRP1_EnableClock>

	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8000b56:	2001      	movs	r0, #1
 8000b58:	f7ff fdec 	bl	8000734 <LL_AHB1_GRP1_EnableClock>
	/**USART2 GPIO Configuration
	 PA2   ------> USART2_TX
	 PA3   ------> USART2_RX
	 */
	GPIO_InitStruct.Pin = USART_TX_Pin | USART_RX_Pin;
 8000b5c:	230c      	movs	r3, #12
 8000b5e:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000b60:	2302      	movs	r3, #2
 8000b62:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000b64:	2300      	movs	r3, #0
 8000b66:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000b68:	2300      	movs	r3, #0
 8000b6a:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 8000b70:	2307      	movs	r3, #7
 8000b72:	61bb      	str	r3, [r7, #24]
	LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b74:	1d3b      	adds	r3, r7, #4
 8000b76:	4619      	mov	r1, r3
 8000b78:	4810      	ldr	r0, [pc, #64]	@ (8000bbc <MX_USART2_UART_Init+0x98>)
 8000b7a:	f000 fb49 	bl	8001210 <LL_GPIO_Init>

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	USART_InitStruct.BaudRate = 115200;
 8000b7e:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 8000b82:	61fb      	str	r3, [r7, #28]
	USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8000b84:	2300      	movs	r3, #0
 8000b86:	623b      	str	r3, [r7, #32]
	USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8000b88:	2300      	movs	r3, #0
 8000b8a:	627b      	str	r3, [r7, #36]	@ 0x24
	USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	62bb      	str	r3, [r7, #40]	@ 0x28
	USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8000b90:	230c      	movs	r3, #12
 8000b92:	62fb      	str	r3, [r7, #44]	@ 0x2c
	USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8000b94:	2300      	movs	r3, #0
 8000b96:	633b      	str	r3, [r7, #48]	@ 0x30
	USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8000b98:	2300      	movs	r3, #0
 8000b9a:	637b      	str	r3, [r7, #52]	@ 0x34
	LL_USART_Init(USART2, &USART_InitStruct);
 8000b9c:	f107 031c 	add.w	r3, r7, #28
 8000ba0:	4619      	mov	r1, r3
 8000ba2:	4807      	ldr	r0, [pc, #28]	@ (8000bc0 <MX_USART2_UART_Init+0x9c>)
 8000ba4:	f000 ff58 	bl	8001a58 <LL_USART_Init>
	LL_USART_ConfigAsyncMode(USART2);
 8000ba8:	4805      	ldr	r0, [pc, #20]	@ (8000bc0 <MX_USART2_UART_Init+0x9c>)
 8000baa:	f7ff fe9b 	bl	80008e4 <LL_USART_ConfigAsyncMode>
	LL_USART_Enable(USART2);
 8000bae:	4804      	ldr	r0, [pc, #16]	@ (8000bc0 <MX_USART2_UART_Init+0x9c>)
 8000bb0:	f7ff fe88 	bl	80008c4 <LL_USART_Enable>
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 8000bb4:	bf00      	nop
 8000bb6:	3738      	adds	r7, #56	@ 0x38
 8000bb8:	46bd      	mov	sp, r7
 8000bba:	bd80      	pop	{r7, pc}
 8000bbc:	40020000 	.word	0x40020000
 8000bc0:	40004400 	.word	0x40004400

08000bc4 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	b088      	sub	sp, #32
 8000bc8:	af00      	add	r7, sp, #0
	LL_EXTI_InitTypeDef EXTI_InitStruct = { 0 };
 8000bca:	f107 0318 	add.w	r3, r7, #24
 8000bce:	2200      	movs	r2, #0
 8000bd0:	601a      	str	r2, [r3, #0]
 8000bd2:	605a      	str	r2, [r3, #4]
	LL_GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000bd4:	463b      	mov	r3, r7
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	601a      	str	r2, [r3, #0]
 8000bda:	605a      	str	r2, [r3, #4]
 8000bdc:	609a      	str	r2, [r3, #8]
 8000bde:	60da      	str	r2, [r3, #12]
 8000be0:	611a      	str	r2, [r3, #16]
 8000be2:	615a      	str	r2, [r3, #20]
	/* USER CODE BEGIN MX_GPIO_Init_1 */

	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 8000be4:	2004      	movs	r0, #4
 8000be6:	f7ff fda5 	bl	8000734 <LL_AHB1_GRP1_EnableClock>
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOH);
 8000bea:	2080      	movs	r0, #128	@ 0x80
 8000bec:	f7ff fda2 	bl	8000734 <LL_AHB1_GRP1_EnableClock>
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8000bf0:	2001      	movs	r0, #1
 8000bf2:	f7ff fd9f 	bl	8000734 <LL_AHB1_GRP1_EnableClock>
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8000bf6:	2002      	movs	r0, #2
 8000bf8:	f7ff fd9c 	bl	8000734 <LL_AHB1_GRP1_EnableClock>

	/**/
	LL_GPIO_ResetOutputPin(LD2_GPIO_Port, LD2_Pin);
 8000bfc:	2120      	movs	r1, #32
 8000bfe:	481a      	ldr	r0, [pc, #104]	@ (8000c68 <MX_GPIO_Init+0xa4>)
 8000c00:	f7ff ff00 	bl	8000a04 <LL_GPIO_ResetOutputPin>

	/**/
	LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTC, LL_SYSCFG_EXTI_LINE13);
 8000c04:	4919      	ldr	r1, [pc, #100]	@ (8000c6c <MX_GPIO_Init+0xa8>)
 8000c06:	2002      	movs	r0, #2
 8000c08:	f7ff fddc 	bl	80007c4 <LL_SYSCFG_SetEXTISource>

	/**/
	EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_13;
 8000c0c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000c10:	61bb      	str	r3, [r7, #24]
	EXTI_InitStruct.LineCommand = ENABLE;
 8000c12:	2301      	movs	r3, #1
 8000c14:	773b      	strb	r3, [r7, #28]
	EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8000c16:	2300      	movs	r3, #0
 8000c18:	777b      	strb	r3, [r7, #29]
	EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 8000c1a:	2302      	movs	r3, #2
 8000c1c:	77bb      	strb	r3, [r7, #30]
	LL_EXTI_Init(&EXTI_InitStruct);
 8000c1e:	f107 0318 	add.w	r3, r7, #24
 8000c22:	4618      	mov	r0, r3
 8000c24:	f000 f92a 	bl	8000e7c <LL_EXTI_Init>

	/**/
	LL_GPIO_SetPinPull(B1_GPIO_Port, B1_Pin, LL_GPIO_PULL_NO);
 8000c28:	2200      	movs	r2, #0
 8000c2a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000c2e:	4810      	ldr	r0, [pc, #64]	@ (8000c70 <MX_GPIO_Init+0xac>)
 8000c30:	f7ff feab 	bl	800098a <LL_GPIO_SetPinPull>

	/**/
	LL_GPIO_SetPinMode(B1_GPIO_Port, B1_Pin, LL_GPIO_MODE_INPUT);
 8000c34:	2200      	movs	r2, #0
 8000c36:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000c3a:	480d      	ldr	r0, [pc, #52]	@ (8000c70 <MX_GPIO_Init+0xac>)
 8000c3c:	f7ff fe68 	bl	8000910 <LL_GPIO_SetPinMode>

	/**/
	GPIO_InitStruct.Pin = LD2_Pin;
 8000c40:	2320      	movs	r3, #32
 8000c42:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000c44:	2301      	movs	r3, #1
 8000c46:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000c48:	2300      	movs	r3, #0
 8000c4a:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000c50:	2300      	movs	r3, #0
 8000c52:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000c54:	463b      	mov	r3, r7
 8000c56:	4619      	mov	r1, r3
 8000c58:	4803      	ldr	r0, [pc, #12]	@ (8000c68 <MX_GPIO_Init+0xa4>)
 8000c5a:	f000 fad9 	bl	8001210 <LL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */

	/* USER CODE END MX_GPIO_Init_2 */
}
 8000c5e:	bf00      	nop
 8000c60:	3720      	adds	r7, #32
 8000c62:	46bd      	mov	sp, r7
 8000c64:	bd80      	pop	{r7, pc}
 8000c66:	bf00      	nop
 8000c68:	40020000 	.word	0x40020000
 8000c6c:	00f00003 	.word	0x00f00003
 8000c70:	40020800 	.word	0x40020800

08000c74 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c74:	b480      	push	{r7}
 8000c76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000c78:	bf00      	nop
 8000c7a:	e7fd      	b.n	8000c78 <NMI_Handler+0x4>

08000c7c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c7c:	b480      	push	{r7}
 8000c7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c80:	bf00      	nop
 8000c82:	e7fd      	b.n	8000c80 <HardFault_Handler+0x4>

08000c84 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c84:	b480      	push	{r7}
 8000c86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c88:	bf00      	nop
 8000c8a:	e7fd      	b.n	8000c88 <MemManage_Handler+0x4>

08000c8c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c90:	bf00      	nop
 8000c92:	e7fd      	b.n	8000c90 <BusFault_Handler+0x4>

08000c94 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c94:	b480      	push	{r7}
 8000c96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c98:	bf00      	nop
 8000c9a:	e7fd      	b.n	8000c98 <UsageFault_Handler+0x4>

08000c9c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ca0:	bf00      	nop
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca8:	4770      	bx	lr

08000caa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000caa:	b480      	push	{r7}
 8000cac:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000cae:	bf00      	nop
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb6:	4770      	bx	lr

08000cb8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000cb8:	b480      	push	{r7}
 8000cba:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000cbc:	bf00      	nop
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc4:	4770      	bx	lr

08000cc6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000cc6:	b480      	push	{r7}
 8000cc8:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000cca:	bf00      	nop
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd2:	4770      	bx	lr

08000cd4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000cd4:	b480      	push	{r7}
 8000cd6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000cd8:	4b06      	ldr	r3, [pc, #24]	@ (8000cf4 <SystemInit+0x20>)
 8000cda:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000cde:	4a05      	ldr	r2, [pc, #20]	@ (8000cf4 <SystemInit+0x20>)
 8000ce0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000ce4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ce8:	bf00      	nop
 8000cea:	46bd      	mov	sp, r7
 8000cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf0:	4770      	bx	lr
 8000cf2:	bf00      	nop
 8000cf4:	e000ed00 	.word	0xe000ed00

08000cf8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000cf8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000d30 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000cfc:	f7ff ffea 	bl	8000cd4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000d00:	480c      	ldr	r0, [pc, #48]	@ (8000d34 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000d02:	490d      	ldr	r1, [pc, #52]	@ (8000d38 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000d04:	4a0d      	ldr	r2, [pc, #52]	@ (8000d3c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000d06:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d08:	e002      	b.n	8000d10 <LoopCopyDataInit>

08000d0a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d0a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d0c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d0e:	3304      	adds	r3, #4

08000d10 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d10:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d12:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d14:	d3f9      	bcc.n	8000d0a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d16:	4a0a      	ldr	r2, [pc, #40]	@ (8000d40 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000d18:	4c0a      	ldr	r4, [pc, #40]	@ (8000d44 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000d1a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d1c:	e001      	b.n	8000d22 <LoopFillZerobss>

08000d1e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d1e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d20:	3204      	adds	r2, #4

08000d22 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d22:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d24:	d3fb      	bcc.n	8000d1e <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8000d26:	f000 ff33 	bl	8001b90 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d2a:	f7ff fe7b 	bl	8000a24 <main>
  bx  lr    
 8000d2e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000d30:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000d34:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d38:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 8000d3c:	08001c18 	.word	0x08001c18
  ldr r2, =_sbss
 8000d40:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 8000d44:	20000020 	.word	0x20000020

08000d48 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d48:	e7fe      	b.n	8000d48 <ADC_IRQHandler>
	...

08000d4c <LL_EXTI_EnableIT_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	b083      	sub	sp, #12
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR, ExtiLine);
 8000d54:	4b05      	ldr	r3, [pc, #20]	@ (8000d6c <LL_EXTI_EnableIT_0_31+0x20>)
 8000d56:	681a      	ldr	r2, [r3, #0]
 8000d58:	4904      	ldr	r1, [pc, #16]	@ (8000d6c <LL_EXTI_EnableIT_0_31+0x20>)
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	4313      	orrs	r3, r2
 8000d5e:	600b      	str	r3, [r1, #0]
}
 8000d60:	bf00      	nop
 8000d62:	370c      	adds	r7, #12
 8000d64:	46bd      	mov	sp, r7
 8000d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6a:	4770      	bx	lr
 8000d6c:	40013c00 	.word	0x40013c00

08000d70 <LL_EXTI_DisableIT_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableIT_0_31(uint32_t ExtiLine)
{
 8000d70:	b480      	push	{r7}
 8000d72:	b083      	sub	sp, #12
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR, ExtiLine);
 8000d78:	4b06      	ldr	r3, [pc, #24]	@ (8000d94 <LL_EXTI_DisableIT_0_31+0x24>)
 8000d7a:	681a      	ldr	r2, [r3, #0]
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	43db      	mvns	r3, r3
 8000d80:	4904      	ldr	r1, [pc, #16]	@ (8000d94 <LL_EXTI_DisableIT_0_31+0x24>)
 8000d82:	4013      	ands	r3, r2
 8000d84:	600b      	str	r3, [r1, #0]
}
 8000d86:	bf00      	nop
 8000d88:	370c      	adds	r7, #12
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d90:	4770      	bx	lr
 8000d92:	bf00      	nop
 8000d94:	40013c00 	.word	0x40013c00

08000d98 <LL_EXTI_EnableEvent_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableEvent_0_31(uint32_t ExtiLine)
{
 8000d98:	b480      	push	{r7}
 8000d9a:	b083      	sub	sp, #12
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR, ExtiLine);
 8000da0:	4b05      	ldr	r3, [pc, #20]	@ (8000db8 <LL_EXTI_EnableEvent_0_31+0x20>)
 8000da2:	685a      	ldr	r2, [r3, #4]
 8000da4:	4904      	ldr	r1, [pc, #16]	@ (8000db8 <LL_EXTI_EnableEvent_0_31+0x20>)
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	4313      	orrs	r3, r2
 8000daa:	604b      	str	r3, [r1, #4]

}
 8000dac:	bf00      	nop
 8000dae:	370c      	adds	r7, #12
 8000db0:	46bd      	mov	sp, r7
 8000db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db6:	4770      	bx	lr
 8000db8:	40013c00 	.word	0x40013c00

08000dbc <LL_EXTI_DisableEvent_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableEvent_0_31(uint32_t ExtiLine)
{
 8000dbc:	b480      	push	{r7}
 8000dbe:	b083      	sub	sp, #12
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR, ExtiLine);
 8000dc4:	4b06      	ldr	r3, [pc, #24]	@ (8000de0 <LL_EXTI_DisableEvent_0_31+0x24>)
 8000dc6:	685a      	ldr	r2, [r3, #4]
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	43db      	mvns	r3, r3
 8000dcc:	4904      	ldr	r1, [pc, #16]	@ (8000de0 <LL_EXTI_DisableEvent_0_31+0x24>)
 8000dce:	4013      	ands	r3, r2
 8000dd0:	604b      	str	r3, [r1, #4]
}
 8000dd2:	bf00      	nop
 8000dd4:	370c      	adds	r7, #12
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ddc:	4770      	bx	lr
 8000dde:	bf00      	nop
 8000de0:	40013c00 	.word	0x40013c00

08000de4 <LL_EXTI_EnableRisingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 8000de4:	b480      	push	{r7}
 8000de6:	b083      	sub	sp, #12
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR, ExtiLine);
 8000dec:	4b05      	ldr	r3, [pc, #20]	@ (8000e04 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8000dee:	689a      	ldr	r2, [r3, #8]
 8000df0:	4904      	ldr	r1, [pc, #16]	@ (8000e04 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	4313      	orrs	r3, r2
 8000df6:	608b      	str	r3, [r1, #8]

}
 8000df8:	bf00      	nop
 8000dfa:	370c      	adds	r7, #12
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e02:	4770      	bx	lr
 8000e04:	40013c00 	.word	0x40013c00

08000e08 <LL_EXTI_DisableRisingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_0_31(uint32_t ExtiLine)
{
 8000e08:	b480      	push	{r7}
 8000e0a:	b083      	sub	sp, #12
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR, ExtiLine);
 8000e10:	4b06      	ldr	r3, [pc, #24]	@ (8000e2c <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8000e12:	689a      	ldr	r2, [r3, #8]
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	43db      	mvns	r3, r3
 8000e18:	4904      	ldr	r1, [pc, #16]	@ (8000e2c <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8000e1a:	4013      	ands	r3, r2
 8000e1c:	608b      	str	r3, [r1, #8]

}
 8000e1e:	bf00      	nop
 8000e20:	370c      	adds	r7, #12
 8000e22:	46bd      	mov	sp, r7
 8000e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e28:	4770      	bx	lr
 8000e2a:	bf00      	nop
 8000e2c:	40013c00 	.word	0x40013c00

08000e30 <LL_EXTI_EnableFallingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_0_31(uint32_t ExtiLine)
{
 8000e30:	b480      	push	{r7}
 8000e32:	b083      	sub	sp, #12
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR, ExtiLine);
 8000e38:	4b05      	ldr	r3, [pc, #20]	@ (8000e50 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8000e3a:	68da      	ldr	r2, [r3, #12]
 8000e3c:	4904      	ldr	r1, [pc, #16]	@ (8000e50 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	4313      	orrs	r3, r2
 8000e42:	60cb      	str	r3, [r1, #12]
}
 8000e44:	bf00      	nop
 8000e46:	370c      	adds	r7, #12
 8000e48:	46bd      	mov	sp, r7
 8000e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4e:	4770      	bx	lr
 8000e50:	40013c00 	.word	0x40013c00

08000e54 <LL_EXTI_DisableFallingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_0_31(uint32_t ExtiLine)
{
 8000e54:	b480      	push	{r7}
 8000e56:	b083      	sub	sp, #12
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR, ExtiLine);
 8000e5c:	4b06      	ldr	r3, [pc, #24]	@ (8000e78 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8000e5e:	68da      	ldr	r2, [r3, #12]
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	43db      	mvns	r3, r3
 8000e64:	4904      	ldr	r1, [pc, #16]	@ (8000e78 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8000e66:	4013      	ands	r3, r2
 8000e68:	60cb      	str	r3, [r1, #12]
}
 8000e6a:	bf00      	nop
 8000e6c:	370c      	adds	r7, #12
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e74:	4770      	bx	lr
 8000e76:	bf00      	nop
 8000e78:	40013c00 	.word	0x40013c00

08000e7c <LL_EXTI_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: EXTI registers are initialized
  *          - ERROR: not applicable
  */
uint32_t LL_EXTI_Init(LL_EXTI_InitTypeDef *EXTI_InitStruct)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b084      	sub	sp, #16
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	6078      	str	r0, [r7, #4]
  ErrorStatus status = SUCCESS;
 8000e84:	2300      	movs	r3, #0
 8000e86:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_EXTI_LINE_0_31(EXTI_InitStruct->Line_0_31));
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->LineCommand));
  assert_param(IS_LL_EXTI_MODE(EXTI_InitStruct->Mode));

  /* ENABLE LineCommand */
  if (EXTI_InitStruct->LineCommand != DISABLE)
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	791b      	ldrb	r3, [r3, #4]
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d065      	beq.n	8000f5c <LL_EXTI_Init+0xe0>
  {
    assert_param(IS_LL_EXTI_TRIGGER(EXTI_InitStruct->Trigger));

    /* Configure EXTI Lines in range from 0 to 31 */
    if (EXTI_InitStruct->Line_0_31 != LL_EXTI_LINE_NONE)
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d06b      	beq.n	8000f70 <LL_EXTI_Init+0xf4>
    {
      switch (EXTI_InitStruct->Mode)
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	795b      	ldrb	r3, [r3, #5]
 8000e9c:	2b02      	cmp	r3, #2
 8000e9e:	d01c      	beq.n	8000eda <LL_EXTI_Init+0x5e>
 8000ea0:	2b02      	cmp	r3, #2
 8000ea2:	dc25      	bgt.n	8000ef0 <LL_EXTI_Init+0x74>
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d002      	beq.n	8000eae <LL_EXTI_Init+0x32>
 8000ea8:	2b01      	cmp	r3, #1
 8000eaa:	d00b      	beq.n	8000ec4 <LL_EXTI_Init+0x48>
 8000eac:	e020      	b.n	8000ef0 <LL_EXTI_Init+0x74>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	f7ff ff82 	bl	8000dbc <LL_EXTI_DisableEvent_0_31>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	4618      	mov	r0, r3
 8000ebe:	f7ff ff45 	bl	8000d4c <LL_EXTI_EnableIT_0_31>
          break;
 8000ec2:	e018      	b.n	8000ef6 <LL_EXTI_Init+0x7a>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	4618      	mov	r0, r3
 8000eca:	f7ff ff51 	bl	8000d70 <LL_EXTI_DisableIT_0_31>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	4618      	mov	r0, r3
 8000ed4:	f7ff ff60 	bl	8000d98 <LL_EXTI_EnableEvent_0_31>
          break;
 8000ed8:	e00d      	b.n	8000ef6 <LL_EXTI_Init+0x7a>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT & Event on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	4618      	mov	r0, r3
 8000ee0:	f7ff ff34 	bl	8000d4c <LL_EXTI_EnableIT_0_31>
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	4618      	mov	r0, r3
 8000eea:	f7ff ff55 	bl	8000d98 <LL_EXTI_EnableEvent_0_31>
          break;
 8000eee:	e002      	b.n	8000ef6 <LL_EXTI_Init+0x7a>
        default:
          status = ERROR;
 8000ef0:	2301      	movs	r3, #1
 8000ef2:	73fb      	strb	r3, [r7, #15]
          break;
 8000ef4:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	799b      	ldrb	r3, [r3, #6]
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d038      	beq.n	8000f70 <LL_EXTI_Init+0xf4>
      {
        switch (EXTI_InitStruct->Trigger)
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	799b      	ldrb	r3, [r3, #6]
 8000f02:	2b03      	cmp	r3, #3
 8000f04:	d01c      	beq.n	8000f40 <LL_EXTI_Init+0xc4>
 8000f06:	2b03      	cmp	r3, #3
 8000f08:	dc25      	bgt.n	8000f56 <LL_EXTI_Init+0xda>
 8000f0a:	2b01      	cmp	r3, #1
 8000f0c:	d002      	beq.n	8000f14 <LL_EXTI_Init+0x98>
 8000f0e:	2b02      	cmp	r3, #2
 8000f10:	d00b      	beq.n	8000f2a <LL_EXTI_Init+0xae>
 8000f12:	e020      	b.n	8000f56 <LL_EXTI_Init+0xda>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	4618      	mov	r0, r3
 8000f1a:	f7ff ff9b 	bl	8000e54 <LL_EXTI_DisableFallingTrig_0_31>
            /* Then Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	4618      	mov	r0, r3
 8000f24:	f7ff ff5e 	bl	8000de4 <LL_EXTI_EnableRisingTrig_0_31>
            break;
 8000f28:	e022      	b.n	8000f70 <LL_EXTI_Init+0xf4>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	4618      	mov	r0, r3
 8000f30:	f7ff ff6a 	bl	8000e08 <LL_EXTI_DisableRisingTrig_0_31>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	4618      	mov	r0, r3
 8000f3a:	f7ff ff79 	bl	8000e30 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 8000f3e:	e017      	b.n	8000f70 <LL_EXTI_Init+0xf4>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	4618      	mov	r0, r3
 8000f46:	f7ff ff4d 	bl	8000de4 <LL_EXTI_EnableRisingTrig_0_31>
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	4618      	mov	r0, r3
 8000f50:	f7ff ff6e 	bl	8000e30 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 8000f54:	e00c      	b.n	8000f70 <LL_EXTI_Init+0xf4>
          default:
            status = ERROR;
 8000f56:	2301      	movs	r3, #1
 8000f58:	73fb      	strb	r3, [r7, #15]
            break;
 8000f5a:	e009      	b.n	8000f70 <LL_EXTI_Init+0xf4>
  }
  /* DISABLE LineCommand */
  else
  {
    /* De-configure EXTI Lines in range from 0 to 31 */
    LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	4618      	mov	r0, r3
 8000f62:	f7ff ff05 	bl	8000d70 <LL_EXTI_DisableIT_0_31>
    LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	f7ff ff26 	bl	8000dbc <LL_EXTI_DisableEvent_0_31>
  }
  return status;
 8000f70:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f72:	4618      	mov	r0, r3
 8000f74:	3710      	adds	r7, #16
 8000f76:	46bd      	mov	sp, r7
 8000f78:	bd80      	pop	{r7, pc}

08000f7a <LL_GPIO_SetPinMode>:
{
 8000f7a:	b480      	push	{r7}
 8000f7c:	b08b      	sub	sp, #44	@ 0x2c
 8000f7e:	af00      	add	r7, sp, #0
 8000f80:	60f8      	str	r0, [r7, #12]
 8000f82:	60b9      	str	r1, [r7, #8]
 8000f84:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8000f86:	68fb      	ldr	r3, [r7, #12]
 8000f88:	681a      	ldr	r2, [r3, #0]
 8000f8a:	68bb      	ldr	r3, [r7, #8]
 8000f8c:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f8e:	697b      	ldr	r3, [r7, #20]
 8000f90:	fa93 f3a3 	rbit	r3, r3
 8000f94:	613b      	str	r3, [r7, #16]
  return result;
 8000f96:	693b      	ldr	r3, [r7, #16]
 8000f98:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8000f9a:	69bb      	ldr	r3, [r7, #24]
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d101      	bne.n	8000fa4 <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 8000fa0:	2320      	movs	r3, #32
 8000fa2:	e003      	b.n	8000fac <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 8000fa4:	69bb      	ldr	r3, [r7, #24]
 8000fa6:	fab3 f383 	clz	r3, r3
 8000faa:	b2db      	uxtb	r3, r3
 8000fac:	005b      	lsls	r3, r3, #1
 8000fae:	2103      	movs	r1, #3
 8000fb0:	fa01 f303 	lsl.w	r3, r1, r3
 8000fb4:	43db      	mvns	r3, r3
 8000fb6:	401a      	ands	r2, r3
 8000fb8:	68bb      	ldr	r3, [r7, #8]
 8000fba:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000fbc:	6a3b      	ldr	r3, [r7, #32]
 8000fbe:	fa93 f3a3 	rbit	r3, r3
 8000fc2:	61fb      	str	r3, [r7, #28]
  return result;
 8000fc4:	69fb      	ldr	r3, [r7, #28]
 8000fc6:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8000fc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d101      	bne.n	8000fd2 <LL_GPIO_SetPinMode+0x58>
    return 32U;
 8000fce:	2320      	movs	r3, #32
 8000fd0:	e003      	b.n	8000fda <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 8000fd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000fd4:	fab3 f383 	clz	r3, r3
 8000fd8:	b2db      	uxtb	r3, r3
 8000fda:	005b      	lsls	r3, r3, #1
 8000fdc:	6879      	ldr	r1, [r7, #4]
 8000fde:	fa01 f303 	lsl.w	r3, r1, r3
 8000fe2:	431a      	orrs	r2, r3
 8000fe4:	68fb      	ldr	r3, [r7, #12]
 8000fe6:	601a      	str	r2, [r3, #0]
}
 8000fe8:	bf00      	nop
 8000fea:	372c      	adds	r7, #44	@ 0x2c
 8000fec:	46bd      	mov	sp, r7
 8000fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff2:	4770      	bx	lr

08000ff4 <LL_GPIO_SetPinOutputType>:
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	b085      	sub	sp, #20
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	60f8      	str	r0, [r7, #12]
 8000ffc:	60b9      	str	r1, [r7, #8]
 8000ffe:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8001000:	68fb      	ldr	r3, [r7, #12]
 8001002:	685a      	ldr	r2, [r3, #4]
 8001004:	68bb      	ldr	r3, [r7, #8]
 8001006:	43db      	mvns	r3, r3
 8001008:	401a      	ands	r2, r3
 800100a:	68bb      	ldr	r3, [r7, #8]
 800100c:	6879      	ldr	r1, [r7, #4]
 800100e:	fb01 f303 	mul.w	r3, r1, r3
 8001012:	431a      	orrs	r2, r3
 8001014:	68fb      	ldr	r3, [r7, #12]
 8001016:	605a      	str	r2, [r3, #4]
}
 8001018:	bf00      	nop
 800101a:	3714      	adds	r7, #20
 800101c:	46bd      	mov	sp, r7
 800101e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001022:	4770      	bx	lr

08001024 <LL_GPIO_SetPinSpeed>:
{
 8001024:	b480      	push	{r7}
 8001026:	b08b      	sub	sp, #44	@ 0x2c
 8001028:	af00      	add	r7, sp, #0
 800102a:	60f8      	str	r0, [r7, #12]
 800102c:	60b9      	str	r1, [r7, #8]
 800102e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 8001030:	68fb      	ldr	r3, [r7, #12]
 8001032:	689a      	ldr	r2, [r3, #8]
 8001034:	68bb      	ldr	r3, [r7, #8]
 8001036:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001038:	697b      	ldr	r3, [r7, #20]
 800103a:	fa93 f3a3 	rbit	r3, r3
 800103e:	613b      	str	r3, [r7, #16]
  return result;
 8001040:	693b      	ldr	r3, [r7, #16]
 8001042:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8001044:	69bb      	ldr	r3, [r7, #24]
 8001046:	2b00      	cmp	r3, #0
 8001048:	d101      	bne.n	800104e <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 800104a:	2320      	movs	r3, #32
 800104c:	e003      	b.n	8001056 <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 800104e:	69bb      	ldr	r3, [r7, #24]
 8001050:	fab3 f383 	clz	r3, r3
 8001054:	b2db      	uxtb	r3, r3
 8001056:	005b      	lsls	r3, r3, #1
 8001058:	2103      	movs	r1, #3
 800105a:	fa01 f303 	lsl.w	r3, r1, r3
 800105e:	43db      	mvns	r3, r3
 8001060:	401a      	ands	r2, r3
 8001062:	68bb      	ldr	r3, [r7, #8]
 8001064:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001066:	6a3b      	ldr	r3, [r7, #32]
 8001068:	fa93 f3a3 	rbit	r3, r3
 800106c:	61fb      	str	r3, [r7, #28]
  return result;
 800106e:	69fb      	ldr	r3, [r7, #28]
 8001070:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8001072:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001074:	2b00      	cmp	r3, #0
 8001076:	d101      	bne.n	800107c <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 8001078:	2320      	movs	r3, #32
 800107a:	e003      	b.n	8001084 <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 800107c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800107e:	fab3 f383 	clz	r3, r3
 8001082:	b2db      	uxtb	r3, r3
 8001084:	005b      	lsls	r3, r3, #1
 8001086:	6879      	ldr	r1, [r7, #4]
 8001088:	fa01 f303 	lsl.w	r3, r1, r3
 800108c:	431a      	orrs	r2, r3
 800108e:	68fb      	ldr	r3, [r7, #12]
 8001090:	609a      	str	r2, [r3, #8]
}
 8001092:	bf00      	nop
 8001094:	372c      	adds	r7, #44	@ 0x2c
 8001096:	46bd      	mov	sp, r7
 8001098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109c:	4770      	bx	lr

0800109e <LL_GPIO_SetPinPull>:
{
 800109e:	b480      	push	{r7}
 80010a0:	b08b      	sub	sp, #44	@ 0x2c
 80010a2:	af00      	add	r7, sp, #0
 80010a4:	60f8      	str	r0, [r7, #12]
 80010a6:	60b9      	str	r1, [r7, #8]
 80010a8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 80010aa:	68fb      	ldr	r3, [r7, #12]
 80010ac:	68da      	ldr	r2, [r3, #12]
 80010ae:	68bb      	ldr	r3, [r7, #8]
 80010b0:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010b2:	697b      	ldr	r3, [r7, #20]
 80010b4:	fa93 f3a3 	rbit	r3, r3
 80010b8:	613b      	str	r3, [r7, #16]
  return result;
 80010ba:	693b      	ldr	r3, [r7, #16]
 80010bc:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80010be:	69bb      	ldr	r3, [r7, #24]
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d101      	bne.n	80010c8 <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 80010c4:	2320      	movs	r3, #32
 80010c6:	e003      	b.n	80010d0 <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 80010c8:	69bb      	ldr	r3, [r7, #24]
 80010ca:	fab3 f383 	clz	r3, r3
 80010ce:	b2db      	uxtb	r3, r3
 80010d0:	005b      	lsls	r3, r3, #1
 80010d2:	2103      	movs	r1, #3
 80010d4:	fa01 f303 	lsl.w	r3, r1, r3
 80010d8:	43db      	mvns	r3, r3
 80010da:	401a      	ands	r2, r3
 80010dc:	68bb      	ldr	r3, [r7, #8]
 80010de:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010e0:	6a3b      	ldr	r3, [r7, #32]
 80010e2:	fa93 f3a3 	rbit	r3, r3
 80010e6:	61fb      	str	r3, [r7, #28]
  return result;
 80010e8:	69fb      	ldr	r3, [r7, #28]
 80010ea:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 80010ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d101      	bne.n	80010f6 <LL_GPIO_SetPinPull+0x58>
    return 32U;
 80010f2:	2320      	movs	r3, #32
 80010f4:	e003      	b.n	80010fe <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 80010f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010f8:	fab3 f383 	clz	r3, r3
 80010fc:	b2db      	uxtb	r3, r3
 80010fe:	005b      	lsls	r3, r3, #1
 8001100:	6879      	ldr	r1, [r7, #4]
 8001102:	fa01 f303 	lsl.w	r3, r1, r3
 8001106:	431a      	orrs	r2, r3
 8001108:	68fb      	ldr	r3, [r7, #12]
 800110a:	60da      	str	r2, [r3, #12]
}
 800110c:	bf00      	nop
 800110e:	372c      	adds	r7, #44	@ 0x2c
 8001110:	46bd      	mov	sp, r7
 8001112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001116:	4770      	bx	lr

08001118 <LL_GPIO_SetAFPin_0_7>:
{
 8001118:	b480      	push	{r7}
 800111a:	b08b      	sub	sp, #44	@ 0x2c
 800111c:	af00      	add	r7, sp, #0
 800111e:	60f8      	str	r0, [r7, #12]
 8001120:	60b9      	str	r1, [r7, #8]
 8001122:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 8001124:	68fb      	ldr	r3, [r7, #12]
 8001126:	6a1a      	ldr	r2, [r3, #32]
 8001128:	68bb      	ldr	r3, [r7, #8]
 800112a:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800112c:	697b      	ldr	r3, [r7, #20]
 800112e:	fa93 f3a3 	rbit	r3, r3
 8001132:	613b      	str	r3, [r7, #16]
  return result;
 8001134:	693b      	ldr	r3, [r7, #16]
 8001136:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8001138:	69bb      	ldr	r3, [r7, #24]
 800113a:	2b00      	cmp	r3, #0
 800113c:	d101      	bne.n	8001142 <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 800113e:	2320      	movs	r3, #32
 8001140:	e003      	b.n	800114a <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 8001142:	69bb      	ldr	r3, [r7, #24]
 8001144:	fab3 f383 	clz	r3, r3
 8001148:	b2db      	uxtb	r3, r3
 800114a:	009b      	lsls	r3, r3, #2
 800114c:	210f      	movs	r1, #15
 800114e:	fa01 f303 	lsl.w	r3, r1, r3
 8001152:	43db      	mvns	r3, r3
 8001154:	401a      	ands	r2, r3
 8001156:	68bb      	ldr	r3, [r7, #8]
 8001158:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800115a:	6a3b      	ldr	r3, [r7, #32]
 800115c:	fa93 f3a3 	rbit	r3, r3
 8001160:	61fb      	str	r3, [r7, #28]
  return result;
 8001162:	69fb      	ldr	r3, [r7, #28]
 8001164:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8001166:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001168:	2b00      	cmp	r3, #0
 800116a:	d101      	bne.n	8001170 <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 800116c:	2320      	movs	r3, #32
 800116e:	e003      	b.n	8001178 <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 8001170:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001172:	fab3 f383 	clz	r3, r3
 8001176:	b2db      	uxtb	r3, r3
 8001178:	009b      	lsls	r3, r3, #2
 800117a:	6879      	ldr	r1, [r7, #4]
 800117c:	fa01 f303 	lsl.w	r3, r1, r3
 8001180:	431a      	orrs	r2, r3
 8001182:	68fb      	ldr	r3, [r7, #12]
 8001184:	621a      	str	r2, [r3, #32]
}
 8001186:	bf00      	nop
 8001188:	372c      	adds	r7, #44	@ 0x2c
 800118a:	46bd      	mov	sp, r7
 800118c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001190:	4770      	bx	lr

08001192 <LL_GPIO_SetAFPin_8_15>:
{
 8001192:	b480      	push	{r7}
 8001194:	b08b      	sub	sp, #44	@ 0x2c
 8001196:	af00      	add	r7, sp, #0
 8001198:	60f8      	str	r0, [r7, #12]
 800119a:	60b9      	str	r1, [r7, #8]
 800119c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 800119e:	68fb      	ldr	r3, [r7, #12]
 80011a0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80011a2:	68bb      	ldr	r3, [r7, #8]
 80011a4:	0a1b      	lsrs	r3, r3, #8
 80011a6:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011a8:	697b      	ldr	r3, [r7, #20]
 80011aa:	fa93 f3a3 	rbit	r3, r3
 80011ae:	613b      	str	r3, [r7, #16]
  return result;
 80011b0:	693b      	ldr	r3, [r7, #16]
 80011b2:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80011b4:	69bb      	ldr	r3, [r7, #24]
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d101      	bne.n	80011be <LL_GPIO_SetAFPin_8_15+0x2c>
    return 32U;
 80011ba:	2320      	movs	r3, #32
 80011bc:	e003      	b.n	80011c6 <LL_GPIO_SetAFPin_8_15+0x34>
  return __builtin_clz(value);
 80011be:	69bb      	ldr	r3, [r7, #24]
 80011c0:	fab3 f383 	clz	r3, r3
 80011c4:	b2db      	uxtb	r3, r3
 80011c6:	009b      	lsls	r3, r3, #2
 80011c8:	210f      	movs	r1, #15
 80011ca:	fa01 f303 	lsl.w	r3, r1, r3
 80011ce:	43db      	mvns	r3, r3
 80011d0:	401a      	ands	r2, r3
 80011d2:	68bb      	ldr	r3, [r7, #8]
 80011d4:	0a1b      	lsrs	r3, r3, #8
 80011d6:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011d8:	6a3b      	ldr	r3, [r7, #32]
 80011da:	fa93 f3a3 	rbit	r3, r3
 80011de:	61fb      	str	r3, [r7, #28]
  return result;
 80011e0:	69fb      	ldr	r3, [r7, #28]
 80011e2:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 80011e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d101      	bne.n	80011ee <LL_GPIO_SetAFPin_8_15+0x5c>
    return 32U;
 80011ea:	2320      	movs	r3, #32
 80011ec:	e003      	b.n	80011f6 <LL_GPIO_SetAFPin_8_15+0x64>
  return __builtin_clz(value);
 80011ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80011f0:	fab3 f383 	clz	r3, r3
 80011f4:	b2db      	uxtb	r3, r3
 80011f6:	009b      	lsls	r3, r3, #2
 80011f8:	6879      	ldr	r1, [r7, #4]
 80011fa:	fa01 f303 	lsl.w	r3, r1, r3
 80011fe:	431a      	orrs	r2, r3
 8001200:	68fb      	ldr	r3, [r7, #12]
 8001202:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8001204:	bf00      	nop
 8001206:	372c      	adds	r7, #44	@ 0x2c
 8001208:	46bd      	mov	sp, r7
 800120a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120e:	4770      	bx	lr

08001210 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	b08a      	sub	sp, #40	@ 0x28
 8001214:	af00      	add	r7, sp, #0
 8001216:	6078      	str	r0, [r7, #4]
 8001218:	6039      	str	r1, [r7, #0]
  uint32_t pinpos     = 0x00000000U;
 800121a:	2300      	movs	r3, #0
 800121c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t currentpin = 0x00000000U;
 800121e:	2300      	movs	r3, #0
 8001220:	623b      	str	r3, [r7, #32]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8001222:	683b      	ldr	r3, [r7, #0]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	61bb      	str	r3, [r7, #24]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001228:	69bb      	ldr	r3, [r7, #24]
 800122a:	fa93 f3a3 	rbit	r3, r3
 800122e:	617b      	str	r3, [r7, #20]
  return result;
 8001230:	697b      	ldr	r3, [r7, #20]
 8001232:	61fb      	str	r3, [r7, #28]
  if (value == 0U)
 8001234:	69fb      	ldr	r3, [r7, #28]
 8001236:	2b00      	cmp	r3, #0
 8001238:	d101      	bne.n	800123e <LL_GPIO_Init+0x2e>
    return 32U;
 800123a:	2320      	movs	r3, #32
 800123c:	e003      	b.n	8001246 <LL_GPIO_Init+0x36>
  return __builtin_clz(value);
 800123e:	69fb      	ldr	r3, [r7, #28]
 8001240:	fab3 f383 	clz	r3, r3
 8001244:	b2db      	uxtb	r3, r3
 8001246:	627b      	str	r3, [r7, #36]	@ 0x24
  
  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8001248:	e057      	b.n	80012fa <LL_GPIO_Init+0xea>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 800124a:	683b      	ldr	r3, [r7, #0]
 800124c:	681a      	ldr	r2, [r3, #0]
 800124e:	2101      	movs	r1, #1
 8001250:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001252:	fa01 f303 	lsl.w	r3, r1, r3
 8001256:	4013      	ands	r3, r2
 8001258:	623b      	str	r3, [r7, #32]
    
    if (currentpin)
 800125a:	6a3b      	ldr	r3, [r7, #32]
 800125c:	2b00      	cmp	r3, #0
 800125e:	d049      	beq.n	80012f4 <LL_GPIO_Init+0xe4>
    {
      
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8001260:	683b      	ldr	r3, [r7, #0]
 8001262:	685b      	ldr	r3, [r3, #4]
 8001264:	2b01      	cmp	r3, #1
 8001266:	d003      	beq.n	8001270 <LL_GPIO_Init+0x60>
 8001268:	683b      	ldr	r3, [r7, #0]
 800126a:	685b      	ldr	r3, [r3, #4]
 800126c:	2b02      	cmp	r3, #2
 800126e:	d10d      	bne.n	800128c <LL_GPIO_Init+0x7c>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
        
        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8001270:	683b      	ldr	r3, [r7, #0]
 8001272:	689b      	ldr	r3, [r3, #8]
 8001274:	461a      	mov	r2, r3
 8001276:	6a39      	ldr	r1, [r7, #32]
 8001278:	6878      	ldr	r0, [r7, #4]
 800127a:	f7ff fed3 	bl	8001024 <LL_GPIO_SetPinSpeed>
        
        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));
        
        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 800127e:	683b      	ldr	r3, [r7, #0]
 8001280:	68db      	ldr	r3, [r3, #12]
 8001282:	461a      	mov	r2, r3
 8001284:	6a39      	ldr	r1, [r7, #32]
 8001286:	6878      	ldr	r0, [r7, #4]
 8001288:	f7ff feb4 	bl	8000ff4 <LL_GPIO_SetPinOutputType>
      }
      
      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 800128c:	683b      	ldr	r3, [r7, #0]
 800128e:	691b      	ldr	r3, [r3, #16]
 8001290:	461a      	mov	r2, r3
 8001292:	6a39      	ldr	r1, [r7, #32]
 8001294:	6878      	ldr	r0, [r7, #4]
 8001296:	f7ff ff02 	bl	800109e <LL_GPIO_SetPinPull>
      
      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 800129a:	683b      	ldr	r3, [r7, #0]
 800129c:	685b      	ldr	r3, [r3, #4]
 800129e:	2b02      	cmp	r3, #2
 80012a0:	d121      	bne.n	80012e6 <LL_GPIO_Init+0xd6>
 80012a2:	6a3b      	ldr	r3, [r7, #32]
 80012a4:	60fb      	str	r3, [r7, #12]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012a6:	68fb      	ldr	r3, [r7, #12]
 80012a8:	fa93 f3a3 	rbit	r3, r3
 80012ac:	60bb      	str	r3, [r7, #8]
  return result;
 80012ae:	68bb      	ldr	r3, [r7, #8]
 80012b0:	613b      	str	r3, [r7, #16]
  if (value == 0U)
 80012b2:	693b      	ldr	r3, [r7, #16]
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d101      	bne.n	80012bc <LL_GPIO_Init+0xac>
    return 32U;
 80012b8:	2320      	movs	r3, #32
 80012ba:	e003      	b.n	80012c4 <LL_GPIO_Init+0xb4>
  return __builtin_clz(value);
 80012bc:	693b      	ldr	r3, [r7, #16]
 80012be:	fab3 f383 	clz	r3, r3
 80012c2:	b2db      	uxtb	r3, r3
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));
        
        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 80012c4:	2b07      	cmp	r3, #7
 80012c6:	d807      	bhi.n	80012d8 <LL_GPIO_Init+0xc8>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80012c8:	683b      	ldr	r3, [r7, #0]
 80012ca:	695b      	ldr	r3, [r3, #20]
 80012cc:	461a      	mov	r2, r3
 80012ce:	6a39      	ldr	r1, [r7, #32]
 80012d0:	6878      	ldr	r0, [r7, #4]
 80012d2:	f7ff ff21 	bl	8001118 <LL_GPIO_SetAFPin_0_7>
 80012d6:	e006      	b.n	80012e6 <LL_GPIO_Init+0xd6>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80012d8:	683b      	ldr	r3, [r7, #0]
 80012da:	695b      	ldr	r3, [r3, #20]
 80012dc:	461a      	mov	r2, r3
 80012de:	6a39      	ldr	r1, [r7, #32]
 80012e0:	6878      	ldr	r0, [r7, #4]
 80012e2:	f7ff ff56 	bl	8001192 <LL_GPIO_SetAFPin_8_15>
        }
      }
      
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 80012e6:	683b      	ldr	r3, [r7, #0]
 80012e8:	685b      	ldr	r3, [r3, #4]
 80012ea:	461a      	mov	r2, r3
 80012ec:	6a39      	ldr	r1, [r7, #32]
 80012ee:	6878      	ldr	r0, [r7, #4]
 80012f0:	f7ff fe43 	bl	8000f7a <LL_GPIO_SetPinMode>
    }
    pinpos++;
 80012f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012f6:	3301      	adds	r3, #1
 80012f8:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 80012fa:	683b      	ldr	r3, [r7, #0]
 80012fc:	681a      	ldr	r2, [r3, #0]
 80012fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001300:	fa22 f303 	lsr.w	r3, r2, r3
 8001304:	2b00      	cmp	r3, #0
 8001306:	d1a0      	bne.n	800124a <LL_GPIO_Init+0x3a>
  }

  return (SUCCESS);
 8001308:	2300      	movs	r3, #0
}
 800130a:	4618      	mov	r0, r3
 800130c:	3728      	adds	r7, #40	@ 0x28
 800130e:	46bd      	mov	sp, r7
 8001310:	bd80      	pop	{r7, pc}
	...

08001314 <LL_RCC_GetSysClkSource>:
{
 8001314:	b480      	push	{r7}
 8001316:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8001318:	4b04      	ldr	r3, [pc, #16]	@ (800132c <LL_RCC_GetSysClkSource+0x18>)
 800131a:	689b      	ldr	r3, [r3, #8]
 800131c:	f003 030c 	and.w	r3, r3, #12
}
 8001320:	4618      	mov	r0, r3
 8001322:	46bd      	mov	sp, r7
 8001324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001328:	4770      	bx	lr
 800132a:	bf00      	nop
 800132c:	40023800 	.word	0x40023800

08001330 <LL_RCC_GetAHBPrescaler>:
{
 8001330:	b480      	push	{r7}
 8001332:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8001334:	4b04      	ldr	r3, [pc, #16]	@ (8001348 <LL_RCC_GetAHBPrescaler+0x18>)
 8001336:	689b      	ldr	r3, [r3, #8]
 8001338:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 800133c:	4618      	mov	r0, r3
 800133e:	46bd      	mov	sp, r7
 8001340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001344:	4770      	bx	lr
 8001346:	bf00      	nop
 8001348:	40023800 	.word	0x40023800

0800134c <LL_RCC_GetAPB1Prescaler>:
{
 800134c:	b480      	push	{r7}
 800134e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8001350:	4b04      	ldr	r3, [pc, #16]	@ (8001364 <LL_RCC_GetAPB1Prescaler+0x18>)
 8001352:	689b      	ldr	r3, [r3, #8]
 8001354:	f403 53e0 	and.w	r3, r3, #7168	@ 0x1c00
}
 8001358:	4618      	mov	r0, r3
 800135a:	46bd      	mov	sp, r7
 800135c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001360:	4770      	bx	lr
 8001362:	bf00      	nop
 8001364:	40023800 	.word	0x40023800

08001368 <LL_RCC_GetAPB2Prescaler>:
{
 8001368:	b480      	push	{r7}
 800136a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 800136c:	4b04      	ldr	r3, [pc, #16]	@ (8001380 <LL_RCC_GetAPB2Prescaler+0x18>)
 800136e:	689b      	ldr	r3, [r3, #8]
 8001370:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 8001374:	4618      	mov	r0, r3
 8001376:	46bd      	mov	sp, r7
 8001378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137c:	4770      	bx	lr
 800137e:	bf00      	nop
 8001380:	40023800 	.word	0x40023800

08001384 <LL_RCC_PLL_GetMainSource>:
  * @retval Returned value can be one of the following values:
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8001384:	b480      	push	{r7}
 8001386:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8001388:	4b04      	ldr	r3, [pc, #16]	@ (800139c <LL_RCC_PLL_GetMainSource+0x18>)
 800138a:	685b      	ldr	r3, [r3, #4]
 800138c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
}
 8001390:	4618      	mov	r0, r3
 8001392:	46bd      	mov	sp, r7
 8001394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001398:	4770      	bx	lr
 800139a:	bf00      	nop
 800139c:	40023800 	.word	0x40023800

080013a0 <LL_RCC_PLL_GetN>:
  * @retval Between 50/192(*) and 432
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 80013a0:	b480      	push	{r7}
 80013a2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 80013a4:	4b04      	ldr	r3, [pc, #16]	@ (80013b8 <LL_RCC_PLL_GetN+0x18>)
 80013a6:	685b      	ldr	r3, [r3, #4]
 80013a8:	099b      	lsrs	r3, r3, #6
 80013aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
}
 80013ae:	4618      	mov	r0, r3
 80013b0:	46bd      	mov	sp, r7
 80013b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b6:	4770      	bx	lr
 80013b8:	40023800 	.word	0x40023800

080013bc <LL_RCC_PLL_GetP>:
  *         @arg @ref LL_RCC_PLLP_DIV_4
  *         @arg @ref LL_RCC_PLLP_DIV_6
  *         @arg @ref LL_RCC_PLLP_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetP(void)
{
 80013bc:	b480      	push	{r7}
 80013be:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP));
 80013c0:	4b04      	ldr	r3, [pc, #16]	@ (80013d4 <LL_RCC_PLL_GetP+0x18>)
 80013c2:	685b      	ldr	r3, [r3, #4]
 80013c4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
}
 80013c8:	4618      	mov	r0, r3
 80013ca:	46bd      	mov	sp, r7
 80013cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d0:	4770      	bx	lr
 80013d2:	bf00      	nop
 80013d4:	40023800 	.word	0x40023800

080013d8 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_61
  *         @arg @ref LL_RCC_PLLM_DIV_62
  *         @arg @ref LL_RCC_PLLM_DIV_63
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 80013d8:	b480      	push	{r7}
 80013da:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 80013dc:	4b04      	ldr	r3, [pc, #16]	@ (80013f0 <LL_RCC_PLL_GetDivider+0x18>)
 80013de:	685b      	ldr	r3, [r3, #4]
 80013e0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
}
 80013e4:	4618      	mov	r0, r3
 80013e6:	46bd      	mov	sp, r7
 80013e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ec:	4770      	bx	lr
 80013ee:	bf00      	nop
 80013f0:	40023800 	.word	0x40023800

080013f4 <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b082      	sub	sp, #8
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 80013fc:	f000 f820 	bl	8001440 <RCC_GetSystemClockFreq>
 8001400:	4602      	mov	r2, r0
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	4618      	mov	r0, r3
 800140c:	f000 f840 	bl	8001490 <RCC_GetHCLKClockFreq>
 8001410:	4602      	mov	r2, r0
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	685b      	ldr	r3, [r3, #4]
 800141a:	4618      	mov	r0, r3
 800141c:	f000 f84e 	bl	80014bc <RCC_GetPCLK1ClockFreq>
 8001420:	4602      	mov	r2, r0
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	609a      	str	r2, [r3, #8]

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	685b      	ldr	r3, [r3, #4]
 800142a:	4618      	mov	r0, r3
 800142c:	f000 f85a 	bl	80014e4 <RCC_GetPCLK2ClockFreq>
 8001430:	4602      	mov	r2, r0
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	60da      	str	r2, [r3, #12]
}
 8001436:	bf00      	nop
 8001438:	3708      	adds	r7, #8
 800143a:	46bd      	mov	sp, r7
 800143c:	bd80      	pop	{r7, pc}
	...

08001440 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	b082      	sub	sp, #8
 8001444:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 8001446:	2300      	movs	r3, #0
 8001448:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 800144a:	f7ff ff63 	bl	8001314 <LL_RCC_GetSysClkSource>
 800144e:	4603      	mov	r3, r0
 8001450:	2b08      	cmp	r3, #8
 8001452:	d00c      	beq.n	800146e <RCC_GetSystemClockFreq+0x2e>
 8001454:	2b08      	cmp	r3, #8
 8001456:	d80f      	bhi.n	8001478 <RCC_GetSystemClockFreq+0x38>
 8001458:	2b00      	cmp	r3, #0
 800145a:	d002      	beq.n	8001462 <RCC_GetSystemClockFreq+0x22>
 800145c:	2b04      	cmp	r3, #4
 800145e:	d003      	beq.n	8001468 <RCC_GetSystemClockFreq+0x28>
 8001460:	e00a      	b.n	8001478 <RCC_GetSystemClockFreq+0x38>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 8001462:	4b09      	ldr	r3, [pc, #36]	@ (8001488 <RCC_GetSystemClockFreq+0x48>)
 8001464:	607b      	str	r3, [r7, #4]
      break;
 8001466:	e00a      	b.n	800147e <RCC_GetSystemClockFreq+0x3e>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 8001468:	4b08      	ldr	r3, [pc, #32]	@ (800148c <RCC_GetSystemClockFreq+0x4c>)
 800146a:	607b      	str	r3, [r7, #4]
      break;
 800146c:	e007      	b.n	800147e <RCC_GetSystemClockFreq+0x3e>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLL);
 800146e:	2008      	movs	r0, #8
 8001470:	f000 f84c 	bl	800150c <RCC_PLL_GetFreqDomain_SYS>
 8001474:	6078      	str	r0, [r7, #4]
      break;
 8001476:	e002      	b.n	800147e <RCC_GetSystemClockFreq+0x3e>
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLLR);
      break;
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

    default:
      frequency = HSI_VALUE;
 8001478:	4b03      	ldr	r3, [pc, #12]	@ (8001488 <RCC_GetSystemClockFreq+0x48>)
 800147a:	607b      	str	r3, [r7, #4]
      break;
 800147c:	bf00      	nop
  }

  return frequency;
 800147e:	687b      	ldr	r3, [r7, #4]
}
 8001480:	4618      	mov	r0, r3
 8001482:	3708      	adds	r7, #8
 8001484:	46bd      	mov	sp, r7
 8001486:	bd80      	pop	{r7, pc}
 8001488:	00f42400 	.word	0x00f42400
 800148c:	007a1200 	.word	0x007a1200

08001490 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	b082      	sub	sp, #8
 8001494:	af00      	add	r7, sp, #0
 8001496:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8001498:	f7ff ff4a 	bl	8001330 <LL_RCC_GetAHBPrescaler>
 800149c:	4603      	mov	r3, r0
 800149e:	091b      	lsrs	r3, r3, #4
 80014a0:	f003 030f 	and.w	r3, r3, #15
 80014a4:	4a04      	ldr	r2, [pc, #16]	@ (80014b8 <RCC_GetHCLKClockFreq+0x28>)
 80014a6:	5cd3      	ldrb	r3, [r2, r3]
 80014a8:	461a      	mov	r2, r3
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	40d3      	lsrs	r3, r2
}
 80014ae:	4618      	mov	r0, r3
 80014b0:	3708      	adds	r7, #8
 80014b2:	46bd      	mov	sp, r7
 80014b4:	bd80      	pop	{r7, pc}
 80014b6:	bf00      	nop
 80014b8:	08001bf0 	.word	0x08001bf0

080014bc <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	b082      	sub	sp, #8
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 80014c4:	f7ff ff42 	bl	800134c <LL_RCC_GetAPB1Prescaler>
 80014c8:	4603      	mov	r3, r0
 80014ca:	0a9b      	lsrs	r3, r3, #10
 80014cc:	4a04      	ldr	r2, [pc, #16]	@ (80014e0 <RCC_GetPCLK1ClockFreq+0x24>)
 80014ce:	5cd3      	ldrb	r3, [r2, r3]
 80014d0:	461a      	mov	r2, r3
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	40d3      	lsrs	r3, r2
}
 80014d6:	4618      	mov	r0, r3
 80014d8:	3708      	adds	r7, #8
 80014da:	46bd      	mov	sp, r7
 80014dc:	bd80      	pop	{r7, pc}
 80014de:	bf00      	nop
 80014e0:	08001c00 	.word	0x08001c00

080014e4 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b082      	sub	sp, #8
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 80014ec:	f7ff ff3c 	bl	8001368 <LL_RCC_GetAPB2Prescaler>
 80014f0:	4603      	mov	r3, r0
 80014f2:	0b5b      	lsrs	r3, r3, #13
 80014f4:	4a04      	ldr	r2, [pc, #16]	@ (8001508 <RCC_GetPCLK2ClockFreq+0x24>)
 80014f6:	5cd3      	ldrb	r3, [r2, r3]
 80014f8:	461a      	mov	r2, r3
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	40d3      	lsrs	r3, r2
}
 80014fe:	4618      	mov	r0, r3
 8001500:	3708      	adds	r7, #8
 8001502:	46bd      	mov	sp, r7
 8001504:	bd80      	pop	{r7, pc}
 8001506:	bf00      	nop
 8001508:	08001c00 	.word	0x08001c00

0800150c <RCC_PLL_GetFreqDomain_SYS>:
  * @brief  Return PLL clock frequency used for system domain
  * @param  SYSCLK_Source System clock source
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(uint32_t SYSCLK_Source)
{
 800150c:	b590      	push	{r4, r7, lr}
 800150e:	b087      	sub	sp, #28
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]
  uint32_t pllinputfreq = 0U;
 8001514:	2300      	movs	r3, #0
 8001516:	617b      	str	r3, [r7, #20]
  uint32_t pllsource = 0U;
 8001518:	2300      	movs	r3, #0
 800151a:	60fb      	str	r3, [r7, #12]
  uint32_t plloutputfreq = 0U;
 800151c:	2300      	movs	r3, #0
 800151e:	613b      	str	r3, [r7, #16]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
     SYSCLK = PLL_VCO / (PLLP or PLLR)
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 8001520:	f7ff ff30 	bl	8001384 <LL_RCC_PLL_GetMainSource>
 8001524:	60f8      	str	r0, [r7, #12]

  switch (pllsource)
 8001526:	68fb      	ldr	r3, [r7, #12]
 8001528:	2b00      	cmp	r3, #0
 800152a:	d004      	beq.n	8001536 <RCC_PLL_GetFreqDomain_SYS+0x2a>
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001532:	d003      	beq.n	800153c <RCC_PLL_GetFreqDomain_SYS+0x30>
 8001534:	e005      	b.n	8001542 <RCC_PLL_GetFreqDomain_SYS+0x36>
  {
    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 8001536:	4b12      	ldr	r3, [pc, #72]	@ (8001580 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 8001538:	617b      	str	r3, [r7, #20]
      break;
 800153a:	e005      	b.n	8001548 <RCC_PLL_GetFreqDomain_SYS+0x3c>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 800153c:	4b11      	ldr	r3, [pc, #68]	@ (8001584 <RCC_PLL_GetFreqDomain_SYS+0x78>)
 800153e:	617b      	str	r3, [r7, #20]
      break;
 8001540:	e002      	b.n	8001548 <RCC_PLL_GetFreqDomain_SYS+0x3c>

    default:
      pllinputfreq = HSI_VALUE;
 8001542:	4b0f      	ldr	r3, [pc, #60]	@ (8001580 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 8001544:	617b      	str	r3, [r7, #20]
      break;
 8001546:	bf00      	nop
  }

  if (SYSCLK_Source == LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	2b08      	cmp	r3, #8
 800154c:	d113      	bne.n	8001576 <RCC_PLL_GetFreqDomain_SYS+0x6a>
  {
    plloutputfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 800154e:	f7ff ff43 	bl	80013d8 <LL_RCC_PLL_GetDivider>
 8001552:	4602      	mov	r2, r0
 8001554:	697b      	ldr	r3, [r7, #20]
 8001556:	fbb3 f4f2 	udiv	r4, r3, r2
 800155a:	f7ff ff21 	bl	80013a0 <LL_RCC_PLL_GetN>
 800155e:	4603      	mov	r3, r0
 8001560:	fb03 f404 	mul.w	r4, r3, r4
 8001564:	f7ff ff2a 	bl	80013bc <LL_RCC_PLL_GetP>
 8001568:	4603      	mov	r3, r0
 800156a:	0c1b      	lsrs	r3, r3, #16
 800156c:	3301      	adds	r3, #1
 800156e:	005b      	lsls	r3, r3, #1
 8001570:	fbb4 f3f3 	udiv	r3, r4, r3
 8001574:	613b      	str	r3, [r7, #16]
    plloutputfreq = __LL_RCC_CALC_PLLRCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
                                               LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

  return plloutputfreq;
 8001576:	693b      	ldr	r3, [r7, #16]
}
 8001578:	4618      	mov	r0, r3
 800157a:	371c      	adds	r7, #28
 800157c:	46bd      	mov	sp, r7
 800157e:	bd90      	pop	{r4, r7, pc}
 8001580:	00f42400 	.word	0x00f42400
 8001584:	007a1200 	.word	0x007a1200

08001588 <LL_USART_IsEnabled>:
{
 8001588:	b480      	push	{r7}
 800158a:	b083      	sub	sp, #12
 800158c:	af00      	add	r7, sp, #0
 800158e:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE));
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	68db      	ldr	r3, [r3, #12]
 8001594:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001598:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800159c:	bf0c      	ite	eq
 800159e:	2301      	moveq	r3, #1
 80015a0:	2300      	movne	r3, #0
 80015a2:	b2db      	uxtb	r3, r3
}
 80015a4:	4618      	mov	r0, r3
 80015a6:	370c      	adds	r7, #12
 80015a8:	46bd      	mov	sp, r7
 80015aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ae:	4770      	bx	lr

080015b0 <LL_USART_SetStopBitsLength>:
{
 80015b0:	b480      	push	{r7}
 80015b2:	b083      	sub	sp, #12
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]
 80015b8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	691b      	ldr	r3, [r3, #16]
 80015be:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80015c2:	683b      	ldr	r3, [r7, #0]
 80015c4:	431a      	orrs	r2, r3
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	611a      	str	r2, [r3, #16]
}
 80015ca:	bf00      	nop
 80015cc:	370c      	adds	r7, #12
 80015ce:	46bd      	mov	sp, r7
 80015d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d4:	4770      	bx	lr

080015d6 <LL_USART_SetHWFlowCtrl>:
{
 80015d6:	b480      	push	{r7}
 80015d8:	b083      	sub	sp, #12
 80015da:	af00      	add	r7, sp, #0
 80015dc:	6078      	str	r0, [r7, #4]
 80015de:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	695b      	ldr	r3, [r3, #20]
 80015e4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80015e8:	683b      	ldr	r3, [r7, #0]
 80015ea:	431a      	orrs	r2, r3
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	615a      	str	r2, [r3, #20]
}
 80015f0:	bf00      	nop
 80015f2:	370c      	adds	r7, #12
 80015f4:	46bd      	mov	sp, r7
 80015f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fa:	4770      	bx	lr

080015fc <LL_USART_SetBaudRate>:
{
 80015fc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001600:	b0c0      	sub	sp, #256	@ 0x100
 8001602:	af00      	add	r7, sp, #0
 8001604:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8001608:	f8c7 10f8 	str.w	r1, [r7, #248]	@ 0xf8
 800160c:	f8c7 20f4 	str.w	r2, [r7, #244]	@ 0xf4
 8001610:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 8001614:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001618:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800161c:	f040 810c 	bne.w	8001838 <LL_USART_SetBaudRate+0x23c>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 8001620:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8001624:	2200      	movs	r2, #0
 8001626:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800162a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800162e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8001632:	4622      	mov	r2, r4
 8001634:	462b      	mov	r3, r5
 8001636:	1891      	adds	r1, r2, r2
 8001638:	6639      	str	r1, [r7, #96]	@ 0x60
 800163a:	415b      	adcs	r3, r3
 800163c:	667b      	str	r3, [r7, #100]	@ 0x64
 800163e:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 8001642:	4621      	mov	r1, r4
 8001644:	eb12 0801 	adds.w	r8, r2, r1
 8001648:	4629      	mov	r1, r5
 800164a:	eb43 0901 	adc.w	r9, r3, r1
 800164e:	f04f 0200 	mov.w	r2, #0
 8001652:	f04f 0300 	mov.w	r3, #0
 8001656:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800165a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800165e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001662:	4690      	mov	r8, r2
 8001664:	4699      	mov	r9, r3
 8001666:	4623      	mov	r3, r4
 8001668:	eb18 0303 	adds.w	r3, r8, r3
 800166c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8001670:	462b      	mov	r3, r5
 8001672:	eb49 0303 	adc.w	r3, r9, r3
 8001676:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800167a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800167e:	2200      	movs	r2, #0
 8001680:	469a      	mov	sl, r3
 8001682:	4693      	mov	fp, r2
 8001684:	eb1a 030a 	adds.w	r3, sl, sl
 8001688:	65bb      	str	r3, [r7, #88]	@ 0x58
 800168a:	eb4b 030b 	adc.w	r3, fp, fp
 800168e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8001690:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8001694:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8001698:	f7fe fd9c 	bl	80001d4 <__aeabi_uldivmod>
 800169c:	4602      	mov	r2, r0
 800169e:	460b      	mov	r3, r1
 80016a0:	4b64      	ldr	r3, [pc, #400]	@ (8001834 <LL_USART_SetBaudRate+0x238>)
 80016a2:	fba3 2302 	umull	r2, r3, r3, r2
 80016a6:	095b      	lsrs	r3, r3, #5
 80016a8:	b29b      	uxth	r3, r3
 80016aa:	011b      	lsls	r3, r3, #4
 80016ac:	b29c      	uxth	r4, r3
 80016ae:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80016b2:	2200      	movs	r2, #0
 80016b4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80016b8:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80016bc:	e9d7 8936 	ldrd	r8, r9, [r7, #216]	@ 0xd8
 80016c0:	4642      	mov	r2, r8
 80016c2:	464b      	mov	r3, r9
 80016c4:	1891      	adds	r1, r2, r2
 80016c6:	6539      	str	r1, [r7, #80]	@ 0x50
 80016c8:	415b      	adcs	r3, r3
 80016ca:	657b      	str	r3, [r7, #84]	@ 0x54
 80016cc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80016d0:	4641      	mov	r1, r8
 80016d2:	1851      	adds	r1, r2, r1
 80016d4:	64b9      	str	r1, [r7, #72]	@ 0x48
 80016d6:	4649      	mov	r1, r9
 80016d8:	414b      	adcs	r3, r1
 80016da:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80016dc:	f04f 0200 	mov.w	r2, #0
 80016e0:	f04f 0300 	mov.w	r3, #0
 80016e4:	e9d7 ab12 	ldrd	sl, fp, [r7, #72]	@ 0x48
 80016e8:	4659      	mov	r1, fp
 80016ea:	00cb      	lsls	r3, r1, #3
 80016ec:	4651      	mov	r1, sl
 80016ee:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80016f2:	4651      	mov	r1, sl
 80016f4:	00ca      	lsls	r2, r1, #3
 80016f6:	4610      	mov	r0, r2
 80016f8:	4619      	mov	r1, r3
 80016fa:	4603      	mov	r3, r0
 80016fc:	4642      	mov	r2, r8
 80016fe:	189b      	adds	r3, r3, r2
 8001700:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8001704:	464b      	mov	r3, r9
 8001706:	460a      	mov	r2, r1
 8001708:	eb42 0303 	adc.w	r3, r2, r3
 800170c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8001710:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8001714:	2200      	movs	r2, #0
 8001716:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800171a:	f8c7 20cc 	str.w	r2, [r7, #204]	@ 0xcc
 800171e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8001722:	460b      	mov	r3, r1
 8001724:	18db      	adds	r3, r3, r3
 8001726:	643b      	str	r3, [r7, #64]	@ 0x40
 8001728:	4613      	mov	r3, r2
 800172a:	eb42 0303 	adc.w	r3, r2, r3
 800172e:	647b      	str	r3, [r7, #68]	@ 0x44
 8001730:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8001734:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	@ 0xd0
 8001738:	f7fe fd4c 	bl	80001d4 <__aeabi_uldivmod>
 800173c:	4602      	mov	r2, r0
 800173e:	460b      	mov	r3, r1
 8001740:	4611      	mov	r1, r2
 8001742:	4b3c      	ldr	r3, [pc, #240]	@ (8001834 <LL_USART_SetBaudRate+0x238>)
 8001744:	fba3 2301 	umull	r2, r3, r3, r1
 8001748:	095b      	lsrs	r3, r3, #5
 800174a:	2264      	movs	r2, #100	@ 0x64
 800174c:	fb02 f303 	mul.w	r3, r2, r3
 8001750:	1acb      	subs	r3, r1, r3
 8001752:	00db      	lsls	r3, r3, #3
 8001754:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8001758:	4b36      	ldr	r3, [pc, #216]	@ (8001834 <LL_USART_SetBaudRate+0x238>)
 800175a:	fba3 2302 	umull	r2, r3, r3, r2
 800175e:	095b      	lsrs	r3, r3, #5
 8001760:	b29b      	uxth	r3, r3
 8001762:	005b      	lsls	r3, r3, #1
 8001764:	b29b      	uxth	r3, r3
 8001766:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800176a:	b29b      	uxth	r3, r3
 800176c:	4423      	add	r3, r4
 800176e:	b29c      	uxth	r4, r3
 8001770:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8001774:	2200      	movs	r2, #0
 8001776:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800177a:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800177e:	e9d7 8930 	ldrd	r8, r9, [r7, #192]	@ 0xc0
 8001782:	4642      	mov	r2, r8
 8001784:	464b      	mov	r3, r9
 8001786:	1891      	adds	r1, r2, r2
 8001788:	63b9      	str	r1, [r7, #56]	@ 0x38
 800178a:	415b      	adcs	r3, r3
 800178c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800178e:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8001792:	4641      	mov	r1, r8
 8001794:	1851      	adds	r1, r2, r1
 8001796:	6339      	str	r1, [r7, #48]	@ 0x30
 8001798:	4649      	mov	r1, r9
 800179a:	414b      	adcs	r3, r1
 800179c:	637b      	str	r3, [r7, #52]	@ 0x34
 800179e:	f04f 0200 	mov.w	r2, #0
 80017a2:	f04f 0300 	mov.w	r3, #0
 80017a6:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80017aa:	4659      	mov	r1, fp
 80017ac:	00cb      	lsls	r3, r1, #3
 80017ae:	4651      	mov	r1, sl
 80017b0:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80017b4:	4651      	mov	r1, sl
 80017b6:	00ca      	lsls	r2, r1, #3
 80017b8:	4610      	mov	r0, r2
 80017ba:	4619      	mov	r1, r3
 80017bc:	4603      	mov	r3, r0
 80017be:	4642      	mov	r2, r8
 80017c0:	189b      	adds	r3, r3, r2
 80017c2:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80017c6:	464b      	mov	r3, r9
 80017c8:	460a      	mov	r2, r1
 80017ca:	eb42 0303 	adc.w	r3, r2, r3
 80017ce:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80017d2:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80017d6:	2200      	movs	r2, #0
 80017d8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80017dc:	f8c7 20b4 	str.w	r2, [r7, #180]	@ 0xb4
 80017e0:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 80017e4:	460b      	mov	r3, r1
 80017e6:	18db      	adds	r3, r3, r3
 80017e8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80017ea:	4613      	mov	r3, r2
 80017ec:	eb42 0303 	adc.w	r3, r2, r3
 80017f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80017f2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80017f6:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	@ 0xb8
 80017fa:	f7fe fceb 	bl	80001d4 <__aeabi_uldivmod>
 80017fe:	4602      	mov	r2, r0
 8001800:	460b      	mov	r3, r1
 8001802:	4b0c      	ldr	r3, [pc, #48]	@ (8001834 <LL_USART_SetBaudRate+0x238>)
 8001804:	fba3 1302 	umull	r1, r3, r3, r2
 8001808:	095b      	lsrs	r3, r3, #5
 800180a:	2164      	movs	r1, #100	@ 0x64
 800180c:	fb01 f303 	mul.w	r3, r1, r3
 8001810:	1ad3      	subs	r3, r2, r3
 8001812:	00db      	lsls	r3, r3, #3
 8001814:	3332      	adds	r3, #50	@ 0x32
 8001816:	4a07      	ldr	r2, [pc, #28]	@ (8001834 <LL_USART_SetBaudRate+0x238>)
 8001818:	fba2 2303 	umull	r2, r3, r2, r3
 800181c:	095b      	lsrs	r3, r3, #5
 800181e:	b29b      	uxth	r3, r3
 8001820:	f003 0307 	and.w	r3, r3, #7
 8001824:	b29b      	uxth	r3, r3
 8001826:	4423      	add	r3, r4
 8001828:	b29b      	uxth	r3, r3
 800182a:	461a      	mov	r2, r3
 800182c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8001830:	609a      	str	r2, [r3, #8]
}
 8001832:	e108      	b.n	8001a46 <LL_USART_SetBaudRate+0x44a>
 8001834:	51eb851f 	.word	0x51eb851f
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8001838:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800183c:	2200      	movs	r2, #0
 800183e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8001842:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8001846:	e9d7 892a 	ldrd	r8, r9, [r7, #168]	@ 0xa8
 800184a:	4642      	mov	r2, r8
 800184c:	464b      	mov	r3, r9
 800184e:	1891      	adds	r1, r2, r2
 8001850:	6239      	str	r1, [r7, #32]
 8001852:	415b      	adcs	r3, r3
 8001854:	627b      	str	r3, [r7, #36]	@ 0x24
 8001856:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800185a:	4641      	mov	r1, r8
 800185c:	1854      	adds	r4, r2, r1
 800185e:	4649      	mov	r1, r9
 8001860:	eb43 0501 	adc.w	r5, r3, r1
 8001864:	f04f 0200 	mov.w	r2, #0
 8001868:	f04f 0300 	mov.w	r3, #0
 800186c:	00eb      	lsls	r3, r5, #3
 800186e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001872:	00e2      	lsls	r2, r4, #3
 8001874:	4614      	mov	r4, r2
 8001876:	461d      	mov	r5, r3
 8001878:	4643      	mov	r3, r8
 800187a:	18e3      	adds	r3, r4, r3
 800187c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8001880:	464b      	mov	r3, r9
 8001882:	eb45 0303 	adc.w	r3, r5, r3
 8001886:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800188a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800188e:	2200      	movs	r2, #0
 8001890:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8001894:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8001898:	f04f 0200 	mov.w	r2, #0
 800189c:	f04f 0300 	mov.w	r3, #0
 80018a0:	e9d7 4526 	ldrd	r4, r5, [r7, #152]	@ 0x98
 80018a4:	4629      	mov	r1, r5
 80018a6:	008b      	lsls	r3, r1, #2
 80018a8:	4621      	mov	r1, r4
 80018aa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80018ae:	4621      	mov	r1, r4
 80018b0:	008a      	lsls	r2, r1, #2
 80018b2:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	@ 0xa0
 80018b6:	f7fe fc8d 	bl	80001d4 <__aeabi_uldivmod>
 80018ba:	4602      	mov	r2, r0
 80018bc:	460b      	mov	r3, r1
 80018be:	4b65      	ldr	r3, [pc, #404]	@ (8001a54 <LL_USART_SetBaudRate+0x458>)
 80018c0:	fba3 2302 	umull	r2, r3, r3, r2
 80018c4:	095b      	lsrs	r3, r3, #5
 80018c6:	b29b      	uxth	r3, r3
 80018c8:	011b      	lsls	r3, r3, #4
 80018ca:	b29c      	uxth	r4, r3
 80018cc:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80018d0:	2200      	movs	r2, #0
 80018d2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80018d6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80018da:	e9d7 8924 	ldrd	r8, r9, [r7, #144]	@ 0x90
 80018de:	4642      	mov	r2, r8
 80018e0:	464b      	mov	r3, r9
 80018e2:	1891      	adds	r1, r2, r2
 80018e4:	61b9      	str	r1, [r7, #24]
 80018e6:	415b      	adcs	r3, r3
 80018e8:	61fb      	str	r3, [r7, #28]
 80018ea:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80018ee:	4641      	mov	r1, r8
 80018f0:	1851      	adds	r1, r2, r1
 80018f2:	6139      	str	r1, [r7, #16]
 80018f4:	4649      	mov	r1, r9
 80018f6:	414b      	adcs	r3, r1
 80018f8:	617b      	str	r3, [r7, #20]
 80018fa:	f04f 0200 	mov.w	r2, #0
 80018fe:	f04f 0300 	mov.w	r3, #0
 8001902:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001906:	4659      	mov	r1, fp
 8001908:	00cb      	lsls	r3, r1, #3
 800190a:	4651      	mov	r1, sl
 800190c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001910:	4651      	mov	r1, sl
 8001912:	00ca      	lsls	r2, r1, #3
 8001914:	4610      	mov	r0, r2
 8001916:	4619      	mov	r1, r3
 8001918:	4603      	mov	r3, r0
 800191a:	4642      	mov	r2, r8
 800191c:	189b      	adds	r3, r3, r2
 800191e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8001922:	464b      	mov	r3, r9
 8001924:	460a      	mov	r2, r1
 8001926:	eb42 0303 	adc.w	r3, r2, r3
 800192a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800192e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8001932:	2200      	movs	r2, #0
 8001934:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8001938:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 800193c:	f04f 0200 	mov.w	r2, #0
 8001940:	f04f 0300 	mov.w	r3, #0
 8001944:	e9d7 8920 	ldrd	r8, r9, [r7, #128]	@ 0x80
 8001948:	4649      	mov	r1, r9
 800194a:	008b      	lsls	r3, r1, #2
 800194c:	4641      	mov	r1, r8
 800194e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8001952:	4641      	mov	r1, r8
 8001954:	008a      	lsls	r2, r1, #2
 8001956:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	@ 0x88
 800195a:	f7fe fc3b 	bl	80001d4 <__aeabi_uldivmod>
 800195e:	4602      	mov	r2, r0
 8001960:	460b      	mov	r3, r1
 8001962:	4611      	mov	r1, r2
 8001964:	4b3b      	ldr	r3, [pc, #236]	@ (8001a54 <LL_USART_SetBaudRate+0x458>)
 8001966:	fba3 2301 	umull	r2, r3, r3, r1
 800196a:	095b      	lsrs	r3, r3, #5
 800196c:	2264      	movs	r2, #100	@ 0x64
 800196e:	fb02 f303 	mul.w	r3, r2, r3
 8001972:	1acb      	subs	r3, r1, r3
 8001974:	011b      	lsls	r3, r3, #4
 8001976:	3332      	adds	r3, #50	@ 0x32
 8001978:	4a36      	ldr	r2, [pc, #216]	@ (8001a54 <LL_USART_SetBaudRate+0x458>)
 800197a:	fba2 2303 	umull	r2, r3, r2, r3
 800197e:	095b      	lsrs	r3, r3, #5
 8001980:	b29b      	uxth	r3, r3
 8001982:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001986:	b29b      	uxth	r3, r3
 8001988:	4423      	add	r3, r4
 800198a:	b29c      	uxth	r4, r3
 800198c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8001990:	2200      	movs	r2, #0
 8001992:	67bb      	str	r3, [r7, #120]	@ 0x78
 8001994:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8001996:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800199a:	4642      	mov	r2, r8
 800199c:	464b      	mov	r3, r9
 800199e:	1891      	adds	r1, r2, r2
 80019a0:	60b9      	str	r1, [r7, #8]
 80019a2:	415b      	adcs	r3, r3
 80019a4:	60fb      	str	r3, [r7, #12]
 80019a6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80019aa:	4641      	mov	r1, r8
 80019ac:	1851      	adds	r1, r2, r1
 80019ae:	6039      	str	r1, [r7, #0]
 80019b0:	4649      	mov	r1, r9
 80019b2:	414b      	adcs	r3, r1
 80019b4:	607b      	str	r3, [r7, #4]
 80019b6:	f04f 0200 	mov.w	r2, #0
 80019ba:	f04f 0300 	mov.w	r3, #0
 80019be:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80019c2:	4659      	mov	r1, fp
 80019c4:	00cb      	lsls	r3, r1, #3
 80019c6:	4651      	mov	r1, sl
 80019c8:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80019cc:	4651      	mov	r1, sl
 80019ce:	00ca      	lsls	r2, r1, #3
 80019d0:	4610      	mov	r0, r2
 80019d2:	4619      	mov	r1, r3
 80019d4:	4603      	mov	r3, r0
 80019d6:	4642      	mov	r2, r8
 80019d8:	189b      	adds	r3, r3, r2
 80019da:	673b      	str	r3, [r7, #112]	@ 0x70
 80019dc:	464b      	mov	r3, r9
 80019de:	460a      	mov	r2, r1
 80019e0:	eb42 0303 	adc.w	r3, r2, r3
 80019e4:	677b      	str	r3, [r7, #116]	@ 0x74
 80019e6:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80019ea:	2200      	movs	r2, #0
 80019ec:	66bb      	str	r3, [r7, #104]	@ 0x68
 80019ee:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80019f0:	f04f 0200 	mov.w	r2, #0
 80019f4:	f04f 0300 	mov.w	r3, #0
 80019f8:	e9d7 891a 	ldrd	r8, r9, [r7, #104]	@ 0x68
 80019fc:	4649      	mov	r1, r9
 80019fe:	008b      	lsls	r3, r1, #2
 8001a00:	4641      	mov	r1, r8
 8001a02:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8001a06:	4641      	mov	r1, r8
 8001a08:	008a      	lsls	r2, r1, #2
 8001a0a:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 8001a0e:	f7fe fbe1 	bl	80001d4 <__aeabi_uldivmod>
 8001a12:	4602      	mov	r2, r0
 8001a14:	460b      	mov	r3, r1
 8001a16:	4b0f      	ldr	r3, [pc, #60]	@ (8001a54 <LL_USART_SetBaudRate+0x458>)
 8001a18:	fba3 1302 	umull	r1, r3, r3, r2
 8001a1c:	095b      	lsrs	r3, r3, #5
 8001a1e:	2164      	movs	r1, #100	@ 0x64
 8001a20:	fb01 f303 	mul.w	r3, r1, r3
 8001a24:	1ad3      	subs	r3, r2, r3
 8001a26:	011b      	lsls	r3, r3, #4
 8001a28:	3332      	adds	r3, #50	@ 0x32
 8001a2a:	4a0a      	ldr	r2, [pc, #40]	@ (8001a54 <LL_USART_SetBaudRate+0x458>)
 8001a2c:	fba2 2303 	umull	r2, r3, r2, r3
 8001a30:	095b      	lsrs	r3, r3, #5
 8001a32:	b29b      	uxth	r3, r3
 8001a34:	f003 030f 	and.w	r3, r3, #15
 8001a38:	b29b      	uxth	r3, r3
 8001a3a:	4423      	add	r3, r4
 8001a3c:	b29b      	uxth	r3, r3
 8001a3e:	461a      	mov	r2, r3
 8001a40:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8001a44:	609a      	str	r2, [r3, #8]
}
 8001a46:	bf00      	nop
 8001a48:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001a52:	bf00      	nop
 8001a54:	51eb851f 	.word	0x51eb851f

08001a58 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, const LL_USART_InitTypeDef *USART_InitStruct)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	b088      	sub	sp, #32
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]
 8001a60:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8001a62:	2301      	movs	r3, #1
 8001a64:	77fb      	strb	r3, [r7, #31]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 8001a66:	2300      	movs	r3, #0
 8001a68:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 8001a6a:	6878      	ldr	r0, [r7, #4]
 8001a6c:	f7ff fd8c 	bl	8001588 <LL_USART_IsEnabled>
 8001a70:	4603      	mov	r3, r0
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d149      	bne.n	8001b0a <LL_USART_Init+0xb2>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	68db      	ldr	r3, [r3, #12]
 8001a7a:	f423 4316 	bic.w	r3, r3, #38400	@ 0x9600
 8001a7e:	f023 030c 	bic.w	r3, r3, #12
 8001a82:	683a      	ldr	r2, [r7, #0]
 8001a84:	6851      	ldr	r1, [r2, #4]
 8001a86:	683a      	ldr	r2, [r7, #0]
 8001a88:	68d2      	ldr	r2, [r2, #12]
 8001a8a:	4311      	orrs	r1, r2
 8001a8c:	683a      	ldr	r2, [r7, #0]
 8001a8e:	6912      	ldr	r2, [r2, #16]
 8001a90:	4311      	orrs	r1, r2
 8001a92:	683a      	ldr	r2, [r7, #0]
 8001a94:	6992      	ldr	r2, [r2, #24]
 8001a96:	430a      	orrs	r2, r1
 8001a98:	431a      	orrs	r2, r3
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	60da      	str	r2, [r3, #12]
    /*---------------------------- USART CR2 Configuration -----------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 8001a9e:	683b      	ldr	r3, [r7, #0]
 8001aa0:	689b      	ldr	r3, [r3, #8]
 8001aa2:	4619      	mov	r1, r3
 8001aa4:	6878      	ldr	r0, [r7, #4]
 8001aa6:	f7ff fd83 	bl	80015b0 <LL_USART_SetStopBitsLength>

    /*---------------------------- USART CR3 Configuration -----------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 8001aaa:	683b      	ldr	r3, [r7, #0]
 8001aac:	695b      	ldr	r3, [r3, #20]
 8001aae:	4619      	mov	r1, r3
 8001ab0:	6878      	ldr	r0, [r7, #4]
 8001ab2:	f7ff fd90 	bl	80015d6 <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration -----------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 8001ab6:	f107 0308 	add.w	r3, r7, #8
 8001aba:	4618      	mov	r0, r3
 8001abc:	f7ff fc9a 	bl	80013f4 <LL_RCC_GetSystemClocksFreq>
    if (USARTx == USART1)
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	4a14      	ldr	r2, [pc, #80]	@ (8001b14 <LL_USART_Init+0xbc>)
 8001ac4:	4293      	cmp	r3, r2
 8001ac6:	d102      	bne.n	8001ace <LL_USART_Init+0x76>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 8001ac8:	697b      	ldr	r3, [r7, #20]
 8001aca:	61bb      	str	r3, [r7, #24]
 8001acc:	e00c      	b.n	8001ae8 <LL_USART_Init+0x90>
    }
    else if (USARTx == USART2)
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	4a11      	ldr	r2, [pc, #68]	@ (8001b18 <LL_USART_Init+0xc0>)
 8001ad2:	4293      	cmp	r3, r2
 8001ad4:	d102      	bne.n	8001adc <LL_USART_Init+0x84>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8001ad6:	693b      	ldr	r3, [r7, #16]
 8001ad8:	61bb      	str	r3, [r7, #24]
 8001ada:	e005      	b.n	8001ae8 <LL_USART_Init+0x90>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
    }
#endif /* USART3 */
#if defined(USART6)
    else if (USARTx == USART6)
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	4a0f      	ldr	r2, [pc, #60]	@ (8001b1c <LL_USART_Init+0xc4>)
 8001ae0:	4293      	cmp	r3, r2
 8001ae2:	d101      	bne.n	8001ae8 <LL_USART_Init+0x90>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 8001ae4:	697b      	ldr	r3, [r7, #20]
 8001ae6:	61bb      	str	r3, [r7, #24]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 8001ae8:	69bb      	ldr	r3, [r7, #24]
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d00d      	beq.n	8001b0a <LL_USART_Init+0xb2>
        && (USART_InitStruct->BaudRate != 0U))
 8001aee:	683b      	ldr	r3, [r7, #0]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d009      	beq.n	8001b0a <LL_USART_Init+0xb2>
    {
      status = SUCCESS;
 8001af6:	2300      	movs	r3, #0
 8001af8:	77fb      	strb	r3, [r7, #31]
      LL_USART_SetBaudRate(USARTx,
                           periphclk,
                           USART_InitStruct->OverSampling,
 8001afa:	683b      	ldr	r3, [r7, #0]
 8001afc:	699a      	ldr	r2, [r3, #24]
                           USART_InitStruct->BaudRate);
 8001afe:	683b      	ldr	r3, [r7, #0]
 8001b00:	681b      	ldr	r3, [r3, #0]
      LL_USART_SetBaudRate(USARTx,
 8001b02:	69b9      	ldr	r1, [r7, #24]
 8001b04:	6878      	ldr	r0, [r7, #4]
 8001b06:	f7ff fd79 	bl	80015fc <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MIN(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 8001b0a:	7ffb      	ldrb	r3, [r7, #31]
}
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	3720      	adds	r7, #32
 8001b10:	46bd      	mov	sp, r7
 8001b12:	bd80      	pop	{r7, pc}
 8001b14:	40011000 	.word	0x40011000
 8001b18:	40004400 	.word	0x40004400
 8001b1c:	40011400 	.word	0x40011400

08001b20 <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Frequency of Ticks (Hz)
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 8001b20:	b480      	push	{r7}
 8001b22:	b083      	sub	sp, #12
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	6078      	str	r0, [r7, #4]
 8001b28:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 8001b2a:	687a      	ldr	r2, [r7, #4]
 8001b2c:	683b      	ldr	r3, [r7, #0]
 8001b2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b32:	4a07      	ldr	r2, [pc, #28]	@ (8001b50 <LL_InitTick+0x30>)
 8001b34:	3b01      	subs	r3, #1
 8001b36:	6053      	str	r3, [r2, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 8001b38:	4b05      	ldr	r3, [pc, #20]	@ (8001b50 <LL_InitTick+0x30>)
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b3e:	4b04      	ldr	r3, [pc, #16]	@ (8001b50 <LL_InitTick+0x30>)
 8001b40:	2205      	movs	r2, #5
 8001b42:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 8001b44:	bf00      	nop
 8001b46:	370c      	adds	r7, #12
 8001b48:	46bd      	mov	sp, r7
 8001b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4e:	4770      	bx	lr
 8001b50:	e000e010 	.word	0xe000e010

08001b54 <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	b082      	sub	sp, #8
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 8001b5c:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001b60:	6878      	ldr	r0, [r7, #4]
 8001b62:	f7ff ffdd 	bl	8001b20 <LL_InitTick>
}
 8001b66:	bf00      	nop
 8001b68:	3708      	adds	r7, #8
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	bd80      	pop	{r7, pc}
	...

08001b70 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 8001b70:	b480      	push	{r7}
 8001b72:	b083      	sub	sp, #12
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8001b78:	4a04      	ldr	r2, [pc, #16]	@ (8001b8c <LL_SetSystemCoreClock+0x1c>)
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	6013      	str	r3, [r2, #0]
}
 8001b7e:	bf00      	nop
 8001b80:	370c      	adds	r7, #12
 8001b82:	46bd      	mov	sp, r7
 8001b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b88:	4770      	bx	lr
 8001b8a:	bf00      	nop
 8001b8c:	20000000 	.word	0x20000000

08001b90 <__libc_init_array>:
 8001b90:	b570      	push	{r4, r5, r6, lr}
 8001b92:	4d0d      	ldr	r5, [pc, #52]	@ (8001bc8 <__libc_init_array+0x38>)
 8001b94:	4c0d      	ldr	r4, [pc, #52]	@ (8001bcc <__libc_init_array+0x3c>)
 8001b96:	1b64      	subs	r4, r4, r5
 8001b98:	10a4      	asrs	r4, r4, #2
 8001b9a:	2600      	movs	r6, #0
 8001b9c:	42a6      	cmp	r6, r4
 8001b9e:	d109      	bne.n	8001bb4 <__libc_init_array+0x24>
 8001ba0:	4d0b      	ldr	r5, [pc, #44]	@ (8001bd0 <__libc_init_array+0x40>)
 8001ba2:	4c0c      	ldr	r4, [pc, #48]	@ (8001bd4 <__libc_init_array+0x44>)
 8001ba4:	f000 f818 	bl	8001bd8 <_init>
 8001ba8:	1b64      	subs	r4, r4, r5
 8001baa:	10a4      	asrs	r4, r4, #2
 8001bac:	2600      	movs	r6, #0
 8001bae:	42a6      	cmp	r6, r4
 8001bb0:	d105      	bne.n	8001bbe <__libc_init_array+0x2e>
 8001bb2:	bd70      	pop	{r4, r5, r6, pc}
 8001bb4:	f855 3b04 	ldr.w	r3, [r5], #4
 8001bb8:	4798      	blx	r3
 8001bba:	3601      	adds	r6, #1
 8001bbc:	e7ee      	b.n	8001b9c <__libc_init_array+0xc>
 8001bbe:	f855 3b04 	ldr.w	r3, [r5], #4
 8001bc2:	4798      	blx	r3
 8001bc4:	3601      	adds	r6, #1
 8001bc6:	e7f2      	b.n	8001bae <__libc_init_array+0x1e>
 8001bc8:	08001c10 	.word	0x08001c10
 8001bcc:	08001c10 	.word	0x08001c10
 8001bd0:	08001c10 	.word	0x08001c10
 8001bd4:	08001c14 	.word	0x08001c14

08001bd8 <_init>:
 8001bd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001bda:	bf00      	nop
 8001bdc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001bde:	bc08      	pop	{r3}
 8001be0:	469e      	mov	lr, r3
 8001be2:	4770      	bx	lr

08001be4 <_fini>:
 8001be4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001be6:	bf00      	nop
 8001be8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001bea:	bc08      	pop	{r3}
 8001bec:	469e      	mov	lr, r3
 8001bee:	4770      	bx	lr
