
build/debug/Lab7.2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000ccc  08000194  08000194  00001194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08000e60  08000e60  00001e60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000e78  08000e78  00002008  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08000e78  08000e78  00001e78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08000e80  08000e80  00002008  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000e80  08000e80  00001e80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000e84  08000e84  00001e84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000008  20000000  08000e88  00002000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000008  08000e90  00002008  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000024  08000e90  00002024  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00002008  2**0
                  CONTENTS, READONLY
 12 .comment      0000001e  00000000  00000000  00002038  2**0
                  CONTENTS, READONLY
 13 .debug_info   000056c6  00000000  00000000  00002056  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000014c7  00000000  00000000  0000771c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_loclists 000020f6  00000000  00000000  00008be3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000328  00000000  00000000  0000ace0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000003da  00000000  00000000  0000b008  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000031a6  00000000  00000000  0000b3e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00001fac  00000000  00000000  0000e588  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000005c8  00000000  00000000  00010534  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000e7  00000000  00000000  00010afc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__aeabi_uldivmod>:
 8000194:	b953      	cbnz	r3, 80001ac <__aeabi_uldivmod+0x18>
 8000196:	b94a      	cbnz	r2, 80001ac <__aeabi_uldivmod+0x18>
 8000198:	2900      	cmp	r1, #0
 800019a:	bf08      	it	eq
 800019c:	2800      	cmpeq	r0, #0
 800019e:	bf1c      	itt	ne
 80001a0:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80001a4:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80001a8:	f000 b80c 	b.w	80001c4 <__aeabi_idiv0>
 80001ac:	f1ad 0c08 	sub.w	ip, sp, #8
 80001b0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001b4:	f000 fcea 	bl	8000b8c <__udivmoddi4>
 80001b8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001bc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001c0:	b004      	add	sp, #16
 80001c2:	4770      	bx	lr

080001c4 <__aeabi_idiv0>:
 80001c4:	4770      	bx	lr
 80001c6:	bf00      	nop

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	@ (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	@ (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	20000008 	.word	0x20000008
 80001e4:	00000000 	.word	0x00000000
 80001e8:	08000e48 	.word	0x08000e48

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	@ (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	@ (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	@ (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	2000000c 	.word	0x2000000c
 8000204:	08000e48 	.word	0x08000e48

08000208 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 8000208:	b410      	push	{r4}
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 800020a:	68c4      	ldr	r4, [r0, #12]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800020c:	fa91 f3a1 	rbit	r3, r1
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8000210:	b1a3      	cbz	r3, 800023c <LL_GPIO_SetPinPull+0x34>
  {
    return 32U;
  }
  return __builtin_clz(value);
 8000212:	fab3 f383 	clz	r3, r3
 8000216:	005b      	lsls	r3, r3, #1
 8000218:	f04f 0c03 	mov.w	ip, #3
 800021c:	fa0c f303 	lsl.w	r3, ip, r3
 8000220:	ea24 0303 	bic.w	r3, r4, r3
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000224:	fa91 f1a1 	rbit	r1, r1
  if (value == 0U)
 8000228:	b151      	cbz	r1, 8000240 <LL_GPIO_SetPinPull+0x38>
  return __builtin_clz(value);
 800022a:	fab1 f181 	clz	r1, r1
 800022e:	0049      	lsls	r1, r1, #1
 8000230:	408a      	lsls	r2, r1
 8000232:	4313      	orrs	r3, r2
 8000234:	60c3      	str	r3, [r0, #12]
}
 8000236:	f85d 4b04 	ldr.w	r4, [sp], #4
 800023a:	4770      	bx	lr
    return 32U;
 800023c:	2320      	movs	r3, #32
 800023e:	e7ea      	b.n	8000216 <LL_GPIO_SetPinPull+0xe>
 8000240:	2120      	movs	r1, #32
 8000242:	e7f4      	b.n	800022e <LL_GPIO_SetPinPull+0x26>

08000244 <LL_GPIO_SetPinMode>:
{
 8000244:	b410      	push	{r4}
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8000246:	6804      	ldr	r4, [r0, #0]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000248:	fa91 f3a1 	rbit	r3, r1
  if (value == 0U)
 800024c:	b1a3      	cbz	r3, 8000278 <LL_GPIO_SetPinMode+0x34>
  return __builtin_clz(value);
 800024e:	fab3 f383 	clz	r3, r3
 8000252:	005b      	lsls	r3, r3, #1
 8000254:	f04f 0c03 	mov.w	ip, #3
 8000258:	fa0c f303 	lsl.w	r3, ip, r3
 800025c:	ea24 0303 	bic.w	r3, r4, r3
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000260:	fa91 f1a1 	rbit	r1, r1
  if (value == 0U)
 8000264:	b151      	cbz	r1, 800027c <LL_GPIO_SetPinMode+0x38>
  return __builtin_clz(value);
 8000266:	fab1 f181 	clz	r1, r1
 800026a:	0049      	lsls	r1, r1, #1
 800026c:	408a      	lsls	r2, r1
 800026e:	4313      	orrs	r3, r2
 8000270:	6003      	str	r3, [r0, #0]
}
 8000272:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000276:	4770      	bx	lr
    return 32U;
 8000278:	2320      	movs	r3, #32
 800027a:	e7ea      	b.n	8000252 <LL_GPIO_SetPinMode+0xe>
 800027c:	2120      	movs	r1, #32
 800027e:	e7f4      	b.n	800026a <LL_GPIO_SetPinMode+0x26>

08000280 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000280:	b570      	push	{r4, r5, r6, lr}
 8000282:	b08c      	sub	sp, #48	@ 0x30
  LL_EXTI_InitTypeDef EXTI_InitStruct = {0};
 8000284:	2300      	movs	r3, #0
 8000286:	930a      	str	r3, [sp, #40]	@ 0x28
 8000288:	930b      	str	r3, [sp, #44]	@ 0x2c
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800028a:	9304      	str	r3, [sp, #16]
 800028c:	9305      	str	r3, [sp, #20]
 800028e:	9306      	str	r3, [sp, #24]
 8000290:	9307      	str	r3, [sp, #28]
 8000292:	9308      	str	r3, [sp, #32]
 8000294:	9309      	str	r3, [sp, #36]	@ 0x24
  * @retval None
  */
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 8000296:	4b30      	ldr	r3, [pc, #192]	@ (8000358 <MX_GPIO_Init+0xd8>)
 8000298:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800029a:	f042 0204 	orr.w	r2, r2, #4
 800029e:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80002a0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80002a2:	f002 0204 	and.w	r2, r2, #4
 80002a6:	9203      	str	r2, [sp, #12]
  (void)tmpreg;
 80002a8:	9a03      	ldr	r2, [sp, #12]
  SET_BIT(RCC->AHB1ENR, Periphs);
 80002aa:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80002ac:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80002b0:	631a      	str	r2, [r3, #48]	@ 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80002b2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80002b4:	f002 0280 	and.w	r2, r2, #128	@ 0x80
 80002b8:	9202      	str	r2, [sp, #8]
  (void)tmpreg;
 80002ba:	9a02      	ldr	r2, [sp, #8]
  SET_BIT(RCC->AHB1ENR, Periphs);
 80002bc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80002be:	f042 0201 	orr.w	r2, r2, #1
 80002c2:	631a      	str	r2, [r3, #48]	@ 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80002c4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80002c6:	f002 0201 	and.w	r2, r2, #1
 80002ca:	9201      	str	r2, [sp, #4]
  (void)tmpreg;
 80002cc:	9a01      	ldr	r2, [sp, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 80002ce:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80002d0:	f042 0202 	orr.w	r2, r2, #2
 80002d4:	631a      	str	r2, [r3, #48]	@ 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80002d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80002d8:	f003 0302 	and.w	r3, r3, #2
 80002dc:	9300      	str	r3, [sp, #0]
  (void)tmpreg;
 80002de:	9b00      	ldr	r3, [sp, #0]
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 80002e0:	4b1e      	ldr	r3, [pc, #120]	@ (800035c <MX_GPIO_Init+0xdc>)
 80002e2:	f04f 6284 	mov.w	r2, #69206016	@ 0x4200000
 80002e6:	619a      	str	r2, [r3, #24]
  *         @arg @ref LL_SYSCFG_EXTI_LINE15
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_SetEXTISource(uint32_t Port, uint32_t Line)
{
  MODIFY_REG(SYSCFG->EXTICR[Line & 0xFF], (Line >> 16), Port << POSITION_VAL((Line >> 16)));
 80002e8:	f5a3 4348 	sub.w	r3, r3, #51200	@ 0xc800
 80002ec:	695a      	ldr	r2, [r3, #20]
 80002ee:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80002f2:	23f0      	movs	r3, #240	@ 0xf0
 80002f4:	fa93 f3a3 	rbit	r3, r3
  if (value == 0U)
 80002f8:	b35b      	cbz	r3, 8000352 <MX_GPIO_Init+0xd2>
  return __builtin_clz(value);
 80002fa:	fab3 f383 	clz	r3, r3
 80002fe:	2102      	movs	r1, #2
 8000300:	fa01 f303 	lsl.w	r3, r1, r3
 8000304:	4313      	orrs	r3, r2
 8000306:	4a16      	ldr	r2, [pc, #88]	@ (8000360 <MX_GPIO_Init+0xe0>)
 8000308:	6153      	str	r3, [r2, #20]

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTC, LL_SYSCFG_EXTI_LINE13);

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_13;
 800030a:	f44f 5400 	mov.w	r4, #8192	@ 0x2000
 800030e:	940a      	str	r4, [sp, #40]	@ 0x28
  EXTI_InitStruct.LineCommand = ENABLE;
 8000310:	2501      	movs	r5, #1
 8000312:	f88d 502c 	strb.w	r5, [sp, #44]	@ 0x2c
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 8000316:	f88d 102e 	strb.w	r1, [sp, #46]	@ 0x2e
  LL_EXTI_Init(&EXTI_InitStruct);
 800031a:	a80a      	add	r0, sp, #40	@ 0x28
 800031c:	f000 f958 	bl	80005d0 <LL_EXTI_Init>

  /**/
  LL_GPIO_SetPinPull(B1_GPIO_Port, B1_Pin, LL_GPIO_PULL_NO);
 8000320:	4e10      	ldr	r6, [pc, #64]	@ (8000364 <MX_GPIO_Init+0xe4>)
 8000322:	2200      	movs	r2, #0
 8000324:	4621      	mov	r1, r4
 8000326:	4630      	mov	r0, r6
 8000328:	f7ff ff6e 	bl	8000208 <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinMode(B1_GPIO_Port, B1_Pin, LL_GPIO_MODE_INPUT);
 800032c:	2200      	movs	r2, #0
 800032e:	4621      	mov	r1, r4
 8000330:	4630      	mov	r0, r6
 8000332:	f7ff ff87 	bl	8000244 <LL_GPIO_SetPinMode>

  /**/
  GPIO_InitStruct.Pin = LD2_Pin|OUT1_Pin;
 8000336:	f44f 6384 	mov.w	r3, #1056	@ 0x420
 800033a:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800033c:	9505      	str	r5, [sp, #20]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800033e:	2300      	movs	r3, #0
 8000340:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000342:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000344:	9308      	str	r3, [sp, #32]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000346:	a904      	add	r1, sp, #16
 8000348:	4804      	ldr	r0, [pc, #16]	@ (800035c <MX_GPIO_Init+0xdc>)
 800034a:	f000 fa44 	bl	80007d6 <LL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 800034e:	b00c      	add	sp, #48	@ 0x30
 8000350:	bd70      	pop	{r4, r5, r6, pc}
    return 32U;
 8000352:	2320      	movs	r3, #32
 8000354:	e7d3      	b.n	80002fe <MX_GPIO_Init+0x7e>
 8000356:	bf00      	nop
 8000358:	40023800 	.word	0x40023800
 800035c:	40020000 	.word	0x40020000
 8000360:	40013800 	.word	0x40013800
 8000364:	40020800 	.word	0x40020800

08000368 <MX_USART2_UART_Init>:
{
 8000368:	b570      	push	{r4, r5, r6, lr}
 800036a:	b090      	sub	sp, #64	@ 0x40
  LL_USART_InitTypeDef USART_InitStruct = {0};
 800036c:	ad09      	add	r5, sp, #36	@ 0x24
 800036e:	2400      	movs	r4, #0
 8000370:	9409      	str	r4, [sp, #36]	@ 0x24
 8000372:	940a      	str	r4, [sp, #40]	@ 0x28
 8000374:	940b      	str	r4, [sp, #44]	@ 0x2c
 8000376:	940c      	str	r4, [sp, #48]	@ 0x30
 8000378:	940d      	str	r4, [sp, #52]	@ 0x34
 800037a:	940e      	str	r4, [sp, #56]	@ 0x38
 800037c:	940f      	str	r4, [sp, #60]	@ 0x3c
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800037e:	a903      	add	r1, sp, #12
 8000380:	9403      	str	r4, [sp, #12]
 8000382:	604c      	str	r4, [r1, #4]
 8000384:	608c      	str	r4, [r1, #8]
 8000386:	60cc      	str	r4, [r1, #12]
 8000388:	610c      	str	r4, [r1, #16]
 800038a:	614c      	str	r4, [r1, #20]
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 800038c:	4b1b      	ldr	r3, [pc, #108]	@ (80003fc <MX_USART2_UART_Init+0x94>)
 800038e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000390:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8000394:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8000396:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000398:	f402 3200 	and.w	r2, r2, #131072	@ 0x20000
 800039c:	9202      	str	r2, [sp, #8]
  (void)tmpreg;
 800039e:	9a02      	ldr	r2, [sp, #8]
  SET_BIT(RCC->AHB1ENR, Periphs);
 80003a0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80003a2:	f042 0201 	orr.w	r2, r2, #1
 80003a6:	631a      	str	r2, [r3, #48]	@ 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80003a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80003aa:	f003 0301 	and.w	r3, r3, #1
 80003ae:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 80003b0:	9b01      	ldr	r3, [sp, #4]
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80003b2:	260c      	movs	r6, #12
 80003b4:	9603      	str	r6, [sp, #12]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80003b6:	2302      	movs	r3, #2
 80003b8:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 80003ba:	2307      	movs	r3, #7
 80003bc:	9308      	str	r3, [sp, #32]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80003be:	4810      	ldr	r0, [pc, #64]	@ (8000400 <MX_USART2_UART_Init+0x98>)
 80003c0:	f000 fa09 	bl	80007d6 <LL_GPIO_Init>
  USART_InitStruct.BaudRate = 115200;
 80003c4:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 80003c8:	9309      	str	r3, [sp, #36]	@ 0x24
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 80003ca:	940a      	str	r4, [sp, #40]	@ 0x28
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 80003cc:	940b      	str	r4, [sp, #44]	@ 0x2c
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 80003ce:	940c      	str	r4, [sp, #48]	@ 0x30
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 80003d0:	960d      	str	r6, [sp, #52]	@ 0x34
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 80003d2:	940e      	str	r4, [sp, #56]	@ 0x38
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 80003d4:	940f      	str	r4, [sp, #60]	@ 0x3c
  LL_USART_Init(USART2, &USART_InitStruct);
 80003d6:	4c0b      	ldr	r4, [pc, #44]	@ (8000404 <MX_USART2_UART_Init+0x9c>)
 80003d8:	4629      	mov	r1, r5
 80003da:	4620      	mov	r0, r4
 80003dc:	f000 fb1c 	bl	8000a18 <LL_USART_Init>
__STATIC_INLINE void LL_USART_ConfigAsyncMode(USART_TypeDef *USARTx)
{
  /* In Asynchronous mode, the following bits must be kept cleared:
  - LINEN, CLKEN bits in the USART_CR2 register,
  - SCEN, IREN and HDSEL bits in the USART_CR3 register.*/
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80003e0:	6923      	ldr	r3, [r4, #16]
 80003e2:	f423 4390 	bic.w	r3, r3, #18432	@ 0x4800
 80003e6:	6123      	str	r3, [r4, #16]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 80003e8:	6963      	ldr	r3, [r4, #20]
 80003ea:	f023 032a 	bic.w	r3, r3, #42	@ 0x2a
 80003ee:	6163      	str	r3, [r4, #20]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 80003f0:	68e3      	ldr	r3, [r4, #12]
 80003f2:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80003f6:	60e3      	str	r3, [r4, #12]
}
 80003f8:	b010      	add	sp, #64	@ 0x40
 80003fa:	bd70      	pop	{r4, r5, r6, pc}
 80003fc:	40023800 	.word	0x40023800
 8000400:	40020000 	.word	0x40020000
 8000404:	40004400 	.word	0x40004400

08000408 <SystemClock_Config>:
{
 8000408:	b510      	push	{r4, lr}
  *         @arg @ref LL_FLASH_LATENCY_15
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 800040a:	4a36      	ldr	r2, [pc, #216]	@ (80004e4 <SystemClock_Config+0xdc>)
 800040c:	6813      	ldr	r3, [r2, #0]
 800040e:	f023 0307 	bic.w	r3, r3, #7
 8000412:	f043 0302 	orr.w	r3, r3, #2
 8000416:	6013      	str	r3, [r2, #0]
  *         @arg @ref LL_FLASH_LATENCY_14
  *         @arg @ref LL_FLASH_LATENCY_15
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8000418:	4b32      	ldr	r3, [pc, #200]	@ (80004e4 <SystemClock_Config+0xdc>)
 800041a:	681b      	ldr	r3, [r3, #0]
 800041c:	f003 0307 	and.w	r3, r3, #7
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_2)
 8000420:	2b02      	cmp	r3, #2
 8000422:	d1f9      	bne.n	8000418 <SystemClock_Config+0x10>
  *         (*) LL_PWR_REGU_VOLTAGE_SCALE1 is not available for STM32F401xx devices
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRegulVoltageScaling(uint32_t VoltageScaling)
{
  MODIFY_REG(PWR->CR, PWR_CR_VOS, VoltageScaling);
 8000424:	4a30      	ldr	r2, [pc, #192]	@ (80004e8 <SystemClock_Config+0xe0>)
 8000426:	6813      	ldr	r3, [r2, #0]
 8000428:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 800042c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000430:	6013      	str	r3, [r2, #0]
  * @param  Value Between Min_Data = 0 and Max_Data = 31
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
  MODIFY_REG(RCC->CR, RCC_CR_HSITRIM, Value << RCC_CR_HSITRIM_Pos);
 8000432:	f502 32e4 	add.w	r2, r2, #116736	@ 0x1c800
 8000436:	6813      	ldr	r3, [r2, #0]
 8000438:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 800043c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000440:	6013      	str	r3, [r2, #0]
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8000442:	6813      	ldr	r3, [r2, #0]
 8000444:	f043 0301 	orr.w	r3, r3, #1
 8000448:	6013      	str	r3, [r2, #0]
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 800044a:	4b28      	ldr	r3, [pc, #160]	@ (80004ec <SystemClock_Config+0xe4>)
 800044c:	681b      	ldr	r3, [r3, #0]
  while(LL_RCC_HSI_IsReady() != 1)
 800044e:	f013 0f02 	tst.w	r3, #2
 8000452:	d0fa      	beq.n	800044a <SystemClock_Config+0x42>
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLM, uint32_t PLLN, uint32_t PLLP_R)
{
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM | RCC_PLLCFGR_PLLN,
 8000454:	4a25      	ldr	r2, [pc, #148]	@ (80004ec <SystemClock_Config+0xe4>)
 8000456:	6851      	ldr	r1, [r2, #4]
 8000458:	4b25      	ldr	r3, [pc, #148]	@ (80004f0 <SystemClock_Config+0xe8>)
 800045a:	400b      	ands	r3, r1
 800045c:	f443 43a8 	orr.w	r3, r3, #21504	@ 0x5400
 8000460:	f043 0310 	orr.w	r3, r3, #16
 8000464:	6053      	str	r3, [r2, #4]
             Source | PLLM | PLLN << RCC_PLLCFGR_PLLN_Pos);
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLP, PLLP_R);
 8000466:	6853      	ldr	r3, [r2, #4]
 8000468:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 800046c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000470:	6053      	str	r3, [r2, #4]
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8000472:	6813      	ldr	r3, [r2, #0]
 8000474:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000478:	6013      	str	r3, [r2, #0]
  return (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY));
 800047a:	4b1c      	ldr	r3, [pc, #112]	@ (80004ec <SystemClock_Config+0xe4>)
 800047c:	681b      	ldr	r3, [r3, #0]
  while(LL_RCC_PLL_IsReady() != 1)
 800047e:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8000482:	d0fa      	beq.n	800047a <SystemClock_Config+0x72>
  * @rmtoll CSR   VOS       LL_PWR_IsActiveFlag_VOS
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_VOS(void)
{
  return (READ_BIT(PWR->CSR, LL_PWR_CSR_VOS) == (LL_PWR_CSR_VOS));
 8000484:	4b18      	ldr	r3, [pc, #96]	@ (80004e8 <SystemClock_Config+0xe0>)
 8000486:	685b      	ldr	r3, [r3, #4]
  while (LL_PWR_IsActiveFlag_VOS() == 0)
 8000488:	f413 4f80 	tst.w	r3, #16384	@ 0x4000
 800048c:	d0fa      	beq.n	8000484 <SystemClock_Config+0x7c>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 800048e:	4b17      	ldr	r3, [pc, #92]	@ (80004ec <SystemClock_Config+0xe4>)
 8000490:	689a      	ldr	r2, [r3, #8]
 8000492:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
 8000496:	609a      	str	r2, [r3, #8]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8000498:	689a      	ldr	r2, [r3, #8]
 800049a:	f422 52e0 	bic.w	r2, r2, #7168	@ 0x1c00
 800049e:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80004a2:	609a      	str	r2, [r3, #8]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 80004a4:	689a      	ldr	r2, [r3, #8]
 80004a6:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 80004aa:	609a      	str	r2, [r3, #8]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80004ac:	689a      	ldr	r2, [r3, #8]
 80004ae:	f022 0203 	bic.w	r2, r2, #3
 80004b2:	f042 0202 	orr.w	r2, r2, #2
 80004b6:	609a      	str	r2, [r3, #8]
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80004b8:	4b0c      	ldr	r3, [pc, #48]	@ (80004ec <SystemClock_Config+0xe4>)
 80004ba:	689b      	ldr	r3, [r3, #8]
 80004bc:	f003 030c 	and.w	r3, r3, #12
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 80004c0:	2b08      	cmp	r3, #8
 80004c2:	d1f9      	bne.n	80004b8 <SystemClock_Config+0xb0>
  LL_Init1msTick(84000000);
 80004c4:	4c0b      	ldr	r4, [pc, #44]	@ (80004f4 <SystemClock_Config+0xec>)
 80004c6:	4620      	mov	r0, r4
 80004c8:	f000 faf2 	bl	8000ab0 <LL_Init1msTick>
  LL_SetSystemCoreClock(84000000);
 80004cc:	4620      	mov	r0, r4
 80004ce:	f000 faff 	bl	8000ad0 <LL_SetSystemCoreClock>
  MODIFY_REG(RCC->DCKCFGR, RCC_DCKCFGR_TIMPRE, Prescaler);
 80004d2:	4a06      	ldr	r2, [pc, #24]	@ (80004ec <SystemClock_Config+0xe4>)
 80004d4:	f8d2 308c 	ldr.w	r3, [r2, #140]	@ 0x8c
 80004d8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80004dc:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
}
 80004e0:	bd10      	pop	{r4, pc}
 80004e2:	bf00      	nop
 80004e4:	40023c00 	.word	0x40023c00
 80004e8:	40007000 	.word	0x40007000
 80004ec:	40023800 	.word	0x40023800
 80004f0:	ffbf8000 	.word	0xffbf8000
 80004f4:	0501bd00 	.word	0x0501bd00

080004f8 <main>:
{
 80004f8:	b500      	push	{lr}
 80004fa:	b083      	sub	sp, #12
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 80004fc:	4b21      	ldr	r3, [pc, #132]	@ (8000584 <main+0x8c>)
 80004fe:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8000500:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8000504:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000506:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8000508:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 800050c:	9201      	str	r2, [sp, #4]
  (void)tmpreg;
 800050e:	9a01      	ldr	r2, [sp, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 8000510:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000512:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8000516:	641a      	str	r2, [r3, #64]	@ 0x40
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8000518:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800051a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800051e:	9300      	str	r3, [sp, #0]
  (void)tmpreg;
 8000520:	9b00      	ldr	r3, [sp, #0]
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000522:	4919      	ldr	r1, [pc, #100]	@ (8000588 <main+0x90>)
 8000524:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000526:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800052a:	0412      	lsls	r2, r2, #16
 800052c:	0c12      	lsrs	r2, r2, #16
  reg_value  =  (reg_value                                   |
 800052e:	4b17      	ldr	r3, [pc, #92]	@ (800058c <main+0x94>)
 8000530:	4313      	orrs	r3, r2
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
  SCB->AIRCR =  reg_value;
 8000532:	60cb      	str	r3, [r1, #12]
  SystemClock_Config();
 8000534:	f7ff ff68 	bl	8000408 <SystemClock_Config>
  MX_GPIO_Init();
 8000538:	f7ff fea2 	bl	8000280 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800053c:	f7ff ff14 	bl	8000368 <MX_USART2_UART_Init>
	SysTick_Config(SystemCoreClock / 1000);
 8000540:	4b13      	ldr	r3, [pc, #76]	@ (8000590 <main+0x98>)
 8000542:	681b      	ldr	r3, [r3, #0]
 8000544:	4a13      	ldr	r2, [pc, #76]	@ (8000594 <main+0x9c>)
 8000546:	fba2 2303 	umull	r2, r3, r2, r3
 800054a:	099b      	lsrs	r3, r3, #6
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800054c:	3b01      	subs	r3, #1
 800054e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000552:	d215      	bcs.n	8000580 <main+0x88>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000554:	f04f 22e0 	mov.w	r2, #3758153728	@ 0xe000e000
 8000558:	6153      	str	r3, [r2, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800055a:	4b0b      	ldr	r3, [pc, #44]	@ (8000588 <main+0x90>)
 800055c:	21f0      	movs	r1, #240	@ 0xf0
 800055e:	f883 1023 	strb.w	r1, [r3, #35]	@ 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000562:	2300      	movs	r3, #0
 8000564:	6193      	str	r3, [r2, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000566:	2307      	movs	r3, #7
 8000568:	6113      	str	r3, [r2, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800056a:	e009      	b.n	8000580 <main+0x88>
		for (i = 0; i < (INTERVAL / 2); i++)
 800056c:	3301      	adds	r3, #1
 800056e:	f241 0299 	movw	r2, #4249	@ 0x1099
 8000572:	4293      	cmp	r3, r2
 8000574:	ddfa      	ble.n	800056c <main+0x74>
		LL_GPIO_WriteReg(GPIOA, ODR, LL_GPIO_ReadReg(GPIOA, ODR) ^ 0x0400);
 8000576:	4a08      	ldr	r2, [pc, #32]	@ (8000598 <main+0xa0>)
 8000578:	6953      	ldr	r3, [r2, #20]
 800057a:	f483 6380 	eor.w	r3, r3, #1024	@ 0x400
 800057e:	6153      	str	r3, [r2, #20]
		for (i = 0; i < (INTERVAL / 2); i++)
 8000580:	2300      	movs	r3, #0
 8000582:	e7f4      	b.n	800056e <main+0x76>
 8000584:	40023800 	.word	0x40023800
 8000588:	e000ed00 	.word	0xe000ed00
 800058c:	05fa0300 	.word	0x05fa0300
 8000590:	20000004 	.word	0x20000004
 8000594:	10624dd3 	.word	0x10624dd3
 8000598:	40020000 	.word	0x40020000

0800059c <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
 800059c:	e7fe      	b.n	800059c <NMI_Handler>

0800059e <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800059e:	e7fe      	b.n	800059e <HardFault_Handler>

080005a0 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80005a0:	e7fe      	b.n	80005a0 <MemManage_Handler>

080005a2 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80005a2:	e7fe      	b.n	80005a2 <BusFault_Handler>

080005a4 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80005a4:	e7fe      	b.n	80005a4 <UsageFault_Handler>

080005a6 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80005a6:	4770      	bx	lr

080005a8 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80005a8:	4770      	bx	lr

080005aa <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80005aa:	4770      	bx	lr

080005ac <SysTick_Handler>:
  */
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */
	static int x = 0x12c;
	for (int i = 0; i < x; i++)
 80005ac:	2300      	movs	r3, #0
 80005ae:	e000      	b.n	80005b2 <SysTick_Handler+0x6>
 80005b0:	3301      	adds	r3, #1
 80005b2:	4a06      	ldr	r2, [pc, #24]	@ (80005cc <SysTick_Handler+0x20>)
 80005b4:	6812      	ldr	r2, [r2, #0]
 80005b6:	429a      	cmp	r2, r3
 80005b8:	dcfa      	bgt.n	80005b0 <SysTick_Handler+0x4>
		;
	x = (x >> 2) | (((x & 1) ^ (x & 2)) << 4);
 80005ba:	0113      	lsls	r3, r2, #4
 80005bc:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80005c0:	ea43 03a2 	orr.w	r3, r3, r2, asr #2
 80005c4:	4a01      	ldr	r2, [pc, #4]	@ (80005cc <SysTick_Handler+0x20>)
 80005c6:	6013      	str	r3, [r2, #0]
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80005c8:	4770      	bx	lr
 80005ca:	bf00      	nop
 80005cc:	20000000 	.word	0x20000000

080005d0 <LL_EXTI_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: EXTI registers are initialized
  *          - ERROR: not applicable
  */
uint32_t LL_EXTI_Init(LL_EXTI_InitTypeDef *EXTI_InitStruct)
{
 80005d0:	b410      	push	{r4}
 80005d2:	4603      	mov	r3, r0
  assert_param(IS_LL_EXTI_LINE_0_31(EXTI_InitStruct->Line_0_31));
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->LineCommand));
  assert_param(IS_LL_EXTI_MODE(EXTI_InitStruct->Mode));

  /* ENABLE LineCommand */
  if (EXTI_InitStruct->LineCommand != DISABLE)
 80005d4:	7900      	ldrb	r0, [r0, #4]
 80005d6:	2800      	cmp	r0, #0
 80005d8:	d052      	beq.n	8000680 <LL_EXTI_Init+0xb0>
  {
    assert_param(IS_LL_EXTI_TRIGGER(EXTI_InitStruct->Trigger));

    /* Configure EXTI Lines in range from 0 to 31 */
    if (EXTI_InitStruct->Line_0_31 != LL_EXTI_LINE_NONE)
 80005da:	681a      	ldr	r2, [r3, #0]
 80005dc:	2a00      	cmp	r2, #0
 80005de:	d05d      	beq.n	800069c <LL_EXTI_Init+0xcc>
    {
      switch (EXTI_InitStruct->Mode)
 80005e0:	7958      	ldrb	r0, [r3, #5]
 80005e2:	2801      	cmp	r0, #1
 80005e4:	d020      	beq.n	8000628 <LL_EXTI_Init+0x58>
 80005e6:	2802      	cmp	r0, #2
 80005e8:	d029      	beq.n	800063e <LL_EXTI_Init+0x6e>
 80005ea:	2800      	cmp	r0, #0
 80005ec:	d131      	bne.n	8000652 <LL_EXTI_Init+0x82>
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableEvent_0_31(uint32_t ExtiLine)
{
  CLEAR_BIT(EXTI->EMR, ExtiLine);
 80005ee:	492d      	ldr	r1, [pc, #180]	@ (80006a4 <LL_EXTI_Init+0xd4>)
 80005f0:	684c      	ldr	r4, [r1, #4]
 80005f2:	ea24 0202 	bic.w	r2, r4, r2
 80005f6:	604a      	str	r2, [r1, #4]
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 80005f8:	681a      	ldr	r2, [r3, #0]
  SET_BIT(EXTI->IMR, ExtiLine);
 80005fa:	680c      	ldr	r4, [r1, #0]
 80005fc:	4322      	orrs	r2, r4
 80005fe:	600a      	str	r2, [r1, #0]
          break;
        default:
          status = ERROR;
          break;
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 8000600:	799a      	ldrb	r2, [r3, #6]
 8000602:	2a00      	cmp	r2, #0
 8000604:	d047      	beq.n	8000696 <LL_EXTI_Init+0xc6>
      {
        switch (EXTI_InitStruct->Trigger)
 8000606:	2a02      	cmp	r2, #2
 8000608:	d025      	beq.n	8000656 <LL_EXTI_Init+0x86>
 800060a:	2a03      	cmp	r2, #3
 800060c:	d02e      	beq.n	800066c <LL_EXTI_Init+0x9c>
 800060e:	2a01      	cmp	r2, #1
 8000610:	d146      	bne.n	80006a0 <LL_EXTI_Init+0xd0>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8000612:	681c      	ldr	r4, [r3, #0]
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_0_31(uint32_t ExtiLine)
{
  CLEAR_BIT(EXTI->FTSR, ExtiLine);
 8000614:	4a23      	ldr	r2, [pc, #140]	@ (80006a4 <LL_EXTI_Init+0xd4>)
 8000616:	68d1      	ldr	r1, [r2, #12]
 8000618:	ea21 0104 	bic.w	r1, r1, r4
 800061c:	60d1      	str	r1, [r2, #12]
            /* Then Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800061e:	681b      	ldr	r3, [r3, #0]
  SET_BIT(EXTI->RTSR, ExtiLine);
 8000620:	6891      	ldr	r1, [r2, #8]
 8000622:	430b      	orrs	r3, r1
 8000624:	6093      	str	r3, [r2, #8]
}
 8000626:	e036      	b.n	8000696 <LL_EXTI_Init+0xc6>
  CLEAR_BIT(EXTI->IMR, ExtiLine);
 8000628:	491e      	ldr	r1, [pc, #120]	@ (80006a4 <LL_EXTI_Init+0xd4>)
 800062a:	6808      	ldr	r0, [r1, #0]
 800062c:	ea20 0202 	bic.w	r2, r0, r2
 8000630:	600a      	str	r2, [r1, #0]
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8000632:	681a      	ldr	r2, [r3, #0]
  SET_BIT(EXTI->EMR, ExtiLine);
 8000634:	6848      	ldr	r0, [r1, #4]
 8000636:	4302      	orrs	r2, r0
 8000638:	604a      	str	r2, [r1, #4]
  ErrorStatus status = SUCCESS;
 800063a:	2000      	movs	r0, #0
}
 800063c:	e7e0      	b.n	8000600 <LL_EXTI_Init+0x30>
  SET_BIT(EXTI->IMR, ExtiLine);
 800063e:	4919      	ldr	r1, [pc, #100]	@ (80006a4 <LL_EXTI_Init+0xd4>)
 8000640:	6808      	ldr	r0, [r1, #0]
 8000642:	4302      	orrs	r2, r0
 8000644:	600a      	str	r2, [r1, #0]
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8000646:	681a      	ldr	r2, [r3, #0]
  SET_BIT(EXTI->EMR, ExtiLine);
 8000648:	6848      	ldr	r0, [r1, #4]
 800064a:	4302      	orrs	r2, r0
 800064c:	604a      	str	r2, [r1, #4]
  ErrorStatus status = SUCCESS;
 800064e:	2000      	movs	r0, #0
}
 8000650:	e7d6      	b.n	8000600 <LL_EXTI_Init+0x30>
      switch (EXTI_InitStruct->Mode)
 8000652:	2001      	movs	r0, #1
 8000654:	e7d4      	b.n	8000600 <LL_EXTI_Init+0x30>
            break;
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8000656:	681c      	ldr	r4, [r3, #0]
  CLEAR_BIT(EXTI->RTSR, ExtiLine);
 8000658:	4a12      	ldr	r2, [pc, #72]	@ (80006a4 <LL_EXTI_Init+0xd4>)
 800065a:	6891      	ldr	r1, [r2, #8]
 800065c:	ea21 0104 	bic.w	r1, r1, r4
 8000660:	6091      	str	r1, [r2, #8]
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8000662:	681b      	ldr	r3, [r3, #0]
  SET_BIT(EXTI->FTSR, ExtiLine);
 8000664:	68d1      	ldr	r1, [r2, #12]
 8000666:	430b      	orrs	r3, r1
 8000668:	60d3      	str	r3, [r2, #12]
}
 800066a:	e014      	b.n	8000696 <LL_EXTI_Init+0xc6>
            break;
          case LL_EXTI_TRIGGER_RISING_FALLING:
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800066c:	6819      	ldr	r1, [r3, #0]
  SET_BIT(EXTI->RTSR, ExtiLine);
 800066e:	4a0d      	ldr	r2, [pc, #52]	@ (80006a4 <LL_EXTI_Init+0xd4>)
 8000670:	6894      	ldr	r4, [r2, #8]
 8000672:	4321      	orrs	r1, r4
 8000674:	6091      	str	r1, [r2, #8]
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8000676:	681b      	ldr	r3, [r3, #0]
  SET_BIT(EXTI->FTSR, ExtiLine);
 8000678:	68d1      	ldr	r1, [r2, #12]
 800067a:	430b      	orrs	r3, r1
 800067c:	60d3      	str	r3, [r2, #12]
}
 800067e:	e00a      	b.n	8000696 <LL_EXTI_Init+0xc6>
  CLEAR_BIT(EXTI->IMR, ExtiLine);
 8000680:	4a08      	ldr	r2, [pc, #32]	@ (80006a4 <LL_EXTI_Init+0xd4>)
 8000682:	6811      	ldr	r1, [r2, #0]
 8000684:	681c      	ldr	r4, [r3, #0]
 8000686:	ea21 0104 	bic.w	r1, r1, r4
 800068a:	6011      	str	r1, [r2, #0]
  /* DISABLE LineCommand */
  else
  {
    /* De-configure EXTI Lines in range from 0 to 31 */
    LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
    LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 800068c:	6819      	ldr	r1, [r3, #0]
  CLEAR_BIT(EXTI->EMR, ExtiLine);
 800068e:	6853      	ldr	r3, [r2, #4]
 8000690:	ea23 0301 	bic.w	r3, r3, r1
 8000694:	6053      	str	r3, [r2, #4]
  }
  return status;
}
 8000696:	f85d 4b04 	ldr.w	r4, [sp], #4
 800069a:	4770      	bx	lr
  ErrorStatus status = SUCCESS;
 800069c:	2000      	movs	r0, #0
 800069e:	e7fa      	b.n	8000696 <LL_EXTI_Init+0xc6>
        switch (EXTI_InitStruct->Trigger)
 80006a0:	2001      	movs	r0, #1
 80006a2:	e7f8      	b.n	8000696 <LL_EXTI_Init+0xc6>
 80006a4:	40013c00 	.word	0x40013c00

080006a8 <LL_GPIO_SetPinSpeed>:
{
 80006a8:	b410      	push	{r4}
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 80006aa:	6884      	ldr	r4, [r0, #8]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80006ac:	fa91 f3a1 	rbit	r3, r1
  if (value == 0U)
 80006b0:	b1a3      	cbz	r3, 80006dc <LL_GPIO_SetPinSpeed+0x34>
  return __builtin_clz(value);
 80006b2:	fab3 f383 	clz	r3, r3
 80006b6:	005b      	lsls	r3, r3, #1
 80006b8:	f04f 0c03 	mov.w	ip, #3
 80006bc:	fa0c f303 	lsl.w	r3, ip, r3
 80006c0:	ea24 0303 	bic.w	r3, r4, r3
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80006c4:	fa91 f1a1 	rbit	r1, r1
  if (value == 0U)
 80006c8:	b151      	cbz	r1, 80006e0 <LL_GPIO_SetPinSpeed+0x38>
  return __builtin_clz(value);
 80006ca:	fab1 f181 	clz	r1, r1
 80006ce:	0049      	lsls	r1, r1, #1
 80006d0:	408a      	lsls	r2, r1
 80006d2:	4313      	orrs	r3, r2
 80006d4:	6083      	str	r3, [r0, #8]
}
 80006d6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80006da:	4770      	bx	lr
    return 32U;
 80006dc:	2320      	movs	r3, #32
 80006de:	e7ea      	b.n	80006b6 <LL_GPIO_SetPinSpeed+0xe>
 80006e0:	2120      	movs	r1, #32
 80006e2:	e7f4      	b.n	80006ce <LL_GPIO_SetPinSpeed+0x26>

080006e4 <LL_GPIO_SetPinPull>:
{
 80006e4:	b410      	push	{r4}
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 80006e6:	68c4      	ldr	r4, [r0, #12]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80006e8:	fa91 f3a1 	rbit	r3, r1
  if (value == 0U)
 80006ec:	b1a3      	cbz	r3, 8000718 <LL_GPIO_SetPinPull+0x34>
  return __builtin_clz(value);
 80006ee:	fab3 f383 	clz	r3, r3
 80006f2:	005b      	lsls	r3, r3, #1
 80006f4:	f04f 0c03 	mov.w	ip, #3
 80006f8:	fa0c f303 	lsl.w	r3, ip, r3
 80006fc:	ea24 0303 	bic.w	r3, r4, r3
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000700:	fa91 f1a1 	rbit	r1, r1
  if (value == 0U)
 8000704:	b151      	cbz	r1, 800071c <LL_GPIO_SetPinPull+0x38>
  return __builtin_clz(value);
 8000706:	fab1 f181 	clz	r1, r1
 800070a:	0049      	lsls	r1, r1, #1
 800070c:	408a      	lsls	r2, r1
 800070e:	4313      	orrs	r3, r2
 8000710:	60c3      	str	r3, [r0, #12]
}
 8000712:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000716:	4770      	bx	lr
    return 32U;
 8000718:	2320      	movs	r3, #32
 800071a:	e7ea      	b.n	80006f2 <LL_GPIO_SetPinPull+0xe>
 800071c:	2120      	movs	r1, #32
 800071e:	e7f4      	b.n	800070a <LL_GPIO_SetPinPull+0x26>

08000720 <LL_GPIO_SetAFPin_0_7>:
{
 8000720:	b410      	push	{r4}
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 8000722:	6a04      	ldr	r4, [r0, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000724:	fa91 f3a1 	rbit	r3, r1
  if (value == 0U)
 8000728:	b1a3      	cbz	r3, 8000754 <LL_GPIO_SetAFPin_0_7+0x34>
  return __builtin_clz(value);
 800072a:	fab3 f383 	clz	r3, r3
 800072e:	009b      	lsls	r3, r3, #2
 8000730:	f04f 0c0f 	mov.w	ip, #15
 8000734:	fa0c f303 	lsl.w	r3, ip, r3
 8000738:	ea24 0303 	bic.w	r3, r4, r3
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800073c:	fa91 f1a1 	rbit	r1, r1
  if (value == 0U)
 8000740:	b151      	cbz	r1, 8000758 <LL_GPIO_SetAFPin_0_7+0x38>
  return __builtin_clz(value);
 8000742:	fab1 f181 	clz	r1, r1
 8000746:	0089      	lsls	r1, r1, #2
 8000748:	408a      	lsls	r2, r1
 800074a:	4313      	orrs	r3, r2
 800074c:	6203      	str	r3, [r0, #32]
}
 800074e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000752:	4770      	bx	lr
    return 32U;
 8000754:	2320      	movs	r3, #32
 8000756:	e7ea      	b.n	800072e <LL_GPIO_SetAFPin_0_7+0xe>
 8000758:	2120      	movs	r1, #32
 800075a:	e7f4      	b.n	8000746 <LL_GPIO_SetAFPin_0_7+0x26>

0800075c <LL_GPIO_SetAFPin_8_15>:
{
 800075c:	b410      	push	{r4}
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 800075e:	6a44      	ldr	r4, [r0, #36]	@ 0x24
 8000760:	0a09      	lsrs	r1, r1, #8
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000762:	fa91 f3a1 	rbit	r3, r1
  if (value == 0U)
 8000766:	b1a3      	cbz	r3, 8000792 <LL_GPIO_SetAFPin_8_15+0x36>
  return __builtin_clz(value);
 8000768:	fab3 f383 	clz	r3, r3
 800076c:	009b      	lsls	r3, r3, #2
 800076e:	f04f 0c0f 	mov.w	ip, #15
 8000772:	fa0c f303 	lsl.w	r3, ip, r3
 8000776:	ea24 0403 	bic.w	r4, r4, r3
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800077a:	fa91 f1a1 	rbit	r1, r1
  if (value == 0U)
 800077e:	b151      	cbz	r1, 8000796 <LL_GPIO_SetAFPin_8_15+0x3a>
  return __builtin_clz(value);
 8000780:	fab1 f181 	clz	r1, r1
 8000784:	0089      	lsls	r1, r1, #2
 8000786:	408a      	lsls	r2, r1
 8000788:	4314      	orrs	r4, r2
 800078a:	6244      	str	r4, [r0, #36]	@ 0x24
}
 800078c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000790:	4770      	bx	lr
    return 32U;
 8000792:	2320      	movs	r3, #32
 8000794:	e7ea      	b.n	800076c <LL_GPIO_SetAFPin_8_15+0x10>
 8000796:	2120      	movs	r1, #32
 8000798:	e7f4      	b.n	8000784 <LL_GPIO_SetAFPin_8_15+0x28>

0800079a <LL_GPIO_SetPinMode>:
{
 800079a:	b410      	push	{r4}
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 800079c:	6804      	ldr	r4, [r0, #0]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800079e:	fa91 f3a1 	rbit	r3, r1
  if (value == 0U)
 80007a2:	b1a3      	cbz	r3, 80007ce <LL_GPIO_SetPinMode+0x34>
  return __builtin_clz(value);
 80007a4:	fab3 f383 	clz	r3, r3
 80007a8:	005b      	lsls	r3, r3, #1
 80007aa:	f04f 0c03 	mov.w	ip, #3
 80007ae:	fa0c f303 	lsl.w	r3, ip, r3
 80007b2:	ea24 0303 	bic.w	r3, r4, r3
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80007b6:	fa91 f1a1 	rbit	r1, r1
  if (value == 0U)
 80007ba:	b151      	cbz	r1, 80007d2 <LL_GPIO_SetPinMode+0x38>
  return __builtin_clz(value);
 80007bc:	fab1 f181 	clz	r1, r1
 80007c0:	0049      	lsls	r1, r1, #1
 80007c2:	408a      	lsls	r2, r1
 80007c4:	4313      	orrs	r3, r2
 80007c6:	6003      	str	r3, [r0, #0]
}
 80007c8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80007cc:	4770      	bx	lr
    return 32U;
 80007ce:	2320      	movs	r3, #32
 80007d0:	e7ea      	b.n	80007a8 <LL_GPIO_SetPinMode+0xe>
 80007d2:	2120      	movs	r1, #32
 80007d4:	e7f4      	b.n	80007c0 <LL_GPIO_SetPinMode+0x26>

080007d6 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 80007d6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80007d8:	4607      	mov	r7, r0
 80007da:	460e      	mov	r6, r1
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 80007dc:	680d      	ldr	r5, [r1, #0]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80007de:	fa95 f5a5 	rbit	r5, r5
  if (value == 0U)
 80007e2:	b115      	cbz	r5, 80007ea <LL_GPIO_Init+0x14>
  return __builtin_clz(value);
 80007e4:	fab5 f585 	clz	r5, r5
 80007e8:	e01a      	b.n	8000820 <LL_GPIO_Init+0x4a>
    return 32U;
 80007ea:	2520      	movs	r5, #32
  
  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 80007ec:	e018      	b.n	8000820 <LL_GPIO_Init+0x4a>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
        
        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 80007ee:	68b2      	ldr	r2, [r6, #8]
 80007f0:	4621      	mov	r1, r4
 80007f2:	4638      	mov	r0, r7
 80007f4:	f7ff ff58 	bl	80006a8 <LL_GPIO_SetPinSpeed>
        
        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));
        
        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 80007f8:	68f2      	ldr	r2, [r6, #12]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	ea23 0304 	bic.w	r3, r3, r4
 8000800:	fb04 f202 	mul.w	r2, r4, r2
 8000804:	4313      	orrs	r3, r2
 8000806:	607b      	str	r3, [r7, #4]
}
 8000808:	e016      	b.n	8000838 <LL_GPIO_Init+0x62>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800080a:	6972      	ldr	r2, [r6, #20]
 800080c:	4621      	mov	r1, r4
 800080e:	4638      	mov	r0, r7
 8000810:	f7ff ffa4 	bl	800075c <LL_GPIO_SetAFPin_8_15>
        }
      }
      
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8000814:	6872      	ldr	r2, [r6, #4]
 8000816:	4621      	mov	r1, r4
 8000818:	4638      	mov	r0, r7
 800081a:	f7ff ffbe 	bl	800079a <LL_GPIO_SetPinMode>
    }
    pinpos++;
 800081e:	3501      	adds	r5, #1
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8000820:	6834      	ldr	r4, [r6, #0]
 8000822:	fa34 f205 	lsrs.w	r2, r4, r5
 8000826:	d01d      	beq.n	8000864 <LL_GPIO_Init+0x8e>
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 8000828:	2201      	movs	r2, #1
 800082a:	40aa      	lsls	r2, r5
    if (currentpin)
 800082c:	4014      	ands	r4, r2
 800082e:	d0f6      	beq.n	800081e <LL_GPIO_Init+0x48>
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8000830:	6873      	ldr	r3, [r6, #4]
 8000832:	3b01      	subs	r3, #1
 8000834:	2b01      	cmp	r3, #1
 8000836:	d9da      	bls.n	80007ee <LL_GPIO_Init+0x18>
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8000838:	6932      	ldr	r2, [r6, #16]
 800083a:	4621      	mov	r1, r4
 800083c:	4638      	mov	r0, r7
 800083e:	f7ff ff51 	bl	80006e4 <LL_GPIO_SetPinPull>
      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8000842:	6873      	ldr	r3, [r6, #4]
 8000844:	2b02      	cmp	r3, #2
 8000846:	d1e5      	bne.n	8000814 <LL_GPIO_Init+0x3e>
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000848:	fa94 f3a4 	rbit	r3, r4
  if (value == 0U)
 800084c:	2b00      	cmp	r3, #0
 800084e:	d0dc      	beq.n	800080a <LL_GPIO_Init+0x34>
  return __builtin_clz(value);
 8000850:	fab3 f383 	clz	r3, r3
        if (POSITION_VAL(currentpin) < 0x00000008U)
 8000854:	2b07      	cmp	r3, #7
 8000856:	d8d8      	bhi.n	800080a <LL_GPIO_Init+0x34>
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8000858:	6972      	ldr	r2, [r6, #20]
 800085a:	4621      	mov	r1, r4
 800085c:	4638      	mov	r0, r7
 800085e:	f7ff ff5f 	bl	8000720 <LL_GPIO_SetAFPin_0_7>
 8000862:	e7d7      	b.n	8000814 <LL_GPIO_Init+0x3e>
  }

  return (SUCCESS);
}
 8000864:	2000      	movs	r0, #0
 8000866:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08000868 <RCC_GetHCLKClockFreq>:
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8000868:	4b03      	ldr	r3, [pc, #12]	@ (8000878 <RCC_GetHCLKClockFreq+0x10>)
 800086a:	689b      	ldr	r3, [r3, #8]
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 800086c:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8000870:	4a02      	ldr	r2, [pc, #8]	@ (800087c <RCC_GetHCLKClockFreq+0x14>)
 8000872:	5cd3      	ldrb	r3, [r2, r3]
}
 8000874:	40d8      	lsrs	r0, r3
 8000876:	4770      	bx	lr
 8000878:	40023800 	.word	0x40023800
 800087c:	08000e68 	.word	0x08000e68

08000880 <RCC_GetPCLK1ClockFreq>:
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8000880:	4b03      	ldr	r3, [pc, #12]	@ (8000890 <RCC_GetPCLK1ClockFreq+0x10>)
 8000882:	689b      	ldr	r3, [r3, #8]
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8000884:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8000888:	4a02      	ldr	r2, [pc, #8]	@ (8000894 <RCC_GetPCLK1ClockFreq+0x14>)
 800088a:	5cd3      	ldrb	r3, [r2, r3]
}
 800088c:	40d8      	lsrs	r0, r3
 800088e:	4770      	bx	lr
 8000890:	40023800 	.word	0x40023800
 8000894:	08000e60 	.word	0x08000e60

08000898 <RCC_GetPCLK2ClockFreq>:
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8000898:	4b03      	ldr	r3, [pc, #12]	@ (80008a8 <RCC_GetPCLK2ClockFreq+0x10>)
 800089a:	689b      	ldr	r3, [r3, #8]
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 800089c:	f3c3 3342 	ubfx	r3, r3, #13, #3
 80008a0:	4a02      	ldr	r2, [pc, #8]	@ (80008ac <RCC_GetPCLK2ClockFreq+0x14>)
 80008a2:	5cd3      	ldrb	r3, [r2, r3]
}
 80008a4:	40d8      	lsrs	r0, r3
 80008a6:	4770      	bx	lr
 80008a8:	40023800 	.word	0x40023800
 80008ac:	08000e60 	.word	0x08000e60

080008b0 <RCC_PLL_GetFreqDomain_SYS>:
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 80008b0:	4b0f      	ldr	r3, [pc, #60]	@ (80008f0 <RCC_PLL_GetFreqDomain_SYS+0x40>)
 80008b2:	685b      	ldr	r3, [r3, #4]
 80008b4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
     SYSCLK = PLL_VCO / (PLLP or PLLR)
  */
  pllsource = LL_RCC_PLL_GetMainSource();

  switch (pllsource)
 80008b8:	b923      	cbnz	r3, 80008c4 <RCC_PLL_GetFreqDomain_SYS+0x14>
  {
    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 80008ba:	4b0e      	ldr	r3, [pc, #56]	@ (80008f4 <RCC_PLL_GetFreqDomain_SYS+0x44>)
    default:
      pllinputfreq = HSI_VALUE;
      break;
  }

  if (SYSCLK_Source == LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 80008bc:	2808      	cmp	r0, #8
 80008be:	d003      	beq.n	80008c8 <RCC_PLL_GetFreqDomain_SYS+0x18>
  uint32_t plloutputfreq = 0U;
 80008c0:	2000      	movs	r0, #0
                                               LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

  return plloutputfreq;
}
 80008c2:	4770      	bx	lr
      pllinputfreq = HSE_VALUE;
 80008c4:	4b0c      	ldr	r3, [pc, #48]	@ (80008f8 <RCC_PLL_GetFreqDomain_SYS+0x48>)
 80008c6:	e7f9      	b.n	80008bc <RCC_PLL_GetFreqDomain_SYS+0xc>
  *         @arg @ref LL_RCC_PLLM_DIV_62
  *         @arg @ref LL_RCC_PLLM_DIV_63
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 80008c8:	4a09      	ldr	r2, [pc, #36]	@ (80008f0 <RCC_PLL_GetFreqDomain_SYS+0x40>)
 80008ca:	6851      	ldr	r1, [r2, #4]
 80008cc:	f001 013f 	and.w	r1, r1, #63	@ 0x3f
    plloutputfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 80008d0:	fbb3 f0f1 	udiv	r0, r3, r1
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 80008d4:	6853      	ldr	r3, [r2, #4]
 80008d6:	f3c3 1388 	ubfx	r3, r3, #6, #9
 80008da:	fb03 f000 	mul.w	r0, r3, r0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP));
 80008de:	6853      	ldr	r3, [r2, #4]
 80008e0:	f3c3 4301 	ubfx	r3, r3, #16, #2
 80008e4:	3301      	adds	r3, #1
 80008e6:	005b      	lsls	r3, r3, #1
 80008e8:	fbb0 f0f3 	udiv	r0, r0, r3
 80008ec:	4770      	bx	lr
 80008ee:	bf00      	nop
 80008f0:	40023800 	.word	0x40023800
 80008f4:	00f42400 	.word	0x00f42400
 80008f8:	007a1200 	.word	0x007a1200

080008fc <RCC_GetSystemClockFreq>:
{
 80008fc:	b508      	push	{r3, lr}
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80008fe:	4b08      	ldr	r3, [pc, #32]	@ (8000920 <RCC_GetSystemClockFreq+0x24>)
 8000900:	689b      	ldr	r3, [r3, #8]
 8000902:	f003 030c 	and.w	r3, r3, #12
  switch (LL_RCC_GetSysClkSource())
 8000906:	2b04      	cmp	r3, #4
 8000908:	d005      	beq.n	8000916 <RCC_GetSystemClockFreq+0x1a>
 800090a:	2b08      	cmp	r3, #8
 800090c:	d105      	bne.n	800091a <RCC_GetSystemClockFreq+0x1e>
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLL);
 800090e:	2008      	movs	r0, #8
 8000910:	f7ff ffce 	bl	80008b0 <RCC_PLL_GetFreqDomain_SYS>
}
 8000914:	bd08      	pop	{r3, pc}
      frequency = HSE_VALUE;
 8000916:	4803      	ldr	r0, [pc, #12]	@ (8000924 <RCC_GetSystemClockFreq+0x28>)
 8000918:	e7fc      	b.n	8000914 <RCC_GetSystemClockFreq+0x18>
  switch (LL_RCC_GetSysClkSource())
 800091a:	4803      	ldr	r0, [pc, #12]	@ (8000928 <RCC_GetSystemClockFreq+0x2c>)
  return frequency;
 800091c:	e7fa      	b.n	8000914 <RCC_GetSystemClockFreq+0x18>
 800091e:	bf00      	nop
 8000920:	40023800 	.word	0x40023800
 8000924:	007a1200 	.word	0x007a1200
 8000928:	00f42400 	.word	0x00f42400

0800092c <LL_RCC_GetSystemClocksFreq>:
{
 800092c:	b510      	push	{r4, lr}
 800092e:	4604      	mov	r4, r0
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 8000930:	f7ff ffe4 	bl	80008fc <RCC_GetSystemClockFreq>
 8000934:	6020      	str	r0, [r4, #0]
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 8000936:	f7ff ff97 	bl	8000868 <RCC_GetHCLKClockFreq>
 800093a:	6060      	str	r0, [r4, #4]
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 800093c:	f7ff ffa0 	bl	8000880 <RCC_GetPCLK1ClockFreq>
 8000940:	60a0      	str	r0, [r4, #8]
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 8000942:	6860      	ldr	r0, [r4, #4]
 8000944:	f7ff ffa8 	bl	8000898 <RCC_GetPCLK2ClockFreq>
 8000948:	60e0      	str	r0, [r4, #12]
}
 800094a:	bd10      	pop	{r4, pc}

0800094c <LL_USART_SetBaudRate>:
{
 800094c:	b510      	push	{r4, lr}
 800094e:	4604      	mov	r4, r0
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 8000950:	f5b2 4f00 	cmp.w	r2, #32768	@ 0x8000
 8000954:	d02f      	beq.n	80009b6 <LL_USART_SetBaudRate+0x6a>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8000956:	f04f 0c00 	mov.w	ip, #0
 800095a:	1848      	adds	r0, r1, r1
 800095c:	eb4c 0c0c 	adc.w	ip, ip, ip
 8000960:	1840      	adds	r0, r0, r1
 8000962:	f14c 0c00 	adc.w	ip, ip, #0
 8000966:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 800096a:	ea4c 7c50 	orr.w	ip, ip, r0, lsr #29
 800096e:	00c0      	lsls	r0, r0, #3
 8000970:	1840      	adds	r0, r0, r1
 8000972:	ea4f 0283 	mov.w	r2, r3, lsl #2
 8000976:	ea4f 7393 	mov.w	r3, r3, lsr #30
 800097a:	f14c 0100 	adc.w	r1, ip, #0
 800097e:	f7ff fc09 	bl	8000194 <__aeabi_uldivmod>
 8000982:	4924      	ldr	r1, [pc, #144]	@ (8000a14 <LL_USART_SetBaudRate+0xc8>)
 8000984:	fba1 2300 	umull	r2, r3, r1, r0
 8000988:	095b      	lsrs	r3, r3, #5
 800098a:	011a      	lsls	r2, r3, #4
 800098c:	b292      	uxth	r2, r2
 800098e:	f04f 0c64 	mov.w	ip, #100	@ 0x64
 8000992:	fb0c 0313 	mls	r3, ip, r3, r0
 8000996:	011b      	lsls	r3, r3, #4
 8000998:	3332      	adds	r3, #50	@ 0x32
 800099a:	fba1 1303 	umull	r1, r3, r1, r3
 800099e:	f3c3 134f 	ubfx	r3, r3, #5, #16
 80009a2:	f003 01f0 	and.w	r1, r3, #240	@ 0xf0
 80009a6:	440a      	add	r2, r1
 80009a8:	b292      	uxth	r2, r2
 80009aa:	f003 030f 	and.w	r3, r3, #15
 80009ae:	4413      	add	r3, r2
 80009b0:	b29b      	uxth	r3, r3
 80009b2:	60a3      	str	r3, [r4, #8]
}
 80009b4:	bd10      	pop	{r4, pc}
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 80009b6:	f04f 0c00 	mov.w	ip, #0
 80009ba:	1848      	adds	r0, r1, r1
 80009bc:	eb4c 020c 	adc.w	r2, ip, ip
 80009c0:	1840      	adds	r0, r0, r1
 80009c2:	f142 0200 	adc.w	r2, r2, #0
 80009c6:	00d2      	lsls	r2, r2, #3
 80009c8:	ea42 7250 	orr.w	r2, r2, r0, lsr #29
 80009cc:	00c0      	lsls	r0, r0, #3
 80009ce:	1840      	adds	r0, r0, r1
 80009d0:	f142 0100 	adc.w	r1, r2, #0
 80009d4:	18da      	adds	r2, r3, r3
 80009d6:	eb4c 030c 	adc.w	r3, ip, ip
 80009da:	f7ff fbdb 	bl	8000194 <__aeabi_uldivmod>
 80009de:	490d      	ldr	r1, [pc, #52]	@ (8000a14 <LL_USART_SetBaudRate+0xc8>)
 80009e0:	fba1 2300 	umull	r2, r3, r1, r0
 80009e4:	095b      	lsrs	r3, r3, #5
 80009e6:	011a      	lsls	r2, r3, #4
 80009e8:	b292      	uxth	r2, r2
 80009ea:	f04f 0c64 	mov.w	ip, #100	@ 0x64
 80009ee:	fb0c 0313 	mls	r3, ip, r3, r0
 80009f2:	00db      	lsls	r3, r3, #3
 80009f4:	3332      	adds	r3, #50	@ 0x32
 80009f6:	fba1 1303 	umull	r1, r3, r1, r3
 80009fa:	f3c3 134f 	ubfx	r3, r3, #5, #16
 80009fe:	0059      	lsls	r1, r3, #1
 8000a00:	f401 71f8 	and.w	r1, r1, #496	@ 0x1f0
 8000a04:	440a      	add	r2, r1
 8000a06:	b292      	uxth	r2, r2
 8000a08:	f003 0307 	and.w	r3, r3, #7
 8000a0c:	4413      	add	r3, r2
 8000a0e:	b29b      	uxth	r3, r3
 8000a10:	60a3      	str	r3, [r4, #8]
 8000a12:	e7cf      	b.n	80009b4 <LL_USART_SetBaudRate+0x68>
 8000a14:	51eb851f 	.word	0x51eb851f

08000a18 <LL_USART_Init>:
  return (READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE));
 8000a18:	68c3      	ldr	r3, [r0, #12]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 8000a1a:	f413 5f00 	tst.w	r3, #8192	@ 0x2000
 8000a1e:	d001      	beq.n	8000a24 <LL_USART_Init+0xc>
  ErrorStatus status = ERROR;
 8000a20:	2001      	movs	r0, #1
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
}
 8000a22:	4770      	bx	lr
{
 8000a24:	b530      	push	{r4, r5, lr}
 8000a26:	b085      	sub	sp, #20
 8000a28:	4604      	mov	r4, r0
 8000a2a:	460d      	mov	r5, r1
    MODIFY_REG(USARTx->CR1,
 8000a2c:	68c3      	ldr	r3, [r0, #12]
 8000a2e:	f423 4316 	bic.w	r3, r3, #38400	@ 0x9600
 8000a32:	f023 030c 	bic.w	r3, r3, #12
 8000a36:	684a      	ldr	r2, [r1, #4]
 8000a38:	68c9      	ldr	r1, [r1, #12]
 8000a3a:	430a      	orrs	r2, r1
 8000a3c:	6929      	ldr	r1, [r5, #16]
 8000a3e:	430a      	orrs	r2, r1
 8000a40:	69a9      	ldr	r1, [r5, #24]
 8000a42:	430a      	orrs	r2, r1
 8000a44:	4313      	orrs	r3, r2
 8000a46:	60c3      	str	r3, [r0, #12]
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 8000a48:	68ab      	ldr	r3, [r5, #8]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8000a4a:	6902      	ldr	r2, [r0, #16]
 8000a4c:	f422 5240 	bic.w	r2, r2, #12288	@ 0x3000
 8000a50:	4313      	orrs	r3, r2
 8000a52:	6103      	str	r3, [r0, #16]
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 8000a54:	696b      	ldr	r3, [r5, #20]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8000a56:	6942      	ldr	r2, [r0, #20]
 8000a58:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8000a5c:	4313      	orrs	r3, r2
 8000a5e:	6143      	str	r3, [r0, #20]
    LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 8000a60:	4668      	mov	r0, sp
 8000a62:	f7ff ff63 	bl	800092c <LL_RCC_GetSystemClocksFreq>
    if (USARTx == USART1)
 8000a66:	4b0f      	ldr	r3, [pc, #60]	@ (8000aa4 <LL_USART_Init+0x8c>)
 8000a68:	429c      	cmp	r4, r3
 8000a6a:	d008      	beq.n	8000a7e <LL_USART_Init+0x66>
    else if (USARTx == USART2)
 8000a6c:	4b0e      	ldr	r3, [pc, #56]	@ (8000aa8 <LL_USART_Init+0x90>)
 8000a6e:	429c      	cmp	r4, r3
 8000a70:	d00b      	beq.n	8000a8a <LL_USART_Init+0x72>
    else if (USARTx == USART6)
 8000a72:	4b0e      	ldr	r3, [pc, #56]	@ (8000aac <LL_USART_Init+0x94>)
 8000a74:	429c      	cmp	r4, r3
 8000a76:	d00a      	beq.n	8000a8e <LL_USART_Init+0x76>
  ErrorStatus status = ERROR;
 8000a78:	2001      	movs	r0, #1
}
 8000a7a:	b005      	add	sp, #20
 8000a7c:	bd30      	pop	{r4, r5, pc}
      periphclk = rcc_clocks.PCLK2_Frequency;
 8000a7e:	9903      	ldr	r1, [sp, #12]
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 8000a80:	b169      	cbz	r1, 8000a9e <LL_USART_Init+0x86>
        && (USART_InitStruct->BaudRate != 0U))
 8000a82:	682b      	ldr	r3, [r5, #0]
 8000a84:	b92b      	cbnz	r3, 8000a92 <LL_USART_Init+0x7a>
  ErrorStatus status = ERROR;
 8000a86:	2001      	movs	r0, #1
 8000a88:	e7f7      	b.n	8000a7a <LL_USART_Init+0x62>
      periphclk = rcc_clocks.PCLK1_Frequency;
 8000a8a:	9902      	ldr	r1, [sp, #8]
 8000a8c:	e7f8      	b.n	8000a80 <LL_USART_Init+0x68>
      periphclk = rcc_clocks.PCLK2_Frequency;
 8000a8e:	9903      	ldr	r1, [sp, #12]
 8000a90:	e7f6      	b.n	8000a80 <LL_USART_Init+0x68>
      LL_USART_SetBaudRate(USARTx,
 8000a92:	69aa      	ldr	r2, [r5, #24]
 8000a94:	4620      	mov	r0, r4
 8000a96:	f7ff ff59 	bl	800094c <LL_USART_SetBaudRate>
      status = SUCCESS;
 8000a9a:	2000      	movs	r0, #0
 8000a9c:	e7ed      	b.n	8000a7a <LL_USART_Init+0x62>
  ErrorStatus status = ERROR;
 8000a9e:	2001      	movs	r0, #1
 8000aa0:	e7eb      	b.n	8000a7a <LL_USART_Init+0x62>
 8000aa2:	bf00      	nop
 8000aa4:	40011000 	.word	0x40011000
 8000aa8:	40004400 	.word	0x40004400
 8000aac:	40011400 	.word	0x40011400

08000ab0 <LL_Init1msTick>:
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 8000ab0:	4b06      	ldr	r3, [pc, #24]	@ (8000acc <LL_Init1msTick+0x1c>)
 8000ab2:	fba3 2300 	umull	r2, r3, r3, r0
 8000ab6:	099b      	lsrs	r3, r3, #6
 8000ab8:	3b01      	subs	r3, #1
 8000aba:	f04f 22e0 	mov.w	r2, #3758153728	@ 0xe000e000
 8000abe:	6153      	str	r3, [r2, #20]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	6193      	str	r3, [r2, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ac4:	2305      	movs	r3, #5
 8000ac6:	6113      	str	r3, [r2, #16]
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
}
 8000ac8:	4770      	bx	lr
 8000aca:	bf00      	nop
 8000acc:	10624dd3 	.word	0x10624dd3

08000ad0 <LL_SetSystemCoreClock>:
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8000ad0:	4b01      	ldr	r3, [pc, #4]	@ (8000ad8 <LL_SetSystemCoreClock+0x8>)
 8000ad2:	6018      	str	r0, [r3, #0]
}
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop
 8000ad8:	20000004 	.word	0x20000004

08000adc <SystemInit>:
 * @retval None
 */
void SystemInit(void) {
	/* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
	SCB->CPACR |= ((3UL << 10 * 2) | (3UL << 11 * 2)); /* set CP10 and CP11 Full Access */
 8000adc:	4a03      	ldr	r2, [pc, #12]	@ (8000aec <SystemInit+0x10>)
 8000ade:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 8000ae2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000ae6:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

	/* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000aea:	4770      	bx	lr
 8000aec:	e000ed00 	.word	0xe000ed00

08000af0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000af0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000b28 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000af4:	f7ff fff2 	bl	8000adc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000af8:	480c      	ldr	r0, [pc, #48]	@ (8000b2c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000afa:	490d      	ldr	r1, [pc, #52]	@ (8000b30 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000afc:	4a0d      	ldr	r2, [pc, #52]	@ (8000b34 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000afe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b00:	e002      	b.n	8000b08 <LoopCopyDataInit>

08000b02 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b02:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b04:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b06:	3304      	adds	r3, #4

08000b08 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b08:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b0a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b0c:	d3f9      	bcc.n	8000b02 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b0e:	4a0a      	ldr	r2, [pc, #40]	@ (8000b38 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000b10:	4c0a      	ldr	r4, [pc, #40]	@ (8000b3c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000b12:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b14:	e001      	b.n	8000b1a <LoopFillZerobss>

08000b16 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b16:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b18:	3204      	adds	r2, #4

08000b1a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b1a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b1c:	d3fb      	bcc.n	8000b16 <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8000b1e:	f000 f811 	bl	8000b44 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000b22:	f7ff fce9 	bl	80004f8 <main>
  bx  lr    
 8000b26:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000b28:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000b2c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b30:	20000008 	.word	0x20000008
  ldr r2, =_sidata
 8000b34:	08000e88 	.word	0x08000e88
  ldr r2, =_sbss
 8000b38:	20000008 	.word	0x20000008
  ldr r4, =_ebss
 8000b3c:	20000024 	.word	0x20000024

08000b40 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000b40:	e7fe      	b.n	8000b40 <ADC_IRQHandler>
	...

08000b44 <__libc_init_array>:
 8000b44:	b570      	push	{r4, r5, r6, lr}
 8000b46:	4b0d      	ldr	r3, [pc, #52]	@ (8000b7c <__libc_init_array+0x38>)
 8000b48:	4d0d      	ldr	r5, [pc, #52]	@ (8000b80 <__libc_init_array+0x3c>)
 8000b4a:	1b5b      	subs	r3, r3, r5
 8000b4c:	109c      	asrs	r4, r3, #2
 8000b4e:	2600      	movs	r6, #0
 8000b50:	42a6      	cmp	r6, r4
 8000b52:	d109      	bne.n	8000b68 <__libc_init_array+0x24>
 8000b54:	f000 f978 	bl	8000e48 <_init>
 8000b58:	4d0a      	ldr	r5, [pc, #40]	@ (8000b84 <__libc_init_array+0x40>)
 8000b5a:	4b0b      	ldr	r3, [pc, #44]	@ (8000b88 <__libc_init_array+0x44>)
 8000b5c:	1b5b      	subs	r3, r3, r5
 8000b5e:	109c      	asrs	r4, r3, #2
 8000b60:	2600      	movs	r6, #0
 8000b62:	42a6      	cmp	r6, r4
 8000b64:	d105      	bne.n	8000b72 <__libc_init_array+0x2e>
 8000b66:	bd70      	pop	{r4, r5, r6, pc}
 8000b68:	f855 3b04 	ldr.w	r3, [r5], #4
 8000b6c:	4798      	blx	r3
 8000b6e:	3601      	adds	r6, #1
 8000b70:	e7ee      	b.n	8000b50 <__libc_init_array+0xc>
 8000b72:	f855 3b04 	ldr.w	r3, [r5], #4
 8000b76:	4798      	blx	r3
 8000b78:	3601      	adds	r6, #1
 8000b7a:	e7f2      	b.n	8000b62 <__libc_init_array+0x1e>
 8000b7c:	08000e80 	.word	0x08000e80
 8000b80:	08000e80 	.word	0x08000e80
 8000b84:	08000e80 	.word	0x08000e80
 8000b88:	08000e84 	.word	0x08000e84

08000b8c <__udivmoddi4>:
 8000b8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b90:	468c      	mov	ip, r1
 8000b92:	468e      	mov	lr, r1
 8000b94:	9e08      	ldr	r6, [sp, #32]
 8000b96:	4615      	mov	r5, r2
 8000b98:	4604      	mov	r4, r0
 8000b9a:	4619      	mov	r1, r3
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	f040 80d0 	bne.w	8000d42 <__udivmoddi4+0x1b6>
 8000ba2:	4572      	cmp	r2, lr
 8000ba4:	d947      	bls.n	8000c36 <__udivmoddi4+0xaa>
 8000ba6:	fab2 f782 	clz	r7, r2
 8000baa:	b14f      	cbz	r7, 8000bc0 <__udivmoddi4+0x34>
 8000bac:	f1c7 0320 	rsb	r3, r7, #32
 8000bb0:	fa0e fc07 	lsl.w	ip, lr, r7
 8000bb4:	fa20 f303 	lsr.w	r3, r0, r3
 8000bb8:	40bd      	lsls	r5, r7
 8000bba:	ea43 0c0c 	orr.w	ip, r3, ip
 8000bbe:	40bc      	lsls	r4, r7
 8000bc0:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000bc4:	b2a8      	uxth	r0, r5
 8000bc6:	fbbc f8fe 	udiv	r8, ip, lr
 8000bca:	0c23      	lsrs	r3, r4, #16
 8000bcc:	fb0e cc18 	mls	ip, lr, r8, ip
 8000bd0:	fb08 f900 	mul.w	r9, r8, r0
 8000bd4:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
 8000bd8:	4599      	cmp	r9, r3
 8000bda:	d928      	bls.n	8000c2e <__udivmoddi4+0xa2>
 8000bdc:	18eb      	adds	r3, r5, r3
 8000bde:	f108 32ff 	add.w	r2, r8, #4294967295	@ 0xffffffff
 8000be2:	d204      	bcs.n	8000bee <__udivmoddi4+0x62>
 8000be4:	4599      	cmp	r9, r3
 8000be6:	d902      	bls.n	8000bee <__udivmoddi4+0x62>
 8000be8:	f1a8 0202 	sub.w	r2, r8, #2
 8000bec:	442b      	add	r3, r5
 8000bee:	eba3 0309 	sub.w	r3, r3, r9
 8000bf2:	b2a4      	uxth	r4, r4
 8000bf4:	fbb3 fcfe 	udiv	ip, r3, lr
 8000bf8:	fb0e 331c 	mls	r3, lr, ip, r3
 8000bfc:	fb0c f000 	mul.w	r0, ip, r0
 8000c00:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c04:	42a0      	cmp	r0, r4
 8000c06:	d914      	bls.n	8000c32 <__udivmoddi4+0xa6>
 8000c08:	192c      	adds	r4, r5, r4
 8000c0a:	f10c 33ff 	add.w	r3, ip, #4294967295	@ 0xffffffff
 8000c0e:	d204      	bcs.n	8000c1a <__udivmoddi4+0x8e>
 8000c10:	42a0      	cmp	r0, r4
 8000c12:	d902      	bls.n	8000c1a <__udivmoddi4+0x8e>
 8000c14:	f1ac 0302 	sub.w	r3, ip, #2
 8000c18:	442c      	add	r4, r5
 8000c1a:	1a24      	subs	r4, r4, r0
 8000c1c:	ea43 4002 	orr.w	r0, r3, r2, lsl #16
 8000c20:	b11e      	cbz	r6, 8000c2a <__udivmoddi4+0x9e>
 8000c22:	40fc      	lsrs	r4, r7
 8000c24:	2300      	movs	r3, #0
 8000c26:	6034      	str	r4, [r6, #0]
 8000c28:	6073      	str	r3, [r6, #4]
 8000c2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c2e:	4642      	mov	r2, r8
 8000c30:	e7dd      	b.n	8000bee <__udivmoddi4+0x62>
 8000c32:	4663      	mov	r3, ip
 8000c34:	e7f1      	b.n	8000c1a <__udivmoddi4+0x8e>
 8000c36:	2a00      	cmp	r2, #0
 8000c38:	d079      	beq.n	8000d2e <__udivmoddi4+0x1a2>
 8000c3a:	fab2 f382 	clz	r3, r2
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	d03f      	beq.n	8000cc2 <__udivmoddi4+0x136>
 8000c42:	4619      	mov	r1, r3
 8000c44:	f1c1 0320 	rsb	r3, r1, #32
 8000c48:	fa02 f501 	lsl.w	r5, r2, r1
 8000c4c:	fa2e f203 	lsr.w	r2, lr, r3
 8000c50:	fa0e fe01 	lsl.w	lr, lr, r1
 8000c54:	fa20 f303 	lsr.w	r3, r0, r3
 8000c58:	ea43 030e 	orr.w	r3, r3, lr
 8000c5c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c60:	fa00 f401 	lsl.w	r4, r0, r1
 8000c64:	fbb2 fcfe 	udiv	ip, r2, lr
 8000c68:	b2af      	uxth	r7, r5
 8000c6a:	fb0e 201c 	mls	r0, lr, ip, r2
 8000c6e:	0c1a      	lsrs	r2, r3, #16
 8000c70:	fb0c f807 	mul.w	r8, ip, r7
 8000c74:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000c78:	4590      	cmp	r8, r2
 8000c7a:	d95a      	bls.n	8000d32 <__udivmoddi4+0x1a6>
 8000c7c:	18aa      	adds	r2, r5, r2
 8000c7e:	f10c 30ff 	add.w	r0, ip, #4294967295	@ 0xffffffff
 8000c82:	d204      	bcs.n	8000c8e <__udivmoddi4+0x102>
 8000c84:	4590      	cmp	r8, r2
 8000c86:	d902      	bls.n	8000c8e <__udivmoddi4+0x102>
 8000c88:	f1ac 0002 	sub.w	r0, ip, #2
 8000c8c:	442a      	add	r2, r5
 8000c8e:	eba2 0208 	sub.w	r2, r2, r8
 8000c92:	b29b      	uxth	r3, r3
 8000c94:	fbb2 fcfe 	udiv	ip, r2, lr
 8000c98:	fb0e 221c 	mls	r2, lr, ip, r2
 8000c9c:	fb0c f707 	mul.w	r7, ip, r7
 8000ca0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000ca4:	429f      	cmp	r7, r3
 8000ca6:	d946      	bls.n	8000d36 <__udivmoddi4+0x1aa>
 8000ca8:	18eb      	adds	r3, r5, r3
 8000caa:	f10c 32ff 	add.w	r2, ip, #4294967295	@ 0xffffffff
 8000cae:	d204      	bcs.n	8000cba <__udivmoddi4+0x12e>
 8000cb0:	429f      	cmp	r7, r3
 8000cb2:	d902      	bls.n	8000cba <__udivmoddi4+0x12e>
 8000cb4:	f1ac 0202 	sub.w	r2, ip, #2
 8000cb8:	442b      	add	r3, r5
 8000cba:	1bdb      	subs	r3, r3, r7
 8000cbc:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000cc0:	e002      	b.n	8000cc8 <__udivmoddi4+0x13c>
 8000cc2:	ebae 0302 	sub.w	r3, lr, r2
 8000cc6:	2201      	movs	r2, #1
 8000cc8:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000ccc:	b2af      	uxth	r7, r5
 8000cce:	fbb3 fcfe 	udiv	ip, r3, lr
 8000cd2:	0c20      	lsrs	r0, r4, #16
 8000cd4:	fb0e 331c 	mls	r3, lr, ip, r3
 8000cd8:	fb0c f807 	mul.w	r8, ip, r7
 8000cdc:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000ce0:	4598      	cmp	r8, r3
 8000ce2:	d92a      	bls.n	8000d3a <__udivmoddi4+0x1ae>
 8000ce4:	18eb      	adds	r3, r5, r3
 8000ce6:	f10c 30ff 	add.w	r0, ip, #4294967295	@ 0xffffffff
 8000cea:	d204      	bcs.n	8000cf6 <__udivmoddi4+0x16a>
 8000cec:	4598      	cmp	r8, r3
 8000cee:	d902      	bls.n	8000cf6 <__udivmoddi4+0x16a>
 8000cf0:	f1ac 0002 	sub.w	r0, ip, #2
 8000cf4:	442b      	add	r3, r5
 8000cf6:	eba3 0308 	sub.w	r3, r3, r8
 8000cfa:	b2a4      	uxth	r4, r4
 8000cfc:	fbb3 fcfe 	udiv	ip, r3, lr
 8000d00:	fb0e 331c 	mls	r3, lr, ip, r3
 8000d04:	fb0c f707 	mul.w	r7, ip, r7
 8000d08:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d0c:	42a7      	cmp	r7, r4
 8000d0e:	d916      	bls.n	8000d3e <__udivmoddi4+0x1b2>
 8000d10:	192c      	adds	r4, r5, r4
 8000d12:	f10c 33ff 	add.w	r3, ip, #4294967295	@ 0xffffffff
 8000d16:	d204      	bcs.n	8000d22 <__udivmoddi4+0x196>
 8000d18:	42a7      	cmp	r7, r4
 8000d1a:	d902      	bls.n	8000d22 <__udivmoddi4+0x196>
 8000d1c:	f1ac 0302 	sub.w	r3, ip, #2
 8000d20:	442c      	add	r4, r5
 8000d22:	1be4      	subs	r4, r4, r7
 8000d24:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000d28:	460f      	mov	r7, r1
 8000d2a:	4611      	mov	r1, r2
 8000d2c:	e778      	b.n	8000c20 <__udivmoddi4+0x94>
 8000d2e:	211f      	movs	r1, #31
 8000d30:	e788      	b.n	8000c44 <__udivmoddi4+0xb8>
 8000d32:	4660      	mov	r0, ip
 8000d34:	e7ab      	b.n	8000c8e <__udivmoddi4+0x102>
 8000d36:	4662      	mov	r2, ip
 8000d38:	e7bf      	b.n	8000cba <__udivmoddi4+0x12e>
 8000d3a:	4660      	mov	r0, ip
 8000d3c:	e7db      	b.n	8000cf6 <__udivmoddi4+0x16a>
 8000d3e:	4663      	mov	r3, ip
 8000d40:	e7ef      	b.n	8000d22 <__udivmoddi4+0x196>
 8000d42:	4573      	cmp	r3, lr
 8000d44:	d906      	bls.n	8000d54 <__udivmoddi4+0x1c8>
 8000d46:	b916      	cbnz	r6, 8000d4e <__udivmoddi4+0x1c2>
 8000d48:	2100      	movs	r1, #0
 8000d4a:	4608      	mov	r0, r1
 8000d4c:	e76d      	b.n	8000c2a <__udivmoddi4+0x9e>
 8000d4e:	e9c6 0e00 	strd	r0, lr, [r6]
 8000d52:	e7f9      	b.n	8000d48 <__udivmoddi4+0x1bc>
 8000d54:	fab3 f783 	clz	r7, r3
 8000d58:	b987      	cbnz	r7, 8000d7c <__udivmoddi4+0x1f0>
 8000d5a:	4573      	cmp	r3, lr
 8000d5c:	d301      	bcc.n	8000d62 <__udivmoddi4+0x1d6>
 8000d5e:	4282      	cmp	r2, r0
 8000d60:	d807      	bhi.n	8000d72 <__udivmoddi4+0x1e6>
 8000d62:	1a84      	subs	r4, r0, r2
 8000d64:	eb6e 0303 	sbc.w	r3, lr, r3
 8000d68:	2001      	movs	r0, #1
 8000d6a:	469c      	mov	ip, r3
 8000d6c:	b91e      	cbnz	r6, 8000d76 <__udivmoddi4+0x1ea>
 8000d6e:	2100      	movs	r1, #0
 8000d70:	e75b      	b.n	8000c2a <__udivmoddi4+0x9e>
 8000d72:	4638      	mov	r0, r7
 8000d74:	e7fa      	b.n	8000d6c <__udivmoddi4+0x1e0>
 8000d76:	e9c6 4c00 	strd	r4, ip, [r6]
 8000d7a:	e7f8      	b.n	8000d6e <__udivmoddi4+0x1e2>
 8000d7c:	f1c7 0c20 	rsb	ip, r7, #32
 8000d80:	40bb      	lsls	r3, r7
 8000d82:	fa22 f50c 	lsr.w	r5, r2, ip
 8000d86:	431d      	orrs	r5, r3
 8000d88:	fa20 f10c 	lsr.w	r1, r0, ip
 8000d8c:	fa2e f30c 	lsr.w	r3, lr, ip
 8000d90:	fa0e fe07 	lsl.w	lr, lr, r7
 8000d94:	ea41 010e 	orr.w	r1, r1, lr
 8000d98:	ea4f 4915 	mov.w	r9, r5, lsr #16
 8000d9c:	fa00 f407 	lsl.w	r4, r0, r7
 8000da0:	fbb3 f8f9 	udiv	r8, r3, r9
 8000da4:	fa1f fe85 	uxth.w	lr, r5
 8000da8:	fb09 3018 	mls	r0, r9, r8, r3
 8000dac:	0c0b      	lsrs	r3, r1, #16
 8000dae:	fb08 fa0e 	mul.w	sl, r8, lr
 8000db2:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8000db6:	459a      	cmp	sl, r3
 8000db8:	fa02 f207 	lsl.w	r2, r2, r7
 8000dbc:	d940      	bls.n	8000e40 <__udivmoddi4+0x2b4>
 8000dbe:	18eb      	adds	r3, r5, r3
 8000dc0:	f108 30ff 	add.w	r0, r8, #4294967295	@ 0xffffffff
 8000dc4:	d204      	bcs.n	8000dd0 <__udivmoddi4+0x244>
 8000dc6:	459a      	cmp	sl, r3
 8000dc8:	d902      	bls.n	8000dd0 <__udivmoddi4+0x244>
 8000dca:	f1a8 0002 	sub.w	r0, r8, #2
 8000dce:	442b      	add	r3, r5
 8000dd0:	eba3 030a 	sub.w	r3, r3, sl
 8000dd4:	b289      	uxth	r1, r1
 8000dd6:	fbb3 f8f9 	udiv	r8, r3, r9
 8000dda:	fb09 3318 	mls	r3, r9, r8, r3
 8000dde:	fb08 fe0e 	mul.w	lr, r8, lr
 8000de2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000de6:	458e      	cmp	lr, r1
 8000de8:	d92c      	bls.n	8000e44 <__udivmoddi4+0x2b8>
 8000dea:	1869      	adds	r1, r5, r1
 8000dec:	f108 33ff 	add.w	r3, r8, #4294967295	@ 0xffffffff
 8000df0:	d204      	bcs.n	8000dfc <__udivmoddi4+0x270>
 8000df2:	458e      	cmp	lr, r1
 8000df4:	d902      	bls.n	8000dfc <__udivmoddi4+0x270>
 8000df6:	f1a8 0302 	sub.w	r3, r8, #2
 8000dfa:	4429      	add	r1, r5
 8000dfc:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000e00:	fba0 9802 	umull	r9, r8, r0, r2
 8000e04:	eba1 010e 	sub.w	r1, r1, lr
 8000e08:	4541      	cmp	r1, r8
 8000e0a:	46ce      	mov	lr, r9
 8000e0c:	4643      	mov	r3, r8
 8000e0e:	d302      	bcc.n	8000e16 <__udivmoddi4+0x28a>
 8000e10:	d106      	bne.n	8000e20 <__udivmoddi4+0x294>
 8000e12:	454c      	cmp	r4, r9
 8000e14:	d204      	bcs.n	8000e20 <__udivmoddi4+0x294>
 8000e16:	ebb9 0e02 	subs.w	lr, r9, r2
 8000e1a:	eb68 0305 	sbc.w	r3, r8, r5
 8000e1e:	3801      	subs	r0, #1
 8000e20:	2e00      	cmp	r6, #0
 8000e22:	d0a4      	beq.n	8000d6e <__udivmoddi4+0x1e2>
 8000e24:	ebb4 020e 	subs.w	r2, r4, lr
 8000e28:	eb61 0103 	sbc.w	r1, r1, r3
 8000e2c:	fa01 fc0c 	lsl.w	ip, r1, ip
 8000e30:	fa22 f307 	lsr.w	r3, r2, r7
 8000e34:	ea4c 0303 	orr.w	r3, ip, r3
 8000e38:	40f9      	lsrs	r1, r7
 8000e3a:	e9c6 3100 	strd	r3, r1, [r6]
 8000e3e:	e796      	b.n	8000d6e <__udivmoddi4+0x1e2>
 8000e40:	4640      	mov	r0, r8
 8000e42:	e7c5      	b.n	8000dd0 <__udivmoddi4+0x244>
 8000e44:	4643      	mov	r3, r8
 8000e46:	e7d9      	b.n	8000dfc <__udivmoddi4+0x270>

08000e48 <_init>:
 8000e48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000e4a:	bf00      	nop
 8000e4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000e4e:	bc08      	pop	{r3}
 8000e50:	469e      	mov	lr, r3
 8000e52:	4770      	bx	lr

08000e54 <_fini>:
 8000e54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000e56:	bf00      	nop
 8000e58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000e5a:	bc08      	pop	{r3}
 8000e5c:	469e      	mov	lr, r3
 8000e5e:	4770      	bx	lr
