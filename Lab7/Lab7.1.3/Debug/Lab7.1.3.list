
Lab7.1.3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001a70  08000194  08000194  00001194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08001c04  08001c04  00002c04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001c1c  08001c1c  00003004  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08001c1c  08001c1c  00002c1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08001c24  08001c24  00003004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001c24  08001c24  00002c24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08001c28  08001c28  00002c28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000004  20000000  08001c2c  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000004  08001c30  00003004  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000020  08001c30  00003020  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00003004  2**0
                  CONTENTS, READONLY
 12 .debug_info   000039f8  00000000  00000000  00003034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000e45  00000000  00000000  00006a2c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000530  00000000  00000000  00007878  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000003c4  00000000  00000000  00007da8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00010323  00000000  00000000  0000816c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00004282  00000000  00000000  0001848f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0005c490  00000000  00000000  0001c711  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00078ba1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001460  00000000  00000000  00078be4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  0007a044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	@ (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000004 	.word	0x20000004
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08001bec 	.word	0x08001bec

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	@ (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	@ (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	@ (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000008 	.word	0x20000008
 80001d0:	08001bec 	.word	0x08001bec

080001d4 <__aeabi_uldivmod>:
 80001d4:	b953      	cbnz	r3, 80001ec <__aeabi_uldivmod+0x18>
 80001d6:	b94a      	cbnz	r2, 80001ec <__aeabi_uldivmod+0x18>
 80001d8:	2900      	cmp	r1, #0
 80001da:	bf08      	it	eq
 80001dc:	2800      	cmpeq	r0, #0
 80001de:	bf1c      	itt	ne
 80001e0:	f04f 31ff 	movne.w	r1, #4294967295
 80001e4:	f04f 30ff 	movne.w	r0, #4294967295
 80001e8:	f000 b988 	b.w	80004fc <__aeabi_idiv0>
 80001ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f4:	f000 f806 	bl	8000204 <__udivmoddi4>
 80001f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000200:	b004      	add	sp, #16
 8000202:	4770      	bx	lr

08000204 <__udivmoddi4>:
 8000204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000208:	9d08      	ldr	r5, [sp, #32]
 800020a:	468e      	mov	lr, r1
 800020c:	4604      	mov	r4, r0
 800020e:	4688      	mov	r8, r1
 8000210:	2b00      	cmp	r3, #0
 8000212:	d14a      	bne.n	80002aa <__udivmoddi4+0xa6>
 8000214:	428a      	cmp	r2, r1
 8000216:	4617      	mov	r7, r2
 8000218:	d962      	bls.n	80002e0 <__udivmoddi4+0xdc>
 800021a:	fab2 f682 	clz	r6, r2
 800021e:	b14e      	cbz	r6, 8000234 <__udivmoddi4+0x30>
 8000220:	f1c6 0320 	rsb	r3, r6, #32
 8000224:	fa01 f806 	lsl.w	r8, r1, r6
 8000228:	fa20 f303 	lsr.w	r3, r0, r3
 800022c:	40b7      	lsls	r7, r6
 800022e:	ea43 0808 	orr.w	r8, r3, r8
 8000232:	40b4      	lsls	r4, r6
 8000234:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000238:	fa1f fc87 	uxth.w	ip, r7
 800023c:	fbb8 f1fe 	udiv	r1, r8, lr
 8000240:	0c23      	lsrs	r3, r4, #16
 8000242:	fb0e 8811 	mls	r8, lr, r1, r8
 8000246:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800024a:	fb01 f20c 	mul.w	r2, r1, ip
 800024e:	429a      	cmp	r2, r3
 8000250:	d909      	bls.n	8000266 <__udivmoddi4+0x62>
 8000252:	18fb      	adds	r3, r7, r3
 8000254:	f101 30ff 	add.w	r0, r1, #4294967295
 8000258:	f080 80ea 	bcs.w	8000430 <__udivmoddi4+0x22c>
 800025c:	429a      	cmp	r2, r3
 800025e:	f240 80e7 	bls.w	8000430 <__udivmoddi4+0x22c>
 8000262:	3902      	subs	r1, #2
 8000264:	443b      	add	r3, r7
 8000266:	1a9a      	subs	r2, r3, r2
 8000268:	b2a3      	uxth	r3, r4
 800026a:	fbb2 f0fe 	udiv	r0, r2, lr
 800026e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000272:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000276:	fb00 fc0c 	mul.w	ip, r0, ip
 800027a:	459c      	cmp	ip, r3
 800027c:	d909      	bls.n	8000292 <__udivmoddi4+0x8e>
 800027e:	18fb      	adds	r3, r7, r3
 8000280:	f100 32ff 	add.w	r2, r0, #4294967295
 8000284:	f080 80d6 	bcs.w	8000434 <__udivmoddi4+0x230>
 8000288:	459c      	cmp	ip, r3
 800028a:	f240 80d3 	bls.w	8000434 <__udivmoddi4+0x230>
 800028e:	443b      	add	r3, r7
 8000290:	3802      	subs	r0, #2
 8000292:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000296:	eba3 030c 	sub.w	r3, r3, ip
 800029a:	2100      	movs	r1, #0
 800029c:	b11d      	cbz	r5, 80002a6 <__udivmoddi4+0xa2>
 800029e:	40f3      	lsrs	r3, r6
 80002a0:	2200      	movs	r2, #0
 80002a2:	e9c5 3200 	strd	r3, r2, [r5]
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	428b      	cmp	r3, r1
 80002ac:	d905      	bls.n	80002ba <__udivmoddi4+0xb6>
 80002ae:	b10d      	cbz	r5, 80002b4 <__udivmoddi4+0xb0>
 80002b0:	e9c5 0100 	strd	r0, r1, [r5]
 80002b4:	2100      	movs	r1, #0
 80002b6:	4608      	mov	r0, r1
 80002b8:	e7f5      	b.n	80002a6 <__udivmoddi4+0xa2>
 80002ba:	fab3 f183 	clz	r1, r3
 80002be:	2900      	cmp	r1, #0
 80002c0:	d146      	bne.n	8000350 <__udivmoddi4+0x14c>
 80002c2:	4573      	cmp	r3, lr
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xc8>
 80002c6:	4282      	cmp	r2, r0
 80002c8:	f200 8105 	bhi.w	80004d6 <__udivmoddi4+0x2d2>
 80002cc:	1a84      	subs	r4, r0, r2
 80002ce:	eb6e 0203 	sbc.w	r2, lr, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	4690      	mov	r8, r2
 80002d6:	2d00      	cmp	r5, #0
 80002d8:	d0e5      	beq.n	80002a6 <__udivmoddi4+0xa2>
 80002da:	e9c5 4800 	strd	r4, r8, [r5]
 80002de:	e7e2      	b.n	80002a6 <__udivmoddi4+0xa2>
 80002e0:	2a00      	cmp	r2, #0
 80002e2:	f000 8090 	beq.w	8000406 <__udivmoddi4+0x202>
 80002e6:	fab2 f682 	clz	r6, r2
 80002ea:	2e00      	cmp	r6, #0
 80002ec:	f040 80a4 	bne.w	8000438 <__udivmoddi4+0x234>
 80002f0:	1a8a      	subs	r2, r1, r2
 80002f2:	0c03      	lsrs	r3, r0, #16
 80002f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002f8:	b280      	uxth	r0, r0
 80002fa:	b2bc      	uxth	r4, r7
 80002fc:	2101      	movs	r1, #1
 80002fe:	fbb2 fcfe 	udiv	ip, r2, lr
 8000302:	fb0e 221c 	mls	r2, lr, ip, r2
 8000306:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800030a:	fb04 f20c 	mul.w	r2, r4, ip
 800030e:	429a      	cmp	r2, r3
 8000310:	d907      	bls.n	8000322 <__udivmoddi4+0x11e>
 8000312:	18fb      	adds	r3, r7, r3
 8000314:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000318:	d202      	bcs.n	8000320 <__udivmoddi4+0x11c>
 800031a:	429a      	cmp	r2, r3
 800031c:	f200 80e0 	bhi.w	80004e0 <__udivmoddi4+0x2dc>
 8000320:	46c4      	mov	ip, r8
 8000322:	1a9b      	subs	r3, r3, r2
 8000324:	fbb3 f2fe 	udiv	r2, r3, lr
 8000328:	fb0e 3312 	mls	r3, lr, r2, r3
 800032c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000330:	fb02 f404 	mul.w	r4, r2, r4
 8000334:	429c      	cmp	r4, r3
 8000336:	d907      	bls.n	8000348 <__udivmoddi4+0x144>
 8000338:	18fb      	adds	r3, r7, r3
 800033a:	f102 30ff 	add.w	r0, r2, #4294967295
 800033e:	d202      	bcs.n	8000346 <__udivmoddi4+0x142>
 8000340:	429c      	cmp	r4, r3
 8000342:	f200 80ca 	bhi.w	80004da <__udivmoddi4+0x2d6>
 8000346:	4602      	mov	r2, r0
 8000348:	1b1b      	subs	r3, r3, r4
 800034a:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800034e:	e7a5      	b.n	800029c <__udivmoddi4+0x98>
 8000350:	f1c1 0620 	rsb	r6, r1, #32
 8000354:	408b      	lsls	r3, r1
 8000356:	fa22 f706 	lsr.w	r7, r2, r6
 800035a:	431f      	orrs	r7, r3
 800035c:	fa0e f401 	lsl.w	r4, lr, r1
 8000360:	fa20 f306 	lsr.w	r3, r0, r6
 8000364:	fa2e fe06 	lsr.w	lr, lr, r6
 8000368:	ea4f 4917 	mov.w	r9, r7, lsr #16
 800036c:	4323      	orrs	r3, r4
 800036e:	fa00 f801 	lsl.w	r8, r0, r1
 8000372:	fa1f fc87 	uxth.w	ip, r7
 8000376:	fbbe f0f9 	udiv	r0, lr, r9
 800037a:	0c1c      	lsrs	r4, r3, #16
 800037c:	fb09 ee10 	mls	lr, r9, r0, lr
 8000380:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000384:	fb00 fe0c 	mul.w	lr, r0, ip
 8000388:	45a6      	cmp	lr, r4
 800038a:	fa02 f201 	lsl.w	r2, r2, r1
 800038e:	d909      	bls.n	80003a4 <__udivmoddi4+0x1a0>
 8000390:	193c      	adds	r4, r7, r4
 8000392:	f100 3aff 	add.w	sl, r0, #4294967295
 8000396:	f080 809c 	bcs.w	80004d2 <__udivmoddi4+0x2ce>
 800039a:	45a6      	cmp	lr, r4
 800039c:	f240 8099 	bls.w	80004d2 <__udivmoddi4+0x2ce>
 80003a0:	3802      	subs	r0, #2
 80003a2:	443c      	add	r4, r7
 80003a4:	eba4 040e 	sub.w	r4, r4, lr
 80003a8:	fa1f fe83 	uxth.w	lr, r3
 80003ac:	fbb4 f3f9 	udiv	r3, r4, r9
 80003b0:	fb09 4413 	mls	r4, r9, r3, r4
 80003b4:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003b8:	fb03 fc0c 	mul.w	ip, r3, ip
 80003bc:	45a4      	cmp	ip, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1ce>
 80003c0:	193c      	adds	r4, r7, r4
 80003c2:	f103 3eff 	add.w	lr, r3, #4294967295
 80003c6:	f080 8082 	bcs.w	80004ce <__udivmoddi4+0x2ca>
 80003ca:	45a4      	cmp	ip, r4
 80003cc:	d97f      	bls.n	80004ce <__udivmoddi4+0x2ca>
 80003ce:	3b02      	subs	r3, #2
 80003d0:	443c      	add	r4, r7
 80003d2:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003d6:	eba4 040c 	sub.w	r4, r4, ip
 80003da:	fba0 ec02 	umull	lr, ip, r0, r2
 80003de:	4564      	cmp	r4, ip
 80003e0:	4673      	mov	r3, lr
 80003e2:	46e1      	mov	r9, ip
 80003e4:	d362      	bcc.n	80004ac <__udivmoddi4+0x2a8>
 80003e6:	d05f      	beq.n	80004a8 <__udivmoddi4+0x2a4>
 80003e8:	b15d      	cbz	r5, 8000402 <__udivmoddi4+0x1fe>
 80003ea:	ebb8 0203 	subs.w	r2, r8, r3
 80003ee:	eb64 0409 	sbc.w	r4, r4, r9
 80003f2:	fa04 f606 	lsl.w	r6, r4, r6
 80003f6:	fa22 f301 	lsr.w	r3, r2, r1
 80003fa:	431e      	orrs	r6, r3
 80003fc:	40cc      	lsrs	r4, r1
 80003fe:	e9c5 6400 	strd	r6, r4, [r5]
 8000402:	2100      	movs	r1, #0
 8000404:	e74f      	b.n	80002a6 <__udivmoddi4+0xa2>
 8000406:	fbb1 fcf2 	udiv	ip, r1, r2
 800040a:	0c01      	lsrs	r1, r0, #16
 800040c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000410:	b280      	uxth	r0, r0
 8000412:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000416:	463b      	mov	r3, r7
 8000418:	4638      	mov	r0, r7
 800041a:	463c      	mov	r4, r7
 800041c:	46b8      	mov	r8, r7
 800041e:	46be      	mov	lr, r7
 8000420:	2620      	movs	r6, #32
 8000422:	fbb1 f1f7 	udiv	r1, r1, r7
 8000426:	eba2 0208 	sub.w	r2, r2, r8
 800042a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800042e:	e766      	b.n	80002fe <__udivmoddi4+0xfa>
 8000430:	4601      	mov	r1, r0
 8000432:	e718      	b.n	8000266 <__udivmoddi4+0x62>
 8000434:	4610      	mov	r0, r2
 8000436:	e72c      	b.n	8000292 <__udivmoddi4+0x8e>
 8000438:	f1c6 0220 	rsb	r2, r6, #32
 800043c:	fa2e f302 	lsr.w	r3, lr, r2
 8000440:	40b7      	lsls	r7, r6
 8000442:	40b1      	lsls	r1, r6
 8000444:	fa20 f202 	lsr.w	r2, r0, r2
 8000448:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800044c:	430a      	orrs	r2, r1
 800044e:	fbb3 f8fe 	udiv	r8, r3, lr
 8000452:	b2bc      	uxth	r4, r7
 8000454:	fb0e 3318 	mls	r3, lr, r8, r3
 8000458:	0c11      	lsrs	r1, r2, #16
 800045a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045e:	fb08 f904 	mul.w	r9, r8, r4
 8000462:	40b0      	lsls	r0, r6
 8000464:	4589      	cmp	r9, r1
 8000466:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800046a:	b280      	uxth	r0, r0
 800046c:	d93e      	bls.n	80004ec <__udivmoddi4+0x2e8>
 800046e:	1879      	adds	r1, r7, r1
 8000470:	f108 3cff 	add.w	ip, r8, #4294967295
 8000474:	d201      	bcs.n	800047a <__udivmoddi4+0x276>
 8000476:	4589      	cmp	r9, r1
 8000478:	d81f      	bhi.n	80004ba <__udivmoddi4+0x2b6>
 800047a:	eba1 0109 	sub.w	r1, r1, r9
 800047e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000482:	fb09 f804 	mul.w	r8, r9, r4
 8000486:	fb0e 1119 	mls	r1, lr, r9, r1
 800048a:	b292      	uxth	r2, r2
 800048c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000490:	4542      	cmp	r2, r8
 8000492:	d229      	bcs.n	80004e8 <__udivmoddi4+0x2e4>
 8000494:	18ba      	adds	r2, r7, r2
 8000496:	f109 31ff 	add.w	r1, r9, #4294967295
 800049a:	d2c4      	bcs.n	8000426 <__udivmoddi4+0x222>
 800049c:	4542      	cmp	r2, r8
 800049e:	d2c2      	bcs.n	8000426 <__udivmoddi4+0x222>
 80004a0:	f1a9 0102 	sub.w	r1, r9, #2
 80004a4:	443a      	add	r2, r7
 80004a6:	e7be      	b.n	8000426 <__udivmoddi4+0x222>
 80004a8:	45f0      	cmp	r8, lr
 80004aa:	d29d      	bcs.n	80003e8 <__udivmoddi4+0x1e4>
 80004ac:	ebbe 0302 	subs.w	r3, lr, r2
 80004b0:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004b4:	3801      	subs	r0, #1
 80004b6:	46e1      	mov	r9, ip
 80004b8:	e796      	b.n	80003e8 <__udivmoddi4+0x1e4>
 80004ba:	eba7 0909 	sub.w	r9, r7, r9
 80004be:	4449      	add	r1, r9
 80004c0:	f1a8 0c02 	sub.w	ip, r8, #2
 80004c4:	fbb1 f9fe 	udiv	r9, r1, lr
 80004c8:	fb09 f804 	mul.w	r8, r9, r4
 80004cc:	e7db      	b.n	8000486 <__udivmoddi4+0x282>
 80004ce:	4673      	mov	r3, lr
 80004d0:	e77f      	b.n	80003d2 <__udivmoddi4+0x1ce>
 80004d2:	4650      	mov	r0, sl
 80004d4:	e766      	b.n	80003a4 <__udivmoddi4+0x1a0>
 80004d6:	4608      	mov	r0, r1
 80004d8:	e6fd      	b.n	80002d6 <__udivmoddi4+0xd2>
 80004da:	443b      	add	r3, r7
 80004dc:	3a02      	subs	r2, #2
 80004de:	e733      	b.n	8000348 <__udivmoddi4+0x144>
 80004e0:	f1ac 0c02 	sub.w	ip, ip, #2
 80004e4:	443b      	add	r3, r7
 80004e6:	e71c      	b.n	8000322 <__udivmoddi4+0x11e>
 80004e8:	4649      	mov	r1, r9
 80004ea:	e79c      	b.n	8000426 <__udivmoddi4+0x222>
 80004ec:	eba1 0109 	sub.w	r1, r1, r9
 80004f0:	46c4      	mov	ip, r8
 80004f2:	fbb1 f9fe 	udiv	r9, r1, lr
 80004f6:	fb09 f804 	mul.w	r8, r9, r4
 80004fa:	e7c4      	b.n	8000486 <__udivmoddi4+0x282>

080004fc <__aeabi_idiv0>:
 80004fc:	4770      	bx	lr
 80004fe:	bf00      	nop

08000500 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000500:	b480      	push	{r7}
 8000502:	b085      	sub	sp, #20
 8000504:	af00      	add	r7, sp, #0
 8000506:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000508:	687b      	ldr	r3, [r7, #4]
 800050a:	f003 0307 	and.w	r3, r3, #7
 800050e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000510:	4b0c      	ldr	r3, [pc, #48]	@ (8000544 <__NVIC_SetPriorityGrouping+0x44>)
 8000512:	68db      	ldr	r3, [r3, #12]
 8000514:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000516:	68ba      	ldr	r2, [r7, #8]
 8000518:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800051c:	4013      	ands	r3, r2
 800051e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000520:	68fb      	ldr	r3, [r7, #12]
 8000522:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000524:	68bb      	ldr	r3, [r7, #8]
 8000526:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000528:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800052c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000530:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000532:	4a04      	ldr	r2, [pc, #16]	@ (8000544 <__NVIC_SetPriorityGrouping+0x44>)
 8000534:	68bb      	ldr	r3, [r7, #8]
 8000536:	60d3      	str	r3, [r2, #12]
}
 8000538:	bf00      	nop
 800053a:	3714      	adds	r7, #20
 800053c:	46bd      	mov	sp, r7
 800053e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000542:	4770      	bx	lr
 8000544:	e000ed00 	.word	0xe000ed00

08000548 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 8000548:	b480      	push	{r7}
 800054a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 800054c:	4b05      	ldr	r3, [pc, #20]	@ (8000564 <LL_RCC_HSI_Enable+0x1c>)
 800054e:	681b      	ldr	r3, [r3, #0]
 8000550:	4a04      	ldr	r2, [pc, #16]	@ (8000564 <LL_RCC_HSI_Enable+0x1c>)
 8000552:	f043 0301 	orr.w	r3, r3, #1
 8000556:	6013      	str	r3, [r2, #0]
}
 8000558:	bf00      	nop
 800055a:	46bd      	mov	sp, r7
 800055c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000560:	4770      	bx	lr
 8000562:	bf00      	nop
 8000564:	40023800 	.word	0x40023800

08000568 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8000568:	b480      	push	{r7}
 800056a:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 800056c:	4b06      	ldr	r3, [pc, #24]	@ (8000588 <LL_RCC_HSI_IsReady+0x20>)
 800056e:	681b      	ldr	r3, [r3, #0]
 8000570:	f003 0302 	and.w	r3, r3, #2
 8000574:	2b02      	cmp	r3, #2
 8000576:	bf0c      	ite	eq
 8000578:	2301      	moveq	r3, #1
 800057a:	2300      	movne	r3, #0
 800057c:	b2db      	uxtb	r3, r3
}
 800057e:	4618      	mov	r0, r3
 8000580:	46bd      	mov	sp, r7
 8000582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000586:	4770      	bx	lr
 8000588:	40023800 	.word	0x40023800

0800058c <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll CR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 31
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 800058c:	b480      	push	{r7}
 800058e:	b083      	sub	sp, #12
 8000590:	af00      	add	r7, sp, #0
 8000592:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_HSITRIM, Value << RCC_CR_HSITRIM_Pos);
 8000594:	4b07      	ldr	r3, [pc, #28]	@ (80005b4 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 8000596:	681b      	ldr	r3, [r3, #0]
 8000598:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	00db      	lsls	r3, r3, #3
 80005a0:	4904      	ldr	r1, [pc, #16]	@ (80005b4 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 80005a2:	4313      	orrs	r3, r2
 80005a4:	600b      	str	r3, [r1, #0]
}
 80005a6:	bf00      	nop
 80005a8:	370c      	adds	r7, #12
 80005aa:	46bd      	mov	sp, r7
 80005ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b0:	4770      	bx	lr
 80005b2:	bf00      	nop
 80005b4:	40023800 	.word	0x40023800

080005b8 <LL_RCC_SetSysClkSource>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 80005b8:	b480      	push	{r7}
 80005ba:	b083      	sub	sp, #12
 80005bc:	af00      	add	r7, sp, #0
 80005be:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80005c0:	4b06      	ldr	r3, [pc, #24]	@ (80005dc <LL_RCC_SetSysClkSource+0x24>)
 80005c2:	689b      	ldr	r3, [r3, #8]
 80005c4:	f023 0203 	bic.w	r2, r3, #3
 80005c8:	4904      	ldr	r1, [pc, #16]	@ (80005dc <LL_RCC_SetSysClkSource+0x24>)
 80005ca:	687b      	ldr	r3, [r7, #4]
 80005cc:	4313      	orrs	r3, r2
 80005ce:	608b      	str	r3, [r1, #8]
}
 80005d0:	bf00      	nop
 80005d2:	370c      	adds	r7, #12
 80005d4:	46bd      	mov	sp, r7
 80005d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005da:	4770      	bx	lr
 80005dc:	40023800 	.word	0x40023800

080005e0 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLLR (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 80005e0:	b480      	push	{r7}
 80005e2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80005e4:	4b04      	ldr	r3, [pc, #16]	@ (80005f8 <LL_RCC_GetSysClkSource+0x18>)
 80005e6:	689b      	ldr	r3, [r3, #8]
 80005e8:	f003 030c 	and.w	r3, r3, #12
}
 80005ec:	4618      	mov	r0, r3
 80005ee:	46bd      	mov	sp, r7
 80005f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f4:	4770      	bx	lr
 80005f6:	bf00      	nop
 80005f8:	40023800 	.word	0x40023800

080005fc <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 80005fc:	b480      	push	{r7}
 80005fe:	b083      	sub	sp, #12
 8000600:	af00      	add	r7, sp, #0
 8000602:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8000604:	4b06      	ldr	r3, [pc, #24]	@ (8000620 <LL_RCC_SetAHBPrescaler+0x24>)
 8000606:	689b      	ldr	r3, [r3, #8]
 8000608:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800060c:	4904      	ldr	r1, [pc, #16]	@ (8000620 <LL_RCC_SetAHBPrescaler+0x24>)
 800060e:	687b      	ldr	r3, [r7, #4]
 8000610:	4313      	orrs	r3, r2
 8000612:	608b      	str	r3, [r1, #8]
}
 8000614:	bf00      	nop
 8000616:	370c      	adds	r7, #12
 8000618:	46bd      	mov	sp, r7
 800061a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800061e:	4770      	bx	lr
 8000620:	40023800 	.word	0x40023800

08000624 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8000624:	b480      	push	{r7}
 8000626:	b083      	sub	sp, #12
 8000628:	af00      	add	r7, sp, #0
 800062a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 800062c:	4b06      	ldr	r3, [pc, #24]	@ (8000648 <LL_RCC_SetAPB1Prescaler+0x24>)
 800062e:	689b      	ldr	r3, [r3, #8]
 8000630:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8000634:	4904      	ldr	r1, [pc, #16]	@ (8000648 <LL_RCC_SetAPB1Prescaler+0x24>)
 8000636:	687b      	ldr	r3, [r7, #4]
 8000638:	4313      	orrs	r3, r2
 800063a:	608b      	str	r3, [r1, #8]
}
 800063c:	bf00      	nop
 800063e:	370c      	adds	r7, #12
 8000640:	46bd      	mov	sp, r7
 8000642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000646:	4770      	bx	lr
 8000648:	40023800 	.word	0x40023800

0800064c <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 800064c:	b480      	push	{r7}
 800064e:	b083      	sub	sp, #12
 8000650:	af00      	add	r7, sp, #0
 8000652:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8000654:	4b06      	ldr	r3, [pc, #24]	@ (8000670 <LL_RCC_SetAPB2Prescaler+0x24>)
 8000656:	689b      	ldr	r3, [r3, #8]
 8000658:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800065c:	4904      	ldr	r1, [pc, #16]	@ (8000670 <LL_RCC_SetAPB2Prescaler+0x24>)
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	4313      	orrs	r3, r2
 8000662:	608b      	str	r3, [r1, #8]
}
 8000664:	bf00      	nop
 8000666:	370c      	adds	r7, #12
 8000668:	46bd      	mov	sp, r7
 800066a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800066e:	4770      	bx	lr
 8000670:	40023800 	.word	0x40023800

08000674 <LL_RCC_SetTIMPrescaler>:
  *         @arg @ref LL_RCC_TIM_PRESCALER_TWICE
  *         @arg @ref LL_RCC_TIM_PRESCALER_FOUR_TIMES
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetTIMPrescaler(uint32_t Prescaler)
{
 8000674:	b480      	push	{r7}
 8000676:	b083      	sub	sp, #12
 8000678:	af00      	add	r7, sp, #0
 800067a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->DCKCFGR, RCC_DCKCFGR_TIMPRE, Prescaler);
 800067c:	4b07      	ldr	r3, [pc, #28]	@ (800069c <LL_RCC_SetTIMPrescaler+0x28>)
 800067e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000682:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8000686:	4905      	ldr	r1, [pc, #20]	@ (800069c <LL_RCC_SetTIMPrescaler+0x28>)
 8000688:	687b      	ldr	r3, [r7, #4]
 800068a:	4313      	orrs	r3, r2
 800068c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
}
 8000690:	bf00      	nop
 8000692:	370c      	adds	r7, #12
 8000694:	46bd      	mov	sp, r7
 8000696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800069a:	4770      	bx	lr
 800069c:	40023800 	.word	0x40023800

080006a0 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 80006a0:	b480      	push	{r7}
 80006a2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 80006a4:	4b05      	ldr	r3, [pc, #20]	@ (80006bc <LL_RCC_PLL_Enable+0x1c>)
 80006a6:	681b      	ldr	r3, [r3, #0]
 80006a8:	4a04      	ldr	r2, [pc, #16]	@ (80006bc <LL_RCC_PLL_Enable+0x1c>)
 80006aa:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80006ae:	6013      	str	r3, [r2, #0]
}
 80006b0:	bf00      	nop
 80006b2:	46bd      	mov	sp, r7
 80006b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b8:	4770      	bx	lr
 80006ba:	bf00      	nop
 80006bc:	40023800 	.word	0x40023800

080006c0 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 80006c0:	b480      	push	{r7}
 80006c2:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY));
 80006c4:	4b07      	ldr	r3, [pc, #28]	@ (80006e4 <LL_RCC_PLL_IsReady+0x24>)
 80006c6:	681b      	ldr	r3, [r3, #0]
 80006c8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80006cc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80006d0:	bf0c      	ite	eq
 80006d2:	2301      	moveq	r3, #1
 80006d4:	2300      	movne	r3, #0
 80006d6:	b2db      	uxtb	r3, r3
}
 80006d8:	4618      	mov	r0, r3
 80006da:	46bd      	mov	sp, r7
 80006dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e0:	4770      	bx	lr
 80006e2:	bf00      	nop
 80006e4:	40023800 	.word	0x40023800

080006e8 <LL_RCC_PLL_ConfigDomain_SYS>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLM, uint32_t PLLN, uint32_t PLLP_R)
{
 80006e8:	b480      	push	{r7}
 80006ea:	b085      	sub	sp, #20
 80006ec:	af00      	add	r7, sp, #0
 80006ee:	60f8      	str	r0, [r7, #12]
 80006f0:	60b9      	str	r1, [r7, #8]
 80006f2:	607a      	str	r2, [r7, #4]
 80006f4:	603b      	str	r3, [r7, #0]
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM | RCC_PLLCFGR_PLLN,
 80006f6:	4b0d      	ldr	r3, [pc, #52]	@ (800072c <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 80006f8:	685a      	ldr	r2, [r3, #4]
 80006fa:	4b0d      	ldr	r3, [pc, #52]	@ (8000730 <LL_RCC_PLL_ConfigDomain_SYS+0x48>)
 80006fc:	4013      	ands	r3, r2
 80006fe:	68f9      	ldr	r1, [r7, #12]
 8000700:	68ba      	ldr	r2, [r7, #8]
 8000702:	4311      	orrs	r1, r2
 8000704:	687a      	ldr	r2, [r7, #4]
 8000706:	0192      	lsls	r2, r2, #6
 8000708:	430a      	orrs	r2, r1
 800070a:	4908      	ldr	r1, [pc, #32]	@ (800072c <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 800070c:	4313      	orrs	r3, r2
 800070e:	604b      	str	r3, [r1, #4]
             Source | PLLM | PLLN << RCC_PLLCFGR_PLLN_Pos);
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLP, PLLP_R);
 8000710:	4b06      	ldr	r3, [pc, #24]	@ (800072c <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 8000712:	685b      	ldr	r3, [r3, #4]
 8000714:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8000718:	4904      	ldr	r1, [pc, #16]	@ (800072c <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 800071a:	683b      	ldr	r3, [r7, #0]
 800071c:	4313      	orrs	r3, r2
 800071e:	604b      	str	r3, [r1, #4]
#if defined(RCC_PLLR_SYSCLK_SUPPORT)
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLR, PLLP_R);
#endif /* RCC_PLLR_SYSCLK_SUPPORT */
}
 8000720:	bf00      	nop
 8000722:	3714      	adds	r7, #20
 8000724:	46bd      	mov	sp, r7
 8000726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800072a:	4770      	bx	lr
 800072c:	40023800 	.word	0x40023800
 8000730:	ffbf8000 	.word	0xffbf8000

08000734 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000734:	b480      	push	{r7}
 8000736:	b085      	sub	sp, #20
 8000738:	af00      	add	r7, sp, #0
 800073a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 800073c:	4b08      	ldr	r3, [pc, #32]	@ (8000760 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800073e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000740:	4907      	ldr	r1, [pc, #28]	@ (8000760 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000742:	687b      	ldr	r3, [r7, #4]
 8000744:	4313      	orrs	r3, r2
 8000746:	630b      	str	r3, [r1, #48]	@ 0x30
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8000748:	4b05      	ldr	r3, [pc, #20]	@ (8000760 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800074a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800074c:	687b      	ldr	r3, [r7, #4]
 800074e:	4013      	ands	r3, r2
 8000750:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000752:	68fb      	ldr	r3, [r7, #12]
}
 8000754:	bf00      	nop
 8000756:	3714      	adds	r7, #20
 8000758:	46bd      	mov	sp, r7
 800075a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800075e:	4770      	bx	lr
 8000760:	40023800 	.word	0x40023800

08000764 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000764:	b480      	push	{r7}
 8000766:	b085      	sub	sp, #20
 8000768:	af00      	add	r7, sp, #0
 800076a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 800076c:	4b08      	ldr	r3, [pc, #32]	@ (8000790 <LL_APB1_GRP1_EnableClock+0x2c>)
 800076e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000770:	4907      	ldr	r1, [pc, #28]	@ (8000790 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000772:	687b      	ldr	r3, [r7, #4]
 8000774:	4313      	orrs	r3, r2
 8000776:	640b      	str	r3, [r1, #64]	@ 0x40
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8000778:	4b05      	ldr	r3, [pc, #20]	@ (8000790 <LL_APB1_GRP1_EnableClock+0x2c>)
 800077a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	4013      	ands	r3, r2
 8000780:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000782:	68fb      	ldr	r3, [r7, #12]
}
 8000784:	bf00      	nop
 8000786:	3714      	adds	r7, #20
 8000788:	46bd      	mov	sp, r7
 800078a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800078e:	4770      	bx	lr
 8000790:	40023800 	.word	0x40023800

08000794 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000794:	b480      	push	{r7}
 8000796:	b085      	sub	sp, #20
 8000798:	af00      	add	r7, sp, #0
 800079a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 800079c:	4b08      	ldr	r3, [pc, #32]	@ (80007c0 <LL_APB2_GRP1_EnableClock+0x2c>)
 800079e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80007a0:	4907      	ldr	r1, [pc, #28]	@ (80007c0 <LL_APB2_GRP1_EnableClock+0x2c>)
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	4313      	orrs	r3, r2
 80007a6:	644b      	str	r3, [r1, #68]	@ 0x44
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80007a8:	4b05      	ldr	r3, [pc, #20]	@ (80007c0 <LL_APB2_GRP1_EnableClock+0x2c>)
 80007aa:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	4013      	ands	r3, r2
 80007b0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80007b2:	68fb      	ldr	r3, [r7, #12]
}
 80007b4:	bf00      	nop
 80007b6:	3714      	adds	r7, #20
 80007b8:	46bd      	mov	sp, r7
 80007ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007be:	4770      	bx	lr
 80007c0:	40023800 	.word	0x40023800

080007c4 <LL_SYSCFG_SetEXTISource>:
  *         @arg @ref LL_SYSCFG_EXTI_LINE14
  *         @arg @ref LL_SYSCFG_EXTI_LINE15
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_SetEXTISource(uint32_t Port, uint32_t Line)
{
 80007c4:	b480      	push	{r7}
 80007c6:	b087      	sub	sp, #28
 80007c8:	af00      	add	r7, sp, #0
 80007ca:	6078      	str	r0, [r7, #4]
 80007cc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SYSCFG->EXTICR[Line & 0xFF], (Line >> 16), Port << POSITION_VAL((Line >> 16)));
 80007ce:	4a17      	ldr	r2, [pc, #92]	@ (800082c <LL_SYSCFG_SetEXTISource+0x68>)
 80007d0:	683b      	ldr	r3, [r7, #0]
 80007d2:	b2db      	uxtb	r3, r3
 80007d4:	3302      	adds	r3, #2
 80007d6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80007da:	683b      	ldr	r3, [r7, #0]
 80007dc:	0c1b      	lsrs	r3, r3, #16
 80007de:	43db      	mvns	r3, r3
 80007e0:	ea02 0103 	and.w	r1, r2, r3
 80007e4:	683b      	ldr	r3, [r7, #0]
 80007e6:	0c1b      	lsrs	r3, r3, #16
 80007e8:	613b      	str	r3, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80007ea:	693b      	ldr	r3, [r7, #16]
 80007ec:	fa93 f3a3 	rbit	r3, r3
 80007f0:	60fb      	str	r3, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80007f2:	68fb      	ldr	r3, [r7, #12]
 80007f4:	617b      	str	r3, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80007f6:	697b      	ldr	r3, [r7, #20]
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	d101      	bne.n	8000800 <LL_SYSCFG_SetEXTISource+0x3c>
  {
    return 32U;
 80007fc:	2320      	movs	r3, #32
 80007fe:	e003      	b.n	8000808 <LL_SYSCFG_SetEXTISource+0x44>
  }
  return __builtin_clz(value);
 8000800:	697b      	ldr	r3, [r7, #20]
 8000802:	fab3 f383 	clz	r3, r3
 8000806:	b2db      	uxtb	r3, r3
 8000808:	461a      	mov	r2, r3
 800080a:	687b      	ldr	r3, [r7, #4]
 800080c:	fa03 f202 	lsl.w	r2, r3, r2
 8000810:	4806      	ldr	r0, [pc, #24]	@ (800082c <LL_SYSCFG_SetEXTISource+0x68>)
 8000812:	683b      	ldr	r3, [r7, #0]
 8000814:	b2db      	uxtb	r3, r3
 8000816:	430a      	orrs	r2, r1
 8000818:	3302      	adds	r3, #2
 800081a:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
 800081e:	bf00      	nop
 8000820:	371c      	adds	r7, #28
 8000822:	46bd      	mov	sp, r7
 8000824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000828:	4770      	bx	lr
 800082a:	bf00      	nop
 800082c:	40013800 	.word	0x40013800

08000830 <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_14
  *         @arg @ref LL_FLASH_LATENCY_15
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 8000830:	b480      	push	{r7}
 8000832:	b083      	sub	sp, #12
 8000834:	af00      	add	r7, sp, #0
 8000836:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8000838:	4b06      	ldr	r3, [pc, #24]	@ (8000854 <LL_FLASH_SetLatency+0x24>)
 800083a:	681b      	ldr	r3, [r3, #0]
 800083c:	f023 0207 	bic.w	r2, r3, #7
 8000840:	4904      	ldr	r1, [pc, #16]	@ (8000854 <LL_FLASH_SetLatency+0x24>)
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	4313      	orrs	r3, r2
 8000846:	600b      	str	r3, [r1, #0]
}
 8000848:	bf00      	nop
 800084a:	370c      	adds	r7, #12
 800084c:	46bd      	mov	sp, r7
 800084e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000852:	4770      	bx	lr
 8000854:	40023c00 	.word	0x40023c00

08000858 <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_13
  *         @arg @ref LL_FLASH_LATENCY_14
  *         @arg @ref LL_FLASH_LATENCY_15
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 8000858:	b480      	push	{r7}
 800085a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 800085c:	4b04      	ldr	r3, [pc, #16]	@ (8000870 <LL_FLASH_GetLatency+0x18>)
 800085e:	681b      	ldr	r3, [r3, #0]
 8000860:	f003 0307 	and.w	r3, r3, #7
}
 8000864:	4618      	mov	r0, r3
 8000866:	46bd      	mov	sp, r7
 8000868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800086c:	4770      	bx	lr
 800086e:	bf00      	nop
 8000870:	40023c00 	.word	0x40023c00

08000874 <LL_PWR_SetRegulVoltageScaling>:
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE3
  *         (*) LL_PWR_REGU_VOLTAGE_SCALE1 is not available for STM32F401xx devices
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRegulVoltageScaling(uint32_t VoltageScaling)
{
 8000874:	b480      	push	{r7}
 8000876:	b083      	sub	sp, #12
 8000878:	af00      	add	r7, sp, #0
 800087a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR, PWR_CR_VOS, VoltageScaling);
 800087c:	4b06      	ldr	r3, [pc, #24]	@ (8000898 <LL_PWR_SetRegulVoltageScaling+0x24>)
 800087e:	681b      	ldr	r3, [r3, #0]
 8000880:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8000884:	4904      	ldr	r1, [pc, #16]	@ (8000898 <LL_PWR_SetRegulVoltageScaling+0x24>)
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	4313      	orrs	r3, r2
 800088a:	600b      	str	r3, [r1, #0]
}
 800088c:	bf00      	nop
 800088e:	370c      	adds	r7, #12
 8000890:	46bd      	mov	sp, r7
 8000892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000896:	4770      	bx	lr
 8000898:	40007000 	.word	0x40007000

0800089c <LL_PWR_IsActiveFlag_VOS>:
  * @brief  Indicate whether the Regulator is ready in the selected voltage range or if its output voltage is still changing to the required voltage level
  * @rmtoll CSR   VOS       LL_PWR_IsActiveFlag_VOS
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_VOS(void)
{
 800089c:	b480      	push	{r7}
 800089e:	af00      	add	r7, sp, #0
  return (READ_BIT(PWR->CSR, LL_PWR_CSR_VOS) == (LL_PWR_CSR_VOS));
 80008a0:	4b07      	ldr	r3, [pc, #28]	@ (80008c0 <LL_PWR_IsActiveFlag_VOS+0x24>)
 80008a2:	685b      	ldr	r3, [r3, #4]
 80008a4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80008a8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80008ac:	bf0c      	ite	eq
 80008ae:	2301      	moveq	r3, #1
 80008b0:	2300      	movne	r3, #0
 80008b2:	b2db      	uxtb	r3, r3
}
 80008b4:	4618      	mov	r0, r3
 80008b6:	46bd      	mov	sp, r7
 80008b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008bc:	4770      	bx	lr
 80008be:	bf00      	nop
 80008c0:	40007000 	.word	0x40007000

080008c4 <LL_USART_Enable>:
  * @rmtoll CR1          UE            LL_USART_Enable
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_Enable(USART_TypeDef *USARTx)
{
 80008c4:	b480      	push	{r7}
 80008c6:	b083      	sub	sp, #12
 80008c8:	af00      	add	r7, sp, #0
 80008ca:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	68db      	ldr	r3, [r3, #12]
 80008d0:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	60da      	str	r2, [r3, #12]
}
 80008d8:	bf00      	nop
 80008da:	370c      	adds	r7, #12
 80008dc:	46bd      	mov	sp, r7
 80008de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e2:	4770      	bx	lr

080008e4 <LL_USART_ConfigAsyncMode>:
  *         CR3          HDSEL         LL_USART_ConfigAsyncMode
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ConfigAsyncMode(USART_TypeDef *USARTx)
{
 80008e4:	b480      	push	{r7}
 80008e6:	b083      	sub	sp, #12
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	6078      	str	r0, [r7, #4]
  /* In Asynchronous mode, the following bits must be kept cleared:
  - LINEN, CLKEN bits in the USART_CR2 register,
  - SCEN, IREN and HDSEL bits in the USART_CR3 register.*/
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	691b      	ldr	r3, [r3, #16]
 80008f0:	f423 4290 	bic.w	r2, r3, #18432	@ 0x4800
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	695b      	ldr	r3, [r3, #20]
 80008fc:	f023 022a 	bic.w	r2, r3, #42	@ 0x2a
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	615a      	str	r2, [r3, #20]
}
 8000904:	bf00      	nop
 8000906:	370c      	adds	r7, #12
 8000908:	46bd      	mov	sp, r7
 800090a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800090e:	4770      	bx	lr

08000910 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 8000910:	b480      	push	{r7}
 8000912:	b08b      	sub	sp, #44	@ 0x2c
 8000914:	af00      	add	r7, sp, #0
 8000916:	60f8      	str	r0, [r7, #12]
 8000918:	60b9      	str	r1, [r7, #8]
 800091a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 800091c:	68fb      	ldr	r3, [r7, #12]
 800091e:	681a      	ldr	r2, [r3, #0]
 8000920:	68bb      	ldr	r3, [r7, #8]
 8000922:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000924:	697b      	ldr	r3, [r7, #20]
 8000926:	fa93 f3a3 	rbit	r3, r3
 800092a:	613b      	str	r3, [r7, #16]
  return result;
 800092c:	693b      	ldr	r3, [r7, #16]
 800092e:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8000930:	69bb      	ldr	r3, [r7, #24]
 8000932:	2b00      	cmp	r3, #0
 8000934:	d101      	bne.n	800093a <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 8000936:	2320      	movs	r3, #32
 8000938:	e003      	b.n	8000942 <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 800093a:	69bb      	ldr	r3, [r7, #24]
 800093c:	fab3 f383 	clz	r3, r3
 8000940:	b2db      	uxtb	r3, r3
 8000942:	005b      	lsls	r3, r3, #1
 8000944:	2103      	movs	r1, #3
 8000946:	fa01 f303 	lsl.w	r3, r1, r3
 800094a:	43db      	mvns	r3, r3
 800094c:	401a      	ands	r2, r3
 800094e:	68bb      	ldr	r3, [r7, #8]
 8000950:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000952:	6a3b      	ldr	r3, [r7, #32]
 8000954:	fa93 f3a3 	rbit	r3, r3
 8000958:	61fb      	str	r3, [r7, #28]
  return result;
 800095a:	69fb      	ldr	r3, [r7, #28]
 800095c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 800095e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000960:	2b00      	cmp	r3, #0
 8000962:	d101      	bne.n	8000968 <LL_GPIO_SetPinMode+0x58>
    return 32U;
 8000964:	2320      	movs	r3, #32
 8000966:	e003      	b.n	8000970 <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 8000968:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800096a:	fab3 f383 	clz	r3, r3
 800096e:	b2db      	uxtb	r3, r3
 8000970:	005b      	lsls	r3, r3, #1
 8000972:	6879      	ldr	r1, [r7, #4]
 8000974:	fa01 f303 	lsl.w	r3, r1, r3
 8000978:	431a      	orrs	r2, r3
 800097a:	68fb      	ldr	r3, [r7, #12]
 800097c:	601a      	str	r2, [r3, #0]
}
 800097e:	bf00      	nop
 8000980:	372c      	adds	r7, #44	@ 0x2c
 8000982:	46bd      	mov	sp, r7
 8000984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000988:	4770      	bx	lr

0800098a <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 800098a:	b480      	push	{r7}
 800098c:	b08b      	sub	sp, #44	@ 0x2c
 800098e:	af00      	add	r7, sp, #0
 8000990:	60f8      	str	r0, [r7, #12]
 8000992:	60b9      	str	r1, [r7, #8]
 8000994:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8000996:	68fb      	ldr	r3, [r7, #12]
 8000998:	68da      	ldr	r2, [r3, #12]
 800099a:	68bb      	ldr	r3, [r7, #8]
 800099c:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800099e:	697b      	ldr	r3, [r7, #20]
 80009a0:	fa93 f3a3 	rbit	r3, r3
 80009a4:	613b      	str	r3, [r7, #16]
  return result;
 80009a6:	693b      	ldr	r3, [r7, #16]
 80009a8:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80009aa:	69bb      	ldr	r3, [r7, #24]
 80009ac:	2b00      	cmp	r3, #0
 80009ae:	d101      	bne.n	80009b4 <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 80009b0:	2320      	movs	r3, #32
 80009b2:	e003      	b.n	80009bc <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 80009b4:	69bb      	ldr	r3, [r7, #24]
 80009b6:	fab3 f383 	clz	r3, r3
 80009ba:	b2db      	uxtb	r3, r3
 80009bc:	005b      	lsls	r3, r3, #1
 80009be:	2103      	movs	r1, #3
 80009c0:	fa01 f303 	lsl.w	r3, r1, r3
 80009c4:	43db      	mvns	r3, r3
 80009c6:	401a      	ands	r2, r3
 80009c8:	68bb      	ldr	r3, [r7, #8]
 80009ca:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80009cc:	6a3b      	ldr	r3, [r7, #32]
 80009ce:	fa93 f3a3 	rbit	r3, r3
 80009d2:	61fb      	str	r3, [r7, #28]
  return result;
 80009d4:	69fb      	ldr	r3, [r7, #28]
 80009d6:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 80009d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80009da:	2b00      	cmp	r3, #0
 80009dc:	d101      	bne.n	80009e2 <LL_GPIO_SetPinPull+0x58>
    return 32U;
 80009de:	2320      	movs	r3, #32
 80009e0:	e003      	b.n	80009ea <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 80009e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80009e4:	fab3 f383 	clz	r3, r3
 80009e8:	b2db      	uxtb	r3, r3
 80009ea:	005b      	lsls	r3, r3, #1
 80009ec:	6879      	ldr	r1, [r7, #4]
 80009ee:	fa01 f303 	lsl.w	r3, r1, r3
 80009f2:	431a      	orrs	r2, r3
 80009f4:	68fb      	ldr	r3, [r7, #12]
 80009f6:	60da      	str	r2, [r3, #12]
}
 80009f8:	bf00      	nop
 80009fa:	372c      	adds	r7, #44	@ 0x2c
 80009fc:	46bd      	mov	sp, r7
 80009fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a02:	4770      	bx	lr

08000a04 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000a04:	b480      	push	{r7}
 8000a06:	b083      	sub	sp, #12
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	6078      	str	r0, [r7, #4]
 8000a0c:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8000a0e:	683b      	ldr	r3, [r7, #0]
 8000a10:	041a      	lsls	r2, r3, #16
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	619a      	str	r2, [r3, #24]
}
 8000a16:	bf00      	nop
 8000a18:	370c      	adds	r7, #12
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a20:	4770      	bx	lr
	...

08000a24 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b082      	sub	sp, #8
 8000a28:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
 8000a2a:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8000a2e:	f7ff feb1 	bl	8000794 <LL_APB2_GRP1_EnableClock>
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 8000a32:	f04f 5080 	mov.w	r0, #268435456	@ 0x10000000
 8000a36:	f7ff fe95 	bl	8000764 <LL_APB1_GRP1_EnableClock>

  /* System interrupt init*/
  NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a3a:	2003      	movs	r0, #3
 8000a3c:	f7ff fd60 	bl	8000500 <__NVIC_SetPriorityGrouping>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a40:	f000 f82a 	bl	8000a98 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a44:	f000 f8c8 	bl	8000bd8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000a48:	f000 f876 	bl	8000b38 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  LL_GPIO_WriteReg(GPIOA, ODR, 0x00);
 8000a4c:	4b0f      	ldr	r3, [pc, #60]	@ (8000a8c <main+0x68>)
 8000a4e:	2200      	movs	r2, #0
 8000a50:	615a      	str	r2, [r3, #20]
  unsigned int timeInterval = 20000000;
 8000a52:	4b0f      	ldr	r3, [pc, #60]	@ (8000a90 <main+0x6c>)
 8000a54:	607b      	str	r3, [r7, #4]
  	/* Infinite loop */
  	/* USER CODE BEGIN WHILE */
  	while (1) {

  		// If button is pressed (USER BUTTON is active-low)
  		if ((LL_GPIO_ReadReg(GPIOC, IDR) & 0x02000) == 0x00) {
 8000a56:	4b0f      	ldr	r3, [pc, #60]	@ (8000a94 <main+0x70>)
 8000a58:	691b      	ldr	r3, [r3, #16]
 8000a5a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	d102      	bne.n	8000a68 <main+0x44>
  			timeInterval = timeInterval >> 1;		// Decrease the time-interval
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	085b      	lsrs	r3, r3, #1
 8000a66:	607b      	str	r3, [r7, #4]
  		}

  		for(int i= 0; i < (timeInterval/2); i++);	// Delay statement
 8000a68:	2300      	movs	r3, #0
 8000a6a:	603b      	str	r3, [r7, #0]
 8000a6c:	e002      	b.n	8000a74 <main+0x50>
 8000a6e:	683b      	ldr	r3, [r7, #0]
 8000a70:	3301      	adds	r3, #1
 8000a72:	603b      	str	r3, [r7, #0]
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	085a      	lsrs	r2, r3, #1
 8000a78:	683b      	ldr	r3, [r7, #0]
 8000a7a:	429a      	cmp	r2, r3
 8000a7c:	d8f7      	bhi.n	8000a6e <main+0x4a>
  				LL_GPIO_WriteReg(GPIOA, ODR, (LL_GPIO_ReadReg(GPIOA, ODR) ^ 0x020));
 8000a7e:	4b03      	ldr	r3, [pc, #12]	@ (8000a8c <main+0x68>)
 8000a80:	695b      	ldr	r3, [r3, #20]
 8000a82:	4a02      	ldr	r2, [pc, #8]	@ (8000a8c <main+0x68>)
 8000a84:	f083 0320 	eor.w	r3, r3, #32
 8000a88:	6153      	str	r3, [r2, #20]
  		if ((LL_GPIO_ReadReg(GPIOC, IDR) & 0x02000) == 0x00) {
 8000a8a:	e7e4      	b.n	8000a56 <main+0x32>
 8000a8c:	40020000 	.word	0x40020000
 8000a90:	01312d00 	.word	0x01312d00
 8000a94:	40020800 	.word	0x40020800

08000a98 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_2);
 8000a9c:	2002      	movs	r0, #2
 8000a9e:	f7ff fec7 	bl	8000830 <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_2)
 8000aa2:	bf00      	nop
 8000aa4:	f7ff fed8 	bl	8000858 <LL_FLASH_GetLatency>
 8000aa8:	4603      	mov	r3, r0
 8000aaa:	2b02      	cmp	r3, #2
 8000aac:	d1fa      	bne.n	8000aa4 <SystemClock_Config+0xc>
  {
  }
  LL_PWR_SetRegulVoltageScaling(LL_PWR_REGU_VOLTAGE_SCALE2);
 8000aae:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8000ab2:	f7ff fedf 	bl	8000874 <LL_PWR_SetRegulVoltageScaling>
  LL_RCC_HSI_SetCalibTrimming(16);
 8000ab6:	2010      	movs	r0, #16
 8000ab8:	f7ff fd68 	bl	800058c <LL_RCC_HSI_SetCalibTrimming>
  LL_RCC_HSI_Enable();
 8000abc:	f7ff fd44 	bl	8000548 <LL_RCC_HSI_Enable>

   /* Wait till HSI is ready */
  while(LL_RCC_HSI_IsReady() != 1)
 8000ac0:	bf00      	nop
 8000ac2:	f7ff fd51 	bl	8000568 <LL_RCC_HSI_IsReady>
 8000ac6:	4603      	mov	r3, r0
 8000ac8:	2b01      	cmp	r3, #1
 8000aca:	d1fa      	bne.n	8000ac2 <SystemClock_Config+0x2a>
  {

  }
  LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSI, LL_RCC_PLLM_DIV_16, 336, LL_RCC_PLLP_DIV_4);
 8000acc:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000ad0:	f44f 72a8 	mov.w	r2, #336	@ 0x150
 8000ad4:	2110      	movs	r1, #16
 8000ad6:	2000      	movs	r0, #0
 8000ad8:	f7ff fe06 	bl	80006e8 <LL_RCC_PLL_ConfigDomain_SYS>
  LL_RCC_PLL_Enable();
 8000adc:	f7ff fde0 	bl	80006a0 <LL_RCC_PLL_Enable>

   /* Wait till PLL is ready */
  while(LL_RCC_PLL_IsReady() != 1)
 8000ae0:	bf00      	nop
 8000ae2:	f7ff fded 	bl	80006c0 <LL_RCC_PLL_IsReady>
 8000ae6:	4603      	mov	r3, r0
 8000ae8:	2b01      	cmp	r3, #1
 8000aea:	d1fa      	bne.n	8000ae2 <SystemClock_Config+0x4a>
  {

  }
  while (LL_PWR_IsActiveFlag_VOS() == 0)
 8000aec:	bf00      	nop
 8000aee:	f7ff fed5 	bl	800089c <LL_PWR_IsActiveFlag_VOS>
 8000af2:	4603      	mov	r3, r0
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	d0fa      	beq.n	8000aee <SystemClock_Config+0x56>
  {
  }
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 8000af8:	2000      	movs	r0, #0
 8000afa:	f7ff fd7f 	bl	80005fc <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_2);
 8000afe:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8000b02:	f7ff fd8f 	bl	8000624 <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);
 8000b06:	2000      	movs	r0, #0
 8000b08:	f7ff fda0 	bl	800064c <LL_RCC_SetAPB2Prescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
 8000b0c:	2002      	movs	r0, #2
 8000b0e:	f7ff fd53 	bl	80005b8 <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8000b12:	bf00      	nop
 8000b14:	f7ff fd64 	bl	80005e0 <LL_RCC_GetSysClkSource>
 8000b18:	4603      	mov	r3, r0
 8000b1a:	2b08      	cmp	r3, #8
 8000b1c:	d1fa      	bne.n	8000b14 <SystemClock_Config+0x7c>
  {

  }
  LL_Init1msTick(84000000);
 8000b1e:	4805      	ldr	r0, [pc, #20]	@ (8000b34 <SystemClock_Config+0x9c>)
 8000b20:	f001 f822 	bl	8001b68 <LL_Init1msTick>
  LL_SetSystemCoreClock(84000000);
 8000b24:	4803      	ldr	r0, [pc, #12]	@ (8000b34 <SystemClock_Config+0x9c>)
 8000b26:	f001 f82d 	bl	8001b84 <LL_SetSystemCoreClock>
  LL_RCC_SetTIMPrescaler(LL_RCC_TIM_PRESCALER_TWICE);
 8000b2a:	2000      	movs	r0, #0
 8000b2c:	f7ff fda2 	bl	8000674 <LL_RCC_SetTIMPrescaler>
}
 8000b30:	bf00      	nop
 8000b32:	bd80      	pop	{r7, pc}
 8000b34:	0501bd00 	.word	0x0501bd00

08000b38 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	b08e      	sub	sp, #56	@ 0x38
 8000b3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART2_Init 0 */

  /* USER CODE END USART2_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 8000b3e:	f107 031c 	add.w	r3, r7, #28
 8000b42:	2200      	movs	r2, #0
 8000b44:	601a      	str	r2, [r3, #0]
 8000b46:	605a      	str	r2, [r3, #4]
 8000b48:	609a      	str	r2, [r3, #8]
 8000b4a:	60da      	str	r2, [r3, #12]
 8000b4c:	611a      	str	r2, [r3, #16]
 8000b4e:	615a      	str	r2, [r3, #20]
 8000b50:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b52:	1d3b      	adds	r3, r7, #4
 8000b54:	2200      	movs	r2, #0
 8000b56:	601a      	str	r2, [r3, #0]
 8000b58:	605a      	str	r2, [r3, #4]
 8000b5a:	609a      	str	r2, [r3, #8]
 8000b5c:	60da      	str	r2, [r3, #12]
 8000b5e:	611a      	str	r2, [r3, #16]
 8000b60:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART2);
 8000b62:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 8000b66:	f7ff fdfd 	bl	8000764 <LL_APB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8000b6a:	2001      	movs	r0, #1
 8000b6c:	f7ff fde2 	bl	8000734 <LL_AHB1_GRP1_EnableClock>
  /**USART2 GPIO Configuration
  PA2   ------> USART2_TX
  PA3   ------> USART2_RX
  */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000b70:	230c      	movs	r3, #12
 8000b72:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000b74:	2302      	movs	r3, #2
 8000b76:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000b78:	2300      	movs	r3, #0
 8000b7a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000b80:	2300      	movs	r3, #0
 8000b82:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 8000b84:	2307      	movs	r3, #7
 8000b86:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b88:	1d3b      	adds	r3, r7, #4
 8000b8a:	4619      	mov	r1, r3
 8000b8c:	4810      	ldr	r0, [pc, #64]	@ (8000bd0 <MX_USART2_UART_Init+0x98>)
 8000b8e:	f000 fb49 	bl	8001224 <LL_GPIO_Init>

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 8000b92:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 8000b96:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8000b98:	2300      	movs	r3, #0
 8000b9a:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	627b      	str	r3, [r7, #36]	@ 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	62bb      	str	r3, [r7, #40]	@ 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8000ba4:	230c      	movs	r3, #12
 8000ba6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8000ba8:	2300      	movs	r3, #0
 8000baa:	633b      	str	r3, [r7, #48]	@ 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8000bac:	2300      	movs	r3, #0
 8000bae:	637b      	str	r3, [r7, #52]	@ 0x34
  LL_USART_Init(USART2, &USART_InitStruct);
 8000bb0:	f107 031c 	add.w	r3, r7, #28
 8000bb4:	4619      	mov	r1, r3
 8000bb6:	4807      	ldr	r0, [pc, #28]	@ (8000bd4 <MX_USART2_UART_Init+0x9c>)
 8000bb8:	f000 ff58 	bl	8001a6c <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART2);
 8000bbc:	4805      	ldr	r0, [pc, #20]	@ (8000bd4 <MX_USART2_UART_Init+0x9c>)
 8000bbe:	f7ff fe91 	bl	80008e4 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART2);
 8000bc2:	4804      	ldr	r0, [pc, #16]	@ (8000bd4 <MX_USART2_UART_Init+0x9c>)
 8000bc4:	f7ff fe7e 	bl	80008c4 <LL_USART_Enable>
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000bc8:	bf00      	nop
 8000bca:	3738      	adds	r7, #56	@ 0x38
 8000bcc:	46bd      	mov	sp, r7
 8000bce:	bd80      	pop	{r7, pc}
 8000bd0:	40020000 	.word	0x40020000
 8000bd4:	40004400 	.word	0x40004400

08000bd8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b088      	sub	sp, #32
 8000bdc:	af00      	add	r7, sp, #0
  LL_EXTI_InitTypeDef EXTI_InitStruct = {0};
 8000bde:	f107 0318 	add.w	r3, r7, #24
 8000be2:	2200      	movs	r2, #0
 8000be4:	601a      	str	r2, [r3, #0]
 8000be6:	605a      	str	r2, [r3, #4]
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000be8:	463b      	mov	r3, r7
 8000bea:	2200      	movs	r2, #0
 8000bec:	601a      	str	r2, [r3, #0]
 8000bee:	605a      	str	r2, [r3, #4]
 8000bf0:	609a      	str	r2, [r3, #8]
 8000bf2:	60da      	str	r2, [r3, #12]
 8000bf4:	611a      	str	r2, [r3, #16]
 8000bf6:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 8000bf8:	2004      	movs	r0, #4
 8000bfa:	f7ff fd9b 	bl	8000734 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOH);
 8000bfe:	2080      	movs	r0, #128	@ 0x80
 8000c00:	f7ff fd98 	bl	8000734 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8000c04:	2001      	movs	r0, #1
 8000c06:	f7ff fd95 	bl	8000734 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8000c0a:	2002      	movs	r0, #2
 8000c0c:	f7ff fd92 	bl	8000734 <LL_AHB1_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(LD2_GPIO_Port, LD2_Pin);
 8000c10:	2120      	movs	r1, #32
 8000c12:	481a      	ldr	r0, [pc, #104]	@ (8000c7c <MX_GPIO_Init+0xa4>)
 8000c14:	f7ff fef6 	bl	8000a04 <LL_GPIO_ResetOutputPin>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTC, LL_SYSCFG_EXTI_LINE13);
 8000c18:	4919      	ldr	r1, [pc, #100]	@ (8000c80 <MX_GPIO_Init+0xa8>)
 8000c1a:	2002      	movs	r0, #2
 8000c1c:	f7ff fdd2 	bl	80007c4 <LL_SYSCFG_SetEXTISource>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_13;
 8000c20:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000c24:	61bb      	str	r3, [r7, #24]
  EXTI_InitStruct.LineCommand = ENABLE;
 8000c26:	2301      	movs	r3, #1
 8000c28:	773b      	strb	r3, [r7, #28]
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	777b      	strb	r3, [r7, #29]
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 8000c2e:	2302      	movs	r3, #2
 8000c30:	77bb      	strb	r3, [r7, #30]
  LL_EXTI_Init(&EXTI_InitStruct);
 8000c32:	f107 0318 	add.w	r3, r7, #24
 8000c36:	4618      	mov	r0, r3
 8000c38:	f000 f92a 	bl	8000e90 <LL_EXTI_Init>

  /**/
  LL_GPIO_SetPinPull(B1_GPIO_Port, B1_Pin, LL_GPIO_PULL_NO);
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000c42:	4810      	ldr	r0, [pc, #64]	@ (8000c84 <MX_GPIO_Init+0xac>)
 8000c44:	f7ff fea1 	bl	800098a <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinMode(B1_GPIO_Port, B1_Pin, LL_GPIO_MODE_INPUT);
 8000c48:	2200      	movs	r2, #0
 8000c4a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000c4e:	480d      	ldr	r0, [pc, #52]	@ (8000c84 <MX_GPIO_Init+0xac>)
 8000c50:	f7ff fe5e 	bl	8000910 <LL_GPIO_SetPinMode>

  /**/
  GPIO_InitStruct.Pin = LD2_Pin;
 8000c54:	2320      	movs	r3, #32
 8000c56:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000c58:	2301      	movs	r3, #1
 8000c5a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000c60:	2300      	movs	r3, #0
 8000c62:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000c64:	2300      	movs	r3, #0
 8000c66:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000c68:	463b      	mov	r3, r7
 8000c6a:	4619      	mov	r1, r3
 8000c6c:	4803      	ldr	r0, [pc, #12]	@ (8000c7c <MX_GPIO_Init+0xa4>)
 8000c6e:	f000 fad9 	bl	8001224 <LL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000c72:	bf00      	nop
 8000c74:	3720      	adds	r7, #32
 8000c76:	46bd      	mov	sp, r7
 8000c78:	bd80      	pop	{r7, pc}
 8000c7a:	bf00      	nop
 8000c7c:	40020000 	.word	0x40020000
 8000c80:	00f00003 	.word	0x00f00003
 8000c84:	40020800 	.word	0x40020800

08000c88 <NMI_Handler>:
 8000c88:	b480      	push	{r7}
 8000c8a:	af00      	add	r7, sp, #0
 8000c8c:	bf00      	nop
 8000c8e:	e7fd      	b.n	8000c8c <NMI_Handler+0x4>

08000c90 <HardFault_Handler>:
 8000c90:	b480      	push	{r7}
 8000c92:	af00      	add	r7, sp, #0
 8000c94:	bf00      	nop
 8000c96:	e7fd      	b.n	8000c94 <HardFault_Handler+0x4>

08000c98 <MemManage_Handler>:
 8000c98:	b480      	push	{r7}
 8000c9a:	af00      	add	r7, sp, #0
 8000c9c:	bf00      	nop
 8000c9e:	e7fd      	b.n	8000c9c <MemManage_Handler+0x4>

08000ca0 <BusFault_Handler>:
 8000ca0:	b480      	push	{r7}
 8000ca2:	af00      	add	r7, sp, #0
 8000ca4:	bf00      	nop
 8000ca6:	e7fd      	b.n	8000ca4 <BusFault_Handler+0x4>

08000ca8 <UsageFault_Handler>:
 8000ca8:	b480      	push	{r7}
 8000caa:	af00      	add	r7, sp, #0
 8000cac:	bf00      	nop
 8000cae:	e7fd      	b.n	8000cac <UsageFault_Handler+0x4>

08000cb0 <SVC_Handler>:
 8000cb0:	b480      	push	{r7}
 8000cb2:	af00      	add	r7, sp, #0
 8000cb4:	bf00      	nop
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cbc:	4770      	bx	lr

08000cbe <DebugMon_Handler>:
 8000cbe:	b480      	push	{r7}
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	bf00      	nop
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cca:	4770      	bx	lr

08000ccc <PendSV_Handler>:
 8000ccc:	b480      	push	{r7}
 8000cce:	af00      	add	r7, sp, #0
 8000cd0:	bf00      	nop
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd8:	4770      	bx	lr

08000cda <SysTick_Handler>:
 8000cda:	b480      	push	{r7}
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	bf00      	nop
 8000ce0:	46bd      	mov	sp, r7
 8000ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce6:	4770      	bx	lr

08000ce8 <SystemInit>:
 8000ce8:	b480      	push	{r7}
 8000cea:	af00      	add	r7, sp, #0
 8000cec:	4b06      	ldr	r3, [pc, #24]	@ (8000d08 <SystemInit+0x20>)
 8000cee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000cf2:	4a05      	ldr	r2, [pc, #20]	@ (8000d08 <SystemInit+0x20>)
 8000cf4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000cf8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
 8000cfc:	bf00      	nop
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d04:	4770      	bx	lr
 8000d06:	bf00      	nop
 8000d08:	e000ed00 	.word	0xe000ed00

08000d0c <Reset_Handler>:
 8000d0c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000d44 <LoopFillZerobss+0xe>
 8000d10:	f7ff ffea 	bl	8000ce8 <SystemInit>
 8000d14:	480c      	ldr	r0, [pc, #48]	@ (8000d48 <LoopFillZerobss+0x12>)
 8000d16:	490d      	ldr	r1, [pc, #52]	@ (8000d4c <LoopFillZerobss+0x16>)
 8000d18:	4a0d      	ldr	r2, [pc, #52]	@ (8000d50 <LoopFillZerobss+0x1a>)
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	e002      	b.n	8000d24 <LoopCopyDataInit>

08000d1e <CopyDataInit>:
 8000d1e:	58d4      	ldr	r4, [r2, r3]
 8000d20:	50c4      	str	r4, [r0, r3]
 8000d22:	3304      	adds	r3, #4

08000d24 <LoopCopyDataInit>:
 8000d24:	18c4      	adds	r4, r0, r3
 8000d26:	428c      	cmp	r4, r1
 8000d28:	d3f9      	bcc.n	8000d1e <CopyDataInit>
 8000d2a:	4a0a      	ldr	r2, [pc, #40]	@ (8000d54 <LoopFillZerobss+0x1e>)
 8000d2c:	4c0a      	ldr	r4, [pc, #40]	@ (8000d58 <LoopFillZerobss+0x22>)
 8000d2e:	2300      	movs	r3, #0
 8000d30:	e001      	b.n	8000d36 <LoopFillZerobss>

08000d32 <FillZerobss>:
 8000d32:	6013      	str	r3, [r2, #0]
 8000d34:	3204      	adds	r2, #4

08000d36 <LoopFillZerobss>:
 8000d36:	42a2      	cmp	r2, r4
 8000d38:	d3fb      	bcc.n	8000d32 <FillZerobss>
 8000d3a:	f000 ff33 	bl	8001ba4 <__libc_init_array>
 8000d3e:	f7ff fe71 	bl	8000a24 <main>
 8000d42:	4770      	bx	lr
 8000d44:	20018000 	.word	0x20018000
 8000d48:	20000000 	.word	0x20000000
 8000d4c:	20000004 	.word	0x20000004
 8000d50:	08001c2c 	.word	0x08001c2c
 8000d54:	20000004 	.word	0x20000004
 8000d58:	20000020 	.word	0x20000020

08000d5c <ADC_IRQHandler>:
 8000d5c:	e7fe      	b.n	8000d5c <ADC_IRQHandler>
	...

08000d60 <LL_EXTI_EnableIT_0_31>:
 8000d60:	b480      	push	{r7}
 8000d62:	b083      	sub	sp, #12
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	6078      	str	r0, [r7, #4]
 8000d68:	4b05      	ldr	r3, [pc, #20]	@ (8000d80 <LL_EXTI_EnableIT_0_31+0x20>)
 8000d6a:	681a      	ldr	r2, [r3, #0]
 8000d6c:	4904      	ldr	r1, [pc, #16]	@ (8000d80 <LL_EXTI_EnableIT_0_31+0x20>)
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	4313      	orrs	r3, r2
 8000d72:	600b      	str	r3, [r1, #0]
 8000d74:	bf00      	nop
 8000d76:	370c      	adds	r7, #12
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7e:	4770      	bx	lr
 8000d80:	40013c00 	.word	0x40013c00

08000d84 <LL_EXTI_DisableIT_0_31>:
 8000d84:	b480      	push	{r7}
 8000d86:	b083      	sub	sp, #12
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	6078      	str	r0, [r7, #4]
 8000d8c:	4b06      	ldr	r3, [pc, #24]	@ (8000da8 <LL_EXTI_DisableIT_0_31+0x24>)
 8000d8e:	681a      	ldr	r2, [r3, #0]
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	43db      	mvns	r3, r3
 8000d94:	4904      	ldr	r1, [pc, #16]	@ (8000da8 <LL_EXTI_DisableIT_0_31+0x24>)
 8000d96:	4013      	ands	r3, r2
 8000d98:	600b      	str	r3, [r1, #0]
 8000d9a:	bf00      	nop
 8000d9c:	370c      	adds	r7, #12
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da4:	4770      	bx	lr
 8000da6:	bf00      	nop
 8000da8:	40013c00 	.word	0x40013c00

08000dac <LL_EXTI_EnableEvent_0_31>:
 8000dac:	b480      	push	{r7}
 8000dae:	b083      	sub	sp, #12
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	6078      	str	r0, [r7, #4]
 8000db4:	4b05      	ldr	r3, [pc, #20]	@ (8000dcc <LL_EXTI_EnableEvent_0_31+0x20>)
 8000db6:	685a      	ldr	r2, [r3, #4]
 8000db8:	4904      	ldr	r1, [pc, #16]	@ (8000dcc <LL_EXTI_EnableEvent_0_31+0x20>)
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	4313      	orrs	r3, r2
 8000dbe:	604b      	str	r3, [r1, #4]
 8000dc0:	bf00      	nop
 8000dc2:	370c      	adds	r7, #12
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dca:	4770      	bx	lr
 8000dcc:	40013c00 	.word	0x40013c00

08000dd0 <LL_EXTI_DisableEvent_0_31>:
 8000dd0:	b480      	push	{r7}
 8000dd2:	b083      	sub	sp, #12
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	6078      	str	r0, [r7, #4]
 8000dd8:	4b06      	ldr	r3, [pc, #24]	@ (8000df4 <LL_EXTI_DisableEvent_0_31+0x24>)
 8000dda:	685a      	ldr	r2, [r3, #4]
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	43db      	mvns	r3, r3
 8000de0:	4904      	ldr	r1, [pc, #16]	@ (8000df4 <LL_EXTI_DisableEvent_0_31+0x24>)
 8000de2:	4013      	ands	r3, r2
 8000de4:	604b      	str	r3, [r1, #4]
 8000de6:	bf00      	nop
 8000de8:	370c      	adds	r7, #12
 8000dea:	46bd      	mov	sp, r7
 8000dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df0:	4770      	bx	lr
 8000df2:	bf00      	nop
 8000df4:	40013c00 	.word	0x40013c00

08000df8 <LL_EXTI_EnableRisingTrig_0_31>:
 8000df8:	b480      	push	{r7}
 8000dfa:	b083      	sub	sp, #12
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	6078      	str	r0, [r7, #4]
 8000e00:	4b05      	ldr	r3, [pc, #20]	@ (8000e18 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8000e02:	689a      	ldr	r2, [r3, #8]
 8000e04:	4904      	ldr	r1, [pc, #16]	@ (8000e18 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	4313      	orrs	r3, r2
 8000e0a:	608b      	str	r3, [r1, #8]
 8000e0c:	bf00      	nop
 8000e0e:	370c      	adds	r7, #12
 8000e10:	46bd      	mov	sp, r7
 8000e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e16:	4770      	bx	lr
 8000e18:	40013c00 	.word	0x40013c00

08000e1c <LL_EXTI_DisableRisingTrig_0_31>:
 8000e1c:	b480      	push	{r7}
 8000e1e:	b083      	sub	sp, #12
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	6078      	str	r0, [r7, #4]
 8000e24:	4b06      	ldr	r3, [pc, #24]	@ (8000e40 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8000e26:	689a      	ldr	r2, [r3, #8]
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	43db      	mvns	r3, r3
 8000e2c:	4904      	ldr	r1, [pc, #16]	@ (8000e40 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8000e2e:	4013      	ands	r3, r2
 8000e30:	608b      	str	r3, [r1, #8]
 8000e32:	bf00      	nop
 8000e34:	370c      	adds	r7, #12
 8000e36:	46bd      	mov	sp, r7
 8000e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3c:	4770      	bx	lr
 8000e3e:	bf00      	nop
 8000e40:	40013c00 	.word	0x40013c00

08000e44 <LL_EXTI_EnableFallingTrig_0_31>:
 8000e44:	b480      	push	{r7}
 8000e46:	b083      	sub	sp, #12
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	6078      	str	r0, [r7, #4]
 8000e4c:	4b05      	ldr	r3, [pc, #20]	@ (8000e64 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8000e4e:	68da      	ldr	r2, [r3, #12]
 8000e50:	4904      	ldr	r1, [pc, #16]	@ (8000e64 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	4313      	orrs	r3, r2
 8000e56:	60cb      	str	r3, [r1, #12]
 8000e58:	bf00      	nop
 8000e5a:	370c      	adds	r7, #12
 8000e5c:	46bd      	mov	sp, r7
 8000e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e62:	4770      	bx	lr
 8000e64:	40013c00 	.word	0x40013c00

08000e68 <LL_EXTI_DisableFallingTrig_0_31>:
 8000e68:	b480      	push	{r7}
 8000e6a:	b083      	sub	sp, #12
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	6078      	str	r0, [r7, #4]
 8000e70:	4b06      	ldr	r3, [pc, #24]	@ (8000e8c <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8000e72:	68da      	ldr	r2, [r3, #12]
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	43db      	mvns	r3, r3
 8000e78:	4904      	ldr	r1, [pc, #16]	@ (8000e8c <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8000e7a:	4013      	ands	r3, r2
 8000e7c:	60cb      	str	r3, [r1, #12]
 8000e7e:	bf00      	nop
 8000e80:	370c      	adds	r7, #12
 8000e82:	46bd      	mov	sp, r7
 8000e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e88:	4770      	bx	lr
 8000e8a:	bf00      	nop
 8000e8c:	40013c00 	.word	0x40013c00

08000e90 <LL_EXTI_Init>:
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b084      	sub	sp, #16
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	6078      	str	r0, [r7, #4]
 8000e98:	2300      	movs	r3, #0
 8000e9a:	73fb      	strb	r3, [r7, #15]
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	791b      	ldrb	r3, [r3, #4]
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d065      	beq.n	8000f70 <LL_EXTI_Init+0xe0>
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d06b      	beq.n	8000f84 <LL_EXTI_Init+0xf4>
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	795b      	ldrb	r3, [r3, #5]
 8000eb0:	2b02      	cmp	r3, #2
 8000eb2:	d01c      	beq.n	8000eee <LL_EXTI_Init+0x5e>
 8000eb4:	2b02      	cmp	r3, #2
 8000eb6:	dc25      	bgt.n	8000f04 <LL_EXTI_Init+0x74>
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d002      	beq.n	8000ec2 <LL_EXTI_Init+0x32>
 8000ebc:	2b01      	cmp	r3, #1
 8000ebe:	d00b      	beq.n	8000ed8 <LL_EXTI_Init+0x48>
 8000ec0:	e020      	b.n	8000f04 <LL_EXTI_Init+0x74>
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	4618      	mov	r0, r3
 8000ec8:	f7ff ff82 	bl	8000dd0 <LL_EXTI_DisableEvent_0_31>
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	4618      	mov	r0, r3
 8000ed2:	f7ff ff45 	bl	8000d60 <LL_EXTI_EnableIT_0_31>
 8000ed6:	e018      	b.n	8000f0a <LL_EXTI_Init+0x7a>
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	4618      	mov	r0, r3
 8000ede:	f7ff ff51 	bl	8000d84 <LL_EXTI_DisableIT_0_31>
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	4618      	mov	r0, r3
 8000ee8:	f7ff ff60 	bl	8000dac <LL_EXTI_EnableEvent_0_31>
 8000eec:	e00d      	b.n	8000f0a <LL_EXTI_Init+0x7a>
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	4618      	mov	r0, r3
 8000ef4:	f7ff ff34 	bl	8000d60 <LL_EXTI_EnableIT_0_31>
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	4618      	mov	r0, r3
 8000efe:	f7ff ff55 	bl	8000dac <LL_EXTI_EnableEvent_0_31>
 8000f02:	e002      	b.n	8000f0a <LL_EXTI_Init+0x7a>
 8000f04:	2301      	movs	r3, #1
 8000f06:	73fb      	strb	r3, [r7, #15]
 8000f08:	bf00      	nop
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	799b      	ldrb	r3, [r3, #6]
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d038      	beq.n	8000f84 <LL_EXTI_Init+0xf4>
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	799b      	ldrb	r3, [r3, #6]
 8000f16:	2b03      	cmp	r3, #3
 8000f18:	d01c      	beq.n	8000f54 <LL_EXTI_Init+0xc4>
 8000f1a:	2b03      	cmp	r3, #3
 8000f1c:	dc25      	bgt.n	8000f6a <LL_EXTI_Init+0xda>
 8000f1e:	2b01      	cmp	r3, #1
 8000f20:	d002      	beq.n	8000f28 <LL_EXTI_Init+0x98>
 8000f22:	2b02      	cmp	r3, #2
 8000f24:	d00b      	beq.n	8000f3e <LL_EXTI_Init+0xae>
 8000f26:	e020      	b.n	8000f6a <LL_EXTI_Init+0xda>
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	f7ff ff9b 	bl	8000e68 <LL_EXTI_DisableFallingTrig_0_31>
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	4618      	mov	r0, r3
 8000f38:	f7ff ff5e 	bl	8000df8 <LL_EXTI_EnableRisingTrig_0_31>
 8000f3c:	e022      	b.n	8000f84 <LL_EXTI_Init+0xf4>
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	4618      	mov	r0, r3
 8000f44:	f7ff ff6a 	bl	8000e1c <LL_EXTI_DisableRisingTrig_0_31>
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	f7ff ff79 	bl	8000e44 <LL_EXTI_EnableFallingTrig_0_31>
 8000f52:	e017      	b.n	8000f84 <LL_EXTI_Init+0xf4>
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	4618      	mov	r0, r3
 8000f5a:	f7ff ff4d 	bl	8000df8 <LL_EXTI_EnableRisingTrig_0_31>
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	4618      	mov	r0, r3
 8000f64:	f7ff ff6e 	bl	8000e44 <LL_EXTI_EnableFallingTrig_0_31>
 8000f68:	e00c      	b.n	8000f84 <LL_EXTI_Init+0xf4>
 8000f6a:	2301      	movs	r3, #1
 8000f6c:	73fb      	strb	r3, [r7, #15]
 8000f6e:	e009      	b.n	8000f84 <LL_EXTI_Init+0xf4>
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	4618      	mov	r0, r3
 8000f76:	f7ff ff05 	bl	8000d84 <LL_EXTI_DisableIT_0_31>
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	4618      	mov	r0, r3
 8000f80:	f7ff ff26 	bl	8000dd0 <LL_EXTI_DisableEvent_0_31>
 8000f84:	7bfb      	ldrb	r3, [r7, #15]
 8000f86:	4618      	mov	r0, r3
 8000f88:	3710      	adds	r7, #16
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	bd80      	pop	{r7, pc}

08000f8e <LL_GPIO_SetPinMode>:
 8000f8e:	b480      	push	{r7}
 8000f90:	b08b      	sub	sp, #44	@ 0x2c
 8000f92:	af00      	add	r7, sp, #0
 8000f94:	60f8      	str	r0, [r7, #12]
 8000f96:	60b9      	str	r1, [r7, #8]
 8000f98:	607a      	str	r2, [r7, #4]
 8000f9a:	68fb      	ldr	r3, [r7, #12]
 8000f9c:	681a      	ldr	r2, [r3, #0]
 8000f9e:	68bb      	ldr	r3, [r7, #8]
 8000fa0:	617b      	str	r3, [r7, #20]
 8000fa2:	697b      	ldr	r3, [r7, #20]
 8000fa4:	fa93 f3a3 	rbit	r3, r3
 8000fa8:	613b      	str	r3, [r7, #16]
 8000faa:	693b      	ldr	r3, [r7, #16]
 8000fac:	61bb      	str	r3, [r7, #24]
 8000fae:	69bb      	ldr	r3, [r7, #24]
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d101      	bne.n	8000fb8 <LL_GPIO_SetPinMode+0x2a>
 8000fb4:	2320      	movs	r3, #32
 8000fb6:	e003      	b.n	8000fc0 <LL_GPIO_SetPinMode+0x32>
 8000fb8:	69bb      	ldr	r3, [r7, #24]
 8000fba:	fab3 f383 	clz	r3, r3
 8000fbe:	b2db      	uxtb	r3, r3
 8000fc0:	005b      	lsls	r3, r3, #1
 8000fc2:	2103      	movs	r1, #3
 8000fc4:	fa01 f303 	lsl.w	r3, r1, r3
 8000fc8:	43db      	mvns	r3, r3
 8000fca:	401a      	ands	r2, r3
 8000fcc:	68bb      	ldr	r3, [r7, #8]
 8000fce:	623b      	str	r3, [r7, #32]
 8000fd0:	6a3b      	ldr	r3, [r7, #32]
 8000fd2:	fa93 f3a3 	rbit	r3, r3
 8000fd6:	61fb      	str	r3, [r7, #28]
 8000fd8:	69fb      	ldr	r3, [r7, #28]
 8000fda:	627b      	str	r3, [r7, #36]	@ 0x24
 8000fdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d101      	bne.n	8000fe6 <LL_GPIO_SetPinMode+0x58>
 8000fe2:	2320      	movs	r3, #32
 8000fe4:	e003      	b.n	8000fee <LL_GPIO_SetPinMode+0x60>
 8000fe6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000fe8:	fab3 f383 	clz	r3, r3
 8000fec:	b2db      	uxtb	r3, r3
 8000fee:	005b      	lsls	r3, r3, #1
 8000ff0:	6879      	ldr	r1, [r7, #4]
 8000ff2:	fa01 f303 	lsl.w	r3, r1, r3
 8000ff6:	431a      	orrs	r2, r3
 8000ff8:	68fb      	ldr	r3, [r7, #12]
 8000ffa:	601a      	str	r2, [r3, #0]
 8000ffc:	bf00      	nop
 8000ffe:	372c      	adds	r7, #44	@ 0x2c
 8001000:	46bd      	mov	sp, r7
 8001002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001006:	4770      	bx	lr

08001008 <LL_GPIO_SetPinOutputType>:
 8001008:	b480      	push	{r7}
 800100a:	b085      	sub	sp, #20
 800100c:	af00      	add	r7, sp, #0
 800100e:	60f8      	str	r0, [r7, #12]
 8001010:	60b9      	str	r1, [r7, #8]
 8001012:	607a      	str	r2, [r7, #4]
 8001014:	68fb      	ldr	r3, [r7, #12]
 8001016:	685a      	ldr	r2, [r3, #4]
 8001018:	68bb      	ldr	r3, [r7, #8]
 800101a:	43db      	mvns	r3, r3
 800101c:	401a      	ands	r2, r3
 800101e:	68bb      	ldr	r3, [r7, #8]
 8001020:	6879      	ldr	r1, [r7, #4]
 8001022:	fb01 f303 	mul.w	r3, r1, r3
 8001026:	431a      	orrs	r2, r3
 8001028:	68fb      	ldr	r3, [r7, #12]
 800102a:	605a      	str	r2, [r3, #4]
 800102c:	bf00      	nop
 800102e:	3714      	adds	r7, #20
 8001030:	46bd      	mov	sp, r7
 8001032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001036:	4770      	bx	lr

08001038 <LL_GPIO_SetPinSpeed>:
 8001038:	b480      	push	{r7}
 800103a:	b08b      	sub	sp, #44	@ 0x2c
 800103c:	af00      	add	r7, sp, #0
 800103e:	60f8      	str	r0, [r7, #12]
 8001040:	60b9      	str	r1, [r7, #8]
 8001042:	607a      	str	r2, [r7, #4]
 8001044:	68fb      	ldr	r3, [r7, #12]
 8001046:	689a      	ldr	r2, [r3, #8]
 8001048:	68bb      	ldr	r3, [r7, #8]
 800104a:	617b      	str	r3, [r7, #20]
 800104c:	697b      	ldr	r3, [r7, #20]
 800104e:	fa93 f3a3 	rbit	r3, r3
 8001052:	613b      	str	r3, [r7, #16]
 8001054:	693b      	ldr	r3, [r7, #16]
 8001056:	61bb      	str	r3, [r7, #24]
 8001058:	69bb      	ldr	r3, [r7, #24]
 800105a:	2b00      	cmp	r3, #0
 800105c:	d101      	bne.n	8001062 <LL_GPIO_SetPinSpeed+0x2a>
 800105e:	2320      	movs	r3, #32
 8001060:	e003      	b.n	800106a <LL_GPIO_SetPinSpeed+0x32>
 8001062:	69bb      	ldr	r3, [r7, #24]
 8001064:	fab3 f383 	clz	r3, r3
 8001068:	b2db      	uxtb	r3, r3
 800106a:	005b      	lsls	r3, r3, #1
 800106c:	2103      	movs	r1, #3
 800106e:	fa01 f303 	lsl.w	r3, r1, r3
 8001072:	43db      	mvns	r3, r3
 8001074:	401a      	ands	r2, r3
 8001076:	68bb      	ldr	r3, [r7, #8]
 8001078:	623b      	str	r3, [r7, #32]
 800107a:	6a3b      	ldr	r3, [r7, #32]
 800107c:	fa93 f3a3 	rbit	r3, r3
 8001080:	61fb      	str	r3, [r7, #28]
 8001082:	69fb      	ldr	r3, [r7, #28]
 8001084:	627b      	str	r3, [r7, #36]	@ 0x24
 8001086:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001088:	2b00      	cmp	r3, #0
 800108a:	d101      	bne.n	8001090 <LL_GPIO_SetPinSpeed+0x58>
 800108c:	2320      	movs	r3, #32
 800108e:	e003      	b.n	8001098 <LL_GPIO_SetPinSpeed+0x60>
 8001090:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001092:	fab3 f383 	clz	r3, r3
 8001096:	b2db      	uxtb	r3, r3
 8001098:	005b      	lsls	r3, r3, #1
 800109a:	6879      	ldr	r1, [r7, #4]
 800109c:	fa01 f303 	lsl.w	r3, r1, r3
 80010a0:	431a      	orrs	r2, r3
 80010a2:	68fb      	ldr	r3, [r7, #12]
 80010a4:	609a      	str	r2, [r3, #8]
 80010a6:	bf00      	nop
 80010a8:	372c      	adds	r7, #44	@ 0x2c
 80010aa:	46bd      	mov	sp, r7
 80010ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b0:	4770      	bx	lr

080010b2 <LL_GPIO_SetPinPull>:
 80010b2:	b480      	push	{r7}
 80010b4:	b08b      	sub	sp, #44	@ 0x2c
 80010b6:	af00      	add	r7, sp, #0
 80010b8:	60f8      	str	r0, [r7, #12]
 80010ba:	60b9      	str	r1, [r7, #8]
 80010bc:	607a      	str	r2, [r7, #4]
 80010be:	68fb      	ldr	r3, [r7, #12]
 80010c0:	68da      	ldr	r2, [r3, #12]
 80010c2:	68bb      	ldr	r3, [r7, #8]
 80010c4:	617b      	str	r3, [r7, #20]
 80010c6:	697b      	ldr	r3, [r7, #20]
 80010c8:	fa93 f3a3 	rbit	r3, r3
 80010cc:	613b      	str	r3, [r7, #16]
 80010ce:	693b      	ldr	r3, [r7, #16]
 80010d0:	61bb      	str	r3, [r7, #24]
 80010d2:	69bb      	ldr	r3, [r7, #24]
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d101      	bne.n	80010dc <LL_GPIO_SetPinPull+0x2a>
 80010d8:	2320      	movs	r3, #32
 80010da:	e003      	b.n	80010e4 <LL_GPIO_SetPinPull+0x32>
 80010dc:	69bb      	ldr	r3, [r7, #24]
 80010de:	fab3 f383 	clz	r3, r3
 80010e2:	b2db      	uxtb	r3, r3
 80010e4:	005b      	lsls	r3, r3, #1
 80010e6:	2103      	movs	r1, #3
 80010e8:	fa01 f303 	lsl.w	r3, r1, r3
 80010ec:	43db      	mvns	r3, r3
 80010ee:	401a      	ands	r2, r3
 80010f0:	68bb      	ldr	r3, [r7, #8]
 80010f2:	623b      	str	r3, [r7, #32]
 80010f4:	6a3b      	ldr	r3, [r7, #32]
 80010f6:	fa93 f3a3 	rbit	r3, r3
 80010fa:	61fb      	str	r3, [r7, #28]
 80010fc:	69fb      	ldr	r3, [r7, #28]
 80010fe:	627b      	str	r3, [r7, #36]	@ 0x24
 8001100:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001102:	2b00      	cmp	r3, #0
 8001104:	d101      	bne.n	800110a <LL_GPIO_SetPinPull+0x58>
 8001106:	2320      	movs	r3, #32
 8001108:	e003      	b.n	8001112 <LL_GPIO_SetPinPull+0x60>
 800110a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800110c:	fab3 f383 	clz	r3, r3
 8001110:	b2db      	uxtb	r3, r3
 8001112:	005b      	lsls	r3, r3, #1
 8001114:	6879      	ldr	r1, [r7, #4]
 8001116:	fa01 f303 	lsl.w	r3, r1, r3
 800111a:	431a      	orrs	r2, r3
 800111c:	68fb      	ldr	r3, [r7, #12]
 800111e:	60da      	str	r2, [r3, #12]
 8001120:	bf00      	nop
 8001122:	372c      	adds	r7, #44	@ 0x2c
 8001124:	46bd      	mov	sp, r7
 8001126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112a:	4770      	bx	lr

0800112c <LL_GPIO_SetAFPin_0_7>:
 800112c:	b480      	push	{r7}
 800112e:	b08b      	sub	sp, #44	@ 0x2c
 8001130:	af00      	add	r7, sp, #0
 8001132:	60f8      	str	r0, [r7, #12]
 8001134:	60b9      	str	r1, [r7, #8]
 8001136:	607a      	str	r2, [r7, #4]
 8001138:	68fb      	ldr	r3, [r7, #12]
 800113a:	6a1a      	ldr	r2, [r3, #32]
 800113c:	68bb      	ldr	r3, [r7, #8]
 800113e:	617b      	str	r3, [r7, #20]
 8001140:	697b      	ldr	r3, [r7, #20]
 8001142:	fa93 f3a3 	rbit	r3, r3
 8001146:	613b      	str	r3, [r7, #16]
 8001148:	693b      	ldr	r3, [r7, #16]
 800114a:	61bb      	str	r3, [r7, #24]
 800114c:	69bb      	ldr	r3, [r7, #24]
 800114e:	2b00      	cmp	r3, #0
 8001150:	d101      	bne.n	8001156 <LL_GPIO_SetAFPin_0_7+0x2a>
 8001152:	2320      	movs	r3, #32
 8001154:	e003      	b.n	800115e <LL_GPIO_SetAFPin_0_7+0x32>
 8001156:	69bb      	ldr	r3, [r7, #24]
 8001158:	fab3 f383 	clz	r3, r3
 800115c:	b2db      	uxtb	r3, r3
 800115e:	009b      	lsls	r3, r3, #2
 8001160:	210f      	movs	r1, #15
 8001162:	fa01 f303 	lsl.w	r3, r1, r3
 8001166:	43db      	mvns	r3, r3
 8001168:	401a      	ands	r2, r3
 800116a:	68bb      	ldr	r3, [r7, #8]
 800116c:	623b      	str	r3, [r7, #32]
 800116e:	6a3b      	ldr	r3, [r7, #32]
 8001170:	fa93 f3a3 	rbit	r3, r3
 8001174:	61fb      	str	r3, [r7, #28]
 8001176:	69fb      	ldr	r3, [r7, #28]
 8001178:	627b      	str	r3, [r7, #36]	@ 0x24
 800117a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800117c:	2b00      	cmp	r3, #0
 800117e:	d101      	bne.n	8001184 <LL_GPIO_SetAFPin_0_7+0x58>
 8001180:	2320      	movs	r3, #32
 8001182:	e003      	b.n	800118c <LL_GPIO_SetAFPin_0_7+0x60>
 8001184:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001186:	fab3 f383 	clz	r3, r3
 800118a:	b2db      	uxtb	r3, r3
 800118c:	009b      	lsls	r3, r3, #2
 800118e:	6879      	ldr	r1, [r7, #4]
 8001190:	fa01 f303 	lsl.w	r3, r1, r3
 8001194:	431a      	orrs	r2, r3
 8001196:	68fb      	ldr	r3, [r7, #12]
 8001198:	621a      	str	r2, [r3, #32]
 800119a:	bf00      	nop
 800119c:	372c      	adds	r7, #44	@ 0x2c
 800119e:	46bd      	mov	sp, r7
 80011a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a4:	4770      	bx	lr

080011a6 <LL_GPIO_SetAFPin_8_15>:
 80011a6:	b480      	push	{r7}
 80011a8:	b08b      	sub	sp, #44	@ 0x2c
 80011aa:	af00      	add	r7, sp, #0
 80011ac:	60f8      	str	r0, [r7, #12]
 80011ae:	60b9      	str	r1, [r7, #8]
 80011b0:	607a      	str	r2, [r7, #4]
 80011b2:	68fb      	ldr	r3, [r7, #12]
 80011b4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80011b6:	68bb      	ldr	r3, [r7, #8]
 80011b8:	0a1b      	lsrs	r3, r3, #8
 80011ba:	617b      	str	r3, [r7, #20]
 80011bc:	697b      	ldr	r3, [r7, #20]
 80011be:	fa93 f3a3 	rbit	r3, r3
 80011c2:	613b      	str	r3, [r7, #16]
 80011c4:	693b      	ldr	r3, [r7, #16]
 80011c6:	61bb      	str	r3, [r7, #24]
 80011c8:	69bb      	ldr	r3, [r7, #24]
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d101      	bne.n	80011d2 <LL_GPIO_SetAFPin_8_15+0x2c>
 80011ce:	2320      	movs	r3, #32
 80011d0:	e003      	b.n	80011da <LL_GPIO_SetAFPin_8_15+0x34>
 80011d2:	69bb      	ldr	r3, [r7, #24]
 80011d4:	fab3 f383 	clz	r3, r3
 80011d8:	b2db      	uxtb	r3, r3
 80011da:	009b      	lsls	r3, r3, #2
 80011dc:	210f      	movs	r1, #15
 80011de:	fa01 f303 	lsl.w	r3, r1, r3
 80011e2:	43db      	mvns	r3, r3
 80011e4:	401a      	ands	r2, r3
 80011e6:	68bb      	ldr	r3, [r7, #8]
 80011e8:	0a1b      	lsrs	r3, r3, #8
 80011ea:	623b      	str	r3, [r7, #32]
 80011ec:	6a3b      	ldr	r3, [r7, #32]
 80011ee:	fa93 f3a3 	rbit	r3, r3
 80011f2:	61fb      	str	r3, [r7, #28]
 80011f4:	69fb      	ldr	r3, [r7, #28]
 80011f6:	627b      	str	r3, [r7, #36]	@ 0x24
 80011f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d101      	bne.n	8001202 <LL_GPIO_SetAFPin_8_15+0x5c>
 80011fe:	2320      	movs	r3, #32
 8001200:	e003      	b.n	800120a <LL_GPIO_SetAFPin_8_15+0x64>
 8001202:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001204:	fab3 f383 	clz	r3, r3
 8001208:	b2db      	uxtb	r3, r3
 800120a:	009b      	lsls	r3, r3, #2
 800120c:	6879      	ldr	r1, [r7, #4]
 800120e:	fa01 f303 	lsl.w	r3, r1, r3
 8001212:	431a      	orrs	r2, r3
 8001214:	68fb      	ldr	r3, [r7, #12]
 8001216:	625a      	str	r2, [r3, #36]	@ 0x24
 8001218:	bf00      	nop
 800121a:	372c      	adds	r7, #44	@ 0x2c
 800121c:	46bd      	mov	sp, r7
 800121e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001222:	4770      	bx	lr

08001224 <LL_GPIO_Init>:
 8001224:	b580      	push	{r7, lr}
 8001226:	b08a      	sub	sp, #40	@ 0x28
 8001228:	af00      	add	r7, sp, #0
 800122a:	6078      	str	r0, [r7, #4]
 800122c:	6039      	str	r1, [r7, #0]
 800122e:	2300      	movs	r3, #0
 8001230:	627b      	str	r3, [r7, #36]	@ 0x24
 8001232:	2300      	movs	r3, #0
 8001234:	623b      	str	r3, [r7, #32]
 8001236:	683b      	ldr	r3, [r7, #0]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	61bb      	str	r3, [r7, #24]
 800123c:	69bb      	ldr	r3, [r7, #24]
 800123e:	fa93 f3a3 	rbit	r3, r3
 8001242:	617b      	str	r3, [r7, #20]
 8001244:	697b      	ldr	r3, [r7, #20]
 8001246:	61fb      	str	r3, [r7, #28]
 8001248:	69fb      	ldr	r3, [r7, #28]
 800124a:	2b00      	cmp	r3, #0
 800124c:	d101      	bne.n	8001252 <LL_GPIO_Init+0x2e>
 800124e:	2320      	movs	r3, #32
 8001250:	e003      	b.n	800125a <LL_GPIO_Init+0x36>
 8001252:	69fb      	ldr	r3, [r7, #28]
 8001254:	fab3 f383 	clz	r3, r3
 8001258:	b2db      	uxtb	r3, r3
 800125a:	627b      	str	r3, [r7, #36]	@ 0x24
 800125c:	e057      	b.n	800130e <LL_GPIO_Init+0xea>
 800125e:	683b      	ldr	r3, [r7, #0]
 8001260:	681a      	ldr	r2, [r3, #0]
 8001262:	2101      	movs	r1, #1
 8001264:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001266:	fa01 f303 	lsl.w	r3, r1, r3
 800126a:	4013      	ands	r3, r2
 800126c:	623b      	str	r3, [r7, #32]
 800126e:	6a3b      	ldr	r3, [r7, #32]
 8001270:	2b00      	cmp	r3, #0
 8001272:	d049      	beq.n	8001308 <LL_GPIO_Init+0xe4>
 8001274:	683b      	ldr	r3, [r7, #0]
 8001276:	685b      	ldr	r3, [r3, #4]
 8001278:	2b01      	cmp	r3, #1
 800127a:	d003      	beq.n	8001284 <LL_GPIO_Init+0x60>
 800127c:	683b      	ldr	r3, [r7, #0]
 800127e:	685b      	ldr	r3, [r3, #4]
 8001280:	2b02      	cmp	r3, #2
 8001282:	d10d      	bne.n	80012a0 <LL_GPIO_Init+0x7c>
 8001284:	683b      	ldr	r3, [r7, #0]
 8001286:	689b      	ldr	r3, [r3, #8]
 8001288:	461a      	mov	r2, r3
 800128a:	6a39      	ldr	r1, [r7, #32]
 800128c:	6878      	ldr	r0, [r7, #4]
 800128e:	f7ff fed3 	bl	8001038 <LL_GPIO_SetPinSpeed>
 8001292:	683b      	ldr	r3, [r7, #0]
 8001294:	68db      	ldr	r3, [r3, #12]
 8001296:	461a      	mov	r2, r3
 8001298:	6a39      	ldr	r1, [r7, #32]
 800129a:	6878      	ldr	r0, [r7, #4]
 800129c:	f7ff feb4 	bl	8001008 <LL_GPIO_SetPinOutputType>
 80012a0:	683b      	ldr	r3, [r7, #0]
 80012a2:	691b      	ldr	r3, [r3, #16]
 80012a4:	461a      	mov	r2, r3
 80012a6:	6a39      	ldr	r1, [r7, #32]
 80012a8:	6878      	ldr	r0, [r7, #4]
 80012aa:	f7ff ff02 	bl	80010b2 <LL_GPIO_SetPinPull>
 80012ae:	683b      	ldr	r3, [r7, #0]
 80012b0:	685b      	ldr	r3, [r3, #4]
 80012b2:	2b02      	cmp	r3, #2
 80012b4:	d121      	bne.n	80012fa <LL_GPIO_Init+0xd6>
 80012b6:	6a3b      	ldr	r3, [r7, #32]
 80012b8:	60fb      	str	r3, [r7, #12]
 80012ba:	68fb      	ldr	r3, [r7, #12]
 80012bc:	fa93 f3a3 	rbit	r3, r3
 80012c0:	60bb      	str	r3, [r7, #8]
 80012c2:	68bb      	ldr	r3, [r7, #8]
 80012c4:	613b      	str	r3, [r7, #16]
 80012c6:	693b      	ldr	r3, [r7, #16]
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d101      	bne.n	80012d0 <LL_GPIO_Init+0xac>
 80012cc:	2320      	movs	r3, #32
 80012ce:	e003      	b.n	80012d8 <LL_GPIO_Init+0xb4>
 80012d0:	693b      	ldr	r3, [r7, #16]
 80012d2:	fab3 f383 	clz	r3, r3
 80012d6:	b2db      	uxtb	r3, r3
 80012d8:	2b07      	cmp	r3, #7
 80012da:	d807      	bhi.n	80012ec <LL_GPIO_Init+0xc8>
 80012dc:	683b      	ldr	r3, [r7, #0]
 80012de:	695b      	ldr	r3, [r3, #20]
 80012e0:	461a      	mov	r2, r3
 80012e2:	6a39      	ldr	r1, [r7, #32]
 80012e4:	6878      	ldr	r0, [r7, #4]
 80012e6:	f7ff ff21 	bl	800112c <LL_GPIO_SetAFPin_0_7>
 80012ea:	e006      	b.n	80012fa <LL_GPIO_Init+0xd6>
 80012ec:	683b      	ldr	r3, [r7, #0]
 80012ee:	695b      	ldr	r3, [r3, #20]
 80012f0:	461a      	mov	r2, r3
 80012f2:	6a39      	ldr	r1, [r7, #32]
 80012f4:	6878      	ldr	r0, [r7, #4]
 80012f6:	f7ff ff56 	bl	80011a6 <LL_GPIO_SetAFPin_8_15>
 80012fa:	683b      	ldr	r3, [r7, #0]
 80012fc:	685b      	ldr	r3, [r3, #4]
 80012fe:	461a      	mov	r2, r3
 8001300:	6a39      	ldr	r1, [r7, #32]
 8001302:	6878      	ldr	r0, [r7, #4]
 8001304:	f7ff fe43 	bl	8000f8e <LL_GPIO_SetPinMode>
 8001308:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800130a:	3301      	adds	r3, #1
 800130c:	627b      	str	r3, [r7, #36]	@ 0x24
 800130e:	683b      	ldr	r3, [r7, #0]
 8001310:	681a      	ldr	r2, [r3, #0]
 8001312:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001314:	fa22 f303 	lsr.w	r3, r2, r3
 8001318:	2b00      	cmp	r3, #0
 800131a:	d1a0      	bne.n	800125e <LL_GPIO_Init+0x3a>
 800131c:	2300      	movs	r3, #0
 800131e:	4618      	mov	r0, r3
 8001320:	3728      	adds	r7, #40	@ 0x28
 8001322:	46bd      	mov	sp, r7
 8001324:	bd80      	pop	{r7, pc}
	...

08001328 <LL_RCC_GetSysClkSource>:
 8001328:	b480      	push	{r7}
 800132a:	af00      	add	r7, sp, #0
 800132c:	4b04      	ldr	r3, [pc, #16]	@ (8001340 <LL_RCC_GetSysClkSource+0x18>)
 800132e:	689b      	ldr	r3, [r3, #8]
 8001330:	f003 030c 	and.w	r3, r3, #12
 8001334:	4618      	mov	r0, r3
 8001336:	46bd      	mov	sp, r7
 8001338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133c:	4770      	bx	lr
 800133e:	bf00      	nop
 8001340:	40023800 	.word	0x40023800

08001344 <LL_RCC_GetAHBPrescaler>:
 8001344:	b480      	push	{r7}
 8001346:	af00      	add	r7, sp, #0
 8001348:	4b04      	ldr	r3, [pc, #16]	@ (800135c <LL_RCC_GetAHBPrescaler+0x18>)
 800134a:	689b      	ldr	r3, [r3, #8]
 800134c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001350:	4618      	mov	r0, r3
 8001352:	46bd      	mov	sp, r7
 8001354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001358:	4770      	bx	lr
 800135a:	bf00      	nop
 800135c:	40023800 	.word	0x40023800

08001360 <LL_RCC_GetAPB1Prescaler>:
 8001360:	b480      	push	{r7}
 8001362:	af00      	add	r7, sp, #0
 8001364:	4b04      	ldr	r3, [pc, #16]	@ (8001378 <LL_RCC_GetAPB1Prescaler+0x18>)
 8001366:	689b      	ldr	r3, [r3, #8]
 8001368:	f403 53e0 	and.w	r3, r3, #7168	@ 0x1c00
 800136c:	4618      	mov	r0, r3
 800136e:	46bd      	mov	sp, r7
 8001370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001374:	4770      	bx	lr
 8001376:	bf00      	nop
 8001378:	40023800 	.word	0x40023800

0800137c <LL_RCC_GetAPB2Prescaler>:
 800137c:	b480      	push	{r7}
 800137e:	af00      	add	r7, sp, #0
 8001380:	4b04      	ldr	r3, [pc, #16]	@ (8001394 <LL_RCC_GetAPB2Prescaler+0x18>)
 8001382:	689b      	ldr	r3, [r3, #8]
 8001384:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 8001388:	4618      	mov	r0, r3
 800138a:	46bd      	mov	sp, r7
 800138c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001390:	4770      	bx	lr
 8001392:	bf00      	nop
 8001394:	40023800 	.word	0x40023800

08001398 <LL_RCC_PLL_GetMainSource>:
 8001398:	b480      	push	{r7}
 800139a:	af00      	add	r7, sp, #0
 800139c:	4b04      	ldr	r3, [pc, #16]	@ (80013b0 <LL_RCC_PLL_GetMainSource+0x18>)
 800139e:	685b      	ldr	r3, [r3, #4]
 80013a0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80013a4:	4618      	mov	r0, r3
 80013a6:	46bd      	mov	sp, r7
 80013a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ac:	4770      	bx	lr
 80013ae:	bf00      	nop
 80013b0:	40023800 	.word	0x40023800

080013b4 <LL_RCC_PLL_GetN>:
 80013b4:	b480      	push	{r7}
 80013b6:	af00      	add	r7, sp, #0
 80013b8:	4b04      	ldr	r3, [pc, #16]	@ (80013cc <LL_RCC_PLL_GetN+0x18>)
 80013ba:	685b      	ldr	r3, [r3, #4]
 80013bc:	099b      	lsrs	r3, r3, #6
 80013be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80013c2:	4618      	mov	r0, r3
 80013c4:	46bd      	mov	sp, r7
 80013c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ca:	4770      	bx	lr
 80013cc:	40023800 	.word	0x40023800

080013d0 <LL_RCC_PLL_GetP>:
 80013d0:	b480      	push	{r7}
 80013d2:	af00      	add	r7, sp, #0
 80013d4:	4b04      	ldr	r3, [pc, #16]	@ (80013e8 <LL_RCC_PLL_GetP+0x18>)
 80013d6:	685b      	ldr	r3, [r3, #4]
 80013d8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80013dc:	4618      	mov	r0, r3
 80013de:	46bd      	mov	sp, r7
 80013e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e4:	4770      	bx	lr
 80013e6:	bf00      	nop
 80013e8:	40023800 	.word	0x40023800

080013ec <LL_RCC_PLL_GetDivider>:
 80013ec:	b480      	push	{r7}
 80013ee:	af00      	add	r7, sp, #0
 80013f0:	4b04      	ldr	r3, [pc, #16]	@ (8001404 <LL_RCC_PLL_GetDivider+0x18>)
 80013f2:	685b      	ldr	r3, [r3, #4]
 80013f4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80013f8:	4618      	mov	r0, r3
 80013fa:	46bd      	mov	sp, r7
 80013fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001400:	4770      	bx	lr
 8001402:	bf00      	nop
 8001404:	40023800 	.word	0x40023800

08001408 <LL_RCC_GetSystemClocksFreq>:
 8001408:	b580      	push	{r7, lr}
 800140a:	b082      	sub	sp, #8
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]
 8001410:	f000 f820 	bl	8001454 <RCC_GetSystemClockFreq>
 8001414:	4602      	mov	r2, r0
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	601a      	str	r2, [r3, #0]
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	4618      	mov	r0, r3
 8001420:	f000 f840 	bl	80014a4 <RCC_GetHCLKClockFreq>
 8001424:	4602      	mov	r2, r0
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	605a      	str	r2, [r3, #4]
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	685b      	ldr	r3, [r3, #4]
 800142e:	4618      	mov	r0, r3
 8001430:	f000 f84e 	bl	80014d0 <RCC_GetPCLK1ClockFreq>
 8001434:	4602      	mov	r2, r0
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	609a      	str	r2, [r3, #8]
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	685b      	ldr	r3, [r3, #4]
 800143e:	4618      	mov	r0, r3
 8001440:	f000 f85a 	bl	80014f8 <RCC_GetPCLK2ClockFreq>
 8001444:	4602      	mov	r2, r0
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	60da      	str	r2, [r3, #12]
 800144a:	bf00      	nop
 800144c:	3708      	adds	r7, #8
 800144e:	46bd      	mov	sp, r7
 8001450:	bd80      	pop	{r7, pc}
	...

08001454 <RCC_GetSystemClockFreq>:
 8001454:	b580      	push	{r7, lr}
 8001456:	b082      	sub	sp, #8
 8001458:	af00      	add	r7, sp, #0
 800145a:	2300      	movs	r3, #0
 800145c:	607b      	str	r3, [r7, #4]
 800145e:	f7ff ff63 	bl	8001328 <LL_RCC_GetSysClkSource>
 8001462:	4603      	mov	r3, r0
 8001464:	2b08      	cmp	r3, #8
 8001466:	d00c      	beq.n	8001482 <RCC_GetSystemClockFreq+0x2e>
 8001468:	2b08      	cmp	r3, #8
 800146a:	d80f      	bhi.n	800148c <RCC_GetSystemClockFreq+0x38>
 800146c:	2b00      	cmp	r3, #0
 800146e:	d002      	beq.n	8001476 <RCC_GetSystemClockFreq+0x22>
 8001470:	2b04      	cmp	r3, #4
 8001472:	d003      	beq.n	800147c <RCC_GetSystemClockFreq+0x28>
 8001474:	e00a      	b.n	800148c <RCC_GetSystemClockFreq+0x38>
 8001476:	4b09      	ldr	r3, [pc, #36]	@ (800149c <RCC_GetSystemClockFreq+0x48>)
 8001478:	607b      	str	r3, [r7, #4]
 800147a:	e00a      	b.n	8001492 <RCC_GetSystemClockFreq+0x3e>
 800147c:	4b08      	ldr	r3, [pc, #32]	@ (80014a0 <RCC_GetSystemClockFreq+0x4c>)
 800147e:	607b      	str	r3, [r7, #4]
 8001480:	e007      	b.n	8001492 <RCC_GetSystemClockFreq+0x3e>
 8001482:	2008      	movs	r0, #8
 8001484:	f000 f84c 	bl	8001520 <RCC_PLL_GetFreqDomain_SYS>
 8001488:	6078      	str	r0, [r7, #4]
 800148a:	e002      	b.n	8001492 <RCC_GetSystemClockFreq+0x3e>
 800148c:	4b03      	ldr	r3, [pc, #12]	@ (800149c <RCC_GetSystemClockFreq+0x48>)
 800148e:	607b      	str	r3, [r7, #4]
 8001490:	bf00      	nop
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	4618      	mov	r0, r3
 8001496:	3708      	adds	r7, #8
 8001498:	46bd      	mov	sp, r7
 800149a:	bd80      	pop	{r7, pc}
 800149c:	00f42400 	.word	0x00f42400
 80014a0:	007a1200 	.word	0x007a1200

080014a4 <RCC_GetHCLKClockFreq>:
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b082      	sub	sp, #8
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
 80014ac:	f7ff ff4a 	bl	8001344 <LL_RCC_GetAHBPrescaler>
 80014b0:	4603      	mov	r3, r0
 80014b2:	091b      	lsrs	r3, r3, #4
 80014b4:	f003 030f 	and.w	r3, r3, #15
 80014b8:	4a04      	ldr	r2, [pc, #16]	@ (80014cc <RCC_GetHCLKClockFreq+0x28>)
 80014ba:	5cd3      	ldrb	r3, [r2, r3]
 80014bc:	461a      	mov	r2, r3
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	40d3      	lsrs	r3, r2
 80014c2:	4618      	mov	r0, r3
 80014c4:	3708      	adds	r7, #8
 80014c6:	46bd      	mov	sp, r7
 80014c8:	bd80      	pop	{r7, pc}
 80014ca:	bf00      	nop
 80014cc:	08001c04 	.word	0x08001c04

080014d0 <RCC_GetPCLK1ClockFreq>:
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b082      	sub	sp, #8
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]
 80014d8:	f7ff ff42 	bl	8001360 <LL_RCC_GetAPB1Prescaler>
 80014dc:	4603      	mov	r3, r0
 80014de:	0a9b      	lsrs	r3, r3, #10
 80014e0:	4a04      	ldr	r2, [pc, #16]	@ (80014f4 <RCC_GetPCLK1ClockFreq+0x24>)
 80014e2:	5cd3      	ldrb	r3, [r2, r3]
 80014e4:	461a      	mov	r2, r3
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	40d3      	lsrs	r3, r2
 80014ea:	4618      	mov	r0, r3
 80014ec:	3708      	adds	r7, #8
 80014ee:	46bd      	mov	sp, r7
 80014f0:	bd80      	pop	{r7, pc}
 80014f2:	bf00      	nop
 80014f4:	08001c14 	.word	0x08001c14

080014f8 <RCC_GetPCLK2ClockFreq>:
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b082      	sub	sp, #8
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	6078      	str	r0, [r7, #4]
 8001500:	f7ff ff3c 	bl	800137c <LL_RCC_GetAPB2Prescaler>
 8001504:	4603      	mov	r3, r0
 8001506:	0b5b      	lsrs	r3, r3, #13
 8001508:	4a04      	ldr	r2, [pc, #16]	@ (800151c <RCC_GetPCLK2ClockFreq+0x24>)
 800150a:	5cd3      	ldrb	r3, [r2, r3]
 800150c:	461a      	mov	r2, r3
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	40d3      	lsrs	r3, r2
 8001512:	4618      	mov	r0, r3
 8001514:	3708      	adds	r7, #8
 8001516:	46bd      	mov	sp, r7
 8001518:	bd80      	pop	{r7, pc}
 800151a:	bf00      	nop
 800151c:	08001c14 	.word	0x08001c14

08001520 <RCC_PLL_GetFreqDomain_SYS>:
 8001520:	b590      	push	{r4, r7, lr}
 8001522:	b087      	sub	sp, #28
 8001524:	af00      	add	r7, sp, #0
 8001526:	6078      	str	r0, [r7, #4]
 8001528:	2300      	movs	r3, #0
 800152a:	617b      	str	r3, [r7, #20]
 800152c:	2300      	movs	r3, #0
 800152e:	60fb      	str	r3, [r7, #12]
 8001530:	2300      	movs	r3, #0
 8001532:	613b      	str	r3, [r7, #16]
 8001534:	f7ff ff30 	bl	8001398 <LL_RCC_PLL_GetMainSource>
 8001538:	60f8      	str	r0, [r7, #12]
 800153a:	68fb      	ldr	r3, [r7, #12]
 800153c:	2b00      	cmp	r3, #0
 800153e:	d004      	beq.n	800154a <RCC_PLL_GetFreqDomain_SYS+0x2a>
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001546:	d003      	beq.n	8001550 <RCC_PLL_GetFreqDomain_SYS+0x30>
 8001548:	e005      	b.n	8001556 <RCC_PLL_GetFreqDomain_SYS+0x36>
 800154a:	4b12      	ldr	r3, [pc, #72]	@ (8001594 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 800154c:	617b      	str	r3, [r7, #20]
 800154e:	e005      	b.n	800155c <RCC_PLL_GetFreqDomain_SYS+0x3c>
 8001550:	4b11      	ldr	r3, [pc, #68]	@ (8001598 <RCC_PLL_GetFreqDomain_SYS+0x78>)
 8001552:	617b      	str	r3, [r7, #20]
 8001554:	e002      	b.n	800155c <RCC_PLL_GetFreqDomain_SYS+0x3c>
 8001556:	4b0f      	ldr	r3, [pc, #60]	@ (8001594 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 8001558:	617b      	str	r3, [r7, #20]
 800155a:	bf00      	nop
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	2b08      	cmp	r3, #8
 8001560:	d113      	bne.n	800158a <RCC_PLL_GetFreqDomain_SYS+0x6a>
 8001562:	f7ff ff43 	bl	80013ec <LL_RCC_PLL_GetDivider>
 8001566:	4602      	mov	r2, r0
 8001568:	697b      	ldr	r3, [r7, #20]
 800156a:	fbb3 f4f2 	udiv	r4, r3, r2
 800156e:	f7ff ff21 	bl	80013b4 <LL_RCC_PLL_GetN>
 8001572:	4603      	mov	r3, r0
 8001574:	fb03 f404 	mul.w	r4, r3, r4
 8001578:	f7ff ff2a 	bl	80013d0 <LL_RCC_PLL_GetP>
 800157c:	4603      	mov	r3, r0
 800157e:	0c1b      	lsrs	r3, r3, #16
 8001580:	3301      	adds	r3, #1
 8001582:	005b      	lsls	r3, r3, #1
 8001584:	fbb4 f3f3 	udiv	r3, r4, r3
 8001588:	613b      	str	r3, [r7, #16]
 800158a:	693b      	ldr	r3, [r7, #16]
 800158c:	4618      	mov	r0, r3
 800158e:	371c      	adds	r7, #28
 8001590:	46bd      	mov	sp, r7
 8001592:	bd90      	pop	{r4, r7, pc}
 8001594:	00f42400 	.word	0x00f42400
 8001598:	007a1200 	.word	0x007a1200

0800159c <LL_USART_IsEnabled>:
 800159c:	b480      	push	{r7}
 800159e:	b083      	sub	sp, #12
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	6078      	str	r0, [r7, #4]
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	68db      	ldr	r3, [r3, #12]
 80015a8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80015ac:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80015b0:	bf0c      	ite	eq
 80015b2:	2301      	moveq	r3, #1
 80015b4:	2300      	movne	r3, #0
 80015b6:	b2db      	uxtb	r3, r3
 80015b8:	4618      	mov	r0, r3
 80015ba:	370c      	adds	r7, #12
 80015bc:	46bd      	mov	sp, r7
 80015be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c2:	4770      	bx	lr

080015c4 <LL_USART_SetStopBitsLength>:
 80015c4:	b480      	push	{r7}
 80015c6:	b083      	sub	sp, #12
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	6078      	str	r0, [r7, #4]
 80015cc:	6039      	str	r1, [r7, #0]
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	691b      	ldr	r3, [r3, #16]
 80015d2:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80015d6:	683b      	ldr	r3, [r7, #0]
 80015d8:	431a      	orrs	r2, r3
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	611a      	str	r2, [r3, #16]
 80015de:	bf00      	nop
 80015e0:	370c      	adds	r7, #12
 80015e2:	46bd      	mov	sp, r7
 80015e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e8:	4770      	bx	lr

080015ea <LL_USART_SetHWFlowCtrl>:
 80015ea:	b480      	push	{r7}
 80015ec:	b083      	sub	sp, #12
 80015ee:	af00      	add	r7, sp, #0
 80015f0:	6078      	str	r0, [r7, #4]
 80015f2:	6039      	str	r1, [r7, #0]
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	695b      	ldr	r3, [r3, #20]
 80015f8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80015fc:	683b      	ldr	r3, [r7, #0]
 80015fe:	431a      	orrs	r2, r3
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	615a      	str	r2, [r3, #20]
 8001604:	bf00      	nop
 8001606:	370c      	adds	r7, #12
 8001608:	46bd      	mov	sp, r7
 800160a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160e:	4770      	bx	lr

08001610 <LL_USART_SetBaudRate>:
 8001610:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001614:	b0c0      	sub	sp, #256	@ 0x100
 8001616:	af00      	add	r7, sp, #0
 8001618:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800161c:	f8c7 10f8 	str.w	r1, [r7, #248]	@ 0xf8
 8001620:	f8c7 20f4 	str.w	r2, [r7, #244]	@ 0xf4
 8001624:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8001628:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800162c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001630:	f040 810c 	bne.w	800184c <LL_USART_SetBaudRate+0x23c>
 8001634:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8001638:	2200      	movs	r2, #0
 800163a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800163e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8001642:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8001646:	4622      	mov	r2, r4
 8001648:	462b      	mov	r3, r5
 800164a:	1891      	adds	r1, r2, r2
 800164c:	6639      	str	r1, [r7, #96]	@ 0x60
 800164e:	415b      	adcs	r3, r3
 8001650:	667b      	str	r3, [r7, #100]	@ 0x64
 8001652:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 8001656:	4621      	mov	r1, r4
 8001658:	eb12 0801 	adds.w	r8, r2, r1
 800165c:	4629      	mov	r1, r5
 800165e:	eb43 0901 	adc.w	r9, r3, r1
 8001662:	f04f 0200 	mov.w	r2, #0
 8001666:	f04f 0300 	mov.w	r3, #0
 800166a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800166e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001672:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001676:	4690      	mov	r8, r2
 8001678:	4699      	mov	r9, r3
 800167a:	4623      	mov	r3, r4
 800167c:	eb18 0303 	adds.w	r3, r8, r3
 8001680:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8001684:	462b      	mov	r3, r5
 8001686:	eb49 0303 	adc.w	r3, r9, r3
 800168a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800168e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8001692:	2200      	movs	r2, #0
 8001694:	469a      	mov	sl, r3
 8001696:	4693      	mov	fp, r2
 8001698:	eb1a 030a 	adds.w	r3, sl, sl
 800169c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800169e:	eb4b 030b 	adc.w	r3, fp, fp
 80016a2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80016a4:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80016a8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80016ac:	f7fe fd92 	bl	80001d4 <__aeabi_uldivmod>
 80016b0:	4602      	mov	r2, r0
 80016b2:	460b      	mov	r3, r1
 80016b4:	4b64      	ldr	r3, [pc, #400]	@ (8001848 <LL_USART_SetBaudRate+0x238>)
 80016b6:	fba3 2302 	umull	r2, r3, r3, r2
 80016ba:	095b      	lsrs	r3, r3, #5
 80016bc:	b29b      	uxth	r3, r3
 80016be:	011b      	lsls	r3, r3, #4
 80016c0:	b29c      	uxth	r4, r3
 80016c2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80016c6:	2200      	movs	r2, #0
 80016c8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80016cc:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80016d0:	e9d7 8936 	ldrd	r8, r9, [r7, #216]	@ 0xd8
 80016d4:	4642      	mov	r2, r8
 80016d6:	464b      	mov	r3, r9
 80016d8:	1891      	adds	r1, r2, r2
 80016da:	6539      	str	r1, [r7, #80]	@ 0x50
 80016dc:	415b      	adcs	r3, r3
 80016de:	657b      	str	r3, [r7, #84]	@ 0x54
 80016e0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80016e4:	4641      	mov	r1, r8
 80016e6:	1851      	adds	r1, r2, r1
 80016e8:	64b9      	str	r1, [r7, #72]	@ 0x48
 80016ea:	4649      	mov	r1, r9
 80016ec:	414b      	adcs	r3, r1
 80016ee:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80016f0:	f04f 0200 	mov.w	r2, #0
 80016f4:	f04f 0300 	mov.w	r3, #0
 80016f8:	e9d7 ab12 	ldrd	sl, fp, [r7, #72]	@ 0x48
 80016fc:	4659      	mov	r1, fp
 80016fe:	00cb      	lsls	r3, r1, #3
 8001700:	4651      	mov	r1, sl
 8001702:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001706:	4651      	mov	r1, sl
 8001708:	00ca      	lsls	r2, r1, #3
 800170a:	4610      	mov	r0, r2
 800170c:	4619      	mov	r1, r3
 800170e:	4603      	mov	r3, r0
 8001710:	4642      	mov	r2, r8
 8001712:	189b      	adds	r3, r3, r2
 8001714:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8001718:	464b      	mov	r3, r9
 800171a:	460a      	mov	r2, r1
 800171c:	eb42 0303 	adc.w	r3, r2, r3
 8001720:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8001724:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8001728:	2200      	movs	r2, #0
 800172a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800172e:	f8c7 20cc 	str.w	r2, [r7, #204]	@ 0xcc
 8001732:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8001736:	460b      	mov	r3, r1
 8001738:	18db      	adds	r3, r3, r3
 800173a:	643b      	str	r3, [r7, #64]	@ 0x40
 800173c:	4613      	mov	r3, r2
 800173e:	eb42 0303 	adc.w	r3, r2, r3
 8001742:	647b      	str	r3, [r7, #68]	@ 0x44
 8001744:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8001748:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	@ 0xd0
 800174c:	f7fe fd42 	bl	80001d4 <__aeabi_uldivmod>
 8001750:	4602      	mov	r2, r0
 8001752:	460b      	mov	r3, r1
 8001754:	4611      	mov	r1, r2
 8001756:	4b3c      	ldr	r3, [pc, #240]	@ (8001848 <LL_USART_SetBaudRate+0x238>)
 8001758:	fba3 2301 	umull	r2, r3, r3, r1
 800175c:	095b      	lsrs	r3, r3, #5
 800175e:	2264      	movs	r2, #100	@ 0x64
 8001760:	fb02 f303 	mul.w	r3, r2, r3
 8001764:	1acb      	subs	r3, r1, r3
 8001766:	00db      	lsls	r3, r3, #3
 8001768:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800176c:	4b36      	ldr	r3, [pc, #216]	@ (8001848 <LL_USART_SetBaudRate+0x238>)
 800176e:	fba3 2302 	umull	r2, r3, r3, r2
 8001772:	095b      	lsrs	r3, r3, #5
 8001774:	b29b      	uxth	r3, r3
 8001776:	005b      	lsls	r3, r3, #1
 8001778:	b29b      	uxth	r3, r3
 800177a:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800177e:	b29b      	uxth	r3, r3
 8001780:	4423      	add	r3, r4
 8001782:	b29c      	uxth	r4, r3
 8001784:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8001788:	2200      	movs	r2, #0
 800178a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800178e:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8001792:	e9d7 8930 	ldrd	r8, r9, [r7, #192]	@ 0xc0
 8001796:	4642      	mov	r2, r8
 8001798:	464b      	mov	r3, r9
 800179a:	1891      	adds	r1, r2, r2
 800179c:	63b9      	str	r1, [r7, #56]	@ 0x38
 800179e:	415b      	adcs	r3, r3
 80017a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80017a2:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80017a6:	4641      	mov	r1, r8
 80017a8:	1851      	adds	r1, r2, r1
 80017aa:	6339      	str	r1, [r7, #48]	@ 0x30
 80017ac:	4649      	mov	r1, r9
 80017ae:	414b      	adcs	r3, r1
 80017b0:	637b      	str	r3, [r7, #52]	@ 0x34
 80017b2:	f04f 0200 	mov.w	r2, #0
 80017b6:	f04f 0300 	mov.w	r3, #0
 80017ba:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80017be:	4659      	mov	r1, fp
 80017c0:	00cb      	lsls	r3, r1, #3
 80017c2:	4651      	mov	r1, sl
 80017c4:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80017c8:	4651      	mov	r1, sl
 80017ca:	00ca      	lsls	r2, r1, #3
 80017cc:	4610      	mov	r0, r2
 80017ce:	4619      	mov	r1, r3
 80017d0:	4603      	mov	r3, r0
 80017d2:	4642      	mov	r2, r8
 80017d4:	189b      	adds	r3, r3, r2
 80017d6:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80017da:	464b      	mov	r3, r9
 80017dc:	460a      	mov	r2, r1
 80017de:	eb42 0303 	adc.w	r3, r2, r3
 80017e2:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80017e6:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80017ea:	2200      	movs	r2, #0
 80017ec:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80017f0:	f8c7 20b4 	str.w	r2, [r7, #180]	@ 0xb4
 80017f4:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 80017f8:	460b      	mov	r3, r1
 80017fa:	18db      	adds	r3, r3, r3
 80017fc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80017fe:	4613      	mov	r3, r2
 8001800:	eb42 0303 	adc.w	r3, r2, r3
 8001804:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001806:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800180a:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	@ 0xb8
 800180e:	f7fe fce1 	bl	80001d4 <__aeabi_uldivmod>
 8001812:	4602      	mov	r2, r0
 8001814:	460b      	mov	r3, r1
 8001816:	4b0c      	ldr	r3, [pc, #48]	@ (8001848 <LL_USART_SetBaudRate+0x238>)
 8001818:	fba3 1302 	umull	r1, r3, r3, r2
 800181c:	095b      	lsrs	r3, r3, #5
 800181e:	2164      	movs	r1, #100	@ 0x64
 8001820:	fb01 f303 	mul.w	r3, r1, r3
 8001824:	1ad3      	subs	r3, r2, r3
 8001826:	00db      	lsls	r3, r3, #3
 8001828:	3332      	adds	r3, #50	@ 0x32
 800182a:	4a07      	ldr	r2, [pc, #28]	@ (8001848 <LL_USART_SetBaudRate+0x238>)
 800182c:	fba2 2303 	umull	r2, r3, r2, r3
 8001830:	095b      	lsrs	r3, r3, #5
 8001832:	b29b      	uxth	r3, r3
 8001834:	f003 0307 	and.w	r3, r3, #7
 8001838:	b29b      	uxth	r3, r3
 800183a:	4423      	add	r3, r4
 800183c:	b29b      	uxth	r3, r3
 800183e:	461a      	mov	r2, r3
 8001840:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8001844:	609a      	str	r2, [r3, #8]
 8001846:	e108      	b.n	8001a5a <LL_USART_SetBaudRate+0x44a>
 8001848:	51eb851f 	.word	0x51eb851f
 800184c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8001850:	2200      	movs	r2, #0
 8001852:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8001856:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800185a:	e9d7 892a 	ldrd	r8, r9, [r7, #168]	@ 0xa8
 800185e:	4642      	mov	r2, r8
 8001860:	464b      	mov	r3, r9
 8001862:	1891      	adds	r1, r2, r2
 8001864:	6239      	str	r1, [r7, #32]
 8001866:	415b      	adcs	r3, r3
 8001868:	627b      	str	r3, [r7, #36]	@ 0x24
 800186a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800186e:	4641      	mov	r1, r8
 8001870:	1854      	adds	r4, r2, r1
 8001872:	4649      	mov	r1, r9
 8001874:	eb43 0501 	adc.w	r5, r3, r1
 8001878:	f04f 0200 	mov.w	r2, #0
 800187c:	f04f 0300 	mov.w	r3, #0
 8001880:	00eb      	lsls	r3, r5, #3
 8001882:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001886:	00e2      	lsls	r2, r4, #3
 8001888:	4614      	mov	r4, r2
 800188a:	461d      	mov	r5, r3
 800188c:	4643      	mov	r3, r8
 800188e:	18e3      	adds	r3, r4, r3
 8001890:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8001894:	464b      	mov	r3, r9
 8001896:	eb45 0303 	adc.w	r3, r5, r3
 800189a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800189e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80018a2:	2200      	movs	r2, #0
 80018a4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80018a8:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 80018ac:	f04f 0200 	mov.w	r2, #0
 80018b0:	f04f 0300 	mov.w	r3, #0
 80018b4:	e9d7 4526 	ldrd	r4, r5, [r7, #152]	@ 0x98
 80018b8:	4629      	mov	r1, r5
 80018ba:	008b      	lsls	r3, r1, #2
 80018bc:	4621      	mov	r1, r4
 80018be:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80018c2:	4621      	mov	r1, r4
 80018c4:	008a      	lsls	r2, r1, #2
 80018c6:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	@ 0xa0
 80018ca:	f7fe fc83 	bl	80001d4 <__aeabi_uldivmod>
 80018ce:	4602      	mov	r2, r0
 80018d0:	460b      	mov	r3, r1
 80018d2:	4b65      	ldr	r3, [pc, #404]	@ (8001a68 <LL_USART_SetBaudRate+0x458>)
 80018d4:	fba3 2302 	umull	r2, r3, r3, r2
 80018d8:	095b      	lsrs	r3, r3, #5
 80018da:	b29b      	uxth	r3, r3
 80018dc:	011b      	lsls	r3, r3, #4
 80018de:	b29c      	uxth	r4, r3
 80018e0:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80018e4:	2200      	movs	r2, #0
 80018e6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80018ea:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80018ee:	e9d7 8924 	ldrd	r8, r9, [r7, #144]	@ 0x90
 80018f2:	4642      	mov	r2, r8
 80018f4:	464b      	mov	r3, r9
 80018f6:	1891      	adds	r1, r2, r2
 80018f8:	61b9      	str	r1, [r7, #24]
 80018fa:	415b      	adcs	r3, r3
 80018fc:	61fb      	str	r3, [r7, #28]
 80018fe:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001902:	4641      	mov	r1, r8
 8001904:	1851      	adds	r1, r2, r1
 8001906:	6139      	str	r1, [r7, #16]
 8001908:	4649      	mov	r1, r9
 800190a:	414b      	adcs	r3, r1
 800190c:	617b      	str	r3, [r7, #20]
 800190e:	f04f 0200 	mov.w	r2, #0
 8001912:	f04f 0300 	mov.w	r3, #0
 8001916:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800191a:	4659      	mov	r1, fp
 800191c:	00cb      	lsls	r3, r1, #3
 800191e:	4651      	mov	r1, sl
 8001920:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001924:	4651      	mov	r1, sl
 8001926:	00ca      	lsls	r2, r1, #3
 8001928:	4610      	mov	r0, r2
 800192a:	4619      	mov	r1, r3
 800192c:	4603      	mov	r3, r0
 800192e:	4642      	mov	r2, r8
 8001930:	189b      	adds	r3, r3, r2
 8001932:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8001936:	464b      	mov	r3, r9
 8001938:	460a      	mov	r2, r1
 800193a:	eb42 0303 	adc.w	r3, r2, r3
 800193e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8001942:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8001946:	2200      	movs	r2, #0
 8001948:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800194c:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8001950:	f04f 0200 	mov.w	r2, #0
 8001954:	f04f 0300 	mov.w	r3, #0
 8001958:	e9d7 8920 	ldrd	r8, r9, [r7, #128]	@ 0x80
 800195c:	4649      	mov	r1, r9
 800195e:	008b      	lsls	r3, r1, #2
 8001960:	4641      	mov	r1, r8
 8001962:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8001966:	4641      	mov	r1, r8
 8001968:	008a      	lsls	r2, r1, #2
 800196a:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	@ 0x88
 800196e:	f7fe fc31 	bl	80001d4 <__aeabi_uldivmod>
 8001972:	4602      	mov	r2, r0
 8001974:	460b      	mov	r3, r1
 8001976:	4611      	mov	r1, r2
 8001978:	4b3b      	ldr	r3, [pc, #236]	@ (8001a68 <LL_USART_SetBaudRate+0x458>)
 800197a:	fba3 2301 	umull	r2, r3, r3, r1
 800197e:	095b      	lsrs	r3, r3, #5
 8001980:	2264      	movs	r2, #100	@ 0x64
 8001982:	fb02 f303 	mul.w	r3, r2, r3
 8001986:	1acb      	subs	r3, r1, r3
 8001988:	011b      	lsls	r3, r3, #4
 800198a:	3332      	adds	r3, #50	@ 0x32
 800198c:	4a36      	ldr	r2, [pc, #216]	@ (8001a68 <LL_USART_SetBaudRate+0x458>)
 800198e:	fba2 2303 	umull	r2, r3, r2, r3
 8001992:	095b      	lsrs	r3, r3, #5
 8001994:	b29b      	uxth	r3, r3
 8001996:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800199a:	b29b      	uxth	r3, r3
 800199c:	4423      	add	r3, r4
 800199e:	b29c      	uxth	r4, r3
 80019a0:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80019a4:	2200      	movs	r2, #0
 80019a6:	67bb      	str	r3, [r7, #120]	@ 0x78
 80019a8:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80019aa:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80019ae:	4642      	mov	r2, r8
 80019b0:	464b      	mov	r3, r9
 80019b2:	1891      	adds	r1, r2, r2
 80019b4:	60b9      	str	r1, [r7, #8]
 80019b6:	415b      	adcs	r3, r3
 80019b8:	60fb      	str	r3, [r7, #12]
 80019ba:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80019be:	4641      	mov	r1, r8
 80019c0:	1851      	adds	r1, r2, r1
 80019c2:	6039      	str	r1, [r7, #0]
 80019c4:	4649      	mov	r1, r9
 80019c6:	414b      	adcs	r3, r1
 80019c8:	607b      	str	r3, [r7, #4]
 80019ca:	f04f 0200 	mov.w	r2, #0
 80019ce:	f04f 0300 	mov.w	r3, #0
 80019d2:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80019d6:	4659      	mov	r1, fp
 80019d8:	00cb      	lsls	r3, r1, #3
 80019da:	4651      	mov	r1, sl
 80019dc:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80019e0:	4651      	mov	r1, sl
 80019e2:	00ca      	lsls	r2, r1, #3
 80019e4:	4610      	mov	r0, r2
 80019e6:	4619      	mov	r1, r3
 80019e8:	4603      	mov	r3, r0
 80019ea:	4642      	mov	r2, r8
 80019ec:	189b      	adds	r3, r3, r2
 80019ee:	673b      	str	r3, [r7, #112]	@ 0x70
 80019f0:	464b      	mov	r3, r9
 80019f2:	460a      	mov	r2, r1
 80019f4:	eb42 0303 	adc.w	r3, r2, r3
 80019f8:	677b      	str	r3, [r7, #116]	@ 0x74
 80019fa:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80019fe:	2200      	movs	r2, #0
 8001a00:	66bb      	str	r3, [r7, #104]	@ 0x68
 8001a02:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8001a04:	f04f 0200 	mov.w	r2, #0
 8001a08:	f04f 0300 	mov.w	r3, #0
 8001a0c:	e9d7 891a 	ldrd	r8, r9, [r7, #104]	@ 0x68
 8001a10:	4649      	mov	r1, r9
 8001a12:	008b      	lsls	r3, r1, #2
 8001a14:	4641      	mov	r1, r8
 8001a16:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8001a1a:	4641      	mov	r1, r8
 8001a1c:	008a      	lsls	r2, r1, #2
 8001a1e:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 8001a22:	f7fe fbd7 	bl	80001d4 <__aeabi_uldivmod>
 8001a26:	4602      	mov	r2, r0
 8001a28:	460b      	mov	r3, r1
 8001a2a:	4b0f      	ldr	r3, [pc, #60]	@ (8001a68 <LL_USART_SetBaudRate+0x458>)
 8001a2c:	fba3 1302 	umull	r1, r3, r3, r2
 8001a30:	095b      	lsrs	r3, r3, #5
 8001a32:	2164      	movs	r1, #100	@ 0x64
 8001a34:	fb01 f303 	mul.w	r3, r1, r3
 8001a38:	1ad3      	subs	r3, r2, r3
 8001a3a:	011b      	lsls	r3, r3, #4
 8001a3c:	3332      	adds	r3, #50	@ 0x32
 8001a3e:	4a0a      	ldr	r2, [pc, #40]	@ (8001a68 <LL_USART_SetBaudRate+0x458>)
 8001a40:	fba2 2303 	umull	r2, r3, r2, r3
 8001a44:	095b      	lsrs	r3, r3, #5
 8001a46:	b29b      	uxth	r3, r3
 8001a48:	f003 030f 	and.w	r3, r3, #15
 8001a4c:	b29b      	uxth	r3, r3
 8001a4e:	4423      	add	r3, r4
 8001a50:	b29b      	uxth	r3, r3
 8001a52:	461a      	mov	r2, r3
 8001a54:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8001a58:	609a      	str	r2, [r3, #8]
 8001a5a:	bf00      	nop
 8001a5c:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8001a60:	46bd      	mov	sp, r7
 8001a62:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001a66:	bf00      	nop
 8001a68:	51eb851f 	.word	0x51eb851f

08001a6c <LL_USART_Init>:
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b088      	sub	sp, #32
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	6078      	str	r0, [r7, #4]
 8001a74:	6039      	str	r1, [r7, #0]
 8001a76:	2301      	movs	r3, #1
 8001a78:	77fb      	strb	r3, [r7, #31]
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	61bb      	str	r3, [r7, #24]
 8001a7e:	6878      	ldr	r0, [r7, #4]
 8001a80:	f7ff fd8c 	bl	800159c <LL_USART_IsEnabled>
 8001a84:	4603      	mov	r3, r0
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d149      	bne.n	8001b1e <LL_USART_Init+0xb2>
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	68db      	ldr	r3, [r3, #12]
 8001a8e:	f423 4316 	bic.w	r3, r3, #38400	@ 0x9600
 8001a92:	f023 030c 	bic.w	r3, r3, #12
 8001a96:	683a      	ldr	r2, [r7, #0]
 8001a98:	6851      	ldr	r1, [r2, #4]
 8001a9a:	683a      	ldr	r2, [r7, #0]
 8001a9c:	68d2      	ldr	r2, [r2, #12]
 8001a9e:	4311      	orrs	r1, r2
 8001aa0:	683a      	ldr	r2, [r7, #0]
 8001aa2:	6912      	ldr	r2, [r2, #16]
 8001aa4:	4311      	orrs	r1, r2
 8001aa6:	683a      	ldr	r2, [r7, #0]
 8001aa8:	6992      	ldr	r2, [r2, #24]
 8001aaa:	430a      	orrs	r2, r1
 8001aac:	431a      	orrs	r2, r3
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	60da      	str	r2, [r3, #12]
 8001ab2:	683b      	ldr	r3, [r7, #0]
 8001ab4:	689b      	ldr	r3, [r3, #8]
 8001ab6:	4619      	mov	r1, r3
 8001ab8:	6878      	ldr	r0, [r7, #4]
 8001aba:	f7ff fd83 	bl	80015c4 <LL_USART_SetStopBitsLength>
 8001abe:	683b      	ldr	r3, [r7, #0]
 8001ac0:	695b      	ldr	r3, [r3, #20]
 8001ac2:	4619      	mov	r1, r3
 8001ac4:	6878      	ldr	r0, [r7, #4]
 8001ac6:	f7ff fd90 	bl	80015ea <LL_USART_SetHWFlowCtrl>
 8001aca:	f107 0308 	add.w	r3, r7, #8
 8001ace:	4618      	mov	r0, r3
 8001ad0:	f7ff fc9a 	bl	8001408 <LL_RCC_GetSystemClocksFreq>
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	4a14      	ldr	r2, [pc, #80]	@ (8001b28 <LL_USART_Init+0xbc>)
 8001ad8:	4293      	cmp	r3, r2
 8001ada:	d102      	bne.n	8001ae2 <LL_USART_Init+0x76>
 8001adc:	697b      	ldr	r3, [r7, #20]
 8001ade:	61bb      	str	r3, [r7, #24]
 8001ae0:	e00c      	b.n	8001afc <LL_USART_Init+0x90>
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	4a11      	ldr	r2, [pc, #68]	@ (8001b2c <LL_USART_Init+0xc0>)
 8001ae6:	4293      	cmp	r3, r2
 8001ae8:	d102      	bne.n	8001af0 <LL_USART_Init+0x84>
 8001aea:	693b      	ldr	r3, [r7, #16]
 8001aec:	61bb      	str	r3, [r7, #24]
 8001aee:	e005      	b.n	8001afc <LL_USART_Init+0x90>
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	4a0f      	ldr	r2, [pc, #60]	@ (8001b30 <LL_USART_Init+0xc4>)
 8001af4:	4293      	cmp	r3, r2
 8001af6:	d101      	bne.n	8001afc <LL_USART_Init+0x90>
 8001af8:	697b      	ldr	r3, [r7, #20]
 8001afa:	61bb      	str	r3, [r7, #24]
 8001afc:	69bb      	ldr	r3, [r7, #24]
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d00d      	beq.n	8001b1e <LL_USART_Init+0xb2>
 8001b02:	683b      	ldr	r3, [r7, #0]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d009      	beq.n	8001b1e <LL_USART_Init+0xb2>
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	77fb      	strb	r3, [r7, #31]
 8001b0e:	683b      	ldr	r3, [r7, #0]
 8001b10:	699a      	ldr	r2, [r3, #24]
 8001b12:	683b      	ldr	r3, [r7, #0]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	69b9      	ldr	r1, [r7, #24]
 8001b18:	6878      	ldr	r0, [r7, #4]
 8001b1a:	f7ff fd79 	bl	8001610 <LL_USART_SetBaudRate>
 8001b1e:	7ffb      	ldrb	r3, [r7, #31]
 8001b20:	4618      	mov	r0, r3
 8001b22:	3720      	adds	r7, #32
 8001b24:	46bd      	mov	sp, r7
 8001b26:	bd80      	pop	{r7, pc}
 8001b28:	40011000 	.word	0x40011000
 8001b2c:	40004400 	.word	0x40004400
 8001b30:	40011400 	.word	0x40011400

08001b34 <LL_InitTick>:
 8001b34:	b480      	push	{r7}
 8001b36:	b083      	sub	sp, #12
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]
 8001b3c:	6039      	str	r1, [r7, #0]
 8001b3e:	687a      	ldr	r2, [r7, #4]
 8001b40:	683b      	ldr	r3, [r7, #0]
 8001b42:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b46:	4a07      	ldr	r2, [pc, #28]	@ (8001b64 <LL_InitTick+0x30>)
 8001b48:	3b01      	subs	r3, #1
 8001b4a:	6053      	str	r3, [r2, #4]
 8001b4c:	4b05      	ldr	r3, [pc, #20]	@ (8001b64 <LL_InitTick+0x30>)
 8001b4e:	2200      	movs	r2, #0
 8001b50:	609a      	str	r2, [r3, #8]
 8001b52:	4b04      	ldr	r3, [pc, #16]	@ (8001b64 <LL_InitTick+0x30>)
 8001b54:	2205      	movs	r2, #5
 8001b56:	601a      	str	r2, [r3, #0]
 8001b58:	bf00      	nop
 8001b5a:	370c      	adds	r7, #12
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b62:	4770      	bx	lr
 8001b64:	e000e010 	.word	0xe000e010

08001b68 <LL_Init1msTick>:
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	b082      	sub	sp, #8
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	6078      	str	r0, [r7, #4]
 8001b70:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001b74:	6878      	ldr	r0, [r7, #4]
 8001b76:	f7ff ffdd 	bl	8001b34 <LL_InitTick>
 8001b7a:	bf00      	nop
 8001b7c:	3708      	adds	r7, #8
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	bd80      	pop	{r7, pc}
	...

08001b84 <LL_SetSystemCoreClock>:
 8001b84:	b480      	push	{r7}
 8001b86:	b083      	sub	sp, #12
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
 8001b8c:	4a04      	ldr	r2, [pc, #16]	@ (8001ba0 <LL_SetSystemCoreClock+0x1c>)
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	6013      	str	r3, [r2, #0]
 8001b92:	bf00      	nop
 8001b94:	370c      	adds	r7, #12
 8001b96:	46bd      	mov	sp, r7
 8001b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9c:	4770      	bx	lr
 8001b9e:	bf00      	nop
 8001ba0:	20000000 	.word	0x20000000

08001ba4 <__libc_init_array>:
 8001ba4:	b570      	push	{r4, r5, r6, lr}
 8001ba6:	4d0d      	ldr	r5, [pc, #52]	@ (8001bdc <__libc_init_array+0x38>)
 8001ba8:	4c0d      	ldr	r4, [pc, #52]	@ (8001be0 <__libc_init_array+0x3c>)
 8001baa:	1b64      	subs	r4, r4, r5
 8001bac:	10a4      	asrs	r4, r4, #2
 8001bae:	2600      	movs	r6, #0
 8001bb0:	42a6      	cmp	r6, r4
 8001bb2:	d109      	bne.n	8001bc8 <__libc_init_array+0x24>
 8001bb4:	4d0b      	ldr	r5, [pc, #44]	@ (8001be4 <__libc_init_array+0x40>)
 8001bb6:	4c0c      	ldr	r4, [pc, #48]	@ (8001be8 <__libc_init_array+0x44>)
 8001bb8:	f000 f818 	bl	8001bec <_init>
 8001bbc:	1b64      	subs	r4, r4, r5
 8001bbe:	10a4      	asrs	r4, r4, #2
 8001bc0:	2600      	movs	r6, #0
 8001bc2:	42a6      	cmp	r6, r4
 8001bc4:	d105      	bne.n	8001bd2 <__libc_init_array+0x2e>
 8001bc6:	bd70      	pop	{r4, r5, r6, pc}
 8001bc8:	f855 3b04 	ldr.w	r3, [r5], #4
 8001bcc:	4798      	blx	r3
 8001bce:	3601      	adds	r6, #1
 8001bd0:	e7ee      	b.n	8001bb0 <__libc_init_array+0xc>
 8001bd2:	f855 3b04 	ldr.w	r3, [r5], #4
 8001bd6:	4798      	blx	r3
 8001bd8:	3601      	adds	r6, #1
 8001bda:	e7f2      	b.n	8001bc2 <__libc_init_array+0x1e>
 8001bdc:	08001c24 	.word	0x08001c24
 8001be0:	08001c24 	.word	0x08001c24
 8001be4:	08001c24 	.word	0x08001c24
 8001be8:	08001c28 	.word	0x08001c28

08001bec <_init>:
 8001bec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001bee:	bf00      	nop
 8001bf0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001bf2:	bc08      	pop	{r3}
 8001bf4:	469e      	mov	lr, r3
 8001bf6:	4770      	bx	lr

08001bf8 <_fini>:
 8001bf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001bfa:	bf00      	nop
 8001bfc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001bfe:	bc08      	pop	{r3}
 8001c00:	469e      	mov	lr, r3
 8001c02:	4770      	bx	lr
