
build/debug/Lab7.1.3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000c94  08000194  08000194  00001194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08000e28  08000e28  00001e28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000e40  08000e40  00002004  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08000e40  08000e40  00001e40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08000e48  08000e48  00002004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000e48  08000e48  00001e48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000e4c  08000e4c  00001e4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000004  20000000  08000e50  00002000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000004  08000e54  00002004  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000020  08000e54  00002020  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00002004  2**0
                  CONTENTS, READONLY
 12 .comment      0000001e  00000000  00000000  00002034  2**0
                  CONTENTS, READONLY
 13 .debug_info   000052c7  00000000  00000000  00002052  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001430  00000000  00000000  00007319  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_loclists 000020c7  00000000  00000000  00008749  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000328  00000000  00000000  0000a810  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000003e5  00000000  00000000  0000ab38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00003135  00000000  00000000  0000af1d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00001bc2  00000000  00000000  0000e052  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000005c8  00000000  00000000  0000fc14  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000e9  00000000  00000000  000101dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__aeabi_uldivmod>:
 8000194:	b953      	cbnz	r3, 80001ac <__aeabi_uldivmod+0x18>
 8000196:	b94a      	cbnz	r2, 80001ac <__aeabi_uldivmod+0x18>
 8000198:	2900      	cmp	r1, #0
 800019a:	bf08      	it	eq
 800019c:	2800      	cmpeq	r0, #0
 800019e:	bf1c      	itt	ne
 80001a0:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80001a4:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80001a8:	f000 b80c 	b.w	80001c4 <__aeabi_idiv0>
 80001ac:	f1ad 0c08 	sub.w	ip, sp, #8
 80001b0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001b4:	f000 fcce 	bl	8000b54 <__udivmoddi4>
 80001b8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001bc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001c0:	b004      	add	sp, #16
 80001c2:	4770      	bx	lr

080001c4 <__aeabi_idiv0>:
 80001c4:	4770      	bx	lr
 80001c6:	bf00      	nop

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	@ (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	@ (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	20000004 	.word	0x20000004
 80001e4:	00000000 	.word	0x00000000
 80001e8:	08000e10 	.word	0x08000e10

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	@ (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	@ (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	@ (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000008 	.word	0x20000008
 8000204:	08000e10 	.word	0x08000e10

08000208 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 8000208:	b410      	push	{r4}
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 800020a:	68c4      	ldr	r4, [r0, #12]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800020c:	fa91 f3a1 	rbit	r3, r1
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8000210:	b1a3      	cbz	r3, 800023c <LL_GPIO_SetPinPull+0x34>
  {
    return 32U;
  }
  return __builtin_clz(value);
 8000212:	fab3 f383 	clz	r3, r3
 8000216:	005b      	lsls	r3, r3, #1
 8000218:	f04f 0c03 	mov.w	ip, #3
 800021c:	fa0c f303 	lsl.w	r3, ip, r3
 8000220:	ea24 0303 	bic.w	r3, r4, r3
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000224:	fa91 f1a1 	rbit	r1, r1
  if (value == 0U)
 8000228:	b151      	cbz	r1, 8000240 <LL_GPIO_SetPinPull+0x38>
  return __builtin_clz(value);
 800022a:	fab1 f181 	clz	r1, r1
 800022e:	0049      	lsls	r1, r1, #1
 8000230:	408a      	lsls	r2, r1
 8000232:	4313      	orrs	r3, r2
 8000234:	60c3      	str	r3, [r0, #12]
}
 8000236:	f85d 4b04 	ldr.w	r4, [sp], #4
 800023a:	4770      	bx	lr
    return 32U;
 800023c:	2320      	movs	r3, #32
 800023e:	e7ea      	b.n	8000216 <LL_GPIO_SetPinPull+0xe>
 8000240:	2120      	movs	r1, #32
 8000242:	e7f4      	b.n	800022e <LL_GPIO_SetPinPull+0x26>

08000244 <LL_GPIO_SetPinMode>:
{
 8000244:	b410      	push	{r4}
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8000246:	6804      	ldr	r4, [r0, #0]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000248:	fa91 f3a1 	rbit	r3, r1
  if (value == 0U)
 800024c:	b1a3      	cbz	r3, 8000278 <LL_GPIO_SetPinMode+0x34>
  return __builtin_clz(value);
 800024e:	fab3 f383 	clz	r3, r3
 8000252:	005b      	lsls	r3, r3, #1
 8000254:	f04f 0c03 	mov.w	ip, #3
 8000258:	fa0c f303 	lsl.w	r3, ip, r3
 800025c:	ea24 0303 	bic.w	r3, r4, r3
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000260:	fa91 f1a1 	rbit	r1, r1
  if (value == 0U)
 8000264:	b151      	cbz	r1, 800027c <LL_GPIO_SetPinMode+0x38>
  return __builtin_clz(value);
 8000266:	fab1 f181 	clz	r1, r1
 800026a:	0049      	lsls	r1, r1, #1
 800026c:	408a      	lsls	r2, r1
 800026e:	4313      	orrs	r3, r2
 8000270:	6003      	str	r3, [r0, #0]
}
 8000272:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000276:	4770      	bx	lr
    return 32U;
 8000278:	2320      	movs	r3, #32
 800027a:	e7ea      	b.n	8000252 <LL_GPIO_SetPinMode+0xe>
 800027c:	2120      	movs	r1, #32
 800027e:	e7f4      	b.n	800026a <LL_GPIO_SetPinMode+0x26>

08000280 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000280:	b570      	push	{r4, r5, r6, lr}
 8000282:	b08c      	sub	sp, #48	@ 0x30
  LL_EXTI_InitTypeDef EXTI_InitStruct = {0};
 8000284:	2300      	movs	r3, #0
 8000286:	930a      	str	r3, [sp, #40]	@ 0x28
 8000288:	930b      	str	r3, [sp, #44]	@ 0x2c
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800028a:	9304      	str	r3, [sp, #16]
 800028c:	9305      	str	r3, [sp, #20]
 800028e:	9306      	str	r3, [sp, #24]
 8000290:	9307      	str	r3, [sp, #28]
 8000292:	9308      	str	r3, [sp, #32]
 8000294:	9309      	str	r3, [sp, #36]	@ 0x24
  * @retval None
  */
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 8000296:	4b2f      	ldr	r3, [pc, #188]	@ (8000354 <MX_GPIO_Init+0xd4>)
 8000298:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800029a:	f042 0204 	orr.w	r2, r2, #4
 800029e:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80002a0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80002a2:	f002 0204 	and.w	r2, r2, #4
 80002a6:	9203      	str	r2, [sp, #12]
  (void)tmpreg;
 80002a8:	9a03      	ldr	r2, [sp, #12]
  SET_BIT(RCC->AHB1ENR, Periphs);
 80002aa:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80002ac:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80002b0:	631a      	str	r2, [r3, #48]	@ 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80002b2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80002b4:	f002 0280 	and.w	r2, r2, #128	@ 0x80
 80002b8:	9202      	str	r2, [sp, #8]
  (void)tmpreg;
 80002ba:	9a02      	ldr	r2, [sp, #8]
  SET_BIT(RCC->AHB1ENR, Periphs);
 80002bc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80002be:	f042 0201 	orr.w	r2, r2, #1
 80002c2:	631a      	str	r2, [r3, #48]	@ 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80002c4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80002c6:	f002 0201 	and.w	r2, r2, #1
 80002ca:	9201      	str	r2, [sp, #4]
  (void)tmpreg;
 80002cc:	9a01      	ldr	r2, [sp, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 80002ce:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80002d0:	f042 0202 	orr.w	r2, r2, #2
 80002d4:	631a      	str	r2, [r3, #48]	@ 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80002d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80002d8:	f003 0302 	and.w	r3, r3, #2
 80002dc:	9300      	str	r3, [sp, #0]
  (void)tmpreg;
 80002de:	9b00      	ldr	r3, [sp, #0]
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 80002e0:	4b1d      	ldr	r3, [pc, #116]	@ (8000358 <MX_GPIO_Init+0xd8>)
 80002e2:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 80002e6:	619a      	str	r2, [r3, #24]
  *         @arg @ref LL_SYSCFG_EXTI_LINE15
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_SetEXTISource(uint32_t Port, uint32_t Line)
{
  MODIFY_REG(SYSCFG->EXTICR[Line & 0xFF], (Line >> 16), Port << POSITION_VAL((Line >> 16)));
 80002e8:	f5a3 4348 	sub.w	r3, r3, #51200	@ 0xc800
 80002ec:	695a      	ldr	r2, [r3, #20]
 80002ee:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80002f2:	23f0      	movs	r3, #240	@ 0xf0
 80002f4:	fa93 f3a3 	rbit	r3, r3
  if (value == 0U)
 80002f8:	b353      	cbz	r3, 8000350 <MX_GPIO_Init+0xd0>
  return __builtin_clz(value);
 80002fa:	fab3 f383 	clz	r3, r3
 80002fe:	2102      	movs	r1, #2
 8000300:	fa01 f303 	lsl.w	r3, r1, r3
 8000304:	4313      	orrs	r3, r2
 8000306:	4a15      	ldr	r2, [pc, #84]	@ (800035c <MX_GPIO_Init+0xdc>)
 8000308:	6153      	str	r3, [r2, #20]

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTC, LL_SYSCFG_EXTI_LINE13);

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_13;
 800030a:	f44f 5400 	mov.w	r4, #8192	@ 0x2000
 800030e:	940a      	str	r4, [sp, #40]	@ 0x28
  EXTI_InitStruct.LineCommand = ENABLE;
 8000310:	2501      	movs	r5, #1
 8000312:	f88d 502c 	strb.w	r5, [sp, #44]	@ 0x2c
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 8000316:	f88d 102e 	strb.w	r1, [sp, #46]	@ 0x2e
  LL_EXTI_Init(&EXTI_InitStruct);
 800031a:	a80a      	add	r0, sp, #40	@ 0x28
 800031c:	f000 f93c 	bl	8000598 <LL_EXTI_Init>

  /**/
  LL_GPIO_SetPinPull(B1_GPIO_Port, B1_Pin, LL_GPIO_PULL_NO);
 8000320:	4e0f      	ldr	r6, [pc, #60]	@ (8000360 <MX_GPIO_Init+0xe0>)
 8000322:	2200      	movs	r2, #0
 8000324:	4621      	mov	r1, r4
 8000326:	4630      	mov	r0, r6
 8000328:	f7ff ff6e 	bl	8000208 <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinMode(B1_GPIO_Port, B1_Pin, LL_GPIO_MODE_INPUT);
 800032c:	2200      	movs	r2, #0
 800032e:	4621      	mov	r1, r4
 8000330:	4630      	mov	r0, r6
 8000332:	f7ff ff87 	bl	8000244 <LL_GPIO_SetPinMode>

  /**/
  GPIO_InitStruct.Pin = LD2_Pin;
 8000336:	2320      	movs	r3, #32
 8000338:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800033a:	9505      	str	r5, [sp, #20]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800033c:	2300      	movs	r3, #0
 800033e:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000340:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000342:	9308      	str	r3, [sp, #32]
  LL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000344:	a904      	add	r1, sp, #16
 8000346:	4804      	ldr	r0, [pc, #16]	@ (8000358 <MX_GPIO_Init+0xd8>)
 8000348:	f000 fa29 	bl	800079e <LL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 800034c:	b00c      	add	sp, #48	@ 0x30
 800034e:	bd70      	pop	{r4, r5, r6, pc}
    return 32U;
 8000350:	2320      	movs	r3, #32
 8000352:	e7d4      	b.n	80002fe <MX_GPIO_Init+0x7e>
 8000354:	40023800 	.word	0x40023800
 8000358:	40020000 	.word	0x40020000
 800035c:	40013800 	.word	0x40013800
 8000360:	40020800 	.word	0x40020800

08000364 <MX_USART2_UART_Init>:
{
 8000364:	b570      	push	{r4, r5, r6, lr}
 8000366:	b090      	sub	sp, #64	@ 0x40
  LL_USART_InitTypeDef USART_InitStruct = {0};
 8000368:	ad09      	add	r5, sp, #36	@ 0x24
 800036a:	2400      	movs	r4, #0
 800036c:	9409      	str	r4, [sp, #36]	@ 0x24
 800036e:	940a      	str	r4, [sp, #40]	@ 0x28
 8000370:	940b      	str	r4, [sp, #44]	@ 0x2c
 8000372:	940c      	str	r4, [sp, #48]	@ 0x30
 8000374:	940d      	str	r4, [sp, #52]	@ 0x34
 8000376:	940e      	str	r4, [sp, #56]	@ 0x38
 8000378:	940f      	str	r4, [sp, #60]	@ 0x3c
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800037a:	a903      	add	r1, sp, #12
 800037c:	9403      	str	r4, [sp, #12]
 800037e:	604c      	str	r4, [r1, #4]
 8000380:	608c      	str	r4, [r1, #8]
 8000382:	60cc      	str	r4, [r1, #12]
 8000384:	610c      	str	r4, [r1, #16]
 8000386:	614c      	str	r4, [r1, #20]
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 8000388:	4b1b      	ldr	r3, [pc, #108]	@ (80003f8 <MX_USART2_UART_Init+0x94>)
 800038a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800038c:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8000390:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8000392:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000394:	f402 3200 	and.w	r2, r2, #131072	@ 0x20000
 8000398:	9202      	str	r2, [sp, #8]
  (void)tmpreg;
 800039a:	9a02      	ldr	r2, [sp, #8]
  SET_BIT(RCC->AHB1ENR, Periphs);
 800039c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800039e:	f042 0201 	orr.w	r2, r2, #1
 80003a2:	631a      	str	r2, [r3, #48]	@ 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80003a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80003a6:	f003 0301 	and.w	r3, r3, #1
 80003aa:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 80003ac:	9b01      	ldr	r3, [sp, #4]
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80003ae:	260c      	movs	r6, #12
 80003b0:	9603      	str	r6, [sp, #12]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80003b2:	2302      	movs	r3, #2
 80003b4:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 80003b6:	2307      	movs	r3, #7
 80003b8:	9308      	str	r3, [sp, #32]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80003ba:	4810      	ldr	r0, [pc, #64]	@ (80003fc <MX_USART2_UART_Init+0x98>)
 80003bc:	f000 f9ef 	bl	800079e <LL_GPIO_Init>
  USART_InitStruct.BaudRate = 115200;
 80003c0:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 80003c4:	9309      	str	r3, [sp, #36]	@ 0x24
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 80003c6:	940a      	str	r4, [sp, #40]	@ 0x28
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 80003c8:	940b      	str	r4, [sp, #44]	@ 0x2c
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 80003ca:	940c      	str	r4, [sp, #48]	@ 0x30
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 80003cc:	960d      	str	r6, [sp, #52]	@ 0x34
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 80003ce:	940e      	str	r4, [sp, #56]	@ 0x38
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 80003d0:	940f      	str	r4, [sp, #60]	@ 0x3c
  LL_USART_Init(USART2, &USART_InitStruct);
 80003d2:	4c0b      	ldr	r4, [pc, #44]	@ (8000400 <MX_USART2_UART_Init+0x9c>)
 80003d4:	4629      	mov	r1, r5
 80003d6:	4620      	mov	r0, r4
 80003d8:	f000 fb02 	bl	80009e0 <LL_USART_Init>
__STATIC_INLINE void LL_USART_ConfigAsyncMode(USART_TypeDef *USARTx)
{
  /* In Asynchronous mode, the following bits must be kept cleared:
  - LINEN, CLKEN bits in the USART_CR2 register,
  - SCEN, IREN and HDSEL bits in the USART_CR3 register.*/
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80003dc:	6923      	ldr	r3, [r4, #16]
 80003de:	f423 4390 	bic.w	r3, r3, #18432	@ 0x4800
 80003e2:	6123      	str	r3, [r4, #16]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 80003e4:	6963      	ldr	r3, [r4, #20]
 80003e6:	f023 032a 	bic.w	r3, r3, #42	@ 0x2a
 80003ea:	6163      	str	r3, [r4, #20]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 80003ec:	68e3      	ldr	r3, [r4, #12]
 80003ee:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80003f2:	60e3      	str	r3, [r4, #12]
}
 80003f4:	b010      	add	sp, #64	@ 0x40
 80003f6:	bd70      	pop	{r4, r5, r6, pc}
 80003f8:	40023800 	.word	0x40023800
 80003fc:	40020000 	.word	0x40020000
 8000400:	40004400 	.word	0x40004400

08000404 <SystemClock_Config>:
{
 8000404:	b510      	push	{r4, lr}
  *         @arg @ref LL_FLASH_LATENCY_15
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8000406:	4a36      	ldr	r2, [pc, #216]	@ (80004e0 <SystemClock_Config+0xdc>)
 8000408:	6813      	ldr	r3, [r2, #0]
 800040a:	f023 0307 	bic.w	r3, r3, #7
 800040e:	f043 0302 	orr.w	r3, r3, #2
 8000412:	6013      	str	r3, [r2, #0]
  *         @arg @ref LL_FLASH_LATENCY_14
  *         @arg @ref LL_FLASH_LATENCY_15
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8000414:	4b32      	ldr	r3, [pc, #200]	@ (80004e0 <SystemClock_Config+0xdc>)
 8000416:	681b      	ldr	r3, [r3, #0]
 8000418:	f003 0307 	and.w	r3, r3, #7
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_2)
 800041c:	2b02      	cmp	r3, #2
 800041e:	d1f9      	bne.n	8000414 <SystemClock_Config+0x10>
  *         (*) LL_PWR_REGU_VOLTAGE_SCALE1 is not available for STM32F401xx devices
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRegulVoltageScaling(uint32_t VoltageScaling)
{
  MODIFY_REG(PWR->CR, PWR_CR_VOS, VoltageScaling);
 8000420:	4a30      	ldr	r2, [pc, #192]	@ (80004e4 <SystemClock_Config+0xe0>)
 8000422:	6813      	ldr	r3, [r2, #0]
 8000424:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000428:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800042c:	6013      	str	r3, [r2, #0]
  * @param  Value Between Min_Data = 0 and Max_Data = 31
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
  MODIFY_REG(RCC->CR, RCC_CR_HSITRIM, Value << RCC_CR_HSITRIM_Pos);
 800042e:	f502 32e4 	add.w	r2, r2, #116736	@ 0x1c800
 8000432:	6813      	ldr	r3, [r2, #0]
 8000434:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8000438:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800043c:	6013      	str	r3, [r2, #0]
  SET_BIT(RCC->CR, RCC_CR_HSION);
 800043e:	6813      	ldr	r3, [r2, #0]
 8000440:	f043 0301 	orr.w	r3, r3, #1
 8000444:	6013      	str	r3, [r2, #0]
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 8000446:	4b28      	ldr	r3, [pc, #160]	@ (80004e8 <SystemClock_Config+0xe4>)
 8000448:	681b      	ldr	r3, [r3, #0]
  while(LL_RCC_HSI_IsReady() != 1)
 800044a:	f013 0f02 	tst.w	r3, #2
 800044e:	d0fa      	beq.n	8000446 <SystemClock_Config+0x42>
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLM, uint32_t PLLN, uint32_t PLLP_R)
{
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM | RCC_PLLCFGR_PLLN,
 8000450:	4a25      	ldr	r2, [pc, #148]	@ (80004e8 <SystemClock_Config+0xe4>)
 8000452:	6851      	ldr	r1, [r2, #4]
 8000454:	4b25      	ldr	r3, [pc, #148]	@ (80004ec <SystemClock_Config+0xe8>)
 8000456:	400b      	ands	r3, r1
 8000458:	f443 43a8 	orr.w	r3, r3, #21504	@ 0x5400
 800045c:	f043 0310 	orr.w	r3, r3, #16
 8000460:	6053      	str	r3, [r2, #4]
             Source | PLLM | PLLN << RCC_PLLCFGR_PLLN_Pos);
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLP, PLLP_R);
 8000462:	6853      	ldr	r3, [r2, #4]
 8000464:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 8000468:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800046c:	6053      	str	r3, [r2, #4]
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 800046e:	6813      	ldr	r3, [r2, #0]
 8000470:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000474:	6013      	str	r3, [r2, #0]
  return (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY));
 8000476:	4b1c      	ldr	r3, [pc, #112]	@ (80004e8 <SystemClock_Config+0xe4>)
 8000478:	681b      	ldr	r3, [r3, #0]
  while(LL_RCC_PLL_IsReady() != 1)
 800047a:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 800047e:	d0fa      	beq.n	8000476 <SystemClock_Config+0x72>
  * @rmtoll CSR   VOS       LL_PWR_IsActiveFlag_VOS
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_VOS(void)
{
  return (READ_BIT(PWR->CSR, LL_PWR_CSR_VOS) == (LL_PWR_CSR_VOS));
 8000480:	4b18      	ldr	r3, [pc, #96]	@ (80004e4 <SystemClock_Config+0xe0>)
 8000482:	685b      	ldr	r3, [r3, #4]
  while (LL_PWR_IsActiveFlag_VOS() == 0)
 8000484:	f413 4f80 	tst.w	r3, #16384	@ 0x4000
 8000488:	d0fa      	beq.n	8000480 <SystemClock_Config+0x7c>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 800048a:	4b17      	ldr	r3, [pc, #92]	@ (80004e8 <SystemClock_Config+0xe4>)
 800048c:	689a      	ldr	r2, [r3, #8]
 800048e:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
 8000492:	609a      	str	r2, [r3, #8]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8000494:	689a      	ldr	r2, [r3, #8]
 8000496:	f422 52e0 	bic.w	r2, r2, #7168	@ 0x1c00
 800049a:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800049e:	609a      	str	r2, [r3, #8]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 80004a0:	689a      	ldr	r2, [r3, #8]
 80004a2:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 80004a6:	609a      	str	r2, [r3, #8]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80004a8:	689a      	ldr	r2, [r3, #8]
 80004aa:	f022 0203 	bic.w	r2, r2, #3
 80004ae:	f042 0202 	orr.w	r2, r2, #2
 80004b2:	609a      	str	r2, [r3, #8]
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80004b4:	4b0c      	ldr	r3, [pc, #48]	@ (80004e8 <SystemClock_Config+0xe4>)
 80004b6:	689b      	ldr	r3, [r3, #8]
 80004b8:	f003 030c 	and.w	r3, r3, #12
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 80004bc:	2b08      	cmp	r3, #8
 80004be:	d1f9      	bne.n	80004b4 <SystemClock_Config+0xb0>
  LL_Init1msTick(84000000);
 80004c0:	4c0b      	ldr	r4, [pc, #44]	@ (80004f0 <SystemClock_Config+0xec>)
 80004c2:	4620      	mov	r0, r4
 80004c4:	f000 fad8 	bl	8000a78 <LL_Init1msTick>
  LL_SetSystemCoreClock(84000000);
 80004c8:	4620      	mov	r0, r4
 80004ca:	f000 fae5 	bl	8000a98 <LL_SetSystemCoreClock>
  MODIFY_REG(RCC->DCKCFGR, RCC_DCKCFGR_TIMPRE, Prescaler);
 80004ce:	4a06      	ldr	r2, [pc, #24]	@ (80004e8 <SystemClock_Config+0xe4>)
 80004d0:	f8d2 308c 	ldr.w	r3, [r2, #140]	@ 0x8c
 80004d4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80004d8:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
}
 80004dc:	bd10      	pop	{r4, pc}
 80004de:	bf00      	nop
 80004e0:	40023c00 	.word	0x40023c00
 80004e4:	40007000 	.word	0x40007000
 80004e8:	40023800 	.word	0x40023800
 80004ec:	ffbf8000 	.word	0xffbf8000
 80004f0:	0501bd00 	.word	0x0501bd00

080004f4 <main>:
{
 80004f4:	b500      	push	{lr}
 80004f6:	b083      	sub	sp, #12
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 80004f8:	4b1c      	ldr	r3, [pc, #112]	@ (800056c <main+0x78>)
 80004fa:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80004fc:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8000500:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000502:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8000504:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 8000508:	9201      	str	r2, [sp, #4]
  (void)tmpreg;
 800050a:	9a01      	ldr	r2, [sp, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 800050c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800050e:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8000512:	641a      	str	r2, [r3, #64]	@ 0x40
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8000514:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000516:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800051a:	9300      	str	r3, [sp, #0]
  (void)tmpreg;
 800051c:	9b00      	ldr	r3, [sp, #0]
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800051e:	4914      	ldr	r1, [pc, #80]	@ (8000570 <main+0x7c>)
 8000520:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000522:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8000526:	0412      	lsls	r2, r2, #16
 8000528:	0c12      	lsrs	r2, r2, #16
  reg_value  =  (reg_value                                   |
 800052a:	4b12      	ldr	r3, [pc, #72]	@ (8000574 <main+0x80>)
 800052c:	4313      	orrs	r3, r2
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
  SCB->AIRCR =  reg_value;
 800052e:	60cb      	str	r3, [r1, #12]
  SystemClock_Config();
 8000530:	f7ff ff68 	bl	8000404 <SystemClock_Config>
  MX_GPIO_Init();
 8000534:	f7ff fea4 	bl	8000280 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000538:	f7ff ff14 	bl	8000364 <MX_USART2_UART_Init>
	LL_GPIO_WriteReg(GPIOA, ODR, 0x00);
 800053c:	4b0e      	ldr	r3, [pc, #56]	@ (8000578 <main+0x84>)
 800053e:	2200      	movs	r2, #0
 8000540:	615a      	str	r2, [r3, #20]
	unsigned int timeInterval = 40000000;
 8000542:	4a0e      	ldr	r2, [pc, #56]	@ (800057c <main+0x88>)
 8000544:	e008      	b.n	8000558 <main+0x64>
		for (int i = 0; i < (timeInterval / 2); i++)
 8000546:	2300      	movs	r3, #0
 8000548:	ebb3 0f52 	cmp.w	r3, r2, lsr #1
 800054c:	d30b      	bcc.n	8000566 <main+0x72>
		LL_GPIO_WriteReg(GPIOA, ODR, (LL_GPIO_ReadReg(GPIOA, ODR) ^ 0x020));
 800054e:	490a      	ldr	r1, [pc, #40]	@ (8000578 <main+0x84>)
 8000550:	694b      	ldr	r3, [r1, #20]
 8000552:	f083 0320 	eor.w	r3, r3, #32
 8000556:	614b      	str	r3, [r1, #20]
		if ((LL_GPIO_ReadReg(GPIOC, IDR) & 0x02000) == 0x00) {
 8000558:	4b09      	ldr	r3, [pc, #36]	@ (8000580 <main+0x8c>)
 800055a:	691b      	ldr	r3, [r3, #16]
 800055c:	f413 5f00 	tst.w	r3, #8192	@ 0x2000
 8000560:	d1f1      	bne.n	8000546 <main+0x52>
			timeInterval = timeInterval >> 1;	// Decrease the time-interval
 8000562:	0852      	lsrs	r2, r2, #1
 8000564:	e7ef      	b.n	8000546 <main+0x52>
		for (int i = 0; i < (timeInterval / 2); i++)
 8000566:	3301      	adds	r3, #1
 8000568:	e7ee      	b.n	8000548 <main+0x54>
 800056a:	bf00      	nop
 800056c:	40023800 	.word	0x40023800
 8000570:	e000ed00 	.word	0xe000ed00
 8000574:	05fa0300 	.word	0x05fa0300
 8000578:	40020000 	.word	0x40020000
 800057c:	02625a00 	.word	0x02625a00
 8000580:	40020800 	.word	0x40020800

08000584 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000584:	e7fe      	b.n	8000584 <NMI_Handler>

08000586 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000586:	e7fe      	b.n	8000586 <HardFault_Handler>

08000588 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000588:	e7fe      	b.n	8000588 <MemManage_Handler>

0800058a <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800058a:	e7fe      	b.n	800058a <BusFault_Handler>

0800058c <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800058c:	e7fe      	b.n	800058c <UsageFault_Handler>

0800058e <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800058e:	4770      	bx	lr

08000590 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000590:	4770      	bx	lr

08000592 <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000592:	4770      	bx	lr

08000594 <SysTick_Handler>:
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000594:	4770      	bx	lr
	...

08000598 <LL_EXTI_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: EXTI registers are initialized
  *          - ERROR: not applicable
  */
uint32_t LL_EXTI_Init(LL_EXTI_InitTypeDef *EXTI_InitStruct)
{
 8000598:	b410      	push	{r4}
 800059a:	4603      	mov	r3, r0
  assert_param(IS_LL_EXTI_LINE_0_31(EXTI_InitStruct->Line_0_31));
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->LineCommand));
  assert_param(IS_LL_EXTI_MODE(EXTI_InitStruct->Mode));

  /* ENABLE LineCommand */
  if (EXTI_InitStruct->LineCommand != DISABLE)
 800059c:	7900      	ldrb	r0, [r0, #4]
 800059e:	2800      	cmp	r0, #0
 80005a0:	d052      	beq.n	8000648 <LL_EXTI_Init+0xb0>
  {
    assert_param(IS_LL_EXTI_TRIGGER(EXTI_InitStruct->Trigger));

    /* Configure EXTI Lines in range from 0 to 31 */
    if (EXTI_InitStruct->Line_0_31 != LL_EXTI_LINE_NONE)
 80005a2:	681a      	ldr	r2, [r3, #0]
 80005a4:	2a00      	cmp	r2, #0
 80005a6:	d05d      	beq.n	8000664 <LL_EXTI_Init+0xcc>
    {
      switch (EXTI_InitStruct->Mode)
 80005a8:	7958      	ldrb	r0, [r3, #5]
 80005aa:	2801      	cmp	r0, #1
 80005ac:	d020      	beq.n	80005f0 <LL_EXTI_Init+0x58>
 80005ae:	2802      	cmp	r0, #2
 80005b0:	d029      	beq.n	8000606 <LL_EXTI_Init+0x6e>
 80005b2:	2800      	cmp	r0, #0
 80005b4:	d131      	bne.n	800061a <LL_EXTI_Init+0x82>
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableEvent_0_31(uint32_t ExtiLine)
{
  CLEAR_BIT(EXTI->EMR, ExtiLine);
 80005b6:	492d      	ldr	r1, [pc, #180]	@ (800066c <LL_EXTI_Init+0xd4>)
 80005b8:	684c      	ldr	r4, [r1, #4]
 80005ba:	ea24 0202 	bic.w	r2, r4, r2
 80005be:	604a      	str	r2, [r1, #4]
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 80005c0:	681a      	ldr	r2, [r3, #0]
  SET_BIT(EXTI->IMR, ExtiLine);
 80005c2:	680c      	ldr	r4, [r1, #0]
 80005c4:	4322      	orrs	r2, r4
 80005c6:	600a      	str	r2, [r1, #0]
          break;
        default:
          status = ERROR;
          break;
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 80005c8:	799a      	ldrb	r2, [r3, #6]
 80005ca:	2a00      	cmp	r2, #0
 80005cc:	d047      	beq.n	800065e <LL_EXTI_Init+0xc6>
      {
        switch (EXTI_InitStruct->Trigger)
 80005ce:	2a02      	cmp	r2, #2
 80005d0:	d025      	beq.n	800061e <LL_EXTI_Init+0x86>
 80005d2:	2a03      	cmp	r2, #3
 80005d4:	d02e      	beq.n	8000634 <LL_EXTI_Init+0x9c>
 80005d6:	2a01      	cmp	r2, #1
 80005d8:	d146      	bne.n	8000668 <LL_EXTI_Init+0xd0>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80005da:	681c      	ldr	r4, [r3, #0]
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_0_31(uint32_t ExtiLine)
{
  CLEAR_BIT(EXTI->FTSR, ExtiLine);
 80005dc:	4a23      	ldr	r2, [pc, #140]	@ (800066c <LL_EXTI_Init+0xd4>)
 80005de:	68d1      	ldr	r1, [r2, #12]
 80005e0:	ea21 0104 	bic.w	r1, r1, r4
 80005e4:	60d1      	str	r1, [r2, #12]
            /* Then Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80005e6:	681b      	ldr	r3, [r3, #0]
  SET_BIT(EXTI->RTSR, ExtiLine);
 80005e8:	6891      	ldr	r1, [r2, #8]
 80005ea:	430b      	orrs	r3, r1
 80005ec:	6093      	str	r3, [r2, #8]
}
 80005ee:	e036      	b.n	800065e <LL_EXTI_Init+0xc6>
  CLEAR_BIT(EXTI->IMR, ExtiLine);
 80005f0:	491e      	ldr	r1, [pc, #120]	@ (800066c <LL_EXTI_Init+0xd4>)
 80005f2:	6808      	ldr	r0, [r1, #0]
 80005f4:	ea20 0202 	bic.w	r2, r0, r2
 80005f8:	600a      	str	r2, [r1, #0]
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 80005fa:	681a      	ldr	r2, [r3, #0]
  SET_BIT(EXTI->EMR, ExtiLine);
 80005fc:	6848      	ldr	r0, [r1, #4]
 80005fe:	4302      	orrs	r2, r0
 8000600:	604a      	str	r2, [r1, #4]
  ErrorStatus status = SUCCESS;
 8000602:	2000      	movs	r0, #0
}
 8000604:	e7e0      	b.n	80005c8 <LL_EXTI_Init+0x30>
  SET_BIT(EXTI->IMR, ExtiLine);
 8000606:	4919      	ldr	r1, [pc, #100]	@ (800066c <LL_EXTI_Init+0xd4>)
 8000608:	6808      	ldr	r0, [r1, #0]
 800060a:	4302      	orrs	r2, r0
 800060c:	600a      	str	r2, [r1, #0]
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 800060e:	681a      	ldr	r2, [r3, #0]
  SET_BIT(EXTI->EMR, ExtiLine);
 8000610:	6848      	ldr	r0, [r1, #4]
 8000612:	4302      	orrs	r2, r0
 8000614:	604a      	str	r2, [r1, #4]
  ErrorStatus status = SUCCESS;
 8000616:	2000      	movs	r0, #0
}
 8000618:	e7d6      	b.n	80005c8 <LL_EXTI_Init+0x30>
      switch (EXTI_InitStruct->Mode)
 800061a:	2001      	movs	r0, #1
 800061c:	e7d4      	b.n	80005c8 <LL_EXTI_Init+0x30>
            break;
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800061e:	681c      	ldr	r4, [r3, #0]
  CLEAR_BIT(EXTI->RTSR, ExtiLine);
 8000620:	4a12      	ldr	r2, [pc, #72]	@ (800066c <LL_EXTI_Init+0xd4>)
 8000622:	6891      	ldr	r1, [r2, #8]
 8000624:	ea21 0104 	bic.w	r1, r1, r4
 8000628:	6091      	str	r1, [r2, #8]
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800062a:	681b      	ldr	r3, [r3, #0]
  SET_BIT(EXTI->FTSR, ExtiLine);
 800062c:	68d1      	ldr	r1, [r2, #12]
 800062e:	430b      	orrs	r3, r1
 8000630:	60d3      	str	r3, [r2, #12]
}
 8000632:	e014      	b.n	800065e <LL_EXTI_Init+0xc6>
            break;
          case LL_EXTI_TRIGGER_RISING_FALLING:
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8000634:	6819      	ldr	r1, [r3, #0]
  SET_BIT(EXTI->RTSR, ExtiLine);
 8000636:	4a0d      	ldr	r2, [pc, #52]	@ (800066c <LL_EXTI_Init+0xd4>)
 8000638:	6894      	ldr	r4, [r2, #8]
 800063a:	4321      	orrs	r1, r4
 800063c:	6091      	str	r1, [r2, #8]
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800063e:	681b      	ldr	r3, [r3, #0]
  SET_BIT(EXTI->FTSR, ExtiLine);
 8000640:	68d1      	ldr	r1, [r2, #12]
 8000642:	430b      	orrs	r3, r1
 8000644:	60d3      	str	r3, [r2, #12]
}
 8000646:	e00a      	b.n	800065e <LL_EXTI_Init+0xc6>
  CLEAR_BIT(EXTI->IMR, ExtiLine);
 8000648:	4a08      	ldr	r2, [pc, #32]	@ (800066c <LL_EXTI_Init+0xd4>)
 800064a:	6811      	ldr	r1, [r2, #0]
 800064c:	681c      	ldr	r4, [r3, #0]
 800064e:	ea21 0104 	bic.w	r1, r1, r4
 8000652:	6011      	str	r1, [r2, #0]
  /* DISABLE LineCommand */
  else
  {
    /* De-configure EXTI Lines in range from 0 to 31 */
    LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
    LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8000654:	6819      	ldr	r1, [r3, #0]
  CLEAR_BIT(EXTI->EMR, ExtiLine);
 8000656:	6853      	ldr	r3, [r2, #4]
 8000658:	ea23 0301 	bic.w	r3, r3, r1
 800065c:	6053      	str	r3, [r2, #4]
  }
  return status;
}
 800065e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000662:	4770      	bx	lr
  ErrorStatus status = SUCCESS;
 8000664:	2000      	movs	r0, #0
 8000666:	e7fa      	b.n	800065e <LL_EXTI_Init+0xc6>
        switch (EXTI_InitStruct->Trigger)
 8000668:	2001      	movs	r0, #1
 800066a:	e7f8      	b.n	800065e <LL_EXTI_Init+0xc6>
 800066c:	40013c00 	.word	0x40013c00

08000670 <LL_GPIO_SetPinSpeed>:
{
 8000670:	b410      	push	{r4}
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 8000672:	6884      	ldr	r4, [r0, #8]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000674:	fa91 f3a1 	rbit	r3, r1
  if (value == 0U)
 8000678:	b1a3      	cbz	r3, 80006a4 <LL_GPIO_SetPinSpeed+0x34>
  return __builtin_clz(value);
 800067a:	fab3 f383 	clz	r3, r3
 800067e:	005b      	lsls	r3, r3, #1
 8000680:	f04f 0c03 	mov.w	ip, #3
 8000684:	fa0c f303 	lsl.w	r3, ip, r3
 8000688:	ea24 0303 	bic.w	r3, r4, r3
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800068c:	fa91 f1a1 	rbit	r1, r1
  if (value == 0U)
 8000690:	b151      	cbz	r1, 80006a8 <LL_GPIO_SetPinSpeed+0x38>
  return __builtin_clz(value);
 8000692:	fab1 f181 	clz	r1, r1
 8000696:	0049      	lsls	r1, r1, #1
 8000698:	408a      	lsls	r2, r1
 800069a:	4313      	orrs	r3, r2
 800069c:	6083      	str	r3, [r0, #8]
}
 800069e:	f85d 4b04 	ldr.w	r4, [sp], #4
 80006a2:	4770      	bx	lr
    return 32U;
 80006a4:	2320      	movs	r3, #32
 80006a6:	e7ea      	b.n	800067e <LL_GPIO_SetPinSpeed+0xe>
 80006a8:	2120      	movs	r1, #32
 80006aa:	e7f4      	b.n	8000696 <LL_GPIO_SetPinSpeed+0x26>

080006ac <LL_GPIO_SetPinPull>:
{
 80006ac:	b410      	push	{r4}
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 80006ae:	68c4      	ldr	r4, [r0, #12]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80006b0:	fa91 f3a1 	rbit	r3, r1
  if (value == 0U)
 80006b4:	b1a3      	cbz	r3, 80006e0 <LL_GPIO_SetPinPull+0x34>
  return __builtin_clz(value);
 80006b6:	fab3 f383 	clz	r3, r3
 80006ba:	005b      	lsls	r3, r3, #1
 80006bc:	f04f 0c03 	mov.w	ip, #3
 80006c0:	fa0c f303 	lsl.w	r3, ip, r3
 80006c4:	ea24 0303 	bic.w	r3, r4, r3
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80006c8:	fa91 f1a1 	rbit	r1, r1
  if (value == 0U)
 80006cc:	b151      	cbz	r1, 80006e4 <LL_GPIO_SetPinPull+0x38>
  return __builtin_clz(value);
 80006ce:	fab1 f181 	clz	r1, r1
 80006d2:	0049      	lsls	r1, r1, #1
 80006d4:	408a      	lsls	r2, r1
 80006d6:	4313      	orrs	r3, r2
 80006d8:	60c3      	str	r3, [r0, #12]
}
 80006da:	f85d 4b04 	ldr.w	r4, [sp], #4
 80006de:	4770      	bx	lr
    return 32U;
 80006e0:	2320      	movs	r3, #32
 80006e2:	e7ea      	b.n	80006ba <LL_GPIO_SetPinPull+0xe>
 80006e4:	2120      	movs	r1, #32
 80006e6:	e7f4      	b.n	80006d2 <LL_GPIO_SetPinPull+0x26>

080006e8 <LL_GPIO_SetAFPin_0_7>:
{
 80006e8:	b410      	push	{r4}
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 80006ea:	6a04      	ldr	r4, [r0, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80006ec:	fa91 f3a1 	rbit	r3, r1
  if (value == 0U)
 80006f0:	b1a3      	cbz	r3, 800071c <LL_GPIO_SetAFPin_0_7+0x34>
  return __builtin_clz(value);
 80006f2:	fab3 f383 	clz	r3, r3
 80006f6:	009b      	lsls	r3, r3, #2
 80006f8:	f04f 0c0f 	mov.w	ip, #15
 80006fc:	fa0c f303 	lsl.w	r3, ip, r3
 8000700:	ea24 0303 	bic.w	r3, r4, r3
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000704:	fa91 f1a1 	rbit	r1, r1
  if (value == 0U)
 8000708:	b151      	cbz	r1, 8000720 <LL_GPIO_SetAFPin_0_7+0x38>
  return __builtin_clz(value);
 800070a:	fab1 f181 	clz	r1, r1
 800070e:	0089      	lsls	r1, r1, #2
 8000710:	408a      	lsls	r2, r1
 8000712:	4313      	orrs	r3, r2
 8000714:	6203      	str	r3, [r0, #32]
}
 8000716:	f85d 4b04 	ldr.w	r4, [sp], #4
 800071a:	4770      	bx	lr
    return 32U;
 800071c:	2320      	movs	r3, #32
 800071e:	e7ea      	b.n	80006f6 <LL_GPIO_SetAFPin_0_7+0xe>
 8000720:	2120      	movs	r1, #32
 8000722:	e7f4      	b.n	800070e <LL_GPIO_SetAFPin_0_7+0x26>

08000724 <LL_GPIO_SetAFPin_8_15>:
{
 8000724:	b410      	push	{r4}
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8000726:	6a44      	ldr	r4, [r0, #36]	@ 0x24
 8000728:	0a09      	lsrs	r1, r1, #8
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800072a:	fa91 f3a1 	rbit	r3, r1
  if (value == 0U)
 800072e:	b1a3      	cbz	r3, 800075a <LL_GPIO_SetAFPin_8_15+0x36>
  return __builtin_clz(value);
 8000730:	fab3 f383 	clz	r3, r3
 8000734:	009b      	lsls	r3, r3, #2
 8000736:	f04f 0c0f 	mov.w	ip, #15
 800073a:	fa0c f303 	lsl.w	r3, ip, r3
 800073e:	ea24 0403 	bic.w	r4, r4, r3
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000742:	fa91 f1a1 	rbit	r1, r1
  if (value == 0U)
 8000746:	b151      	cbz	r1, 800075e <LL_GPIO_SetAFPin_8_15+0x3a>
  return __builtin_clz(value);
 8000748:	fab1 f181 	clz	r1, r1
 800074c:	0089      	lsls	r1, r1, #2
 800074e:	408a      	lsls	r2, r1
 8000750:	4314      	orrs	r4, r2
 8000752:	6244      	str	r4, [r0, #36]	@ 0x24
}
 8000754:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000758:	4770      	bx	lr
    return 32U;
 800075a:	2320      	movs	r3, #32
 800075c:	e7ea      	b.n	8000734 <LL_GPIO_SetAFPin_8_15+0x10>
 800075e:	2120      	movs	r1, #32
 8000760:	e7f4      	b.n	800074c <LL_GPIO_SetAFPin_8_15+0x28>

08000762 <LL_GPIO_SetPinMode>:
{
 8000762:	b410      	push	{r4}
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8000764:	6804      	ldr	r4, [r0, #0]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000766:	fa91 f3a1 	rbit	r3, r1
  if (value == 0U)
 800076a:	b1a3      	cbz	r3, 8000796 <LL_GPIO_SetPinMode+0x34>
  return __builtin_clz(value);
 800076c:	fab3 f383 	clz	r3, r3
 8000770:	005b      	lsls	r3, r3, #1
 8000772:	f04f 0c03 	mov.w	ip, #3
 8000776:	fa0c f303 	lsl.w	r3, ip, r3
 800077a:	ea24 0303 	bic.w	r3, r4, r3
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800077e:	fa91 f1a1 	rbit	r1, r1
  if (value == 0U)
 8000782:	b151      	cbz	r1, 800079a <LL_GPIO_SetPinMode+0x38>
  return __builtin_clz(value);
 8000784:	fab1 f181 	clz	r1, r1
 8000788:	0049      	lsls	r1, r1, #1
 800078a:	408a      	lsls	r2, r1
 800078c:	4313      	orrs	r3, r2
 800078e:	6003      	str	r3, [r0, #0]
}
 8000790:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000794:	4770      	bx	lr
    return 32U;
 8000796:	2320      	movs	r3, #32
 8000798:	e7ea      	b.n	8000770 <LL_GPIO_SetPinMode+0xe>
 800079a:	2120      	movs	r1, #32
 800079c:	e7f4      	b.n	8000788 <LL_GPIO_SetPinMode+0x26>

0800079e <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 800079e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80007a0:	4607      	mov	r7, r0
 80007a2:	460e      	mov	r6, r1
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 80007a4:	680d      	ldr	r5, [r1, #0]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80007a6:	fa95 f5a5 	rbit	r5, r5
  if (value == 0U)
 80007aa:	b115      	cbz	r5, 80007b2 <LL_GPIO_Init+0x14>
  return __builtin_clz(value);
 80007ac:	fab5 f585 	clz	r5, r5
 80007b0:	e01a      	b.n	80007e8 <LL_GPIO_Init+0x4a>
    return 32U;
 80007b2:	2520      	movs	r5, #32
  
  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 80007b4:	e018      	b.n	80007e8 <LL_GPIO_Init+0x4a>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
        
        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 80007b6:	68b2      	ldr	r2, [r6, #8]
 80007b8:	4621      	mov	r1, r4
 80007ba:	4638      	mov	r0, r7
 80007bc:	f7ff ff58 	bl	8000670 <LL_GPIO_SetPinSpeed>
        
        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));
        
        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 80007c0:	68f2      	ldr	r2, [r6, #12]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	ea23 0304 	bic.w	r3, r3, r4
 80007c8:	fb04 f202 	mul.w	r2, r4, r2
 80007cc:	4313      	orrs	r3, r2
 80007ce:	607b      	str	r3, [r7, #4]
}
 80007d0:	e016      	b.n	8000800 <LL_GPIO_Init+0x62>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80007d2:	6972      	ldr	r2, [r6, #20]
 80007d4:	4621      	mov	r1, r4
 80007d6:	4638      	mov	r0, r7
 80007d8:	f7ff ffa4 	bl	8000724 <LL_GPIO_SetAFPin_8_15>
        }
      }
      
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 80007dc:	6872      	ldr	r2, [r6, #4]
 80007de:	4621      	mov	r1, r4
 80007e0:	4638      	mov	r0, r7
 80007e2:	f7ff ffbe 	bl	8000762 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 80007e6:	3501      	adds	r5, #1
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 80007e8:	6834      	ldr	r4, [r6, #0]
 80007ea:	fa34 f205 	lsrs.w	r2, r4, r5
 80007ee:	d01d      	beq.n	800082c <LL_GPIO_Init+0x8e>
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 80007f0:	2201      	movs	r2, #1
 80007f2:	40aa      	lsls	r2, r5
    if (currentpin)
 80007f4:	4014      	ands	r4, r2
 80007f6:	d0f6      	beq.n	80007e6 <LL_GPIO_Init+0x48>
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 80007f8:	6873      	ldr	r3, [r6, #4]
 80007fa:	3b01      	subs	r3, #1
 80007fc:	2b01      	cmp	r3, #1
 80007fe:	d9da      	bls.n	80007b6 <LL_GPIO_Init+0x18>
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8000800:	6932      	ldr	r2, [r6, #16]
 8000802:	4621      	mov	r1, r4
 8000804:	4638      	mov	r0, r7
 8000806:	f7ff ff51 	bl	80006ac <LL_GPIO_SetPinPull>
      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 800080a:	6873      	ldr	r3, [r6, #4]
 800080c:	2b02      	cmp	r3, #2
 800080e:	d1e5      	bne.n	80007dc <LL_GPIO_Init+0x3e>
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000810:	fa94 f3a4 	rbit	r3, r4
  if (value == 0U)
 8000814:	2b00      	cmp	r3, #0
 8000816:	d0dc      	beq.n	80007d2 <LL_GPIO_Init+0x34>
  return __builtin_clz(value);
 8000818:	fab3 f383 	clz	r3, r3
        if (POSITION_VAL(currentpin) < 0x00000008U)
 800081c:	2b07      	cmp	r3, #7
 800081e:	d8d8      	bhi.n	80007d2 <LL_GPIO_Init+0x34>
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8000820:	6972      	ldr	r2, [r6, #20]
 8000822:	4621      	mov	r1, r4
 8000824:	4638      	mov	r0, r7
 8000826:	f7ff ff5f 	bl	80006e8 <LL_GPIO_SetAFPin_0_7>
 800082a:	e7d7      	b.n	80007dc <LL_GPIO_Init+0x3e>
  }

  return (SUCCESS);
}
 800082c:	2000      	movs	r0, #0
 800082e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08000830 <RCC_GetHCLKClockFreq>:
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8000830:	4b03      	ldr	r3, [pc, #12]	@ (8000840 <RCC_GetHCLKClockFreq+0x10>)
 8000832:	689b      	ldr	r3, [r3, #8]
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8000834:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8000838:	4a02      	ldr	r2, [pc, #8]	@ (8000844 <RCC_GetHCLKClockFreq+0x14>)
 800083a:	5cd3      	ldrb	r3, [r2, r3]
}
 800083c:	40d8      	lsrs	r0, r3
 800083e:	4770      	bx	lr
 8000840:	40023800 	.word	0x40023800
 8000844:	08000e30 	.word	0x08000e30

08000848 <RCC_GetPCLK1ClockFreq>:
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8000848:	4b03      	ldr	r3, [pc, #12]	@ (8000858 <RCC_GetPCLK1ClockFreq+0x10>)
 800084a:	689b      	ldr	r3, [r3, #8]
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 800084c:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8000850:	4a02      	ldr	r2, [pc, #8]	@ (800085c <RCC_GetPCLK1ClockFreq+0x14>)
 8000852:	5cd3      	ldrb	r3, [r2, r3]
}
 8000854:	40d8      	lsrs	r0, r3
 8000856:	4770      	bx	lr
 8000858:	40023800 	.word	0x40023800
 800085c:	08000e28 	.word	0x08000e28

08000860 <RCC_GetPCLK2ClockFreq>:
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8000860:	4b03      	ldr	r3, [pc, #12]	@ (8000870 <RCC_GetPCLK2ClockFreq+0x10>)
 8000862:	689b      	ldr	r3, [r3, #8]
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 8000864:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8000868:	4a02      	ldr	r2, [pc, #8]	@ (8000874 <RCC_GetPCLK2ClockFreq+0x14>)
 800086a:	5cd3      	ldrb	r3, [r2, r3]
}
 800086c:	40d8      	lsrs	r0, r3
 800086e:	4770      	bx	lr
 8000870:	40023800 	.word	0x40023800
 8000874:	08000e28 	.word	0x08000e28

08000878 <RCC_PLL_GetFreqDomain_SYS>:
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8000878:	4b0f      	ldr	r3, [pc, #60]	@ (80008b8 <RCC_PLL_GetFreqDomain_SYS+0x40>)
 800087a:	685b      	ldr	r3, [r3, #4]
 800087c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
     SYSCLK = PLL_VCO / (PLLP or PLLR)
  */
  pllsource = LL_RCC_PLL_GetMainSource();

  switch (pllsource)
 8000880:	b923      	cbnz	r3, 800088c <RCC_PLL_GetFreqDomain_SYS+0x14>
  {
    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 8000882:	4b0e      	ldr	r3, [pc, #56]	@ (80008bc <RCC_PLL_GetFreqDomain_SYS+0x44>)
    default:
      pllinputfreq = HSI_VALUE;
      break;
  }

  if (SYSCLK_Source == LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8000884:	2808      	cmp	r0, #8
 8000886:	d003      	beq.n	8000890 <RCC_PLL_GetFreqDomain_SYS+0x18>
  uint32_t plloutputfreq = 0U;
 8000888:	2000      	movs	r0, #0
                                               LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

  return plloutputfreq;
}
 800088a:	4770      	bx	lr
      pllinputfreq = HSE_VALUE;
 800088c:	4b0c      	ldr	r3, [pc, #48]	@ (80008c0 <RCC_PLL_GetFreqDomain_SYS+0x48>)
 800088e:	e7f9      	b.n	8000884 <RCC_PLL_GetFreqDomain_SYS+0xc>
  *         @arg @ref LL_RCC_PLLM_DIV_62
  *         @arg @ref LL_RCC_PLLM_DIV_63
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8000890:	4a09      	ldr	r2, [pc, #36]	@ (80008b8 <RCC_PLL_GetFreqDomain_SYS+0x40>)
 8000892:	6851      	ldr	r1, [r2, #4]
 8000894:	f001 013f 	and.w	r1, r1, #63	@ 0x3f
    plloutputfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8000898:	fbb3 f0f1 	udiv	r0, r3, r1
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 800089c:	6853      	ldr	r3, [r2, #4]
 800089e:	f3c3 1388 	ubfx	r3, r3, #6, #9
 80008a2:	fb03 f000 	mul.w	r0, r3, r0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP));
 80008a6:	6853      	ldr	r3, [r2, #4]
 80008a8:	f3c3 4301 	ubfx	r3, r3, #16, #2
 80008ac:	3301      	adds	r3, #1
 80008ae:	005b      	lsls	r3, r3, #1
 80008b0:	fbb0 f0f3 	udiv	r0, r0, r3
 80008b4:	4770      	bx	lr
 80008b6:	bf00      	nop
 80008b8:	40023800 	.word	0x40023800
 80008bc:	00f42400 	.word	0x00f42400
 80008c0:	007a1200 	.word	0x007a1200

080008c4 <RCC_GetSystemClockFreq>:
{
 80008c4:	b508      	push	{r3, lr}
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80008c6:	4b08      	ldr	r3, [pc, #32]	@ (80008e8 <RCC_GetSystemClockFreq+0x24>)
 80008c8:	689b      	ldr	r3, [r3, #8]
 80008ca:	f003 030c 	and.w	r3, r3, #12
  switch (LL_RCC_GetSysClkSource())
 80008ce:	2b04      	cmp	r3, #4
 80008d0:	d005      	beq.n	80008de <RCC_GetSystemClockFreq+0x1a>
 80008d2:	2b08      	cmp	r3, #8
 80008d4:	d105      	bne.n	80008e2 <RCC_GetSystemClockFreq+0x1e>
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLL);
 80008d6:	2008      	movs	r0, #8
 80008d8:	f7ff ffce 	bl	8000878 <RCC_PLL_GetFreqDomain_SYS>
}
 80008dc:	bd08      	pop	{r3, pc}
      frequency = HSE_VALUE;
 80008de:	4803      	ldr	r0, [pc, #12]	@ (80008ec <RCC_GetSystemClockFreq+0x28>)
 80008e0:	e7fc      	b.n	80008dc <RCC_GetSystemClockFreq+0x18>
  switch (LL_RCC_GetSysClkSource())
 80008e2:	4803      	ldr	r0, [pc, #12]	@ (80008f0 <RCC_GetSystemClockFreq+0x2c>)
  return frequency;
 80008e4:	e7fa      	b.n	80008dc <RCC_GetSystemClockFreq+0x18>
 80008e6:	bf00      	nop
 80008e8:	40023800 	.word	0x40023800
 80008ec:	007a1200 	.word	0x007a1200
 80008f0:	00f42400 	.word	0x00f42400

080008f4 <LL_RCC_GetSystemClocksFreq>:
{
 80008f4:	b510      	push	{r4, lr}
 80008f6:	4604      	mov	r4, r0
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 80008f8:	f7ff ffe4 	bl	80008c4 <RCC_GetSystemClockFreq>
 80008fc:	6020      	str	r0, [r4, #0]
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 80008fe:	f7ff ff97 	bl	8000830 <RCC_GetHCLKClockFreq>
 8000902:	6060      	str	r0, [r4, #4]
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 8000904:	f7ff ffa0 	bl	8000848 <RCC_GetPCLK1ClockFreq>
 8000908:	60a0      	str	r0, [r4, #8]
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 800090a:	6860      	ldr	r0, [r4, #4]
 800090c:	f7ff ffa8 	bl	8000860 <RCC_GetPCLK2ClockFreq>
 8000910:	60e0      	str	r0, [r4, #12]
}
 8000912:	bd10      	pop	{r4, pc}

08000914 <LL_USART_SetBaudRate>:
{
 8000914:	b510      	push	{r4, lr}
 8000916:	4604      	mov	r4, r0
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 8000918:	f5b2 4f00 	cmp.w	r2, #32768	@ 0x8000
 800091c:	d02f      	beq.n	800097e <LL_USART_SetBaudRate+0x6a>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 800091e:	f04f 0c00 	mov.w	ip, #0
 8000922:	1848      	adds	r0, r1, r1
 8000924:	eb4c 0c0c 	adc.w	ip, ip, ip
 8000928:	1840      	adds	r0, r0, r1
 800092a:	f14c 0c00 	adc.w	ip, ip, #0
 800092e:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 8000932:	ea4c 7c50 	orr.w	ip, ip, r0, lsr #29
 8000936:	00c0      	lsls	r0, r0, #3
 8000938:	1840      	adds	r0, r0, r1
 800093a:	ea4f 0283 	mov.w	r2, r3, lsl #2
 800093e:	ea4f 7393 	mov.w	r3, r3, lsr #30
 8000942:	f14c 0100 	adc.w	r1, ip, #0
 8000946:	f7ff fc25 	bl	8000194 <__aeabi_uldivmod>
 800094a:	4924      	ldr	r1, [pc, #144]	@ (80009dc <LL_USART_SetBaudRate+0xc8>)
 800094c:	fba1 2300 	umull	r2, r3, r1, r0
 8000950:	095b      	lsrs	r3, r3, #5
 8000952:	011a      	lsls	r2, r3, #4
 8000954:	b292      	uxth	r2, r2
 8000956:	f04f 0c64 	mov.w	ip, #100	@ 0x64
 800095a:	fb0c 0313 	mls	r3, ip, r3, r0
 800095e:	011b      	lsls	r3, r3, #4
 8000960:	3332      	adds	r3, #50	@ 0x32
 8000962:	fba1 1303 	umull	r1, r3, r1, r3
 8000966:	f3c3 134f 	ubfx	r3, r3, #5, #16
 800096a:	f003 01f0 	and.w	r1, r3, #240	@ 0xf0
 800096e:	440a      	add	r2, r1
 8000970:	b292      	uxth	r2, r2
 8000972:	f003 030f 	and.w	r3, r3, #15
 8000976:	4413      	add	r3, r2
 8000978:	b29b      	uxth	r3, r3
 800097a:	60a3      	str	r3, [r4, #8]
}
 800097c:	bd10      	pop	{r4, pc}
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 800097e:	f04f 0c00 	mov.w	ip, #0
 8000982:	1848      	adds	r0, r1, r1
 8000984:	eb4c 020c 	adc.w	r2, ip, ip
 8000988:	1840      	adds	r0, r0, r1
 800098a:	f142 0200 	adc.w	r2, r2, #0
 800098e:	00d2      	lsls	r2, r2, #3
 8000990:	ea42 7250 	orr.w	r2, r2, r0, lsr #29
 8000994:	00c0      	lsls	r0, r0, #3
 8000996:	1840      	adds	r0, r0, r1
 8000998:	f142 0100 	adc.w	r1, r2, #0
 800099c:	18da      	adds	r2, r3, r3
 800099e:	eb4c 030c 	adc.w	r3, ip, ip
 80009a2:	f7ff fbf7 	bl	8000194 <__aeabi_uldivmod>
 80009a6:	490d      	ldr	r1, [pc, #52]	@ (80009dc <LL_USART_SetBaudRate+0xc8>)
 80009a8:	fba1 2300 	umull	r2, r3, r1, r0
 80009ac:	095b      	lsrs	r3, r3, #5
 80009ae:	011a      	lsls	r2, r3, #4
 80009b0:	b292      	uxth	r2, r2
 80009b2:	f04f 0c64 	mov.w	ip, #100	@ 0x64
 80009b6:	fb0c 0313 	mls	r3, ip, r3, r0
 80009ba:	00db      	lsls	r3, r3, #3
 80009bc:	3332      	adds	r3, #50	@ 0x32
 80009be:	fba1 1303 	umull	r1, r3, r1, r3
 80009c2:	f3c3 134f 	ubfx	r3, r3, #5, #16
 80009c6:	0059      	lsls	r1, r3, #1
 80009c8:	f401 71f8 	and.w	r1, r1, #496	@ 0x1f0
 80009cc:	440a      	add	r2, r1
 80009ce:	b292      	uxth	r2, r2
 80009d0:	f003 0307 	and.w	r3, r3, #7
 80009d4:	4413      	add	r3, r2
 80009d6:	b29b      	uxth	r3, r3
 80009d8:	60a3      	str	r3, [r4, #8]
 80009da:	e7cf      	b.n	800097c <LL_USART_SetBaudRate+0x68>
 80009dc:	51eb851f 	.word	0x51eb851f

080009e0 <LL_USART_Init>:
  return (READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE));
 80009e0:	68c3      	ldr	r3, [r0, #12]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 80009e2:	f413 5f00 	tst.w	r3, #8192	@ 0x2000
 80009e6:	d001      	beq.n	80009ec <LL_USART_Init+0xc>
  ErrorStatus status = ERROR;
 80009e8:	2001      	movs	r0, #1
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
}
 80009ea:	4770      	bx	lr
{
 80009ec:	b530      	push	{r4, r5, lr}
 80009ee:	b085      	sub	sp, #20
 80009f0:	4604      	mov	r4, r0
 80009f2:	460d      	mov	r5, r1
    MODIFY_REG(USARTx->CR1,
 80009f4:	68c3      	ldr	r3, [r0, #12]
 80009f6:	f423 4316 	bic.w	r3, r3, #38400	@ 0x9600
 80009fa:	f023 030c 	bic.w	r3, r3, #12
 80009fe:	684a      	ldr	r2, [r1, #4]
 8000a00:	68c9      	ldr	r1, [r1, #12]
 8000a02:	430a      	orrs	r2, r1
 8000a04:	6929      	ldr	r1, [r5, #16]
 8000a06:	430a      	orrs	r2, r1
 8000a08:	69a9      	ldr	r1, [r5, #24]
 8000a0a:	430a      	orrs	r2, r1
 8000a0c:	4313      	orrs	r3, r2
 8000a0e:	60c3      	str	r3, [r0, #12]
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 8000a10:	68ab      	ldr	r3, [r5, #8]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8000a12:	6902      	ldr	r2, [r0, #16]
 8000a14:	f422 5240 	bic.w	r2, r2, #12288	@ 0x3000
 8000a18:	4313      	orrs	r3, r2
 8000a1a:	6103      	str	r3, [r0, #16]
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 8000a1c:	696b      	ldr	r3, [r5, #20]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8000a1e:	6942      	ldr	r2, [r0, #20]
 8000a20:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8000a24:	4313      	orrs	r3, r2
 8000a26:	6143      	str	r3, [r0, #20]
    LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 8000a28:	4668      	mov	r0, sp
 8000a2a:	f7ff ff63 	bl	80008f4 <LL_RCC_GetSystemClocksFreq>
    if (USARTx == USART1)
 8000a2e:	4b0f      	ldr	r3, [pc, #60]	@ (8000a6c <LL_USART_Init+0x8c>)
 8000a30:	429c      	cmp	r4, r3
 8000a32:	d008      	beq.n	8000a46 <LL_USART_Init+0x66>
    else if (USARTx == USART2)
 8000a34:	4b0e      	ldr	r3, [pc, #56]	@ (8000a70 <LL_USART_Init+0x90>)
 8000a36:	429c      	cmp	r4, r3
 8000a38:	d00b      	beq.n	8000a52 <LL_USART_Init+0x72>
    else if (USARTx == USART6)
 8000a3a:	4b0e      	ldr	r3, [pc, #56]	@ (8000a74 <LL_USART_Init+0x94>)
 8000a3c:	429c      	cmp	r4, r3
 8000a3e:	d00a      	beq.n	8000a56 <LL_USART_Init+0x76>
  ErrorStatus status = ERROR;
 8000a40:	2001      	movs	r0, #1
}
 8000a42:	b005      	add	sp, #20
 8000a44:	bd30      	pop	{r4, r5, pc}
      periphclk = rcc_clocks.PCLK2_Frequency;
 8000a46:	9903      	ldr	r1, [sp, #12]
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 8000a48:	b169      	cbz	r1, 8000a66 <LL_USART_Init+0x86>
        && (USART_InitStruct->BaudRate != 0U))
 8000a4a:	682b      	ldr	r3, [r5, #0]
 8000a4c:	b92b      	cbnz	r3, 8000a5a <LL_USART_Init+0x7a>
  ErrorStatus status = ERROR;
 8000a4e:	2001      	movs	r0, #1
 8000a50:	e7f7      	b.n	8000a42 <LL_USART_Init+0x62>
      periphclk = rcc_clocks.PCLK1_Frequency;
 8000a52:	9902      	ldr	r1, [sp, #8]
 8000a54:	e7f8      	b.n	8000a48 <LL_USART_Init+0x68>
      periphclk = rcc_clocks.PCLK2_Frequency;
 8000a56:	9903      	ldr	r1, [sp, #12]
 8000a58:	e7f6      	b.n	8000a48 <LL_USART_Init+0x68>
      LL_USART_SetBaudRate(USARTx,
 8000a5a:	69aa      	ldr	r2, [r5, #24]
 8000a5c:	4620      	mov	r0, r4
 8000a5e:	f7ff ff59 	bl	8000914 <LL_USART_SetBaudRate>
      status = SUCCESS;
 8000a62:	2000      	movs	r0, #0
 8000a64:	e7ed      	b.n	8000a42 <LL_USART_Init+0x62>
  ErrorStatus status = ERROR;
 8000a66:	2001      	movs	r0, #1
 8000a68:	e7eb      	b.n	8000a42 <LL_USART_Init+0x62>
 8000a6a:	bf00      	nop
 8000a6c:	40011000 	.word	0x40011000
 8000a70:	40004400 	.word	0x40004400
 8000a74:	40011400 	.word	0x40011400

08000a78 <LL_Init1msTick>:
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 8000a78:	4b06      	ldr	r3, [pc, #24]	@ (8000a94 <LL_Init1msTick+0x1c>)
 8000a7a:	fba3 2300 	umull	r2, r3, r3, r0
 8000a7e:	099b      	lsrs	r3, r3, #6
 8000a80:	3b01      	subs	r3, #1
 8000a82:	f04f 22e0 	mov.w	r2, #3758153728	@ 0xe000e000
 8000a86:	6153      	str	r3, [r2, #20]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 8000a88:	2300      	movs	r3, #0
 8000a8a:	6193      	str	r3, [r2, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a8c:	2305      	movs	r3, #5
 8000a8e:	6113      	str	r3, [r2, #16]
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
}
 8000a90:	4770      	bx	lr
 8000a92:	bf00      	nop
 8000a94:	10624dd3 	.word	0x10624dd3

08000a98 <LL_SetSystemCoreClock>:
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8000a98:	4b01      	ldr	r3, [pc, #4]	@ (8000aa0 <LL_SetSystemCoreClock+0x8>)
 8000a9a:	6018      	str	r0, [r3, #0]
}
 8000a9c:	4770      	bx	lr
 8000a9e:	bf00      	nop
 8000aa0:	20000000 	.word	0x20000000

08000aa4 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000aa4:	4a03      	ldr	r2, [pc, #12]	@ (8000ab4 <SystemInit+0x10>)
 8000aa6:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 8000aaa:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000aae:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ab2:	4770      	bx	lr
 8000ab4:	e000ed00 	.word	0xe000ed00

08000ab8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000ab8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000af0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000abc:	f7ff fff2 	bl	8000aa4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000ac0:	480c      	ldr	r0, [pc, #48]	@ (8000af4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000ac2:	490d      	ldr	r1, [pc, #52]	@ (8000af8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000ac4:	4a0d      	ldr	r2, [pc, #52]	@ (8000afc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000ac6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ac8:	e002      	b.n	8000ad0 <LoopCopyDataInit>

08000aca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000aca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000acc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ace:	3304      	adds	r3, #4

08000ad0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ad0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ad2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ad4:	d3f9      	bcc.n	8000aca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ad6:	4a0a      	ldr	r2, [pc, #40]	@ (8000b00 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000ad8:	4c0a      	ldr	r4, [pc, #40]	@ (8000b04 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000ada:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000adc:	e001      	b.n	8000ae2 <LoopFillZerobss>

08000ade <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ade:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ae0:	3204      	adds	r2, #4

08000ae2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ae2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ae4:	d3fb      	bcc.n	8000ade <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8000ae6:	f000 f811 	bl	8000b0c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000aea:	f7ff fd03 	bl	80004f4 <main>
  bx  lr    
 8000aee:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000af0:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000af4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000af8:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 8000afc:	08000e50 	.word	0x08000e50
  ldr r2, =_sbss
 8000b00:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 8000b04:	20000020 	.word	0x20000020

08000b08 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000b08:	e7fe      	b.n	8000b08 <ADC_IRQHandler>
	...

08000b0c <__libc_init_array>:
 8000b0c:	b570      	push	{r4, r5, r6, lr}
 8000b0e:	4b0d      	ldr	r3, [pc, #52]	@ (8000b44 <__libc_init_array+0x38>)
 8000b10:	4d0d      	ldr	r5, [pc, #52]	@ (8000b48 <__libc_init_array+0x3c>)
 8000b12:	1b5b      	subs	r3, r3, r5
 8000b14:	109c      	asrs	r4, r3, #2
 8000b16:	2600      	movs	r6, #0
 8000b18:	42a6      	cmp	r6, r4
 8000b1a:	d109      	bne.n	8000b30 <__libc_init_array+0x24>
 8000b1c:	f000 f978 	bl	8000e10 <_init>
 8000b20:	4d0a      	ldr	r5, [pc, #40]	@ (8000b4c <__libc_init_array+0x40>)
 8000b22:	4b0b      	ldr	r3, [pc, #44]	@ (8000b50 <__libc_init_array+0x44>)
 8000b24:	1b5b      	subs	r3, r3, r5
 8000b26:	109c      	asrs	r4, r3, #2
 8000b28:	2600      	movs	r6, #0
 8000b2a:	42a6      	cmp	r6, r4
 8000b2c:	d105      	bne.n	8000b3a <__libc_init_array+0x2e>
 8000b2e:	bd70      	pop	{r4, r5, r6, pc}
 8000b30:	f855 3b04 	ldr.w	r3, [r5], #4
 8000b34:	4798      	blx	r3
 8000b36:	3601      	adds	r6, #1
 8000b38:	e7ee      	b.n	8000b18 <__libc_init_array+0xc>
 8000b3a:	f855 3b04 	ldr.w	r3, [r5], #4
 8000b3e:	4798      	blx	r3
 8000b40:	3601      	adds	r6, #1
 8000b42:	e7f2      	b.n	8000b2a <__libc_init_array+0x1e>
 8000b44:	08000e48 	.word	0x08000e48
 8000b48:	08000e48 	.word	0x08000e48
 8000b4c:	08000e48 	.word	0x08000e48
 8000b50:	08000e4c 	.word	0x08000e4c

08000b54 <__udivmoddi4>:
 8000b54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b58:	468c      	mov	ip, r1
 8000b5a:	468e      	mov	lr, r1
 8000b5c:	9e08      	ldr	r6, [sp, #32]
 8000b5e:	4615      	mov	r5, r2
 8000b60:	4604      	mov	r4, r0
 8000b62:	4619      	mov	r1, r3
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	f040 80d0 	bne.w	8000d0a <__udivmoddi4+0x1b6>
 8000b6a:	4572      	cmp	r2, lr
 8000b6c:	d947      	bls.n	8000bfe <__udivmoddi4+0xaa>
 8000b6e:	fab2 f782 	clz	r7, r2
 8000b72:	b14f      	cbz	r7, 8000b88 <__udivmoddi4+0x34>
 8000b74:	f1c7 0320 	rsb	r3, r7, #32
 8000b78:	fa0e fc07 	lsl.w	ip, lr, r7
 8000b7c:	fa20 f303 	lsr.w	r3, r0, r3
 8000b80:	40bd      	lsls	r5, r7
 8000b82:	ea43 0c0c 	orr.w	ip, r3, ip
 8000b86:	40bc      	lsls	r4, r7
 8000b88:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000b8c:	b2a8      	uxth	r0, r5
 8000b8e:	fbbc f8fe 	udiv	r8, ip, lr
 8000b92:	0c23      	lsrs	r3, r4, #16
 8000b94:	fb0e cc18 	mls	ip, lr, r8, ip
 8000b98:	fb08 f900 	mul.w	r9, r8, r0
 8000b9c:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
 8000ba0:	4599      	cmp	r9, r3
 8000ba2:	d928      	bls.n	8000bf6 <__udivmoddi4+0xa2>
 8000ba4:	18eb      	adds	r3, r5, r3
 8000ba6:	f108 32ff 	add.w	r2, r8, #4294967295	@ 0xffffffff
 8000baa:	d204      	bcs.n	8000bb6 <__udivmoddi4+0x62>
 8000bac:	4599      	cmp	r9, r3
 8000bae:	d902      	bls.n	8000bb6 <__udivmoddi4+0x62>
 8000bb0:	f1a8 0202 	sub.w	r2, r8, #2
 8000bb4:	442b      	add	r3, r5
 8000bb6:	eba3 0309 	sub.w	r3, r3, r9
 8000bba:	b2a4      	uxth	r4, r4
 8000bbc:	fbb3 fcfe 	udiv	ip, r3, lr
 8000bc0:	fb0e 331c 	mls	r3, lr, ip, r3
 8000bc4:	fb0c f000 	mul.w	r0, ip, r0
 8000bc8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000bcc:	42a0      	cmp	r0, r4
 8000bce:	d914      	bls.n	8000bfa <__udivmoddi4+0xa6>
 8000bd0:	192c      	adds	r4, r5, r4
 8000bd2:	f10c 33ff 	add.w	r3, ip, #4294967295	@ 0xffffffff
 8000bd6:	d204      	bcs.n	8000be2 <__udivmoddi4+0x8e>
 8000bd8:	42a0      	cmp	r0, r4
 8000bda:	d902      	bls.n	8000be2 <__udivmoddi4+0x8e>
 8000bdc:	f1ac 0302 	sub.w	r3, ip, #2
 8000be0:	442c      	add	r4, r5
 8000be2:	1a24      	subs	r4, r4, r0
 8000be4:	ea43 4002 	orr.w	r0, r3, r2, lsl #16
 8000be8:	b11e      	cbz	r6, 8000bf2 <__udivmoddi4+0x9e>
 8000bea:	40fc      	lsrs	r4, r7
 8000bec:	2300      	movs	r3, #0
 8000bee:	6034      	str	r4, [r6, #0]
 8000bf0:	6073      	str	r3, [r6, #4]
 8000bf2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bf6:	4642      	mov	r2, r8
 8000bf8:	e7dd      	b.n	8000bb6 <__udivmoddi4+0x62>
 8000bfa:	4663      	mov	r3, ip
 8000bfc:	e7f1      	b.n	8000be2 <__udivmoddi4+0x8e>
 8000bfe:	2a00      	cmp	r2, #0
 8000c00:	d079      	beq.n	8000cf6 <__udivmoddi4+0x1a2>
 8000c02:	fab2 f382 	clz	r3, r2
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	d03f      	beq.n	8000c8a <__udivmoddi4+0x136>
 8000c0a:	4619      	mov	r1, r3
 8000c0c:	f1c1 0320 	rsb	r3, r1, #32
 8000c10:	fa02 f501 	lsl.w	r5, r2, r1
 8000c14:	fa2e f203 	lsr.w	r2, lr, r3
 8000c18:	fa0e fe01 	lsl.w	lr, lr, r1
 8000c1c:	fa20 f303 	lsr.w	r3, r0, r3
 8000c20:	ea43 030e 	orr.w	r3, r3, lr
 8000c24:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c28:	fa00 f401 	lsl.w	r4, r0, r1
 8000c2c:	fbb2 fcfe 	udiv	ip, r2, lr
 8000c30:	b2af      	uxth	r7, r5
 8000c32:	fb0e 201c 	mls	r0, lr, ip, r2
 8000c36:	0c1a      	lsrs	r2, r3, #16
 8000c38:	fb0c f807 	mul.w	r8, ip, r7
 8000c3c:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000c40:	4590      	cmp	r8, r2
 8000c42:	d95a      	bls.n	8000cfa <__udivmoddi4+0x1a6>
 8000c44:	18aa      	adds	r2, r5, r2
 8000c46:	f10c 30ff 	add.w	r0, ip, #4294967295	@ 0xffffffff
 8000c4a:	d204      	bcs.n	8000c56 <__udivmoddi4+0x102>
 8000c4c:	4590      	cmp	r8, r2
 8000c4e:	d902      	bls.n	8000c56 <__udivmoddi4+0x102>
 8000c50:	f1ac 0002 	sub.w	r0, ip, #2
 8000c54:	442a      	add	r2, r5
 8000c56:	eba2 0208 	sub.w	r2, r2, r8
 8000c5a:	b29b      	uxth	r3, r3
 8000c5c:	fbb2 fcfe 	udiv	ip, r2, lr
 8000c60:	fb0e 221c 	mls	r2, lr, ip, r2
 8000c64:	fb0c f707 	mul.w	r7, ip, r7
 8000c68:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000c6c:	429f      	cmp	r7, r3
 8000c6e:	d946      	bls.n	8000cfe <__udivmoddi4+0x1aa>
 8000c70:	18eb      	adds	r3, r5, r3
 8000c72:	f10c 32ff 	add.w	r2, ip, #4294967295	@ 0xffffffff
 8000c76:	d204      	bcs.n	8000c82 <__udivmoddi4+0x12e>
 8000c78:	429f      	cmp	r7, r3
 8000c7a:	d902      	bls.n	8000c82 <__udivmoddi4+0x12e>
 8000c7c:	f1ac 0202 	sub.w	r2, ip, #2
 8000c80:	442b      	add	r3, r5
 8000c82:	1bdb      	subs	r3, r3, r7
 8000c84:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000c88:	e002      	b.n	8000c90 <__udivmoddi4+0x13c>
 8000c8a:	ebae 0302 	sub.w	r3, lr, r2
 8000c8e:	2201      	movs	r2, #1
 8000c90:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c94:	b2af      	uxth	r7, r5
 8000c96:	fbb3 fcfe 	udiv	ip, r3, lr
 8000c9a:	0c20      	lsrs	r0, r4, #16
 8000c9c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000ca0:	fb0c f807 	mul.w	r8, ip, r7
 8000ca4:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000ca8:	4598      	cmp	r8, r3
 8000caa:	d92a      	bls.n	8000d02 <__udivmoddi4+0x1ae>
 8000cac:	18eb      	adds	r3, r5, r3
 8000cae:	f10c 30ff 	add.w	r0, ip, #4294967295	@ 0xffffffff
 8000cb2:	d204      	bcs.n	8000cbe <__udivmoddi4+0x16a>
 8000cb4:	4598      	cmp	r8, r3
 8000cb6:	d902      	bls.n	8000cbe <__udivmoddi4+0x16a>
 8000cb8:	f1ac 0002 	sub.w	r0, ip, #2
 8000cbc:	442b      	add	r3, r5
 8000cbe:	eba3 0308 	sub.w	r3, r3, r8
 8000cc2:	b2a4      	uxth	r4, r4
 8000cc4:	fbb3 fcfe 	udiv	ip, r3, lr
 8000cc8:	fb0e 331c 	mls	r3, lr, ip, r3
 8000ccc:	fb0c f707 	mul.w	r7, ip, r7
 8000cd0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cd4:	42a7      	cmp	r7, r4
 8000cd6:	d916      	bls.n	8000d06 <__udivmoddi4+0x1b2>
 8000cd8:	192c      	adds	r4, r5, r4
 8000cda:	f10c 33ff 	add.w	r3, ip, #4294967295	@ 0xffffffff
 8000cde:	d204      	bcs.n	8000cea <__udivmoddi4+0x196>
 8000ce0:	42a7      	cmp	r7, r4
 8000ce2:	d902      	bls.n	8000cea <__udivmoddi4+0x196>
 8000ce4:	f1ac 0302 	sub.w	r3, ip, #2
 8000ce8:	442c      	add	r4, r5
 8000cea:	1be4      	subs	r4, r4, r7
 8000cec:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	4611      	mov	r1, r2
 8000cf4:	e778      	b.n	8000be8 <__udivmoddi4+0x94>
 8000cf6:	211f      	movs	r1, #31
 8000cf8:	e788      	b.n	8000c0c <__udivmoddi4+0xb8>
 8000cfa:	4660      	mov	r0, ip
 8000cfc:	e7ab      	b.n	8000c56 <__udivmoddi4+0x102>
 8000cfe:	4662      	mov	r2, ip
 8000d00:	e7bf      	b.n	8000c82 <__udivmoddi4+0x12e>
 8000d02:	4660      	mov	r0, ip
 8000d04:	e7db      	b.n	8000cbe <__udivmoddi4+0x16a>
 8000d06:	4663      	mov	r3, ip
 8000d08:	e7ef      	b.n	8000cea <__udivmoddi4+0x196>
 8000d0a:	4573      	cmp	r3, lr
 8000d0c:	d906      	bls.n	8000d1c <__udivmoddi4+0x1c8>
 8000d0e:	b916      	cbnz	r6, 8000d16 <__udivmoddi4+0x1c2>
 8000d10:	2100      	movs	r1, #0
 8000d12:	4608      	mov	r0, r1
 8000d14:	e76d      	b.n	8000bf2 <__udivmoddi4+0x9e>
 8000d16:	e9c6 0e00 	strd	r0, lr, [r6]
 8000d1a:	e7f9      	b.n	8000d10 <__udivmoddi4+0x1bc>
 8000d1c:	fab3 f783 	clz	r7, r3
 8000d20:	b987      	cbnz	r7, 8000d44 <__udivmoddi4+0x1f0>
 8000d22:	4573      	cmp	r3, lr
 8000d24:	d301      	bcc.n	8000d2a <__udivmoddi4+0x1d6>
 8000d26:	4282      	cmp	r2, r0
 8000d28:	d807      	bhi.n	8000d3a <__udivmoddi4+0x1e6>
 8000d2a:	1a84      	subs	r4, r0, r2
 8000d2c:	eb6e 0303 	sbc.w	r3, lr, r3
 8000d30:	2001      	movs	r0, #1
 8000d32:	469c      	mov	ip, r3
 8000d34:	b91e      	cbnz	r6, 8000d3e <__udivmoddi4+0x1ea>
 8000d36:	2100      	movs	r1, #0
 8000d38:	e75b      	b.n	8000bf2 <__udivmoddi4+0x9e>
 8000d3a:	4638      	mov	r0, r7
 8000d3c:	e7fa      	b.n	8000d34 <__udivmoddi4+0x1e0>
 8000d3e:	e9c6 4c00 	strd	r4, ip, [r6]
 8000d42:	e7f8      	b.n	8000d36 <__udivmoddi4+0x1e2>
 8000d44:	f1c7 0c20 	rsb	ip, r7, #32
 8000d48:	40bb      	lsls	r3, r7
 8000d4a:	fa22 f50c 	lsr.w	r5, r2, ip
 8000d4e:	431d      	orrs	r5, r3
 8000d50:	fa20 f10c 	lsr.w	r1, r0, ip
 8000d54:	fa2e f30c 	lsr.w	r3, lr, ip
 8000d58:	fa0e fe07 	lsl.w	lr, lr, r7
 8000d5c:	ea41 010e 	orr.w	r1, r1, lr
 8000d60:	ea4f 4915 	mov.w	r9, r5, lsr #16
 8000d64:	fa00 f407 	lsl.w	r4, r0, r7
 8000d68:	fbb3 f8f9 	udiv	r8, r3, r9
 8000d6c:	fa1f fe85 	uxth.w	lr, r5
 8000d70:	fb09 3018 	mls	r0, r9, r8, r3
 8000d74:	0c0b      	lsrs	r3, r1, #16
 8000d76:	fb08 fa0e 	mul.w	sl, r8, lr
 8000d7a:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8000d7e:	459a      	cmp	sl, r3
 8000d80:	fa02 f207 	lsl.w	r2, r2, r7
 8000d84:	d940      	bls.n	8000e08 <__udivmoddi4+0x2b4>
 8000d86:	18eb      	adds	r3, r5, r3
 8000d88:	f108 30ff 	add.w	r0, r8, #4294967295	@ 0xffffffff
 8000d8c:	d204      	bcs.n	8000d98 <__udivmoddi4+0x244>
 8000d8e:	459a      	cmp	sl, r3
 8000d90:	d902      	bls.n	8000d98 <__udivmoddi4+0x244>
 8000d92:	f1a8 0002 	sub.w	r0, r8, #2
 8000d96:	442b      	add	r3, r5
 8000d98:	eba3 030a 	sub.w	r3, r3, sl
 8000d9c:	b289      	uxth	r1, r1
 8000d9e:	fbb3 f8f9 	udiv	r8, r3, r9
 8000da2:	fb09 3318 	mls	r3, r9, r8, r3
 8000da6:	fb08 fe0e 	mul.w	lr, r8, lr
 8000daa:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000dae:	458e      	cmp	lr, r1
 8000db0:	d92c      	bls.n	8000e0c <__udivmoddi4+0x2b8>
 8000db2:	1869      	adds	r1, r5, r1
 8000db4:	f108 33ff 	add.w	r3, r8, #4294967295	@ 0xffffffff
 8000db8:	d204      	bcs.n	8000dc4 <__udivmoddi4+0x270>
 8000dba:	458e      	cmp	lr, r1
 8000dbc:	d902      	bls.n	8000dc4 <__udivmoddi4+0x270>
 8000dbe:	f1a8 0302 	sub.w	r3, r8, #2
 8000dc2:	4429      	add	r1, r5
 8000dc4:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000dc8:	fba0 9802 	umull	r9, r8, r0, r2
 8000dcc:	eba1 010e 	sub.w	r1, r1, lr
 8000dd0:	4541      	cmp	r1, r8
 8000dd2:	46ce      	mov	lr, r9
 8000dd4:	4643      	mov	r3, r8
 8000dd6:	d302      	bcc.n	8000dde <__udivmoddi4+0x28a>
 8000dd8:	d106      	bne.n	8000de8 <__udivmoddi4+0x294>
 8000dda:	454c      	cmp	r4, r9
 8000ddc:	d204      	bcs.n	8000de8 <__udivmoddi4+0x294>
 8000dde:	ebb9 0e02 	subs.w	lr, r9, r2
 8000de2:	eb68 0305 	sbc.w	r3, r8, r5
 8000de6:	3801      	subs	r0, #1
 8000de8:	2e00      	cmp	r6, #0
 8000dea:	d0a4      	beq.n	8000d36 <__udivmoddi4+0x1e2>
 8000dec:	ebb4 020e 	subs.w	r2, r4, lr
 8000df0:	eb61 0103 	sbc.w	r1, r1, r3
 8000df4:	fa01 fc0c 	lsl.w	ip, r1, ip
 8000df8:	fa22 f307 	lsr.w	r3, r2, r7
 8000dfc:	ea4c 0303 	orr.w	r3, ip, r3
 8000e00:	40f9      	lsrs	r1, r7
 8000e02:	e9c6 3100 	strd	r3, r1, [r6]
 8000e06:	e796      	b.n	8000d36 <__udivmoddi4+0x1e2>
 8000e08:	4640      	mov	r0, r8
 8000e0a:	e7c5      	b.n	8000d98 <__udivmoddi4+0x244>
 8000e0c:	4643      	mov	r3, r8
 8000e0e:	e7d9      	b.n	8000dc4 <__udivmoddi4+0x270>

08000e10 <_init>:
 8000e10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000e12:	bf00      	nop
 8000e14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000e16:	bc08      	pop	{r3}
 8000e18:	469e      	mov	lr, r3
 8000e1a:	4770      	bx	lr

08000e1c <_fini>:
 8000e1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000e1e:	bf00      	nop
 8000e20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000e22:	bc08      	pop	{r3}
 8000e24:	469e      	mov	lr, r3
 8000e26:	4770      	bx	lr
