
Lab10.2.3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004638  08000198  08000198  00001198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003f0  080047d0  080047d0  000057d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004bc0  08004bc0  0000600c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08004bc0  08004bc0  00005bc0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004bc8  08004bc8  0000600c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004bc8  08004bc8  00005bc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004bcc  08004bcc  00005bcc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08004bd0  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000110  2000000c  08004bdc  0000600c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000011c  08004bdc  0000611c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000600c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c672  00000000  00000000  0000603c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001b79  00000000  00000000  000126ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c20  00000000  00000000  00014228  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000989  00000000  00000000  00014e48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000160c7  00000000  00000000  000157d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d74f  00000000  00000000  0002b898  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008d74a  00000000  00000000  00038fe7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c6731  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003604  00000000  00000000  000c6774  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000070  00000000  00000000  000c9d78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	2000000c 	.word	0x2000000c
 80001b4:	00000000 	.word	0x00000000
 80001b8:	080047b8 	.word	0x080047b8

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000010 	.word	0x20000010
 80001d4:	080047b8 	.word	0x080047b8

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	@ 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__aeabi_d2uiz>:
 8000974:	004a      	lsls	r2, r1, #1
 8000976:	d211      	bcs.n	800099c <__aeabi_d2uiz+0x28>
 8000978:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 800097c:	d211      	bcs.n	80009a2 <__aeabi_d2uiz+0x2e>
 800097e:	d50d      	bpl.n	800099c <__aeabi_d2uiz+0x28>
 8000980:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000984:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000988:	d40e      	bmi.n	80009a8 <__aeabi_d2uiz+0x34>
 800098a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800098e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000992:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000996:	fa23 f002 	lsr.w	r0, r3, r2
 800099a:	4770      	bx	lr
 800099c:	f04f 0000 	mov.w	r0, #0
 80009a0:	4770      	bx	lr
 80009a2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009a6:	d102      	bne.n	80009ae <__aeabi_d2uiz+0x3a>
 80009a8:	f04f 30ff 	mov.w	r0, #4294967295
 80009ac:	4770      	bx	lr
 80009ae:	f04f 0000 	mov.w	r0, #0
 80009b2:	4770      	bx	lr

080009b4 <__aeabi_d2f>:
 80009b4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009b8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 80009bc:	bf24      	itt	cs
 80009be:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 80009c2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 80009c6:	d90d      	bls.n	80009e4 <__aeabi_d2f+0x30>
 80009c8:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 80009cc:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80009d0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80009d4:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 80009d8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80009dc:	bf08      	it	eq
 80009de:	f020 0001 	biceq.w	r0, r0, #1
 80009e2:	4770      	bx	lr
 80009e4:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 80009e8:	d121      	bne.n	8000a2e <__aeabi_d2f+0x7a>
 80009ea:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 80009ee:	bfbc      	itt	lt
 80009f0:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 80009f4:	4770      	bxlt	lr
 80009f6:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009fa:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009fe:	f1c2 0218 	rsb	r2, r2, #24
 8000a02:	f1c2 0c20 	rsb	ip, r2, #32
 8000a06:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a0a:	fa20 f002 	lsr.w	r0, r0, r2
 8000a0e:	bf18      	it	ne
 8000a10:	f040 0001 	orrne.w	r0, r0, #1
 8000a14:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a18:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a1c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a20:	ea40 000c 	orr.w	r0, r0, ip
 8000a24:	fa23 f302 	lsr.w	r3, r3, r2
 8000a28:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a2c:	e7cc      	b.n	80009c8 <__aeabi_d2f+0x14>
 8000a2e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a32:	d107      	bne.n	8000a44 <__aeabi_d2f+0x90>
 8000a34:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a38:	bf1e      	ittt	ne
 8000a3a:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000a3e:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000a42:	4770      	bxne	lr
 8000a44:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000a48:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000a4c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000a50:	4770      	bx	lr
 8000a52:	bf00      	nop

08000a54 <__aeabi_uldivmod>:
 8000a54:	b953      	cbnz	r3, 8000a6c <__aeabi_uldivmod+0x18>
 8000a56:	b94a      	cbnz	r2, 8000a6c <__aeabi_uldivmod+0x18>
 8000a58:	2900      	cmp	r1, #0
 8000a5a:	bf08      	it	eq
 8000a5c:	2800      	cmpeq	r0, #0
 8000a5e:	bf1c      	itt	ne
 8000a60:	f04f 31ff 	movne.w	r1, #4294967295
 8000a64:	f04f 30ff 	movne.w	r0, #4294967295
 8000a68:	f000 b988 	b.w	8000d7c <__aeabi_idiv0>
 8000a6c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a70:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a74:	f000 f806 	bl	8000a84 <__udivmoddi4>
 8000a78:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a7c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a80:	b004      	add	sp, #16
 8000a82:	4770      	bx	lr

08000a84 <__udivmoddi4>:
 8000a84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a88:	9d08      	ldr	r5, [sp, #32]
 8000a8a:	468e      	mov	lr, r1
 8000a8c:	4604      	mov	r4, r0
 8000a8e:	4688      	mov	r8, r1
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	d14a      	bne.n	8000b2a <__udivmoddi4+0xa6>
 8000a94:	428a      	cmp	r2, r1
 8000a96:	4617      	mov	r7, r2
 8000a98:	d962      	bls.n	8000b60 <__udivmoddi4+0xdc>
 8000a9a:	fab2 f682 	clz	r6, r2
 8000a9e:	b14e      	cbz	r6, 8000ab4 <__udivmoddi4+0x30>
 8000aa0:	f1c6 0320 	rsb	r3, r6, #32
 8000aa4:	fa01 f806 	lsl.w	r8, r1, r6
 8000aa8:	fa20 f303 	lsr.w	r3, r0, r3
 8000aac:	40b7      	lsls	r7, r6
 8000aae:	ea43 0808 	orr.w	r8, r3, r8
 8000ab2:	40b4      	lsls	r4, r6
 8000ab4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ab8:	fa1f fc87 	uxth.w	ip, r7
 8000abc:	fbb8 f1fe 	udiv	r1, r8, lr
 8000ac0:	0c23      	lsrs	r3, r4, #16
 8000ac2:	fb0e 8811 	mls	r8, lr, r1, r8
 8000ac6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000aca:	fb01 f20c 	mul.w	r2, r1, ip
 8000ace:	429a      	cmp	r2, r3
 8000ad0:	d909      	bls.n	8000ae6 <__udivmoddi4+0x62>
 8000ad2:	18fb      	adds	r3, r7, r3
 8000ad4:	f101 30ff 	add.w	r0, r1, #4294967295
 8000ad8:	f080 80ea 	bcs.w	8000cb0 <__udivmoddi4+0x22c>
 8000adc:	429a      	cmp	r2, r3
 8000ade:	f240 80e7 	bls.w	8000cb0 <__udivmoddi4+0x22c>
 8000ae2:	3902      	subs	r1, #2
 8000ae4:	443b      	add	r3, r7
 8000ae6:	1a9a      	subs	r2, r3, r2
 8000ae8:	b2a3      	uxth	r3, r4
 8000aea:	fbb2 f0fe 	udiv	r0, r2, lr
 8000aee:	fb0e 2210 	mls	r2, lr, r0, r2
 8000af2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000af6:	fb00 fc0c 	mul.w	ip, r0, ip
 8000afa:	459c      	cmp	ip, r3
 8000afc:	d909      	bls.n	8000b12 <__udivmoddi4+0x8e>
 8000afe:	18fb      	adds	r3, r7, r3
 8000b00:	f100 32ff 	add.w	r2, r0, #4294967295
 8000b04:	f080 80d6 	bcs.w	8000cb4 <__udivmoddi4+0x230>
 8000b08:	459c      	cmp	ip, r3
 8000b0a:	f240 80d3 	bls.w	8000cb4 <__udivmoddi4+0x230>
 8000b0e:	443b      	add	r3, r7
 8000b10:	3802      	subs	r0, #2
 8000b12:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000b16:	eba3 030c 	sub.w	r3, r3, ip
 8000b1a:	2100      	movs	r1, #0
 8000b1c:	b11d      	cbz	r5, 8000b26 <__udivmoddi4+0xa2>
 8000b1e:	40f3      	lsrs	r3, r6
 8000b20:	2200      	movs	r2, #0
 8000b22:	e9c5 3200 	strd	r3, r2, [r5]
 8000b26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b2a:	428b      	cmp	r3, r1
 8000b2c:	d905      	bls.n	8000b3a <__udivmoddi4+0xb6>
 8000b2e:	b10d      	cbz	r5, 8000b34 <__udivmoddi4+0xb0>
 8000b30:	e9c5 0100 	strd	r0, r1, [r5]
 8000b34:	2100      	movs	r1, #0
 8000b36:	4608      	mov	r0, r1
 8000b38:	e7f5      	b.n	8000b26 <__udivmoddi4+0xa2>
 8000b3a:	fab3 f183 	clz	r1, r3
 8000b3e:	2900      	cmp	r1, #0
 8000b40:	d146      	bne.n	8000bd0 <__udivmoddi4+0x14c>
 8000b42:	4573      	cmp	r3, lr
 8000b44:	d302      	bcc.n	8000b4c <__udivmoddi4+0xc8>
 8000b46:	4282      	cmp	r2, r0
 8000b48:	f200 8105 	bhi.w	8000d56 <__udivmoddi4+0x2d2>
 8000b4c:	1a84      	subs	r4, r0, r2
 8000b4e:	eb6e 0203 	sbc.w	r2, lr, r3
 8000b52:	2001      	movs	r0, #1
 8000b54:	4690      	mov	r8, r2
 8000b56:	2d00      	cmp	r5, #0
 8000b58:	d0e5      	beq.n	8000b26 <__udivmoddi4+0xa2>
 8000b5a:	e9c5 4800 	strd	r4, r8, [r5]
 8000b5e:	e7e2      	b.n	8000b26 <__udivmoddi4+0xa2>
 8000b60:	2a00      	cmp	r2, #0
 8000b62:	f000 8090 	beq.w	8000c86 <__udivmoddi4+0x202>
 8000b66:	fab2 f682 	clz	r6, r2
 8000b6a:	2e00      	cmp	r6, #0
 8000b6c:	f040 80a4 	bne.w	8000cb8 <__udivmoddi4+0x234>
 8000b70:	1a8a      	subs	r2, r1, r2
 8000b72:	0c03      	lsrs	r3, r0, #16
 8000b74:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000b78:	b280      	uxth	r0, r0
 8000b7a:	b2bc      	uxth	r4, r7
 8000b7c:	2101      	movs	r1, #1
 8000b7e:	fbb2 fcfe 	udiv	ip, r2, lr
 8000b82:	fb0e 221c 	mls	r2, lr, ip, r2
 8000b86:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000b8a:	fb04 f20c 	mul.w	r2, r4, ip
 8000b8e:	429a      	cmp	r2, r3
 8000b90:	d907      	bls.n	8000ba2 <__udivmoddi4+0x11e>
 8000b92:	18fb      	adds	r3, r7, r3
 8000b94:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000b98:	d202      	bcs.n	8000ba0 <__udivmoddi4+0x11c>
 8000b9a:	429a      	cmp	r2, r3
 8000b9c:	f200 80e0 	bhi.w	8000d60 <__udivmoddi4+0x2dc>
 8000ba0:	46c4      	mov	ip, r8
 8000ba2:	1a9b      	subs	r3, r3, r2
 8000ba4:	fbb3 f2fe 	udiv	r2, r3, lr
 8000ba8:	fb0e 3312 	mls	r3, lr, r2, r3
 8000bac:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000bb0:	fb02 f404 	mul.w	r4, r2, r4
 8000bb4:	429c      	cmp	r4, r3
 8000bb6:	d907      	bls.n	8000bc8 <__udivmoddi4+0x144>
 8000bb8:	18fb      	adds	r3, r7, r3
 8000bba:	f102 30ff 	add.w	r0, r2, #4294967295
 8000bbe:	d202      	bcs.n	8000bc6 <__udivmoddi4+0x142>
 8000bc0:	429c      	cmp	r4, r3
 8000bc2:	f200 80ca 	bhi.w	8000d5a <__udivmoddi4+0x2d6>
 8000bc6:	4602      	mov	r2, r0
 8000bc8:	1b1b      	subs	r3, r3, r4
 8000bca:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000bce:	e7a5      	b.n	8000b1c <__udivmoddi4+0x98>
 8000bd0:	f1c1 0620 	rsb	r6, r1, #32
 8000bd4:	408b      	lsls	r3, r1
 8000bd6:	fa22 f706 	lsr.w	r7, r2, r6
 8000bda:	431f      	orrs	r7, r3
 8000bdc:	fa0e f401 	lsl.w	r4, lr, r1
 8000be0:	fa20 f306 	lsr.w	r3, r0, r6
 8000be4:	fa2e fe06 	lsr.w	lr, lr, r6
 8000be8:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000bec:	4323      	orrs	r3, r4
 8000bee:	fa00 f801 	lsl.w	r8, r0, r1
 8000bf2:	fa1f fc87 	uxth.w	ip, r7
 8000bf6:	fbbe f0f9 	udiv	r0, lr, r9
 8000bfa:	0c1c      	lsrs	r4, r3, #16
 8000bfc:	fb09 ee10 	mls	lr, r9, r0, lr
 8000c00:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000c04:	fb00 fe0c 	mul.w	lr, r0, ip
 8000c08:	45a6      	cmp	lr, r4
 8000c0a:	fa02 f201 	lsl.w	r2, r2, r1
 8000c0e:	d909      	bls.n	8000c24 <__udivmoddi4+0x1a0>
 8000c10:	193c      	adds	r4, r7, r4
 8000c12:	f100 3aff 	add.w	sl, r0, #4294967295
 8000c16:	f080 809c 	bcs.w	8000d52 <__udivmoddi4+0x2ce>
 8000c1a:	45a6      	cmp	lr, r4
 8000c1c:	f240 8099 	bls.w	8000d52 <__udivmoddi4+0x2ce>
 8000c20:	3802      	subs	r0, #2
 8000c22:	443c      	add	r4, r7
 8000c24:	eba4 040e 	sub.w	r4, r4, lr
 8000c28:	fa1f fe83 	uxth.w	lr, r3
 8000c2c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000c30:	fb09 4413 	mls	r4, r9, r3, r4
 8000c34:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000c38:	fb03 fc0c 	mul.w	ip, r3, ip
 8000c3c:	45a4      	cmp	ip, r4
 8000c3e:	d908      	bls.n	8000c52 <__udivmoddi4+0x1ce>
 8000c40:	193c      	adds	r4, r7, r4
 8000c42:	f103 3eff 	add.w	lr, r3, #4294967295
 8000c46:	f080 8082 	bcs.w	8000d4e <__udivmoddi4+0x2ca>
 8000c4a:	45a4      	cmp	ip, r4
 8000c4c:	d97f      	bls.n	8000d4e <__udivmoddi4+0x2ca>
 8000c4e:	3b02      	subs	r3, #2
 8000c50:	443c      	add	r4, r7
 8000c52:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000c56:	eba4 040c 	sub.w	r4, r4, ip
 8000c5a:	fba0 ec02 	umull	lr, ip, r0, r2
 8000c5e:	4564      	cmp	r4, ip
 8000c60:	4673      	mov	r3, lr
 8000c62:	46e1      	mov	r9, ip
 8000c64:	d362      	bcc.n	8000d2c <__udivmoddi4+0x2a8>
 8000c66:	d05f      	beq.n	8000d28 <__udivmoddi4+0x2a4>
 8000c68:	b15d      	cbz	r5, 8000c82 <__udivmoddi4+0x1fe>
 8000c6a:	ebb8 0203 	subs.w	r2, r8, r3
 8000c6e:	eb64 0409 	sbc.w	r4, r4, r9
 8000c72:	fa04 f606 	lsl.w	r6, r4, r6
 8000c76:	fa22 f301 	lsr.w	r3, r2, r1
 8000c7a:	431e      	orrs	r6, r3
 8000c7c:	40cc      	lsrs	r4, r1
 8000c7e:	e9c5 6400 	strd	r6, r4, [r5]
 8000c82:	2100      	movs	r1, #0
 8000c84:	e74f      	b.n	8000b26 <__udivmoddi4+0xa2>
 8000c86:	fbb1 fcf2 	udiv	ip, r1, r2
 8000c8a:	0c01      	lsrs	r1, r0, #16
 8000c8c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000c90:	b280      	uxth	r0, r0
 8000c92:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000c96:	463b      	mov	r3, r7
 8000c98:	4638      	mov	r0, r7
 8000c9a:	463c      	mov	r4, r7
 8000c9c:	46b8      	mov	r8, r7
 8000c9e:	46be      	mov	lr, r7
 8000ca0:	2620      	movs	r6, #32
 8000ca2:	fbb1 f1f7 	udiv	r1, r1, r7
 8000ca6:	eba2 0208 	sub.w	r2, r2, r8
 8000caa:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000cae:	e766      	b.n	8000b7e <__udivmoddi4+0xfa>
 8000cb0:	4601      	mov	r1, r0
 8000cb2:	e718      	b.n	8000ae6 <__udivmoddi4+0x62>
 8000cb4:	4610      	mov	r0, r2
 8000cb6:	e72c      	b.n	8000b12 <__udivmoddi4+0x8e>
 8000cb8:	f1c6 0220 	rsb	r2, r6, #32
 8000cbc:	fa2e f302 	lsr.w	r3, lr, r2
 8000cc0:	40b7      	lsls	r7, r6
 8000cc2:	40b1      	lsls	r1, r6
 8000cc4:	fa20 f202 	lsr.w	r2, r0, r2
 8000cc8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ccc:	430a      	orrs	r2, r1
 8000cce:	fbb3 f8fe 	udiv	r8, r3, lr
 8000cd2:	b2bc      	uxth	r4, r7
 8000cd4:	fb0e 3318 	mls	r3, lr, r8, r3
 8000cd8:	0c11      	lsrs	r1, r2, #16
 8000cda:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cde:	fb08 f904 	mul.w	r9, r8, r4
 8000ce2:	40b0      	lsls	r0, r6
 8000ce4:	4589      	cmp	r9, r1
 8000ce6:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000cea:	b280      	uxth	r0, r0
 8000cec:	d93e      	bls.n	8000d6c <__udivmoddi4+0x2e8>
 8000cee:	1879      	adds	r1, r7, r1
 8000cf0:	f108 3cff 	add.w	ip, r8, #4294967295
 8000cf4:	d201      	bcs.n	8000cfa <__udivmoddi4+0x276>
 8000cf6:	4589      	cmp	r9, r1
 8000cf8:	d81f      	bhi.n	8000d3a <__udivmoddi4+0x2b6>
 8000cfa:	eba1 0109 	sub.w	r1, r1, r9
 8000cfe:	fbb1 f9fe 	udiv	r9, r1, lr
 8000d02:	fb09 f804 	mul.w	r8, r9, r4
 8000d06:	fb0e 1119 	mls	r1, lr, r9, r1
 8000d0a:	b292      	uxth	r2, r2
 8000d0c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000d10:	4542      	cmp	r2, r8
 8000d12:	d229      	bcs.n	8000d68 <__udivmoddi4+0x2e4>
 8000d14:	18ba      	adds	r2, r7, r2
 8000d16:	f109 31ff 	add.w	r1, r9, #4294967295
 8000d1a:	d2c4      	bcs.n	8000ca6 <__udivmoddi4+0x222>
 8000d1c:	4542      	cmp	r2, r8
 8000d1e:	d2c2      	bcs.n	8000ca6 <__udivmoddi4+0x222>
 8000d20:	f1a9 0102 	sub.w	r1, r9, #2
 8000d24:	443a      	add	r2, r7
 8000d26:	e7be      	b.n	8000ca6 <__udivmoddi4+0x222>
 8000d28:	45f0      	cmp	r8, lr
 8000d2a:	d29d      	bcs.n	8000c68 <__udivmoddi4+0x1e4>
 8000d2c:	ebbe 0302 	subs.w	r3, lr, r2
 8000d30:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000d34:	3801      	subs	r0, #1
 8000d36:	46e1      	mov	r9, ip
 8000d38:	e796      	b.n	8000c68 <__udivmoddi4+0x1e4>
 8000d3a:	eba7 0909 	sub.w	r9, r7, r9
 8000d3e:	4449      	add	r1, r9
 8000d40:	f1a8 0c02 	sub.w	ip, r8, #2
 8000d44:	fbb1 f9fe 	udiv	r9, r1, lr
 8000d48:	fb09 f804 	mul.w	r8, r9, r4
 8000d4c:	e7db      	b.n	8000d06 <__udivmoddi4+0x282>
 8000d4e:	4673      	mov	r3, lr
 8000d50:	e77f      	b.n	8000c52 <__udivmoddi4+0x1ce>
 8000d52:	4650      	mov	r0, sl
 8000d54:	e766      	b.n	8000c24 <__udivmoddi4+0x1a0>
 8000d56:	4608      	mov	r0, r1
 8000d58:	e6fd      	b.n	8000b56 <__udivmoddi4+0xd2>
 8000d5a:	443b      	add	r3, r7
 8000d5c:	3a02      	subs	r2, #2
 8000d5e:	e733      	b.n	8000bc8 <__udivmoddi4+0x144>
 8000d60:	f1ac 0c02 	sub.w	ip, ip, #2
 8000d64:	443b      	add	r3, r7
 8000d66:	e71c      	b.n	8000ba2 <__udivmoddi4+0x11e>
 8000d68:	4649      	mov	r1, r9
 8000d6a:	e79c      	b.n	8000ca6 <__udivmoddi4+0x222>
 8000d6c:	eba1 0109 	sub.w	r1, r1, r9
 8000d70:	46c4      	mov	ip, r8
 8000d72:	fbb1 f9fe 	udiv	r9, r1, lr
 8000d76:	fb09 f804 	mul.w	r8, r9, r4
 8000d7a:	e7c4      	b.n	8000d06 <__udivmoddi4+0x282>

08000d7c <__aeabi_idiv0>:
 8000d7c:	4770      	bx	lr
 8000d7e:	bf00      	nop

08000d80 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d80:	b590      	push	{r4, r7, lr}
 8000d82:	f2ad 4dbc 	subw	sp, sp, #1212	@ 0x4bc
 8000d86:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d88:	f000 fb74 	bl	8001474 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d8c:	f000 f874 	bl	8000e78 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d90:	f000 f980 	bl	8001094 <MX_GPIO_Init>
  MX_DMA_Init();
 8000d94:	f000 f95e 	bl	8001054 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000d98:	f000 f932 	bl	8001000 <MX_USART2_UART_Init>
  MX_TIM3_Init();
 8000d9c:	f000 f8d8 	bl	8000f50 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  float sampledSine[SAMPLE_SIZE];
  uint16_t SINE_LUT[SAMPLE_SIZE];
  HAL_TIM_PWM_Start_DMA(&htim3, TIM_CHANNEL_1, (uint32_t*)SINE_LUT, SAMPLE_SIZE);
 8000da0:	1d3a      	adds	r2, r7, #4
 8000da2:	23c8      	movs	r3, #200	@ 0xc8
 8000da4:	2100      	movs	r1, #0
 8000da6:	4830      	ldr	r0, [pc, #192]	@ (8000e68 <main+0xe8>)
 8000da8:	f001 fede 	bl	8002b68 <HAL_TIM_PWM_Start_DMA>
  //
  for(uint8_t i = 0; i < SAMPLE_SIZE; i++){
 8000dac:	2300      	movs	r3, #0
 8000dae:	f887 34b7 	strb.w	r3, [r7, #1207]	@ 0x4b7
 8000db2:	e04f      	b.n	8000e54 <main+0xd4>
	  SINE_LUT[i] = (uint16_t)((sinf(2*M_PI*i/SAMPLE_SIZE) + 1.0)*100.0/2.0);
 8000db4:	f897 34b7 	ldrb.w	r3, [r7, #1207]	@ 0x4b7
 8000db8:	4618      	mov	r0, r3
 8000dba:	f7ff fb5f 	bl	800047c <__aeabi_i2d>
 8000dbe:	a328      	add	r3, pc, #160	@ (adr r3, 8000e60 <main+0xe0>)
 8000dc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000dc4:	f7ff fbc4 	bl	8000550 <__aeabi_dmul>
 8000dc8:	4602      	mov	r2, r0
 8000dca:	460b      	mov	r3, r1
 8000dcc:	4610      	mov	r0, r2
 8000dce:	4619      	mov	r1, r3
 8000dd0:	f04f 0200 	mov.w	r2, #0
 8000dd4:	4b25      	ldr	r3, [pc, #148]	@ (8000e6c <main+0xec>)
 8000dd6:	f7ff fce5 	bl	80007a4 <__aeabi_ddiv>
 8000dda:	4602      	mov	r2, r0
 8000ddc:	460b      	mov	r3, r1
 8000dde:	4610      	mov	r0, r2
 8000de0:	4619      	mov	r1, r3
 8000de2:	f7ff fde7 	bl	80009b4 <__aeabi_d2f>
 8000de6:	4603      	mov	r3, r0
 8000de8:	ee00 3a10 	vmov	s0, r3
 8000dec:	f002 ffb4 	bl	8003d58 <sinf>
 8000df0:	ee10 3a10 	vmov	r3, s0
 8000df4:	4618      	mov	r0, r3
 8000df6:	f7ff fb53 	bl	80004a0 <__aeabi_f2d>
 8000dfa:	f04f 0200 	mov.w	r2, #0
 8000dfe:	4b1c      	ldr	r3, [pc, #112]	@ (8000e70 <main+0xf0>)
 8000e00:	f7ff f9f0 	bl	80001e4 <__adddf3>
 8000e04:	4602      	mov	r2, r0
 8000e06:	460b      	mov	r3, r1
 8000e08:	4610      	mov	r0, r2
 8000e0a:	4619      	mov	r1, r3
 8000e0c:	f04f 0200 	mov.w	r2, #0
 8000e10:	4b18      	ldr	r3, [pc, #96]	@ (8000e74 <main+0xf4>)
 8000e12:	f7ff fb9d 	bl	8000550 <__aeabi_dmul>
 8000e16:	4602      	mov	r2, r0
 8000e18:	460b      	mov	r3, r1
 8000e1a:	4610      	mov	r0, r2
 8000e1c:	4619      	mov	r1, r3
 8000e1e:	f04f 0200 	mov.w	r2, #0
 8000e22:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000e26:	f7ff fcbd 	bl	80007a4 <__aeabi_ddiv>
 8000e2a:	4602      	mov	r2, r0
 8000e2c:	460b      	mov	r3, r1
 8000e2e:	f897 44b7 	ldrb.w	r4, [r7, #1207]	@ 0x4b7
 8000e32:	4610      	mov	r0, r2
 8000e34:	4619      	mov	r1, r3
 8000e36:	f7ff fd9d 	bl	8000974 <__aeabi_d2uiz>
 8000e3a:	4603      	mov	r3, r0
 8000e3c:	b29a      	uxth	r2, r3
 8000e3e:	f507 6397 	add.w	r3, r7, #1208	@ 0x4b8
 8000e42:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 8000e46:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
  for(uint8_t i = 0; i < SAMPLE_SIZE; i++){
 8000e4a:	f897 34b7 	ldrb.w	r3, [r7, #1207]	@ 0x4b7
 8000e4e:	3301      	adds	r3, #1
 8000e50:	f887 34b7 	strb.w	r3, [r7, #1207]	@ 0x4b7
 8000e54:	f897 34b7 	ldrb.w	r3, [r7, #1207]	@ 0x4b7
 8000e58:	2bc7      	cmp	r3, #199	@ 0xc7
 8000e5a:	d9ab      	bls.n	8000db4 <main+0x34>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000e5c:	bf00      	nop
 8000e5e:	e7fd      	b.n	8000e5c <main+0xdc>
 8000e60:	54442d18 	.word	0x54442d18
 8000e64:	401921fb 	.word	0x401921fb
 8000e68:	20000028 	.word	0x20000028
 8000e6c:	40690000 	.word	0x40690000
 8000e70:	3ff00000 	.word	0x3ff00000
 8000e74:	40590000 	.word	0x40590000

08000e78 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b094      	sub	sp, #80	@ 0x50
 8000e7c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e7e:	f107 0320 	add.w	r3, r7, #32
 8000e82:	2230      	movs	r2, #48	@ 0x30
 8000e84:	2100      	movs	r1, #0
 8000e86:	4618      	mov	r0, r3
 8000e88:	f002 ff3a 	bl	8003d00 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e8c:	f107 030c 	add.w	r3, r7, #12
 8000e90:	2200      	movs	r2, #0
 8000e92:	601a      	str	r2, [r3, #0]
 8000e94:	605a      	str	r2, [r3, #4]
 8000e96:	609a      	str	r2, [r3, #8]
 8000e98:	60da      	str	r2, [r3, #12]
 8000e9a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	60bb      	str	r3, [r7, #8]
 8000ea0:	4b29      	ldr	r3, [pc, #164]	@ (8000f48 <SystemClock_Config+0xd0>)
 8000ea2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ea4:	4a28      	ldr	r2, [pc, #160]	@ (8000f48 <SystemClock_Config+0xd0>)
 8000ea6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000eaa:	6413      	str	r3, [r2, #64]	@ 0x40
 8000eac:	4b26      	ldr	r3, [pc, #152]	@ (8000f48 <SystemClock_Config+0xd0>)
 8000eae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000eb0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000eb4:	60bb      	str	r3, [r7, #8]
 8000eb6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000eb8:	2300      	movs	r3, #0
 8000eba:	607b      	str	r3, [r7, #4]
 8000ebc:	4b23      	ldr	r3, [pc, #140]	@ (8000f4c <SystemClock_Config+0xd4>)
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000ec4:	4a21      	ldr	r2, [pc, #132]	@ (8000f4c <SystemClock_Config+0xd4>)
 8000ec6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000eca:	6013      	str	r3, [r2, #0]
 8000ecc:	4b1f      	ldr	r3, [pc, #124]	@ (8000f4c <SystemClock_Config+0xd4>)
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000ed4:	607b      	str	r3, [r7, #4]
 8000ed6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000ed8:	2302      	movs	r3, #2
 8000eda:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000edc:	2301      	movs	r3, #1
 8000ede:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000ee0:	2310      	movs	r3, #16
 8000ee2:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ee4:	2302      	movs	r3, #2
 8000ee6:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000ee8:	2300      	movs	r3, #0
 8000eea:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000eec:	2310      	movs	r3, #16
 8000eee:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000ef0:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000ef4:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000ef6:	2304      	movs	r3, #4
 8000ef8:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000efa:	2307      	movs	r3, #7
 8000efc:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000efe:	f107 0320 	add.w	r3, r7, #32
 8000f02:	4618      	mov	r0, r3
 8000f04:	f001 f948 	bl	8002198 <HAL_RCC_OscConfig>
 8000f08:	4603      	mov	r3, r0
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d001      	beq.n	8000f12 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000f0e:	f000 f92f 	bl	8001170 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f12:	230f      	movs	r3, #15
 8000f14:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f16:	2302      	movs	r3, #2
 8000f18:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000f1e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000f22:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f24:	2300      	movs	r3, #0
 8000f26:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000f28:	f107 030c 	add.w	r3, r7, #12
 8000f2c:	2102      	movs	r1, #2
 8000f2e:	4618      	mov	r0, r3
 8000f30:	f001 fbaa 	bl	8002688 <HAL_RCC_ClockConfig>
 8000f34:	4603      	mov	r3, r0
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d001      	beq.n	8000f3e <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000f3a:	f000 f919 	bl	8001170 <Error_Handler>
  }
}
 8000f3e:	bf00      	nop
 8000f40:	3750      	adds	r7, #80	@ 0x50
 8000f42:	46bd      	mov	sp, r7
 8000f44:	bd80      	pop	{r7, pc}
 8000f46:	bf00      	nop
 8000f48:	40023800 	.word	0x40023800
 8000f4c:	40007000 	.word	0x40007000

08000f50 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b08a      	sub	sp, #40	@ 0x28
 8000f54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f56:	f107 0320 	add.w	r3, r7, #32
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	601a      	str	r2, [r3, #0]
 8000f5e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000f60:	1d3b      	adds	r3, r7, #4
 8000f62:	2200      	movs	r2, #0
 8000f64:	601a      	str	r2, [r3, #0]
 8000f66:	605a      	str	r2, [r3, #4]
 8000f68:	609a      	str	r2, [r3, #8]
 8000f6a:	60da      	str	r2, [r3, #12]
 8000f6c:	611a      	str	r2, [r3, #16]
 8000f6e:	615a      	str	r2, [r3, #20]
 8000f70:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000f72:	4b21      	ldr	r3, [pc, #132]	@ (8000ff8 <MX_TIM3_Init+0xa8>)
 8000f74:	4a21      	ldr	r2, [pc, #132]	@ (8000ffc <MX_TIM3_Init+0xac>)
 8000f76:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 83;
 8000f78:	4b1f      	ldr	r3, [pc, #124]	@ (8000ff8 <MX_TIM3_Init+0xa8>)
 8000f7a:	2253      	movs	r2, #83	@ 0x53
 8000f7c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f7e:	4b1e      	ldr	r3, [pc, #120]	@ (8000ff8 <MX_TIM3_Init+0xa8>)
 8000f80:	2200      	movs	r2, #0
 8000f82:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 99;
 8000f84:	4b1c      	ldr	r3, [pc, #112]	@ (8000ff8 <MX_TIM3_Init+0xa8>)
 8000f86:	2263      	movs	r2, #99	@ 0x63
 8000f88:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f8a:	4b1b      	ldr	r3, [pc, #108]	@ (8000ff8 <MX_TIM3_Init+0xa8>)
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f90:	4b19      	ldr	r3, [pc, #100]	@ (8000ff8 <MX_TIM3_Init+0xa8>)
 8000f92:	2200      	movs	r2, #0
 8000f94:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000f96:	4818      	ldr	r0, [pc, #96]	@ (8000ff8 <MX_TIM3_Init+0xa8>)
 8000f98:	f001 fd96 	bl	8002ac8 <HAL_TIM_PWM_Init>
 8000f9c:	4603      	mov	r3, r0
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d001      	beq.n	8000fa6 <MX_TIM3_Init+0x56>
  {
    Error_Handler();
 8000fa2:	f000 f8e5 	bl	8001170 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000faa:	2300      	movs	r3, #0
 8000fac:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000fae:	f107 0320 	add.w	r3, r7, #32
 8000fb2:	4619      	mov	r1, r3
 8000fb4:	4810      	ldr	r0, [pc, #64]	@ (8000ff8 <MX_TIM3_Init+0xa8>)
 8000fb6:	f002 fb71 	bl	800369c <HAL_TIMEx_MasterConfigSynchronization>
 8000fba:	4603      	mov	r3, r0
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d001      	beq.n	8000fc4 <MX_TIM3_Init+0x74>
  {
    Error_Handler();
 8000fc0:	f000 f8d6 	bl	8001170 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000fc4:	2360      	movs	r3, #96	@ 0x60
 8000fc6:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000fc8:	2300      	movs	r3, #0
 8000fca:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000fcc:	2300      	movs	r3, #0
 8000fce:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000fd4:	1d3b      	adds	r3, r7, #4
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	4619      	mov	r1, r3
 8000fda:	4807      	ldr	r0, [pc, #28]	@ (8000ff8 <MX_TIM3_Init+0xa8>)
 8000fdc:	f001 ff74 	bl	8002ec8 <HAL_TIM_PWM_ConfigChannel>
 8000fe0:	4603      	mov	r3, r0
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d001      	beq.n	8000fea <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 8000fe6:	f000 f8c3 	bl	8001170 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000fea:	4803      	ldr	r0, [pc, #12]	@ (8000ff8 <MX_TIM3_Init+0xa8>)
 8000fec:	f000 f94a 	bl	8001284 <HAL_TIM_MspPostInit>

}
 8000ff0:	bf00      	nop
 8000ff2:	3728      	adds	r7, #40	@ 0x28
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	bd80      	pop	{r7, pc}
 8000ff8:	20000028 	.word	0x20000028
 8000ffc:	40000400 	.word	0x40000400

08001000 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001004:	4b11      	ldr	r3, [pc, #68]	@ (800104c <MX_USART2_UART_Init+0x4c>)
 8001006:	4a12      	ldr	r2, [pc, #72]	@ (8001050 <MX_USART2_UART_Init+0x50>)
 8001008:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800100a:	4b10      	ldr	r3, [pc, #64]	@ (800104c <MX_USART2_UART_Init+0x4c>)
 800100c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001010:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001012:	4b0e      	ldr	r3, [pc, #56]	@ (800104c <MX_USART2_UART_Init+0x4c>)
 8001014:	2200      	movs	r2, #0
 8001016:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001018:	4b0c      	ldr	r3, [pc, #48]	@ (800104c <MX_USART2_UART_Init+0x4c>)
 800101a:	2200      	movs	r2, #0
 800101c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800101e:	4b0b      	ldr	r3, [pc, #44]	@ (800104c <MX_USART2_UART_Init+0x4c>)
 8001020:	2200      	movs	r2, #0
 8001022:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001024:	4b09      	ldr	r3, [pc, #36]	@ (800104c <MX_USART2_UART_Init+0x4c>)
 8001026:	220c      	movs	r2, #12
 8001028:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800102a:	4b08      	ldr	r3, [pc, #32]	@ (800104c <MX_USART2_UART_Init+0x4c>)
 800102c:	2200      	movs	r2, #0
 800102e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001030:	4b06      	ldr	r3, [pc, #24]	@ (800104c <MX_USART2_UART_Init+0x4c>)
 8001032:	2200      	movs	r2, #0
 8001034:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001036:	4805      	ldr	r0, [pc, #20]	@ (800104c <MX_USART2_UART_Init+0x4c>)
 8001038:	f002 fb9e 	bl	8003778 <HAL_UART_Init>
 800103c:	4603      	mov	r3, r0
 800103e:	2b00      	cmp	r3, #0
 8001040:	d001      	beq.n	8001046 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001042:	f000 f895 	bl	8001170 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001046:	bf00      	nop
 8001048:	bd80      	pop	{r7, pc}
 800104a:	bf00      	nop
 800104c:	200000d0 	.word	0x200000d0
 8001050:	40004400 	.word	0x40004400

08001054 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b082      	sub	sp, #8
 8001058:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800105a:	2300      	movs	r3, #0
 800105c:	607b      	str	r3, [r7, #4]
 800105e:	4b0c      	ldr	r3, [pc, #48]	@ (8001090 <MX_DMA_Init+0x3c>)
 8001060:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001062:	4a0b      	ldr	r2, [pc, #44]	@ (8001090 <MX_DMA_Init+0x3c>)
 8001064:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001068:	6313      	str	r3, [r2, #48]	@ 0x30
 800106a:	4b09      	ldr	r3, [pc, #36]	@ (8001090 <MX_DMA_Init+0x3c>)
 800106c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800106e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001072:	607b      	str	r3, [r7, #4]
 8001074:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 8001076:	2200      	movs	r2, #0
 8001078:	2100      	movs	r1, #0
 800107a:	200f      	movs	r0, #15
 800107c:	f000 fb47 	bl	800170e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8001080:	200f      	movs	r0, #15
 8001082:	f000 fb60 	bl	8001746 <HAL_NVIC_EnableIRQ>

}
 8001086:	bf00      	nop
 8001088:	3708      	adds	r7, #8
 800108a:	46bd      	mov	sp, r7
 800108c:	bd80      	pop	{r7, pc}
 800108e:	bf00      	nop
 8001090:	40023800 	.word	0x40023800

08001094 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b08a      	sub	sp, #40	@ 0x28
 8001098:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800109a:	f107 0314 	add.w	r3, r7, #20
 800109e:	2200      	movs	r2, #0
 80010a0:	601a      	str	r2, [r3, #0]
 80010a2:	605a      	str	r2, [r3, #4]
 80010a4:	609a      	str	r2, [r3, #8]
 80010a6:	60da      	str	r2, [r3, #12]
 80010a8:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80010aa:	2300      	movs	r3, #0
 80010ac:	613b      	str	r3, [r7, #16]
 80010ae:	4b2d      	ldr	r3, [pc, #180]	@ (8001164 <MX_GPIO_Init+0xd0>)
 80010b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010b2:	4a2c      	ldr	r2, [pc, #176]	@ (8001164 <MX_GPIO_Init+0xd0>)
 80010b4:	f043 0304 	orr.w	r3, r3, #4
 80010b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80010ba:	4b2a      	ldr	r3, [pc, #168]	@ (8001164 <MX_GPIO_Init+0xd0>)
 80010bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010be:	f003 0304 	and.w	r3, r3, #4
 80010c2:	613b      	str	r3, [r7, #16]
 80010c4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80010c6:	2300      	movs	r3, #0
 80010c8:	60fb      	str	r3, [r7, #12]
 80010ca:	4b26      	ldr	r3, [pc, #152]	@ (8001164 <MX_GPIO_Init+0xd0>)
 80010cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010ce:	4a25      	ldr	r2, [pc, #148]	@ (8001164 <MX_GPIO_Init+0xd0>)
 80010d0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80010d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80010d6:	4b23      	ldr	r3, [pc, #140]	@ (8001164 <MX_GPIO_Init+0xd0>)
 80010d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010da:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80010de:	60fb      	str	r3, [r7, #12]
 80010e0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010e2:	2300      	movs	r3, #0
 80010e4:	60bb      	str	r3, [r7, #8]
 80010e6:	4b1f      	ldr	r3, [pc, #124]	@ (8001164 <MX_GPIO_Init+0xd0>)
 80010e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010ea:	4a1e      	ldr	r2, [pc, #120]	@ (8001164 <MX_GPIO_Init+0xd0>)
 80010ec:	f043 0301 	orr.w	r3, r3, #1
 80010f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80010f2:	4b1c      	ldr	r3, [pc, #112]	@ (8001164 <MX_GPIO_Init+0xd0>)
 80010f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010f6:	f003 0301 	and.w	r3, r3, #1
 80010fa:	60bb      	str	r3, [r7, #8]
 80010fc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010fe:	2300      	movs	r3, #0
 8001100:	607b      	str	r3, [r7, #4]
 8001102:	4b18      	ldr	r3, [pc, #96]	@ (8001164 <MX_GPIO_Init+0xd0>)
 8001104:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001106:	4a17      	ldr	r2, [pc, #92]	@ (8001164 <MX_GPIO_Init+0xd0>)
 8001108:	f043 0302 	orr.w	r3, r3, #2
 800110c:	6313      	str	r3, [r2, #48]	@ 0x30
 800110e:	4b15      	ldr	r3, [pc, #84]	@ (8001164 <MX_GPIO_Init+0xd0>)
 8001110:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001112:	f003 0302 	and.w	r3, r3, #2
 8001116:	607b      	str	r3, [r7, #4]
 8001118:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800111a:	2200      	movs	r2, #0
 800111c:	2120      	movs	r1, #32
 800111e:	4812      	ldr	r0, [pc, #72]	@ (8001168 <MX_GPIO_Init+0xd4>)
 8001120:	f001 f820 	bl	8002164 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001124:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001128:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800112a:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800112e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001130:	2300      	movs	r3, #0
 8001132:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001134:	f107 0314 	add.w	r3, r7, #20
 8001138:	4619      	mov	r1, r3
 800113a:	480c      	ldr	r0, [pc, #48]	@ (800116c <MX_GPIO_Init+0xd8>)
 800113c:	f000 fe8e 	bl	8001e5c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001140:	2320      	movs	r3, #32
 8001142:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001144:	2301      	movs	r3, #1
 8001146:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001148:	2300      	movs	r3, #0
 800114a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800114c:	2300      	movs	r3, #0
 800114e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001150:	f107 0314 	add.w	r3, r7, #20
 8001154:	4619      	mov	r1, r3
 8001156:	4804      	ldr	r0, [pc, #16]	@ (8001168 <MX_GPIO_Init+0xd4>)
 8001158:	f000 fe80 	bl	8001e5c <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 800115c:	bf00      	nop
 800115e:	3728      	adds	r7, #40	@ 0x28
 8001160:	46bd      	mov	sp, r7
 8001162:	bd80      	pop	{r7, pc}
 8001164:	40023800 	.word	0x40023800
 8001168:	40020000 	.word	0x40020000
 800116c:	40020800 	.word	0x40020800

08001170 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001170:	b480      	push	{r7}
 8001172:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001174:	b672      	cpsid	i
}
 8001176:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001178:	bf00      	nop
 800117a:	e7fd      	b.n	8001178 <Error_Handler+0x8>

0800117c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800117c:	b480      	push	{r7}
 800117e:	b083      	sub	sp, #12
 8001180:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001182:	2300      	movs	r3, #0
 8001184:	607b      	str	r3, [r7, #4]
 8001186:	4b10      	ldr	r3, [pc, #64]	@ (80011c8 <HAL_MspInit+0x4c>)
 8001188:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800118a:	4a0f      	ldr	r2, [pc, #60]	@ (80011c8 <HAL_MspInit+0x4c>)
 800118c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001190:	6453      	str	r3, [r2, #68]	@ 0x44
 8001192:	4b0d      	ldr	r3, [pc, #52]	@ (80011c8 <HAL_MspInit+0x4c>)
 8001194:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001196:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800119a:	607b      	str	r3, [r7, #4]
 800119c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800119e:	2300      	movs	r3, #0
 80011a0:	603b      	str	r3, [r7, #0]
 80011a2:	4b09      	ldr	r3, [pc, #36]	@ (80011c8 <HAL_MspInit+0x4c>)
 80011a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011a6:	4a08      	ldr	r2, [pc, #32]	@ (80011c8 <HAL_MspInit+0x4c>)
 80011a8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80011ac:	6413      	str	r3, [r2, #64]	@ 0x40
 80011ae:	4b06      	ldr	r3, [pc, #24]	@ (80011c8 <HAL_MspInit+0x4c>)
 80011b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011b2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80011b6:	603b      	str	r3, [r7, #0]
 80011b8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011ba:	bf00      	nop
 80011bc:	370c      	adds	r7, #12
 80011be:	46bd      	mov	sp, r7
 80011c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c4:	4770      	bx	lr
 80011c6:	bf00      	nop
 80011c8:	40023800 	.word	0x40023800

080011cc <HAL_TIM_PWM_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_pwm: TIM_PWM handle pointer
  * @retval None
  */
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b084      	sub	sp, #16
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	4a26      	ldr	r2, [pc, #152]	@ (8001274 <HAL_TIM_PWM_MspInit+0xa8>)
 80011da:	4293      	cmp	r3, r2
 80011dc:	d145      	bne.n	800126a <HAL_TIM_PWM_MspInit+0x9e>
  {
    /* USER CODE BEGIN TIM3_MspInit 0 */

    /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80011de:	2300      	movs	r3, #0
 80011e0:	60fb      	str	r3, [r7, #12]
 80011e2:	4b25      	ldr	r3, [pc, #148]	@ (8001278 <HAL_TIM_PWM_MspInit+0xac>)
 80011e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011e6:	4a24      	ldr	r2, [pc, #144]	@ (8001278 <HAL_TIM_PWM_MspInit+0xac>)
 80011e8:	f043 0302 	orr.w	r3, r3, #2
 80011ec:	6413      	str	r3, [r2, #64]	@ 0x40
 80011ee:	4b22      	ldr	r3, [pc, #136]	@ (8001278 <HAL_TIM_PWM_MspInit+0xac>)
 80011f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011f2:	f003 0302 	and.w	r3, r3, #2
 80011f6:	60fb      	str	r3, [r7, #12]
 80011f8:	68fb      	ldr	r3, [r7, #12]

    /* TIM3 DMA Init */
    /* TIM3_CH1_TRIG Init */
    hdma_tim3_ch1_trig.Instance = DMA1_Stream4;
 80011fa:	4b20      	ldr	r3, [pc, #128]	@ (800127c <HAL_TIM_PWM_MspInit+0xb0>)
 80011fc:	4a20      	ldr	r2, [pc, #128]	@ (8001280 <HAL_TIM_PWM_MspInit+0xb4>)
 80011fe:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch1_trig.Init.Channel = DMA_CHANNEL_5;
 8001200:	4b1e      	ldr	r3, [pc, #120]	@ (800127c <HAL_TIM_PWM_MspInit+0xb0>)
 8001202:	f04f 6220 	mov.w	r2, #167772160	@ 0xa000000
 8001206:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch1_trig.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001208:	4b1c      	ldr	r3, [pc, #112]	@ (800127c <HAL_TIM_PWM_MspInit+0xb0>)
 800120a:	2240      	movs	r2, #64	@ 0x40
 800120c:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch1_trig.Init.PeriphInc = DMA_PINC_DISABLE;
 800120e:	4b1b      	ldr	r3, [pc, #108]	@ (800127c <HAL_TIM_PWM_MspInit+0xb0>)
 8001210:	2200      	movs	r2, #0
 8001212:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch1_trig.Init.MemInc = DMA_MINC_ENABLE;
 8001214:	4b19      	ldr	r3, [pc, #100]	@ (800127c <HAL_TIM_PWM_MspInit+0xb0>)
 8001216:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800121a:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch1_trig.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800121c:	4b17      	ldr	r3, [pc, #92]	@ (800127c <HAL_TIM_PWM_MspInit+0xb0>)
 800121e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001222:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch1_trig.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001224:	4b15      	ldr	r3, [pc, #84]	@ (800127c <HAL_TIM_PWM_MspInit+0xb0>)
 8001226:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800122a:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch1_trig.Init.Mode = DMA_CIRCULAR;
 800122c:	4b13      	ldr	r3, [pc, #76]	@ (800127c <HAL_TIM_PWM_MspInit+0xb0>)
 800122e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001232:	61da      	str	r2, [r3, #28]
    hdma_tim3_ch1_trig.Init.Priority = DMA_PRIORITY_HIGH;
 8001234:	4b11      	ldr	r3, [pc, #68]	@ (800127c <HAL_TIM_PWM_MspInit+0xb0>)
 8001236:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800123a:	621a      	str	r2, [r3, #32]
    hdma_tim3_ch1_trig.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800123c:	4b0f      	ldr	r3, [pc, #60]	@ (800127c <HAL_TIM_PWM_MspInit+0xb0>)
 800123e:	2200      	movs	r2, #0
 8001240:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_tim3_ch1_trig) != HAL_OK)
 8001242:	480e      	ldr	r0, [pc, #56]	@ (800127c <HAL_TIM_PWM_MspInit+0xb0>)
 8001244:	f000 fa9a 	bl	800177c <HAL_DMA_Init>
 8001248:	4603      	mov	r3, r0
 800124a:	2b00      	cmp	r3, #0
 800124c:	d001      	beq.n	8001252 <HAL_TIM_PWM_MspInit+0x86>
    {
      Error_Handler();
 800124e:	f7ff ff8f 	bl	8001170 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one stream to perform all the requested DMAs. */
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC1],hdma_tim3_ch1_trig);
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	4a09      	ldr	r2, [pc, #36]	@ (800127c <HAL_TIM_PWM_MspInit+0xb0>)
 8001256:	625a      	str	r2, [r3, #36]	@ 0x24
 8001258:	4a08      	ldr	r2, [pc, #32]	@ (800127c <HAL_TIM_PWM_MspInit+0xb0>)
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	6393      	str	r3, [r2, #56]	@ 0x38
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_TRIGGER],hdma_tim3_ch1_trig);
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	4a06      	ldr	r2, [pc, #24]	@ (800127c <HAL_TIM_PWM_MspInit+0xb0>)
 8001262:	639a      	str	r2, [r3, #56]	@ 0x38
 8001264:	4a05      	ldr	r2, [pc, #20]	@ (800127c <HAL_TIM_PWM_MspInit+0xb0>)
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USER CODE END TIM3_MspInit 1 */

  }

}
 800126a:	bf00      	nop
 800126c:	3710      	adds	r7, #16
 800126e:	46bd      	mov	sp, r7
 8001270:	bd80      	pop	{r7, pc}
 8001272:	bf00      	nop
 8001274:	40000400 	.word	0x40000400
 8001278:	40023800 	.word	0x40023800
 800127c:	20000070 	.word	0x20000070
 8001280:	40026070 	.word	0x40026070

08001284 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	b088      	sub	sp, #32
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800128c:	f107 030c 	add.w	r3, r7, #12
 8001290:	2200      	movs	r2, #0
 8001292:	601a      	str	r2, [r3, #0]
 8001294:	605a      	str	r2, [r3, #4]
 8001296:	609a      	str	r2, [r3, #8]
 8001298:	60da      	str	r2, [r3, #12]
 800129a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	4a12      	ldr	r2, [pc, #72]	@ (80012ec <HAL_TIM_MspPostInit+0x68>)
 80012a2:	4293      	cmp	r3, r2
 80012a4:	d11d      	bne.n	80012e2 <HAL_TIM_MspPostInit+0x5e>
  {
    /* USER CODE BEGIN TIM3_MspPostInit 0 */

    /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012a6:	2300      	movs	r3, #0
 80012a8:	60bb      	str	r3, [r7, #8]
 80012aa:	4b11      	ldr	r3, [pc, #68]	@ (80012f0 <HAL_TIM_MspPostInit+0x6c>)
 80012ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012ae:	4a10      	ldr	r2, [pc, #64]	@ (80012f0 <HAL_TIM_MspPostInit+0x6c>)
 80012b0:	f043 0301 	orr.w	r3, r3, #1
 80012b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80012b6:	4b0e      	ldr	r3, [pc, #56]	@ (80012f0 <HAL_TIM_MspPostInit+0x6c>)
 80012b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012ba:	f003 0301 	and.w	r3, r3, #1
 80012be:	60bb      	str	r3, [r7, #8]
 80012c0:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80012c2:	2340      	movs	r3, #64	@ 0x40
 80012c4:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012c6:	2302      	movs	r3, #2
 80012c8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ca:	2300      	movs	r3, #0
 80012cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012ce:	2300      	movs	r3, #0
 80012d0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80012d2:	2302      	movs	r3, #2
 80012d4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012d6:	f107 030c 	add.w	r3, r7, #12
 80012da:	4619      	mov	r1, r3
 80012dc:	4805      	ldr	r0, [pc, #20]	@ (80012f4 <HAL_TIM_MspPostInit+0x70>)
 80012de:	f000 fdbd 	bl	8001e5c <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM3_MspPostInit 1 */

    /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80012e2:	bf00      	nop
 80012e4:	3720      	adds	r7, #32
 80012e6:	46bd      	mov	sp, r7
 80012e8:	bd80      	pop	{r7, pc}
 80012ea:	bf00      	nop
 80012ec:	40000400 	.word	0x40000400
 80012f0:	40023800 	.word	0x40023800
 80012f4:	40020000 	.word	0x40020000

080012f8 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b08a      	sub	sp, #40	@ 0x28
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001300:	f107 0314 	add.w	r3, r7, #20
 8001304:	2200      	movs	r2, #0
 8001306:	601a      	str	r2, [r3, #0]
 8001308:	605a      	str	r2, [r3, #4]
 800130a:	609a      	str	r2, [r3, #8]
 800130c:	60da      	str	r2, [r3, #12]
 800130e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	4a19      	ldr	r2, [pc, #100]	@ (800137c <HAL_UART_MspInit+0x84>)
 8001316:	4293      	cmp	r3, r2
 8001318:	d12b      	bne.n	8001372 <HAL_UART_MspInit+0x7a>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800131a:	2300      	movs	r3, #0
 800131c:	613b      	str	r3, [r7, #16]
 800131e:	4b18      	ldr	r3, [pc, #96]	@ (8001380 <HAL_UART_MspInit+0x88>)
 8001320:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001322:	4a17      	ldr	r2, [pc, #92]	@ (8001380 <HAL_UART_MspInit+0x88>)
 8001324:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001328:	6413      	str	r3, [r2, #64]	@ 0x40
 800132a:	4b15      	ldr	r3, [pc, #84]	@ (8001380 <HAL_UART_MspInit+0x88>)
 800132c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800132e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001332:	613b      	str	r3, [r7, #16]
 8001334:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001336:	2300      	movs	r3, #0
 8001338:	60fb      	str	r3, [r7, #12]
 800133a:	4b11      	ldr	r3, [pc, #68]	@ (8001380 <HAL_UART_MspInit+0x88>)
 800133c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800133e:	4a10      	ldr	r2, [pc, #64]	@ (8001380 <HAL_UART_MspInit+0x88>)
 8001340:	f043 0301 	orr.w	r3, r3, #1
 8001344:	6313      	str	r3, [r2, #48]	@ 0x30
 8001346:	4b0e      	ldr	r3, [pc, #56]	@ (8001380 <HAL_UART_MspInit+0x88>)
 8001348:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800134a:	f003 0301 	and.w	r3, r3, #1
 800134e:	60fb      	str	r3, [r7, #12]
 8001350:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001352:	230c      	movs	r3, #12
 8001354:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001356:	2302      	movs	r3, #2
 8001358:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800135a:	2300      	movs	r3, #0
 800135c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800135e:	2300      	movs	r3, #0
 8001360:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001362:	2307      	movs	r3, #7
 8001364:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001366:	f107 0314 	add.w	r3, r7, #20
 800136a:	4619      	mov	r1, r3
 800136c:	4805      	ldr	r0, [pc, #20]	@ (8001384 <HAL_UART_MspInit+0x8c>)
 800136e:	f000 fd75 	bl	8001e5c <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8001372:	bf00      	nop
 8001374:	3728      	adds	r7, #40	@ 0x28
 8001376:	46bd      	mov	sp, r7
 8001378:	bd80      	pop	{r7, pc}
 800137a:	bf00      	nop
 800137c:	40004400 	.word	0x40004400
 8001380:	40023800 	.word	0x40023800
 8001384:	40020000 	.word	0x40020000

08001388 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001388:	b480      	push	{r7}
 800138a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800138c:	bf00      	nop
 800138e:	e7fd      	b.n	800138c <NMI_Handler+0x4>

08001390 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001390:	b480      	push	{r7}
 8001392:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001394:	bf00      	nop
 8001396:	e7fd      	b.n	8001394 <HardFault_Handler+0x4>

08001398 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001398:	b480      	push	{r7}
 800139a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800139c:	bf00      	nop
 800139e:	e7fd      	b.n	800139c <MemManage_Handler+0x4>

080013a0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80013a0:	b480      	push	{r7}
 80013a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013a4:	bf00      	nop
 80013a6:	e7fd      	b.n	80013a4 <BusFault_Handler+0x4>

080013a8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80013a8:	b480      	push	{r7}
 80013aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80013ac:	bf00      	nop
 80013ae:	e7fd      	b.n	80013ac <UsageFault_Handler+0x4>

080013b0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80013b0:	b480      	push	{r7}
 80013b2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80013b4:	bf00      	nop
 80013b6:	46bd      	mov	sp, r7
 80013b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013bc:	4770      	bx	lr

080013be <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80013be:	b480      	push	{r7}
 80013c0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80013c2:	bf00      	nop
 80013c4:	46bd      	mov	sp, r7
 80013c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ca:	4770      	bx	lr

080013cc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80013cc:	b480      	push	{r7}
 80013ce:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80013d0:	bf00      	nop
 80013d2:	46bd      	mov	sp, r7
 80013d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d8:	4770      	bx	lr

080013da <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80013da:	b580      	push	{r7, lr}
 80013dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80013de:	f000 f89b 	bl	8001518 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80013e2:	bf00      	nop
 80013e4:	bd80      	pop	{r7, pc}
	...

080013e8 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch1_trig);
 80013ec:	4802      	ldr	r0, [pc, #8]	@ (80013f8 <DMA1_Stream4_IRQHandler+0x10>)
 80013ee:	f000 facb 	bl	8001988 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 80013f2:	bf00      	nop
 80013f4:	bd80      	pop	{r7, pc}
 80013f6:	bf00      	nop
 80013f8:	20000070 	.word	0x20000070

080013fc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80013fc:	b480      	push	{r7}
 80013fe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001400:	4b06      	ldr	r3, [pc, #24]	@ (800141c <SystemInit+0x20>)
 8001402:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001406:	4a05      	ldr	r2, [pc, #20]	@ (800141c <SystemInit+0x20>)
 8001408:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800140c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001410:	bf00      	nop
 8001412:	46bd      	mov	sp, r7
 8001414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001418:	4770      	bx	lr
 800141a:	bf00      	nop
 800141c:	e000ed00 	.word	0xe000ed00

08001420 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001420:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001458 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001424:	f7ff ffea 	bl	80013fc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001428:	480c      	ldr	r0, [pc, #48]	@ (800145c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800142a:	490d      	ldr	r1, [pc, #52]	@ (8001460 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800142c:	4a0d      	ldr	r2, [pc, #52]	@ (8001464 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800142e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001430:	e002      	b.n	8001438 <LoopCopyDataInit>

08001432 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001432:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001434:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001436:	3304      	adds	r3, #4

08001438 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001438:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800143a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800143c:	d3f9      	bcc.n	8001432 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800143e:	4a0a      	ldr	r2, [pc, #40]	@ (8001468 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001440:	4c0a      	ldr	r4, [pc, #40]	@ (800146c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001442:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001444:	e001      	b.n	800144a <LoopFillZerobss>

08001446 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001446:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001448:	3204      	adds	r2, #4

0800144a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800144a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800144c:	d3fb      	bcc.n	8001446 <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 800144e:	f002 fc5f 	bl	8003d10 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001452:	f7ff fc95 	bl	8000d80 <main>
  bx  lr    
 8001456:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001458:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 800145c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001460:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001464:	08004bd0 	.word	0x08004bd0
  ldr r2, =_sbss
 8001468:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 800146c:	2000011c 	.word	0x2000011c

08001470 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001470:	e7fe      	b.n	8001470 <ADC_IRQHandler>
	...

08001474 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001478:	4b0e      	ldr	r3, [pc, #56]	@ (80014b4 <HAL_Init+0x40>)
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	4a0d      	ldr	r2, [pc, #52]	@ (80014b4 <HAL_Init+0x40>)
 800147e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001482:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001484:	4b0b      	ldr	r3, [pc, #44]	@ (80014b4 <HAL_Init+0x40>)
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	4a0a      	ldr	r2, [pc, #40]	@ (80014b4 <HAL_Init+0x40>)
 800148a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800148e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001490:	4b08      	ldr	r3, [pc, #32]	@ (80014b4 <HAL_Init+0x40>)
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	4a07      	ldr	r2, [pc, #28]	@ (80014b4 <HAL_Init+0x40>)
 8001496:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800149a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800149c:	2003      	movs	r0, #3
 800149e:	f000 f92b 	bl	80016f8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80014a2:	2000      	movs	r0, #0
 80014a4:	f000 f808 	bl	80014b8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80014a8:	f7ff fe68 	bl	800117c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80014ac:	2300      	movs	r3, #0
}
 80014ae:	4618      	mov	r0, r3
 80014b0:	bd80      	pop	{r7, pc}
 80014b2:	bf00      	nop
 80014b4:	40023c00 	.word	0x40023c00

080014b8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b082      	sub	sp, #8
 80014bc:	af00      	add	r7, sp, #0
 80014be:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80014c0:	4b12      	ldr	r3, [pc, #72]	@ (800150c <HAL_InitTick+0x54>)
 80014c2:	681a      	ldr	r2, [r3, #0]
 80014c4:	4b12      	ldr	r3, [pc, #72]	@ (8001510 <HAL_InitTick+0x58>)
 80014c6:	781b      	ldrb	r3, [r3, #0]
 80014c8:	4619      	mov	r1, r3
 80014ca:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80014ce:	fbb3 f3f1 	udiv	r3, r3, r1
 80014d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80014d6:	4618      	mov	r0, r3
 80014d8:	f000 f943 	bl	8001762 <HAL_SYSTICK_Config>
 80014dc:	4603      	mov	r3, r0
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d001      	beq.n	80014e6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80014e2:	2301      	movs	r3, #1
 80014e4:	e00e      	b.n	8001504 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	2b0f      	cmp	r3, #15
 80014ea:	d80a      	bhi.n	8001502 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80014ec:	2200      	movs	r2, #0
 80014ee:	6879      	ldr	r1, [r7, #4]
 80014f0:	f04f 30ff 	mov.w	r0, #4294967295
 80014f4:	f000 f90b 	bl	800170e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80014f8:	4a06      	ldr	r2, [pc, #24]	@ (8001514 <HAL_InitTick+0x5c>)
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80014fe:	2300      	movs	r3, #0
 8001500:	e000      	b.n	8001504 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001502:	2301      	movs	r3, #1
}
 8001504:	4618      	mov	r0, r3
 8001506:	3708      	adds	r7, #8
 8001508:	46bd      	mov	sp, r7
 800150a:	bd80      	pop	{r7, pc}
 800150c:	20000000 	.word	0x20000000
 8001510:	20000008 	.word	0x20000008
 8001514:	20000004 	.word	0x20000004

08001518 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001518:	b480      	push	{r7}
 800151a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800151c:	4b06      	ldr	r3, [pc, #24]	@ (8001538 <HAL_IncTick+0x20>)
 800151e:	781b      	ldrb	r3, [r3, #0]
 8001520:	461a      	mov	r2, r3
 8001522:	4b06      	ldr	r3, [pc, #24]	@ (800153c <HAL_IncTick+0x24>)
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	4413      	add	r3, r2
 8001528:	4a04      	ldr	r2, [pc, #16]	@ (800153c <HAL_IncTick+0x24>)
 800152a:	6013      	str	r3, [r2, #0]
}
 800152c:	bf00      	nop
 800152e:	46bd      	mov	sp, r7
 8001530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001534:	4770      	bx	lr
 8001536:	bf00      	nop
 8001538:	20000008 	.word	0x20000008
 800153c:	20000118 	.word	0x20000118

08001540 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001540:	b480      	push	{r7}
 8001542:	af00      	add	r7, sp, #0
  return uwTick;
 8001544:	4b03      	ldr	r3, [pc, #12]	@ (8001554 <HAL_GetTick+0x14>)
 8001546:	681b      	ldr	r3, [r3, #0]
}
 8001548:	4618      	mov	r0, r3
 800154a:	46bd      	mov	sp, r7
 800154c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001550:	4770      	bx	lr
 8001552:	bf00      	nop
 8001554:	20000118 	.word	0x20000118

08001558 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001558:	b480      	push	{r7}
 800155a:	b085      	sub	sp, #20
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	f003 0307 	and.w	r3, r3, #7
 8001566:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001568:	4b0c      	ldr	r3, [pc, #48]	@ (800159c <__NVIC_SetPriorityGrouping+0x44>)
 800156a:	68db      	ldr	r3, [r3, #12]
 800156c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800156e:	68ba      	ldr	r2, [r7, #8]
 8001570:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001574:	4013      	ands	r3, r2
 8001576:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800157c:	68bb      	ldr	r3, [r7, #8]
 800157e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001580:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001584:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001588:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800158a:	4a04      	ldr	r2, [pc, #16]	@ (800159c <__NVIC_SetPriorityGrouping+0x44>)
 800158c:	68bb      	ldr	r3, [r7, #8]
 800158e:	60d3      	str	r3, [r2, #12]
}
 8001590:	bf00      	nop
 8001592:	3714      	adds	r7, #20
 8001594:	46bd      	mov	sp, r7
 8001596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159a:	4770      	bx	lr
 800159c:	e000ed00 	.word	0xe000ed00

080015a0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80015a0:	b480      	push	{r7}
 80015a2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80015a4:	4b04      	ldr	r3, [pc, #16]	@ (80015b8 <__NVIC_GetPriorityGrouping+0x18>)
 80015a6:	68db      	ldr	r3, [r3, #12]
 80015a8:	0a1b      	lsrs	r3, r3, #8
 80015aa:	f003 0307 	and.w	r3, r3, #7
}
 80015ae:	4618      	mov	r0, r3
 80015b0:	46bd      	mov	sp, r7
 80015b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b6:	4770      	bx	lr
 80015b8:	e000ed00 	.word	0xe000ed00

080015bc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015bc:	b480      	push	{r7}
 80015be:	b083      	sub	sp, #12
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	4603      	mov	r3, r0
 80015c4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	db0b      	blt.n	80015e6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80015ce:	79fb      	ldrb	r3, [r7, #7]
 80015d0:	f003 021f 	and.w	r2, r3, #31
 80015d4:	4907      	ldr	r1, [pc, #28]	@ (80015f4 <__NVIC_EnableIRQ+0x38>)
 80015d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015da:	095b      	lsrs	r3, r3, #5
 80015dc:	2001      	movs	r0, #1
 80015de:	fa00 f202 	lsl.w	r2, r0, r2
 80015e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80015e6:	bf00      	nop
 80015e8:	370c      	adds	r7, #12
 80015ea:	46bd      	mov	sp, r7
 80015ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f0:	4770      	bx	lr
 80015f2:	bf00      	nop
 80015f4:	e000e100 	.word	0xe000e100

080015f8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80015f8:	b480      	push	{r7}
 80015fa:	b083      	sub	sp, #12
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	4603      	mov	r3, r0
 8001600:	6039      	str	r1, [r7, #0]
 8001602:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001604:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001608:	2b00      	cmp	r3, #0
 800160a:	db0a      	blt.n	8001622 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800160c:	683b      	ldr	r3, [r7, #0]
 800160e:	b2da      	uxtb	r2, r3
 8001610:	490c      	ldr	r1, [pc, #48]	@ (8001644 <__NVIC_SetPriority+0x4c>)
 8001612:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001616:	0112      	lsls	r2, r2, #4
 8001618:	b2d2      	uxtb	r2, r2
 800161a:	440b      	add	r3, r1
 800161c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001620:	e00a      	b.n	8001638 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001622:	683b      	ldr	r3, [r7, #0]
 8001624:	b2da      	uxtb	r2, r3
 8001626:	4908      	ldr	r1, [pc, #32]	@ (8001648 <__NVIC_SetPriority+0x50>)
 8001628:	79fb      	ldrb	r3, [r7, #7]
 800162a:	f003 030f 	and.w	r3, r3, #15
 800162e:	3b04      	subs	r3, #4
 8001630:	0112      	lsls	r2, r2, #4
 8001632:	b2d2      	uxtb	r2, r2
 8001634:	440b      	add	r3, r1
 8001636:	761a      	strb	r2, [r3, #24]
}
 8001638:	bf00      	nop
 800163a:	370c      	adds	r7, #12
 800163c:	46bd      	mov	sp, r7
 800163e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001642:	4770      	bx	lr
 8001644:	e000e100 	.word	0xe000e100
 8001648:	e000ed00 	.word	0xe000ed00

0800164c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800164c:	b480      	push	{r7}
 800164e:	b089      	sub	sp, #36	@ 0x24
 8001650:	af00      	add	r7, sp, #0
 8001652:	60f8      	str	r0, [r7, #12]
 8001654:	60b9      	str	r1, [r7, #8]
 8001656:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	f003 0307 	and.w	r3, r3, #7
 800165e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001660:	69fb      	ldr	r3, [r7, #28]
 8001662:	f1c3 0307 	rsb	r3, r3, #7
 8001666:	2b04      	cmp	r3, #4
 8001668:	bf28      	it	cs
 800166a:	2304      	movcs	r3, #4
 800166c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800166e:	69fb      	ldr	r3, [r7, #28]
 8001670:	3304      	adds	r3, #4
 8001672:	2b06      	cmp	r3, #6
 8001674:	d902      	bls.n	800167c <NVIC_EncodePriority+0x30>
 8001676:	69fb      	ldr	r3, [r7, #28]
 8001678:	3b03      	subs	r3, #3
 800167a:	e000      	b.n	800167e <NVIC_EncodePriority+0x32>
 800167c:	2300      	movs	r3, #0
 800167e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001680:	f04f 32ff 	mov.w	r2, #4294967295
 8001684:	69bb      	ldr	r3, [r7, #24]
 8001686:	fa02 f303 	lsl.w	r3, r2, r3
 800168a:	43da      	mvns	r2, r3
 800168c:	68bb      	ldr	r3, [r7, #8]
 800168e:	401a      	ands	r2, r3
 8001690:	697b      	ldr	r3, [r7, #20]
 8001692:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001694:	f04f 31ff 	mov.w	r1, #4294967295
 8001698:	697b      	ldr	r3, [r7, #20]
 800169a:	fa01 f303 	lsl.w	r3, r1, r3
 800169e:	43d9      	mvns	r1, r3
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016a4:	4313      	orrs	r3, r2
         );
}
 80016a6:	4618      	mov	r0, r3
 80016a8:	3724      	adds	r7, #36	@ 0x24
 80016aa:	46bd      	mov	sp, r7
 80016ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b0:	4770      	bx	lr
	...

080016b4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b082      	sub	sp, #8
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	3b01      	subs	r3, #1
 80016c0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80016c4:	d301      	bcc.n	80016ca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80016c6:	2301      	movs	r3, #1
 80016c8:	e00f      	b.n	80016ea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80016ca:	4a0a      	ldr	r2, [pc, #40]	@ (80016f4 <SysTick_Config+0x40>)
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	3b01      	subs	r3, #1
 80016d0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80016d2:	210f      	movs	r1, #15
 80016d4:	f04f 30ff 	mov.w	r0, #4294967295
 80016d8:	f7ff ff8e 	bl	80015f8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80016dc:	4b05      	ldr	r3, [pc, #20]	@ (80016f4 <SysTick_Config+0x40>)
 80016de:	2200      	movs	r2, #0
 80016e0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80016e2:	4b04      	ldr	r3, [pc, #16]	@ (80016f4 <SysTick_Config+0x40>)
 80016e4:	2207      	movs	r2, #7
 80016e6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80016e8:	2300      	movs	r3, #0
}
 80016ea:	4618      	mov	r0, r3
 80016ec:	3708      	adds	r7, #8
 80016ee:	46bd      	mov	sp, r7
 80016f0:	bd80      	pop	{r7, pc}
 80016f2:	bf00      	nop
 80016f4:	e000e010 	.word	0xe000e010

080016f8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b082      	sub	sp, #8
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001700:	6878      	ldr	r0, [r7, #4]
 8001702:	f7ff ff29 	bl	8001558 <__NVIC_SetPriorityGrouping>
}
 8001706:	bf00      	nop
 8001708:	3708      	adds	r7, #8
 800170a:	46bd      	mov	sp, r7
 800170c:	bd80      	pop	{r7, pc}

0800170e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800170e:	b580      	push	{r7, lr}
 8001710:	b086      	sub	sp, #24
 8001712:	af00      	add	r7, sp, #0
 8001714:	4603      	mov	r3, r0
 8001716:	60b9      	str	r1, [r7, #8]
 8001718:	607a      	str	r2, [r7, #4]
 800171a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800171c:	2300      	movs	r3, #0
 800171e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001720:	f7ff ff3e 	bl	80015a0 <__NVIC_GetPriorityGrouping>
 8001724:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001726:	687a      	ldr	r2, [r7, #4]
 8001728:	68b9      	ldr	r1, [r7, #8]
 800172a:	6978      	ldr	r0, [r7, #20]
 800172c:	f7ff ff8e 	bl	800164c <NVIC_EncodePriority>
 8001730:	4602      	mov	r2, r0
 8001732:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001736:	4611      	mov	r1, r2
 8001738:	4618      	mov	r0, r3
 800173a:	f7ff ff5d 	bl	80015f8 <__NVIC_SetPriority>
}
 800173e:	bf00      	nop
 8001740:	3718      	adds	r7, #24
 8001742:	46bd      	mov	sp, r7
 8001744:	bd80      	pop	{r7, pc}

08001746 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001746:	b580      	push	{r7, lr}
 8001748:	b082      	sub	sp, #8
 800174a:	af00      	add	r7, sp, #0
 800174c:	4603      	mov	r3, r0
 800174e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001750:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001754:	4618      	mov	r0, r3
 8001756:	f7ff ff31 	bl	80015bc <__NVIC_EnableIRQ>
}
 800175a:	bf00      	nop
 800175c:	3708      	adds	r7, #8
 800175e:	46bd      	mov	sp, r7
 8001760:	bd80      	pop	{r7, pc}

08001762 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001762:	b580      	push	{r7, lr}
 8001764:	b082      	sub	sp, #8
 8001766:	af00      	add	r7, sp, #0
 8001768:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800176a:	6878      	ldr	r0, [r7, #4]
 800176c:	f7ff ffa2 	bl	80016b4 <SysTick_Config>
 8001770:	4603      	mov	r3, r0
}
 8001772:	4618      	mov	r0, r3
 8001774:	3708      	adds	r7, #8
 8001776:	46bd      	mov	sp, r7
 8001778:	bd80      	pop	{r7, pc}
	...

0800177c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	b086      	sub	sp, #24
 8001780:	af00      	add	r7, sp, #0
 8001782:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001784:	2300      	movs	r3, #0
 8001786:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001788:	f7ff feda 	bl	8001540 <HAL_GetTick>
 800178c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	2b00      	cmp	r3, #0
 8001792:	d101      	bne.n	8001798 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001794:	2301      	movs	r3, #1
 8001796:	e099      	b.n	80018cc <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	2202      	movs	r2, #2
 800179c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	2200      	movs	r2, #0
 80017a4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	681a      	ldr	r2, [r3, #0]
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	f022 0201 	bic.w	r2, r2, #1
 80017b6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80017b8:	e00f      	b.n	80017da <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80017ba:	f7ff fec1 	bl	8001540 <HAL_GetTick>
 80017be:	4602      	mov	r2, r0
 80017c0:	693b      	ldr	r3, [r7, #16]
 80017c2:	1ad3      	subs	r3, r2, r3
 80017c4:	2b05      	cmp	r3, #5
 80017c6:	d908      	bls.n	80017da <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	2220      	movs	r2, #32
 80017cc:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	2203      	movs	r2, #3
 80017d2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 80017d6:	2303      	movs	r3, #3
 80017d8:	e078      	b.n	80018cc <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	f003 0301 	and.w	r3, r3, #1
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d1e8      	bne.n	80017ba <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80017f0:	697a      	ldr	r2, [r7, #20]
 80017f2:	4b38      	ldr	r3, [pc, #224]	@ (80018d4 <HAL_DMA_Init+0x158>)
 80017f4:	4013      	ands	r3, r2
 80017f6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	685a      	ldr	r2, [r3, #4]
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	689b      	ldr	r3, [r3, #8]
 8001800:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001806:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	691b      	ldr	r3, [r3, #16]
 800180c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001812:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	699b      	ldr	r3, [r3, #24]
 8001818:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800181e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	6a1b      	ldr	r3, [r3, #32]
 8001824:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001826:	697a      	ldr	r2, [r7, #20]
 8001828:	4313      	orrs	r3, r2
 800182a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001830:	2b04      	cmp	r3, #4
 8001832:	d107      	bne.n	8001844 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800183c:	4313      	orrs	r3, r2
 800183e:	697a      	ldr	r2, [r7, #20]
 8001840:	4313      	orrs	r3, r2
 8001842:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	697a      	ldr	r2, [r7, #20]
 800184a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	695b      	ldr	r3, [r3, #20]
 8001852:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001854:	697b      	ldr	r3, [r7, #20]
 8001856:	f023 0307 	bic.w	r3, r3, #7
 800185a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001860:	697a      	ldr	r2, [r7, #20]
 8001862:	4313      	orrs	r3, r2
 8001864:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800186a:	2b04      	cmp	r3, #4
 800186c:	d117      	bne.n	800189e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001872:	697a      	ldr	r2, [r7, #20]
 8001874:	4313      	orrs	r3, r2
 8001876:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800187c:	2b00      	cmp	r3, #0
 800187e:	d00e      	beq.n	800189e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001880:	6878      	ldr	r0, [r7, #4]
 8001882:	f000 fa6f 	bl	8001d64 <DMA_CheckFifoParam>
 8001886:	4603      	mov	r3, r0
 8001888:	2b00      	cmp	r3, #0
 800188a:	d008      	beq.n	800189e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	2240      	movs	r2, #64	@ 0x40
 8001890:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	2201      	movs	r2, #1
 8001896:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 800189a:	2301      	movs	r3, #1
 800189c:	e016      	b.n	80018cc <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	697a      	ldr	r2, [r7, #20]
 80018a4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80018a6:	6878      	ldr	r0, [r7, #4]
 80018a8:	f000 fa26 	bl	8001cf8 <DMA_CalcBaseAndBitshift>
 80018ac:	4603      	mov	r3, r0
 80018ae:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80018b4:	223f      	movs	r2, #63	@ 0x3f
 80018b6:	409a      	lsls	r2, r3
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	2200      	movs	r2, #0
 80018c0:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	2201      	movs	r2, #1
 80018c6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80018ca:	2300      	movs	r3, #0
}
 80018cc:	4618      	mov	r0, r3
 80018ce:	3718      	adds	r7, #24
 80018d0:	46bd      	mov	sp, r7
 80018d2:	bd80      	pop	{r7, pc}
 80018d4:	f010803f 	.word	0xf010803f

080018d8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	b086      	sub	sp, #24
 80018dc:	af00      	add	r7, sp, #0
 80018de:	60f8      	str	r0, [r7, #12]
 80018e0:	60b9      	str	r1, [r7, #8]
 80018e2:	607a      	str	r2, [r7, #4]
 80018e4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80018e6:	2300      	movs	r3, #0
 80018e8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80018ee:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80018f6:	2b01      	cmp	r3, #1
 80018f8:	d101      	bne.n	80018fe <HAL_DMA_Start_IT+0x26>
 80018fa:	2302      	movs	r3, #2
 80018fc:	e040      	b.n	8001980 <HAL_DMA_Start_IT+0xa8>
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	2201      	movs	r2, #1
 8001902:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800190c:	b2db      	uxtb	r3, r3
 800190e:	2b01      	cmp	r3, #1
 8001910:	d12f      	bne.n	8001972 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	2202      	movs	r2, #2
 8001916:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	2200      	movs	r2, #0
 800191e:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001920:	683b      	ldr	r3, [r7, #0]
 8001922:	687a      	ldr	r2, [r7, #4]
 8001924:	68b9      	ldr	r1, [r7, #8]
 8001926:	68f8      	ldr	r0, [r7, #12]
 8001928:	f000 f9b8 	bl	8001c9c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001930:	223f      	movs	r2, #63	@ 0x3f
 8001932:	409a      	lsls	r2, r3
 8001934:	693b      	ldr	r3, [r7, #16]
 8001936:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	681a      	ldr	r2, [r3, #0]
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	f042 0216 	orr.w	r2, r2, #22
 8001946:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800194c:	2b00      	cmp	r3, #0
 800194e:	d007      	beq.n	8001960 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	681a      	ldr	r2, [r3, #0]
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	f042 0208 	orr.w	r2, r2, #8
 800195e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	681a      	ldr	r2, [r3, #0]
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	f042 0201 	orr.w	r2, r2, #1
 800196e:	601a      	str	r2, [r3, #0]
 8001970:	e005      	b.n	800197e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	2200      	movs	r2, #0
 8001976:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800197a:	2302      	movs	r3, #2
 800197c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800197e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001980:	4618      	mov	r0, r3
 8001982:	3718      	adds	r7, #24
 8001984:	46bd      	mov	sp, r7
 8001986:	bd80      	pop	{r7, pc}

08001988 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	b086      	sub	sp, #24
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001990:	2300      	movs	r3, #0
 8001992:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001994:	4b8e      	ldr	r3, [pc, #568]	@ (8001bd0 <HAL_DMA_IRQHandler+0x248>)
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	4a8e      	ldr	r2, [pc, #568]	@ (8001bd4 <HAL_DMA_IRQHandler+0x24c>)
 800199a:	fba2 2303 	umull	r2, r3, r2, r3
 800199e:	0a9b      	lsrs	r3, r3, #10
 80019a0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80019a6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80019a8:	693b      	ldr	r3, [r7, #16]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80019b2:	2208      	movs	r2, #8
 80019b4:	409a      	lsls	r2, r3
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	4013      	ands	r3, r2
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d01a      	beq.n	80019f4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	f003 0304 	and.w	r3, r3, #4
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d013      	beq.n	80019f4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	681a      	ldr	r2, [r3, #0]
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	f022 0204 	bic.w	r2, r2, #4
 80019da:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80019e0:	2208      	movs	r2, #8
 80019e2:	409a      	lsls	r2, r3
 80019e4:	693b      	ldr	r3, [r7, #16]
 80019e6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80019ec:	f043 0201 	orr.w	r2, r3, #1
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80019f8:	2201      	movs	r2, #1
 80019fa:	409a      	lsls	r2, r3
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	4013      	ands	r3, r2
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d012      	beq.n	8001a2a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	695b      	ldr	r3, [r3, #20]
 8001a0a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d00b      	beq.n	8001a2a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001a16:	2201      	movs	r2, #1
 8001a18:	409a      	lsls	r2, r3
 8001a1a:	693b      	ldr	r3, [r7, #16]
 8001a1c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001a22:	f043 0202 	orr.w	r2, r3, #2
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001a2e:	2204      	movs	r2, #4
 8001a30:	409a      	lsls	r2, r3
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	4013      	ands	r3, r2
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d012      	beq.n	8001a60 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	f003 0302 	and.w	r3, r3, #2
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d00b      	beq.n	8001a60 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001a4c:	2204      	movs	r2, #4
 8001a4e:	409a      	lsls	r2, r3
 8001a50:	693b      	ldr	r3, [r7, #16]
 8001a52:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001a58:	f043 0204 	orr.w	r2, r3, #4
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001a64:	2210      	movs	r2, #16
 8001a66:	409a      	lsls	r2, r3
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	4013      	ands	r3, r2
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d043      	beq.n	8001af8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	f003 0308 	and.w	r3, r3, #8
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d03c      	beq.n	8001af8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001a82:	2210      	movs	r2, #16
 8001a84:	409a      	lsls	r2, r3
 8001a86:	693b      	ldr	r3, [r7, #16]
 8001a88:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d018      	beq.n	8001aca <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d108      	bne.n	8001ab8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d024      	beq.n	8001af8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ab2:	6878      	ldr	r0, [r7, #4]
 8001ab4:	4798      	blx	r3
 8001ab6:	e01f      	b.n	8001af8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d01b      	beq.n	8001af8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001ac4:	6878      	ldr	r0, [r7, #4]
 8001ac6:	4798      	blx	r3
 8001ac8:	e016      	b.n	8001af8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d107      	bne.n	8001ae8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	681a      	ldr	r2, [r3, #0]
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	f022 0208 	bic.w	r2, r2, #8
 8001ae6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d003      	beq.n	8001af8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001af4:	6878      	ldr	r0, [r7, #4]
 8001af6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001afc:	2220      	movs	r2, #32
 8001afe:	409a      	lsls	r2, r3
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	4013      	ands	r3, r2
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	f000 808f 	beq.w	8001c28 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	f003 0310 	and.w	r3, r3, #16
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	f000 8087 	beq.w	8001c28 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b1e:	2220      	movs	r2, #32
 8001b20:	409a      	lsls	r2, r3
 8001b22:	693b      	ldr	r3, [r7, #16]
 8001b24:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001b2c:	b2db      	uxtb	r3, r3
 8001b2e:	2b05      	cmp	r3, #5
 8001b30:	d136      	bne.n	8001ba0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	681a      	ldr	r2, [r3, #0]
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	f022 0216 	bic.w	r2, r2, #22
 8001b40:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	695a      	ldr	r2, [r3, #20]
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001b50:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d103      	bne.n	8001b62 <HAL_DMA_IRQHandler+0x1da>
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d007      	beq.n	8001b72 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	681a      	ldr	r2, [r3, #0]
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	f022 0208 	bic.w	r2, r2, #8
 8001b70:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b76:	223f      	movs	r2, #63	@ 0x3f
 8001b78:	409a      	lsls	r2, r3
 8001b7a:	693b      	ldr	r3, [r7, #16]
 8001b7c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	2201      	movs	r2, #1
 8001b82:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	2200      	movs	r2, #0
 8001b8a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d07e      	beq.n	8001c94 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001b9a:	6878      	ldr	r0, [r7, #4]
 8001b9c:	4798      	blx	r3
        }
        return;
 8001b9e:	e079      	b.n	8001c94 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d01d      	beq.n	8001bea <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d10d      	bne.n	8001bd8 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d031      	beq.n	8001c28 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001bc8:	6878      	ldr	r0, [r7, #4]
 8001bca:	4798      	blx	r3
 8001bcc:	e02c      	b.n	8001c28 <HAL_DMA_IRQHandler+0x2a0>
 8001bce:	bf00      	nop
 8001bd0:	20000000 	.word	0x20000000
 8001bd4:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d023      	beq.n	8001c28 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001be4:	6878      	ldr	r0, [r7, #4]
 8001be6:	4798      	blx	r3
 8001be8:	e01e      	b.n	8001c28 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d10f      	bne.n	8001c18 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	681a      	ldr	r2, [r3, #0]
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	f022 0210 	bic.w	r2, r2, #16
 8001c06:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	2201      	movs	r2, #1
 8001c0c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	2200      	movs	r2, #0
 8001c14:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d003      	beq.n	8001c28 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001c24:	6878      	ldr	r0, [r7, #4]
 8001c26:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d032      	beq.n	8001c96 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001c34:	f003 0301 	and.w	r3, r3, #1
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d022      	beq.n	8001c82 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	2205      	movs	r2, #5
 8001c40:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	681a      	ldr	r2, [r3, #0]
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	f022 0201 	bic.w	r2, r2, #1
 8001c52:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001c54:	68bb      	ldr	r3, [r7, #8]
 8001c56:	3301      	adds	r3, #1
 8001c58:	60bb      	str	r3, [r7, #8]
 8001c5a:	697a      	ldr	r2, [r7, #20]
 8001c5c:	429a      	cmp	r2, r3
 8001c5e:	d307      	bcc.n	8001c70 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	f003 0301 	and.w	r3, r3, #1
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d1f2      	bne.n	8001c54 <HAL_DMA_IRQHandler+0x2cc>
 8001c6e:	e000      	b.n	8001c72 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001c70:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	2201      	movs	r2, #1
 8001c76:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d005      	beq.n	8001c96 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c8e:	6878      	ldr	r0, [r7, #4]
 8001c90:	4798      	blx	r3
 8001c92:	e000      	b.n	8001c96 <HAL_DMA_IRQHandler+0x30e>
        return;
 8001c94:	bf00      	nop
    }
  }
}
 8001c96:	3718      	adds	r7, #24
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	bd80      	pop	{r7, pc}

08001c9c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001c9c:	b480      	push	{r7}
 8001c9e:	b085      	sub	sp, #20
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	60f8      	str	r0, [r7, #12]
 8001ca4:	60b9      	str	r1, [r7, #8]
 8001ca6:	607a      	str	r2, [r7, #4]
 8001ca8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	681a      	ldr	r2, [r3, #0]
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8001cb8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	683a      	ldr	r2, [r7, #0]
 8001cc0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	689b      	ldr	r3, [r3, #8]
 8001cc6:	2b40      	cmp	r3, #64	@ 0x40
 8001cc8:	d108      	bne.n	8001cdc <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	687a      	ldr	r2, [r7, #4]
 8001cd0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	68ba      	ldr	r2, [r7, #8]
 8001cd8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001cda:	e007      	b.n	8001cec <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	68ba      	ldr	r2, [r7, #8]
 8001ce2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	687a      	ldr	r2, [r7, #4]
 8001cea:	60da      	str	r2, [r3, #12]
}
 8001cec:	bf00      	nop
 8001cee:	3714      	adds	r7, #20
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf6:	4770      	bx	lr

08001cf8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001cf8:	b480      	push	{r7}
 8001cfa:	b085      	sub	sp, #20
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	b2db      	uxtb	r3, r3
 8001d06:	3b10      	subs	r3, #16
 8001d08:	4a14      	ldr	r2, [pc, #80]	@ (8001d5c <DMA_CalcBaseAndBitshift+0x64>)
 8001d0a:	fba2 2303 	umull	r2, r3, r2, r3
 8001d0e:	091b      	lsrs	r3, r3, #4
 8001d10:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001d12:	4a13      	ldr	r2, [pc, #76]	@ (8001d60 <DMA_CalcBaseAndBitshift+0x68>)
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	4413      	add	r3, r2
 8001d18:	781b      	ldrb	r3, [r3, #0]
 8001d1a:	461a      	mov	r2, r3
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	2b03      	cmp	r3, #3
 8001d24:	d909      	bls.n	8001d3a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8001d2e:	f023 0303 	bic.w	r3, r3, #3
 8001d32:	1d1a      	adds	r2, r3, #4
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	659a      	str	r2, [r3, #88]	@ 0x58
 8001d38:	e007      	b.n	8001d4a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8001d42:	f023 0303 	bic.w	r3, r3, #3
 8001d46:	687a      	ldr	r2, [r7, #4]
 8001d48:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8001d4e:	4618      	mov	r0, r3
 8001d50:	3714      	adds	r7, #20
 8001d52:	46bd      	mov	sp, r7
 8001d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d58:	4770      	bx	lr
 8001d5a:	bf00      	nop
 8001d5c:	aaaaaaab 	.word	0xaaaaaaab
 8001d60:	080047e8 	.word	0x080047e8

08001d64 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001d64:	b480      	push	{r7}
 8001d66:	b085      	sub	sp, #20
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001d6c:	2300      	movs	r3, #0
 8001d6e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d74:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	699b      	ldr	r3, [r3, #24]
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d11f      	bne.n	8001dbe <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001d7e:	68bb      	ldr	r3, [r7, #8]
 8001d80:	2b03      	cmp	r3, #3
 8001d82:	d856      	bhi.n	8001e32 <DMA_CheckFifoParam+0xce>
 8001d84:	a201      	add	r2, pc, #4	@ (adr r2, 8001d8c <DMA_CheckFifoParam+0x28>)
 8001d86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d8a:	bf00      	nop
 8001d8c:	08001d9d 	.word	0x08001d9d
 8001d90:	08001daf 	.word	0x08001daf
 8001d94:	08001d9d 	.word	0x08001d9d
 8001d98:	08001e33 	.word	0x08001e33
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001da0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d046      	beq.n	8001e36 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001da8:	2301      	movs	r3, #1
 8001daa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001dac:	e043      	b.n	8001e36 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001db2:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8001db6:	d140      	bne.n	8001e3a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001db8:	2301      	movs	r3, #1
 8001dba:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001dbc:	e03d      	b.n	8001e3a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	699b      	ldr	r3, [r3, #24]
 8001dc2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001dc6:	d121      	bne.n	8001e0c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001dc8:	68bb      	ldr	r3, [r7, #8]
 8001dca:	2b03      	cmp	r3, #3
 8001dcc:	d837      	bhi.n	8001e3e <DMA_CheckFifoParam+0xda>
 8001dce:	a201      	add	r2, pc, #4	@ (adr r2, 8001dd4 <DMA_CheckFifoParam+0x70>)
 8001dd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001dd4:	08001de5 	.word	0x08001de5
 8001dd8:	08001deb 	.word	0x08001deb
 8001ddc:	08001de5 	.word	0x08001de5
 8001de0:	08001dfd 	.word	0x08001dfd
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001de4:	2301      	movs	r3, #1
 8001de6:	73fb      	strb	r3, [r7, #15]
      break;
 8001de8:	e030      	b.n	8001e4c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001dee:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d025      	beq.n	8001e42 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001df6:	2301      	movs	r3, #1
 8001df8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001dfa:	e022      	b.n	8001e42 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e00:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8001e04:	d11f      	bne.n	8001e46 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001e06:	2301      	movs	r3, #1
 8001e08:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001e0a:	e01c      	b.n	8001e46 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001e0c:	68bb      	ldr	r3, [r7, #8]
 8001e0e:	2b02      	cmp	r3, #2
 8001e10:	d903      	bls.n	8001e1a <DMA_CheckFifoParam+0xb6>
 8001e12:	68bb      	ldr	r3, [r7, #8]
 8001e14:	2b03      	cmp	r3, #3
 8001e16:	d003      	beq.n	8001e20 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001e18:	e018      	b.n	8001e4c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001e1a:	2301      	movs	r3, #1
 8001e1c:	73fb      	strb	r3, [r7, #15]
      break;
 8001e1e:	e015      	b.n	8001e4c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e24:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d00e      	beq.n	8001e4a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001e2c:	2301      	movs	r3, #1
 8001e2e:	73fb      	strb	r3, [r7, #15]
      break;
 8001e30:	e00b      	b.n	8001e4a <DMA_CheckFifoParam+0xe6>
      break;
 8001e32:	bf00      	nop
 8001e34:	e00a      	b.n	8001e4c <DMA_CheckFifoParam+0xe8>
      break;
 8001e36:	bf00      	nop
 8001e38:	e008      	b.n	8001e4c <DMA_CheckFifoParam+0xe8>
      break;
 8001e3a:	bf00      	nop
 8001e3c:	e006      	b.n	8001e4c <DMA_CheckFifoParam+0xe8>
      break;
 8001e3e:	bf00      	nop
 8001e40:	e004      	b.n	8001e4c <DMA_CheckFifoParam+0xe8>
      break;
 8001e42:	bf00      	nop
 8001e44:	e002      	b.n	8001e4c <DMA_CheckFifoParam+0xe8>
      break;   
 8001e46:	bf00      	nop
 8001e48:	e000      	b.n	8001e4c <DMA_CheckFifoParam+0xe8>
      break;
 8001e4a:	bf00      	nop
    }
  } 
  
  return status; 
 8001e4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e4e:	4618      	mov	r0, r3
 8001e50:	3714      	adds	r7, #20
 8001e52:	46bd      	mov	sp, r7
 8001e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e58:	4770      	bx	lr
 8001e5a:	bf00      	nop

08001e5c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e5c:	b480      	push	{r7}
 8001e5e:	b089      	sub	sp, #36	@ 0x24
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]
 8001e64:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001e66:	2300      	movs	r3, #0
 8001e68:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001e6e:	2300      	movs	r3, #0
 8001e70:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001e72:	2300      	movs	r3, #0
 8001e74:	61fb      	str	r3, [r7, #28]
 8001e76:	e159      	b.n	800212c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001e78:	2201      	movs	r2, #1
 8001e7a:	69fb      	ldr	r3, [r7, #28]
 8001e7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e80:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001e82:	683b      	ldr	r3, [r7, #0]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	697a      	ldr	r2, [r7, #20]
 8001e88:	4013      	ands	r3, r2
 8001e8a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001e8c:	693a      	ldr	r2, [r7, #16]
 8001e8e:	697b      	ldr	r3, [r7, #20]
 8001e90:	429a      	cmp	r2, r3
 8001e92:	f040 8148 	bne.w	8002126 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001e96:	683b      	ldr	r3, [r7, #0]
 8001e98:	685b      	ldr	r3, [r3, #4]
 8001e9a:	f003 0303 	and.w	r3, r3, #3
 8001e9e:	2b01      	cmp	r3, #1
 8001ea0:	d005      	beq.n	8001eae <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ea2:	683b      	ldr	r3, [r7, #0]
 8001ea4:	685b      	ldr	r3, [r3, #4]
 8001ea6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001eaa:	2b02      	cmp	r3, #2
 8001eac:	d130      	bne.n	8001f10 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	689b      	ldr	r3, [r3, #8]
 8001eb2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001eb4:	69fb      	ldr	r3, [r7, #28]
 8001eb6:	005b      	lsls	r3, r3, #1
 8001eb8:	2203      	movs	r2, #3
 8001eba:	fa02 f303 	lsl.w	r3, r2, r3
 8001ebe:	43db      	mvns	r3, r3
 8001ec0:	69ba      	ldr	r2, [r7, #24]
 8001ec2:	4013      	ands	r3, r2
 8001ec4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001ec6:	683b      	ldr	r3, [r7, #0]
 8001ec8:	68da      	ldr	r2, [r3, #12]
 8001eca:	69fb      	ldr	r3, [r7, #28]
 8001ecc:	005b      	lsls	r3, r3, #1
 8001ece:	fa02 f303 	lsl.w	r3, r2, r3
 8001ed2:	69ba      	ldr	r2, [r7, #24]
 8001ed4:	4313      	orrs	r3, r2
 8001ed6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	69ba      	ldr	r2, [r7, #24]
 8001edc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	685b      	ldr	r3, [r3, #4]
 8001ee2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001ee4:	2201      	movs	r2, #1
 8001ee6:	69fb      	ldr	r3, [r7, #28]
 8001ee8:	fa02 f303 	lsl.w	r3, r2, r3
 8001eec:	43db      	mvns	r3, r3
 8001eee:	69ba      	ldr	r2, [r7, #24]
 8001ef0:	4013      	ands	r3, r2
 8001ef2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001ef4:	683b      	ldr	r3, [r7, #0]
 8001ef6:	685b      	ldr	r3, [r3, #4]
 8001ef8:	091b      	lsrs	r3, r3, #4
 8001efa:	f003 0201 	and.w	r2, r3, #1
 8001efe:	69fb      	ldr	r3, [r7, #28]
 8001f00:	fa02 f303 	lsl.w	r3, r2, r3
 8001f04:	69ba      	ldr	r2, [r7, #24]
 8001f06:	4313      	orrs	r3, r2
 8001f08:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	69ba      	ldr	r2, [r7, #24]
 8001f0e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001f10:	683b      	ldr	r3, [r7, #0]
 8001f12:	685b      	ldr	r3, [r3, #4]
 8001f14:	f003 0303 	and.w	r3, r3, #3
 8001f18:	2b03      	cmp	r3, #3
 8001f1a:	d017      	beq.n	8001f4c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	68db      	ldr	r3, [r3, #12]
 8001f20:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001f22:	69fb      	ldr	r3, [r7, #28]
 8001f24:	005b      	lsls	r3, r3, #1
 8001f26:	2203      	movs	r2, #3
 8001f28:	fa02 f303 	lsl.w	r3, r2, r3
 8001f2c:	43db      	mvns	r3, r3
 8001f2e:	69ba      	ldr	r2, [r7, #24]
 8001f30:	4013      	ands	r3, r2
 8001f32:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001f34:	683b      	ldr	r3, [r7, #0]
 8001f36:	689a      	ldr	r2, [r3, #8]
 8001f38:	69fb      	ldr	r3, [r7, #28]
 8001f3a:	005b      	lsls	r3, r3, #1
 8001f3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f40:	69ba      	ldr	r2, [r7, #24]
 8001f42:	4313      	orrs	r3, r2
 8001f44:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	69ba      	ldr	r2, [r7, #24]
 8001f4a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f4c:	683b      	ldr	r3, [r7, #0]
 8001f4e:	685b      	ldr	r3, [r3, #4]
 8001f50:	f003 0303 	and.w	r3, r3, #3
 8001f54:	2b02      	cmp	r3, #2
 8001f56:	d123      	bne.n	8001fa0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001f58:	69fb      	ldr	r3, [r7, #28]
 8001f5a:	08da      	lsrs	r2, r3, #3
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	3208      	adds	r2, #8
 8001f60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f64:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001f66:	69fb      	ldr	r3, [r7, #28]
 8001f68:	f003 0307 	and.w	r3, r3, #7
 8001f6c:	009b      	lsls	r3, r3, #2
 8001f6e:	220f      	movs	r2, #15
 8001f70:	fa02 f303 	lsl.w	r3, r2, r3
 8001f74:	43db      	mvns	r3, r3
 8001f76:	69ba      	ldr	r2, [r7, #24]
 8001f78:	4013      	ands	r3, r2
 8001f7a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001f7c:	683b      	ldr	r3, [r7, #0]
 8001f7e:	691a      	ldr	r2, [r3, #16]
 8001f80:	69fb      	ldr	r3, [r7, #28]
 8001f82:	f003 0307 	and.w	r3, r3, #7
 8001f86:	009b      	lsls	r3, r3, #2
 8001f88:	fa02 f303 	lsl.w	r3, r2, r3
 8001f8c:	69ba      	ldr	r2, [r7, #24]
 8001f8e:	4313      	orrs	r3, r2
 8001f90:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001f92:	69fb      	ldr	r3, [r7, #28]
 8001f94:	08da      	lsrs	r2, r3, #3
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	3208      	adds	r2, #8
 8001f9a:	69b9      	ldr	r1, [r7, #24]
 8001f9c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001fa6:	69fb      	ldr	r3, [r7, #28]
 8001fa8:	005b      	lsls	r3, r3, #1
 8001faa:	2203      	movs	r2, #3
 8001fac:	fa02 f303 	lsl.w	r3, r2, r3
 8001fb0:	43db      	mvns	r3, r3
 8001fb2:	69ba      	ldr	r2, [r7, #24]
 8001fb4:	4013      	ands	r3, r2
 8001fb6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001fb8:	683b      	ldr	r3, [r7, #0]
 8001fba:	685b      	ldr	r3, [r3, #4]
 8001fbc:	f003 0203 	and.w	r2, r3, #3
 8001fc0:	69fb      	ldr	r3, [r7, #28]
 8001fc2:	005b      	lsls	r3, r3, #1
 8001fc4:	fa02 f303 	lsl.w	r3, r2, r3
 8001fc8:	69ba      	ldr	r2, [r7, #24]
 8001fca:	4313      	orrs	r3, r2
 8001fcc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	69ba      	ldr	r2, [r7, #24]
 8001fd2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001fd4:	683b      	ldr	r3, [r7, #0]
 8001fd6:	685b      	ldr	r3, [r3, #4]
 8001fd8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	f000 80a2 	beq.w	8002126 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	60fb      	str	r3, [r7, #12]
 8001fe6:	4b57      	ldr	r3, [pc, #348]	@ (8002144 <HAL_GPIO_Init+0x2e8>)
 8001fe8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fea:	4a56      	ldr	r2, [pc, #344]	@ (8002144 <HAL_GPIO_Init+0x2e8>)
 8001fec:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001ff0:	6453      	str	r3, [r2, #68]	@ 0x44
 8001ff2:	4b54      	ldr	r3, [pc, #336]	@ (8002144 <HAL_GPIO_Init+0x2e8>)
 8001ff4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ff6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001ffa:	60fb      	str	r3, [r7, #12]
 8001ffc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001ffe:	4a52      	ldr	r2, [pc, #328]	@ (8002148 <HAL_GPIO_Init+0x2ec>)
 8002000:	69fb      	ldr	r3, [r7, #28]
 8002002:	089b      	lsrs	r3, r3, #2
 8002004:	3302      	adds	r3, #2
 8002006:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800200a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800200c:	69fb      	ldr	r3, [r7, #28]
 800200e:	f003 0303 	and.w	r3, r3, #3
 8002012:	009b      	lsls	r3, r3, #2
 8002014:	220f      	movs	r2, #15
 8002016:	fa02 f303 	lsl.w	r3, r2, r3
 800201a:	43db      	mvns	r3, r3
 800201c:	69ba      	ldr	r2, [r7, #24]
 800201e:	4013      	ands	r3, r2
 8002020:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	4a49      	ldr	r2, [pc, #292]	@ (800214c <HAL_GPIO_Init+0x2f0>)
 8002026:	4293      	cmp	r3, r2
 8002028:	d019      	beq.n	800205e <HAL_GPIO_Init+0x202>
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	4a48      	ldr	r2, [pc, #288]	@ (8002150 <HAL_GPIO_Init+0x2f4>)
 800202e:	4293      	cmp	r3, r2
 8002030:	d013      	beq.n	800205a <HAL_GPIO_Init+0x1fe>
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	4a47      	ldr	r2, [pc, #284]	@ (8002154 <HAL_GPIO_Init+0x2f8>)
 8002036:	4293      	cmp	r3, r2
 8002038:	d00d      	beq.n	8002056 <HAL_GPIO_Init+0x1fa>
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	4a46      	ldr	r2, [pc, #280]	@ (8002158 <HAL_GPIO_Init+0x2fc>)
 800203e:	4293      	cmp	r3, r2
 8002040:	d007      	beq.n	8002052 <HAL_GPIO_Init+0x1f6>
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	4a45      	ldr	r2, [pc, #276]	@ (800215c <HAL_GPIO_Init+0x300>)
 8002046:	4293      	cmp	r3, r2
 8002048:	d101      	bne.n	800204e <HAL_GPIO_Init+0x1f2>
 800204a:	2304      	movs	r3, #4
 800204c:	e008      	b.n	8002060 <HAL_GPIO_Init+0x204>
 800204e:	2307      	movs	r3, #7
 8002050:	e006      	b.n	8002060 <HAL_GPIO_Init+0x204>
 8002052:	2303      	movs	r3, #3
 8002054:	e004      	b.n	8002060 <HAL_GPIO_Init+0x204>
 8002056:	2302      	movs	r3, #2
 8002058:	e002      	b.n	8002060 <HAL_GPIO_Init+0x204>
 800205a:	2301      	movs	r3, #1
 800205c:	e000      	b.n	8002060 <HAL_GPIO_Init+0x204>
 800205e:	2300      	movs	r3, #0
 8002060:	69fa      	ldr	r2, [r7, #28]
 8002062:	f002 0203 	and.w	r2, r2, #3
 8002066:	0092      	lsls	r2, r2, #2
 8002068:	4093      	lsls	r3, r2
 800206a:	69ba      	ldr	r2, [r7, #24]
 800206c:	4313      	orrs	r3, r2
 800206e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002070:	4935      	ldr	r1, [pc, #212]	@ (8002148 <HAL_GPIO_Init+0x2ec>)
 8002072:	69fb      	ldr	r3, [r7, #28]
 8002074:	089b      	lsrs	r3, r3, #2
 8002076:	3302      	adds	r3, #2
 8002078:	69ba      	ldr	r2, [r7, #24]
 800207a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800207e:	4b38      	ldr	r3, [pc, #224]	@ (8002160 <HAL_GPIO_Init+0x304>)
 8002080:	689b      	ldr	r3, [r3, #8]
 8002082:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002084:	693b      	ldr	r3, [r7, #16]
 8002086:	43db      	mvns	r3, r3
 8002088:	69ba      	ldr	r2, [r7, #24]
 800208a:	4013      	ands	r3, r2
 800208c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800208e:	683b      	ldr	r3, [r7, #0]
 8002090:	685b      	ldr	r3, [r3, #4]
 8002092:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002096:	2b00      	cmp	r3, #0
 8002098:	d003      	beq.n	80020a2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800209a:	69ba      	ldr	r2, [r7, #24]
 800209c:	693b      	ldr	r3, [r7, #16]
 800209e:	4313      	orrs	r3, r2
 80020a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80020a2:	4a2f      	ldr	r2, [pc, #188]	@ (8002160 <HAL_GPIO_Init+0x304>)
 80020a4:	69bb      	ldr	r3, [r7, #24]
 80020a6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80020a8:	4b2d      	ldr	r3, [pc, #180]	@ (8002160 <HAL_GPIO_Init+0x304>)
 80020aa:	68db      	ldr	r3, [r3, #12]
 80020ac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020ae:	693b      	ldr	r3, [r7, #16]
 80020b0:	43db      	mvns	r3, r3
 80020b2:	69ba      	ldr	r2, [r7, #24]
 80020b4:	4013      	ands	r3, r2
 80020b6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80020b8:	683b      	ldr	r3, [r7, #0]
 80020ba:	685b      	ldr	r3, [r3, #4]
 80020bc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d003      	beq.n	80020cc <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80020c4:	69ba      	ldr	r2, [r7, #24]
 80020c6:	693b      	ldr	r3, [r7, #16]
 80020c8:	4313      	orrs	r3, r2
 80020ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80020cc:	4a24      	ldr	r2, [pc, #144]	@ (8002160 <HAL_GPIO_Init+0x304>)
 80020ce:	69bb      	ldr	r3, [r7, #24]
 80020d0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80020d2:	4b23      	ldr	r3, [pc, #140]	@ (8002160 <HAL_GPIO_Init+0x304>)
 80020d4:	685b      	ldr	r3, [r3, #4]
 80020d6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020d8:	693b      	ldr	r3, [r7, #16]
 80020da:	43db      	mvns	r3, r3
 80020dc:	69ba      	ldr	r2, [r7, #24]
 80020de:	4013      	ands	r3, r2
 80020e0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80020e2:	683b      	ldr	r3, [r7, #0]
 80020e4:	685b      	ldr	r3, [r3, #4]
 80020e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d003      	beq.n	80020f6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80020ee:	69ba      	ldr	r2, [r7, #24]
 80020f0:	693b      	ldr	r3, [r7, #16]
 80020f2:	4313      	orrs	r3, r2
 80020f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80020f6:	4a1a      	ldr	r2, [pc, #104]	@ (8002160 <HAL_GPIO_Init+0x304>)
 80020f8:	69bb      	ldr	r3, [r7, #24]
 80020fa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80020fc:	4b18      	ldr	r3, [pc, #96]	@ (8002160 <HAL_GPIO_Init+0x304>)
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002102:	693b      	ldr	r3, [r7, #16]
 8002104:	43db      	mvns	r3, r3
 8002106:	69ba      	ldr	r2, [r7, #24]
 8002108:	4013      	ands	r3, r2
 800210a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800210c:	683b      	ldr	r3, [r7, #0]
 800210e:	685b      	ldr	r3, [r3, #4]
 8002110:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002114:	2b00      	cmp	r3, #0
 8002116:	d003      	beq.n	8002120 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002118:	69ba      	ldr	r2, [r7, #24]
 800211a:	693b      	ldr	r3, [r7, #16]
 800211c:	4313      	orrs	r3, r2
 800211e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002120:	4a0f      	ldr	r2, [pc, #60]	@ (8002160 <HAL_GPIO_Init+0x304>)
 8002122:	69bb      	ldr	r3, [r7, #24]
 8002124:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002126:	69fb      	ldr	r3, [r7, #28]
 8002128:	3301      	adds	r3, #1
 800212a:	61fb      	str	r3, [r7, #28]
 800212c:	69fb      	ldr	r3, [r7, #28]
 800212e:	2b0f      	cmp	r3, #15
 8002130:	f67f aea2 	bls.w	8001e78 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002134:	bf00      	nop
 8002136:	bf00      	nop
 8002138:	3724      	adds	r7, #36	@ 0x24
 800213a:	46bd      	mov	sp, r7
 800213c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002140:	4770      	bx	lr
 8002142:	bf00      	nop
 8002144:	40023800 	.word	0x40023800
 8002148:	40013800 	.word	0x40013800
 800214c:	40020000 	.word	0x40020000
 8002150:	40020400 	.word	0x40020400
 8002154:	40020800 	.word	0x40020800
 8002158:	40020c00 	.word	0x40020c00
 800215c:	40021000 	.word	0x40021000
 8002160:	40013c00 	.word	0x40013c00

08002164 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002164:	b480      	push	{r7}
 8002166:	b083      	sub	sp, #12
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
 800216c:	460b      	mov	r3, r1
 800216e:	807b      	strh	r3, [r7, #2]
 8002170:	4613      	mov	r3, r2
 8002172:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002174:	787b      	ldrb	r3, [r7, #1]
 8002176:	2b00      	cmp	r3, #0
 8002178:	d003      	beq.n	8002182 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800217a:	887a      	ldrh	r2, [r7, #2]
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002180:	e003      	b.n	800218a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002182:	887b      	ldrh	r3, [r7, #2]
 8002184:	041a      	lsls	r2, r3, #16
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	619a      	str	r2, [r3, #24]
}
 800218a:	bf00      	nop
 800218c:	370c      	adds	r7, #12
 800218e:	46bd      	mov	sp, r7
 8002190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002194:	4770      	bx	lr
	...

08002198 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002198:	b580      	push	{r7, lr}
 800219a:	b086      	sub	sp, #24
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d101      	bne.n	80021aa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80021a6:	2301      	movs	r3, #1
 80021a8:	e267      	b.n	800267a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f003 0301 	and.w	r3, r3, #1
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d075      	beq.n	80022a2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80021b6:	4b88      	ldr	r3, [pc, #544]	@ (80023d8 <HAL_RCC_OscConfig+0x240>)
 80021b8:	689b      	ldr	r3, [r3, #8]
 80021ba:	f003 030c 	and.w	r3, r3, #12
 80021be:	2b04      	cmp	r3, #4
 80021c0:	d00c      	beq.n	80021dc <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80021c2:	4b85      	ldr	r3, [pc, #532]	@ (80023d8 <HAL_RCC_OscConfig+0x240>)
 80021c4:	689b      	ldr	r3, [r3, #8]
 80021c6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80021ca:	2b08      	cmp	r3, #8
 80021cc:	d112      	bne.n	80021f4 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80021ce:	4b82      	ldr	r3, [pc, #520]	@ (80023d8 <HAL_RCC_OscConfig+0x240>)
 80021d0:	685b      	ldr	r3, [r3, #4]
 80021d2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80021d6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80021da:	d10b      	bne.n	80021f4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021dc:	4b7e      	ldr	r3, [pc, #504]	@ (80023d8 <HAL_RCC_OscConfig+0x240>)
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d05b      	beq.n	80022a0 <HAL_RCC_OscConfig+0x108>
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	685b      	ldr	r3, [r3, #4]
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d157      	bne.n	80022a0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80021f0:	2301      	movs	r3, #1
 80021f2:	e242      	b.n	800267a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	685b      	ldr	r3, [r3, #4]
 80021f8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80021fc:	d106      	bne.n	800220c <HAL_RCC_OscConfig+0x74>
 80021fe:	4b76      	ldr	r3, [pc, #472]	@ (80023d8 <HAL_RCC_OscConfig+0x240>)
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	4a75      	ldr	r2, [pc, #468]	@ (80023d8 <HAL_RCC_OscConfig+0x240>)
 8002204:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002208:	6013      	str	r3, [r2, #0]
 800220a:	e01d      	b.n	8002248 <HAL_RCC_OscConfig+0xb0>
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	685b      	ldr	r3, [r3, #4]
 8002210:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002214:	d10c      	bne.n	8002230 <HAL_RCC_OscConfig+0x98>
 8002216:	4b70      	ldr	r3, [pc, #448]	@ (80023d8 <HAL_RCC_OscConfig+0x240>)
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	4a6f      	ldr	r2, [pc, #444]	@ (80023d8 <HAL_RCC_OscConfig+0x240>)
 800221c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002220:	6013      	str	r3, [r2, #0]
 8002222:	4b6d      	ldr	r3, [pc, #436]	@ (80023d8 <HAL_RCC_OscConfig+0x240>)
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	4a6c      	ldr	r2, [pc, #432]	@ (80023d8 <HAL_RCC_OscConfig+0x240>)
 8002228:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800222c:	6013      	str	r3, [r2, #0]
 800222e:	e00b      	b.n	8002248 <HAL_RCC_OscConfig+0xb0>
 8002230:	4b69      	ldr	r3, [pc, #420]	@ (80023d8 <HAL_RCC_OscConfig+0x240>)
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	4a68      	ldr	r2, [pc, #416]	@ (80023d8 <HAL_RCC_OscConfig+0x240>)
 8002236:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800223a:	6013      	str	r3, [r2, #0]
 800223c:	4b66      	ldr	r3, [pc, #408]	@ (80023d8 <HAL_RCC_OscConfig+0x240>)
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	4a65      	ldr	r2, [pc, #404]	@ (80023d8 <HAL_RCC_OscConfig+0x240>)
 8002242:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002246:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	685b      	ldr	r3, [r3, #4]
 800224c:	2b00      	cmp	r3, #0
 800224e:	d013      	beq.n	8002278 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002250:	f7ff f976 	bl	8001540 <HAL_GetTick>
 8002254:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002256:	e008      	b.n	800226a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002258:	f7ff f972 	bl	8001540 <HAL_GetTick>
 800225c:	4602      	mov	r2, r0
 800225e:	693b      	ldr	r3, [r7, #16]
 8002260:	1ad3      	subs	r3, r2, r3
 8002262:	2b64      	cmp	r3, #100	@ 0x64
 8002264:	d901      	bls.n	800226a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002266:	2303      	movs	r3, #3
 8002268:	e207      	b.n	800267a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800226a:	4b5b      	ldr	r3, [pc, #364]	@ (80023d8 <HAL_RCC_OscConfig+0x240>)
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002272:	2b00      	cmp	r3, #0
 8002274:	d0f0      	beq.n	8002258 <HAL_RCC_OscConfig+0xc0>
 8002276:	e014      	b.n	80022a2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002278:	f7ff f962 	bl	8001540 <HAL_GetTick>
 800227c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800227e:	e008      	b.n	8002292 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002280:	f7ff f95e 	bl	8001540 <HAL_GetTick>
 8002284:	4602      	mov	r2, r0
 8002286:	693b      	ldr	r3, [r7, #16]
 8002288:	1ad3      	subs	r3, r2, r3
 800228a:	2b64      	cmp	r3, #100	@ 0x64
 800228c:	d901      	bls.n	8002292 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800228e:	2303      	movs	r3, #3
 8002290:	e1f3      	b.n	800267a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002292:	4b51      	ldr	r3, [pc, #324]	@ (80023d8 <HAL_RCC_OscConfig+0x240>)
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800229a:	2b00      	cmp	r3, #0
 800229c:	d1f0      	bne.n	8002280 <HAL_RCC_OscConfig+0xe8>
 800229e:	e000      	b.n	80022a2 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022a0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f003 0302 	and.w	r3, r3, #2
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d063      	beq.n	8002376 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80022ae:	4b4a      	ldr	r3, [pc, #296]	@ (80023d8 <HAL_RCC_OscConfig+0x240>)
 80022b0:	689b      	ldr	r3, [r3, #8]
 80022b2:	f003 030c 	and.w	r3, r3, #12
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d00b      	beq.n	80022d2 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80022ba:	4b47      	ldr	r3, [pc, #284]	@ (80023d8 <HAL_RCC_OscConfig+0x240>)
 80022bc:	689b      	ldr	r3, [r3, #8]
 80022be:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80022c2:	2b08      	cmp	r3, #8
 80022c4:	d11c      	bne.n	8002300 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80022c6:	4b44      	ldr	r3, [pc, #272]	@ (80023d8 <HAL_RCC_OscConfig+0x240>)
 80022c8:	685b      	ldr	r3, [r3, #4]
 80022ca:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d116      	bne.n	8002300 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80022d2:	4b41      	ldr	r3, [pc, #260]	@ (80023d8 <HAL_RCC_OscConfig+0x240>)
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f003 0302 	and.w	r3, r3, #2
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d005      	beq.n	80022ea <HAL_RCC_OscConfig+0x152>
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	68db      	ldr	r3, [r3, #12]
 80022e2:	2b01      	cmp	r3, #1
 80022e4:	d001      	beq.n	80022ea <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80022e6:	2301      	movs	r3, #1
 80022e8:	e1c7      	b.n	800267a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022ea:	4b3b      	ldr	r3, [pc, #236]	@ (80023d8 <HAL_RCC_OscConfig+0x240>)
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	691b      	ldr	r3, [r3, #16]
 80022f6:	00db      	lsls	r3, r3, #3
 80022f8:	4937      	ldr	r1, [pc, #220]	@ (80023d8 <HAL_RCC_OscConfig+0x240>)
 80022fa:	4313      	orrs	r3, r2
 80022fc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80022fe:	e03a      	b.n	8002376 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	68db      	ldr	r3, [r3, #12]
 8002304:	2b00      	cmp	r3, #0
 8002306:	d020      	beq.n	800234a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002308:	4b34      	ldr	r3, [pc, #208]	@ (80023dc <HAL_RCC_OscConfig+0x244>)
 800230a:	2201      	movs	r2, #1
 800230c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800230e:	f7ff f917 	bl	8001540 <HAL_GetTick>
 8002312:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002314:	e008      	b.n	8002328 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002316:	f7ff f913 	bl	8001540 <HAL_GetTick>
 800231a:	4602      	mov	r2, r0
 800231c:	693b      	ldr	r3, [r7, #16]
 800231e:	1ad3      	subs	r3, r2, r3
 8002320:	2b02      	cmp	r3, #2
 8002322:	d901      	bls.n	8002328 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002324:	2303      	movs	r3, #3
 8002326:	e1a8      	b.n	800267a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002328:	4b2b      	ldr	r3, [pc, #172]	@ (80023d8 <HAL_RCC_OscConfig+0x240>)
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f003 0302 	and.w	r3, r3, #2
 8002330:	2b00      	cmp	r3, #0
 8002332:	d0f0      	beq.n	8002316 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002334:	4b28      	ldr	r3, [pc, #160]	@ (80023d8 <HAL_RCC_OscConfig+0x240>)
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	691b      	ldr	r3, [r3, #16]
 8002340:	00db      	lsls	r3, r3, #3
 8002342:	4925      	ldr	r1, [pc, #148]	@ (80023d8 <HAL_RCC_OscConfig+0x240>)
 8002344:	4313      	orrs	r3, r2
 8002346:	600b      	str	r3, [r1, #0]
 8002348:	e015      	b.n	8002376 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800234a:	4b24      	ldr	r3, [pc, #144]	@ (80023dc <HAL_RCC_OscConfig+0x244>)
 800234c:	2200      	movs	r2, #0
 800234e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002350:	f7ff f8f6 	bl	8001540 <HAL_GetTick>
 8002354:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002356:	e008      	b.n	800236a <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002358:	f7ff f8f2 	bl	8001540 <HAL_GetTick>
 800235c:	4602      	mov	r2, r0
 800235e:	693b      	ldr	r3, [r7, #16]
 8002360:	1ad3      	subs	r3, r2, r3
 8002362:	2b02      	cmp	r3, #2
 8002364:	d901      	bls.n	800236a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002366:	2303      	movs	r3, #3
 8002368:	e187      	b.n	800267a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800236a:	4b1b      	ldr	r3, [pc, #108]	@ (80023d8 <HAL_RCC_OscConfig+0x240>)
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f003 0302 	and.w	r3, r3, #2
 8002372:	2b00      	cmp	r3, #0
 8002374:	d1f0      	bne.n	8002358 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f003 0308 	and.w	r3, r3, #8
 800237e:	2b00      	cmp	r3, #0
 8002380:	d036      	beq.n	80023f0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	695b      	ldr	r3, [r3, #20]
 8002386:	2b00      	cmp	r3, #0
 8002388:	d016      	beq.n	80023b8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800238a:	4b15      	ldr	r3, [pc, #84]	@ (80023e0 <HAL_RCC_OscConfig+0x248>)
 800238c:	2201      	movs	r2, #1
 800238e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002390:	f7ff f8d6 	bl	8001540 <HAL_GetTick>
 8002394:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002396:	e008      	b.n	80023aa <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002398:	f7ff f8d2 	bl	8001540 <HAL_GetTick>
 800239c:	4602      	mov	r2, r0
 800239e:	693b      	ldr	r3, [r7, #16]
 80023a0:	1ad3      	subs	r3, r2, r3
 80023a2:	2b02      	cmp	r3, #2
 80023a4:	d901      	bls.n	80023aa <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80023a6:	2303      	movs	r3, #3
 80023a8:	e167      	b.n	800267a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80023aa:	4b0b      	ldr	r3, [pc, #44]	@ (80023d8 <HAL_RCC_OscConfig+0x240>)
 80023ac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80023ae:	f003 0302 	and.w	r3, r3, #2
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d0f0      	beq.n	8002398 <HAL_RCC_OscConfig+0x200>
 80023b6:	e01b      	b.n	80023f0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80023b8:	4b09      	ldr	r3, [pc, #36]	@ (80023e0 <HAL_RCC_OscConfig+0x248>)
 80023ba:	2200      	movs	r2, #0
 80023bc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023be:	f7ff f8bf 	bl	8001540 <HAL_GetTick>
 80023c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80023c4:	e00e      	b.n	80023e4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80023c6:	f7ff f8bb 	bl	8001540 <HAL_GetTick>
 80023ca:	4602      	mov	r2, r0
 80023cc:	693b      	ldr	r3, [r7, #16]
 80023ce:	1ad3      	subs	r3, r2, r3
 80023d0:	2b02      	cmp	r3, #2
 80023d2:	d907      	bls.n	80023e4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80023d4:	2303      	movs	r3, #3
 80023d6:	e150      	b.n	800267a <HAL_RCC_OscConfig+0x4e2>
 80023d8:	40023800 	.word	0x40023800
 80023dc:	42470000 	.word	0x42470000
 80023e0:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80023e4:	4b88      	ldr	r3, [pc, #544]	@ (8002608 <HAL_RCC_OscConfig+0x470>)
 80023e6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80023e8:	f003 0302 	and.w	r3, r3, #2
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d1ea      	bne.n	80023c6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	f003 0304 	and.w	r3, r3, #4
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	f000 8097 	beq.w	800252c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80023fe:	2300      	movs	r3, #0
 8002400:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002402:	4b81      	ldr	r3, [pc, #516]	@ (8002608 <HAL_RCC_OscConfig+0x470>)
 8002404:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002406:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800240a:	2b00      	cmp	r3, #0
 800240c:	d10f      	bne.n	800242e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800240e:	2300      	movs	r3, #0
 8002410:	60bb      	str	r3, [r7, #8]
 8002412:	4b7d      	ldr	r3, [pc, #500]	@ (8002608 <HAL_RCC_OscConfig+0x470>)
 8002414:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002416:	4a7c      	ldr	r2, [pc, #496]	@ (8002608 <HAL_RCC_OscConfig+0x470>)
 8002418:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800241c:	6413      	str	r3, [r2, #64]	@ 0x40
 800241e:	4b7a      	ldr	r3, [pc, #488]	@ (8002608 <HAL_RCC_OscConfig+0x470>)
 8002420:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002422:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002426:	60bb      	str	r3, [r7, #8]
 8002428:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800242a:	2301      	movs	r3, #1
 800242c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800242e:	4b77      	ldr	r3, [pc, #476]	@ (800260c <HAL_RCC_OscConfig+0x474>)
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002436:	2b00      	cmp	r3, #0
 8002438:	d118      	bne.n	800246c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800243a:	4b74      	ldr	r3, [pc, #464]	@ (800260c <HAL_RCC_OscConfig+0x474>)
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	4a73      	ldr	r2, [pc, #460]	@ (800260c <HAL_RCC_OscConfig+0x474>)
 8002440:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002444:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002446:	f7ff f87b 	bl	8001540 <HAL_GetTick>
 800244a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800244c:	e008      	b.n	8002460 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800244e:	f7ff f877 	bl	8001540 <HAL_GetTick>
 8002452:	4602      	mov	r2, r0
 8002454:	693b      	ldr	r3, [r7, #16]
 8002456:	1ad3      	subs	r3, r2, r3
 8002458:	2b02      	cmp	r3, #2
 800245a:	d901      	bls.n	8002460 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800245c:	2303      	movs	r3, #3
 800245e:	e10c      	b.n	800267a <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002460:	4b6a      	ldr	r3, [pc, #424]	@ (800260c <HAL_RCC_OscConfig+0x474>)
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002468:	2b00      	cmp	r3, #0
 800246a:	d0f0      	beq.n	800244e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	689b      	ldr	r3, [r3, #8]
 8002470:	2b01      	cmp	r3, #1
 8002472:	d106      	bne.n	8002482 <HAL_RCC_OscConfig+0x2ea>
 8002474:	4b64      	ldr	r3, [pc, #400]	@ (8002608 <HAL_RCC_OscConfig+0x470>)
 8002476:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002478:	4a63      	ldr	r2, [pc, #396]	@ (8002608 <HAL_RCC_OscConfig+0x470>)
 800247a:	f043 0301 	orr.w	r3, r3, #1
 800247e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002480:	e01c      	b.n	80024bc <HAL_RCC_OscConfig+0x324>
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	689b      	ldr	r3, [r3, #8]
 8002486:	2b05      	cmp	r3, #5
 8002488:	d10c      	bne.n	80024a4 <HAL_RCC_OscConfig+0x30c>
 800248a:	4b5f      	ldr	r3, [pc, #380]	@ (8002608 <HAL_RCC_OscConfig+0x470>)
 800248c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800248e:	4a5e      	ldr	r2, [pc, #376]	@ (8002608 <HAL_RCC_OscConfig+0x470>)
 8002490:	f043 0304 	orr.w	r3, r3, #4
 8002494:	6713      	str	r3, [r2, #112]	@ 0x70
 8002496:	4b5c      	ldr	r3, [pc, #368]	@ (8002608 <HAL_RCC_OscConfig+0x470>)
 8002498:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800249a:	4a5b      	ldr	r2, [pc, #364]	@ (8002608 <HAL_RCC_OscConfig+0x470>)
 800249c:	f043 0301 	orr.w	r3, r3, #1
 80024a0:	6713      	str	r3, [r2, #112]	@ 0x70
 80024a2:	e00b      	b.n	80024bc <HAL_RCC_OscConfig+0x324>
 80024a4:	4b58      	ldr	r3, [pc, #352]	@ (8002608 <HAL_RCC_OscConfig+0x470>)
 80024a6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80024a8:	4a57      	ldr	r2, [pc, #348]	@ (8002608 <HAL_RCC_OscConfig+0x470>)
 80024aa:	f023 0301 	bic.w	r3, r3, #1
 80024ae:	6713      	str	r3, [r2, #112]	@ 0x70
 80024b0:	4b55      	ldr	r3, [pc, #340]	@ (8002608 <HAL_RCC_OscConfig+0x470>)
 80024b2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80024b4:	4a54      	ldr	r2, [pc, #336]	@ (8002608 <HAL_RCC_OscConfig+0x470>)
 80024b6:	f023 0304 	bic.w	r3, r3, #4
 80024ba:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	689b      	ldr	r3, [r3, #8]
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d015      	beq.n	80024f0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024c4:	f7ff f83c 	bl	8001540 <HAL_GetTick>
 80024c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024ca:	e00a      	b.n	80024e2 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80024cc:	f7ff f838 	bl	8001540 <HAL_GetTick>
 80024d0:	4602      	mov	r2, r0
 80024d2:	693b      	ldr	r3, [r7, #16]
 80024d4:	1ad3      	subs	r3, r2, r3
 80024d6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80024da:	4293      	cmp	r3, r2
 80024dc:	d901      	bls.n	80024e2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80024de:	2303      	movs	r3, #3
 80024e0:	e0cb      	b.n	800267a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024e2:	4b49      	ldr	r3, [pc, #292]	@ (8002608 <HAL_RCC_OscConfig+0x470>)
 80024e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80024e6:	f003 0302 	and.w	r3, r3, #2
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d0ee      	beq.n	80024cc <HAL_RCC_OscConfig+0x334>
 80024ee:	e014      	b.n	800251a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024f0:	f7ff f826 	bl	8001540 <HAL_GetTick>
 80024f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80024f6:	e00a      	b.n	800250e <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80024f8:	f7ff f822 	bl	8001540 <HAL_GetTick>
 80024fc:	4602      	mov	r2, r0
 80024fe:	693b      	ldr	r3, [r7, #16]
 8002500:	1ad3      	subs	r3, r2, r3
 8002502:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002506:	4293      	cmp	r3, r2
 8002508:	d901      	bls.n	800250e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800250a:	2303      	movs	r3, #3
 800250c:	e0b5      	b.n	800267a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800250e:	4b3e      	ldr	r3, [pc, #248]	@ (8002608 <HAL_RCC_OscConfig+0x470>)
 8002510:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002512:	f003 0302 	and.w	r3, r3, #2
 8002516:	2b00      	cmp	r3, #0
 8002518:	d1ee      	bne.n	80024f8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800251a:	7dfb      	ldrb	r3, [r7, #23]
 800251c:	2b01      	cmp	r3, #1
 800251e:	d105      	bne.n	800252c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002520:	4b39      	ldr	r3, [pc, #228]	@ (8002608 <HAL_RCC_OscConfig+0x470>)
 8002522:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002524:	4a38      	ldr	r2, [pc, #224]	@ (8002608 <HAL_RCC_OscConfig+0x470>)
 8002526:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800252a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	699b      	ldr	r3, [r3, #24]
 8002530:	2b00      	cmp	r3, #0
 8002532:	f000 80a1 	beq.w	8002678 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002536:	4b34      	ldr	r3, [pc, #208]	@ (8002608 <HAL_RCC_OscConfig+0x470>)
 8002538:	689b      	ldr	r3, [r3, #8]
 800253a:	f003 030c 	and.w	r3, r3, #12
 800253e:	2b08      	cmp	r3, #8
 8002540:	d05c      	beq.n	80025fc <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	699b      	ldr	r3, [r3, #24]
 8002546:	2b02      	cmp	r3, #2
 8002548:	d141      	bne.n	80025ce <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800254a:	4b31      	ldr	r3, [pc, #196]	@ (8002610 <HAL_RCC_OscConfig+0x478>)
 800254c:	2200      	movs	r2, #0
 800254e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002550:	f7fe fff6 	bl	8001540 <HAL_GetTick>
 8002554:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002556:	e008      	b.n	800256a <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002558:	f7fe fff2 	bl	8001540 <HAL_GetTick>
 800255c:	4602      	mov	r2, r0
 800255e:	693b      	ldr	r3, [r7, #16]
 8002560:	1ad3      	subs	r3, r2, r3
 8002562:	2b02      	cmp	r3, #2
 8002564:	d901      	bls.n	800256a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002566:	2303      	movs	r3, #3
 8002568:	e087      	b.n	800267a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800256a:	4b27      	ldr	r3, [pc, #156]	@ (8002608 <HAL_RCC_OscConfig+0x470>)
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002572:	2b00      	cmp	r3, #0
 8002574:	d1f0      	bne.n	8002558 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	69da      	ldr	r2, [r3, #28]
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	6a1b      	ldr	r3, [r3, #32]
 800257e:	431a      	orrs	r2, r3
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002584:	019b      	lsls	r3, r3, #6
 8002586:	431a      	orrs	r2, r3
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800258c:	085b      	lsrs	r3, r3, #1
 800258e:	3b01      	subs	r3, #1
 8002590:	041b      	lsls	r3, r3, #16
 8002592:	431a      	orrs	r2, r3
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002598:	061b      	lsls	r3, r3, #24
 800259a:	491b      	ldr	r1, [pc, #108]	@ (8002608 <HAL_RCC_OscConfig+0x470>)
 800259c:	4313      	orrs	r3, r2
 800259e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80025a0:	4b1b      	ldr	r3, [pc, #108]	@ (8002610 <HAL_RCC_OscConfig+0x478>)
 80025a2:	2201      	movs	r2, #1
 80025a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025a6:	f7fe ffcb 	bl	8001540 <HAL_GetTick>
 80025aa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80025ac:	e008      	b.n	80025c0 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025ae:	f7fe ffc7 	bl	8001540 <HAL_GetTick>
 80025b2:	4602      	mov	r2, r0
 80025b4:	693b      	ldr	r3, [r7, #16]
 80025b6:	1ad3      	subs	r3, r2, r3
 80025b8:	2b02      	cmp	r3, #2
 80025ba:	d901      	bls.n	80025c0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80025bc:	2303      	movs	r3, #3
 80025be:	e05c      	b.n	800267a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80025c0:	4b11      	ldr	r3, [pc, #68]	@ (8002608 <HAL_RCC_OscConfig+0x470>)
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d0f0      	beq.n	80025ae <HAL_RCC_OscConfig+0x416>
 80025cc:	e054      	b.n	8002678 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025ce:	4b10      	ldr	r3, [pc, #64]	@ (8002610 <HAL_RCC_OscConfig+0x478>)
 80025d0:	2200      	movs	r2, #0
 80025d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025d4:	f7fe ffb4 	bl	8001540 <HAL_GetTick>
 80025d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80025da:	e008      	b.n	80025ee <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025dc:	f7fe ffb0 	bl	8001540 <HAL_GetTick>
 80025e0:	4602      	mov	r2, r0
 80025e2:	693b      	ldr	r3, [r7, #16]
 80025e4:	1ad3      	subs	r3, r2, r3
 80025e6:	2b02      	cmp	r3, #2
 80025e8:	d901      	bls.n	80025ee <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80025ea:	2303      	movs	r3, #3
 80025ec:	e045      	b.n	800267a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80025ee:	4b06      	ldr	r3, [pc, #24]	@ (8002608 <HAL_RCC_OscConfig+0x470>)
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d1f0      	bne.n	80025dc <HAL_RCC_OscConfig+0x444>
 80025fa:	e03d      	b.n	8002678 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	699b      	ldr	r3, [r3, #24]
 8002600:	2b01      	cmp	r3, #1
 8002602:	d107      	bne.n	8002614 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002604:	2301      	movs	r3, #1
 8002606:	e038      	b.n	800267a <HAL_RCC_OscConfig+0x4e2>
 8002608:	40023800 	.word	0x40023800
 800260c:	40007000 	.word	0x40007000
 8002610:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002614:	4b1b      	ldr	r3, [pc, #108]	@ (8002684 <HAL_RCC_OscConfig+0x4ec>)
 8002616:	685b      	ldr	r3, [r3, #4]
 8002618:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	699b      	ldr	r3, [r3, #24]
 800261e:	2b01      	cmp	r3, #1
 8002620:	d028      	beq.n	8002674 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800262c:	429a      	cmp	r2, r3
 800262e:	d121      	bne.n	8002674 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800263a:	429a      	cmp	r2, r3
 800263c:	d11a      	bne.n	8002674 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800263e:	68fa      	ldr	r2, [r7, #12]
 8002640:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002644:	4013      	ands	r3, r2
 8002646:	687a      	ldr	r2, [r7, #4]
 8002648:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800264a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800264c:	4293      	cmp	r3, r2
 800264e:	d111      	bne.n	8002674 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800265a:	085b      	lsrs	r3, r3, #1
 800265c:	3b01      	subs	r3, #1
 800265e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002660:	429a      	cmp	r2, r3
 8002662:	d107      	bne.n	8002674 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800266e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002670:	429a      	cmp	r2, r3
 8002672:	d001      	beq.n	8002678 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002674:	2301      	movs	r3, #1
 8002676:	e000      	b.n	800267a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002678:	2300      	movs	r3, #0
}
 800267a:	4618      	mov	r0, r3
 800267c:	3718      	adds	r7, #24
 800267e:	46bd      	mov	sp, r7
 8002680:	bd80      	pop	{r7, pc}
 8002682:	bf00      	nop
 8002684:	40023800 	.word	0x40023800

08002688 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002688:	b580      	push	{r7, lr}
 800268a:	b084      	sub	sp, #16
 800268c:	af00      	add	r7, sp, #0
 800268e:	6078      	str	r0, [r7, #4]
 8002690:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	2b00      	cmp	r3, #0
 8002696:	d101      	bne.n	800269c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002698:	2301      	movs	r3, #1
 800269a:	e0cc      	b.n	8002836 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800269c:	4b68      	ldr	r3, [pc, #416]	@ (8002840 <HAL_RCC_ClockConfig+0x1b8>)
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f003 0307 	and.w	r3, r3, #7
 80026a4:	683a      	ldr	r2, [r7, #0]
 80026a6:	429a      	cmp	r2, r3
 80026a8:	d90c      	bls.n	80026c4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026aa:	4b65      	ldr	r3, [pc, #404]	@ (8002840 <HAL_RCC_ClockConfig+0x1b8>)
 80026ac:	683a      	ldr	r2, [r7, #0]
 80026ae:	b2d2      	uxtb	r2, r2
 80026b0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80026b2:	4b63      	ldr	r3, [pc, #396]	@ (8002840 <HAL_RCC_ClockConfig+0x1b8>)
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f003 0307 	and.w	r3, r3, #7
 80026ba:	683a      	ldr	r2, [r7, #0]
 80026bc:	429a      	cmp	r2, r3
 80026be:	d001      	beq.n	80026c4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80026c0:	2301      	movs	r3, #1
 80026c2:	e0b8      	b.n	8002836 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f003 0302 	and.w	r3, r3, #2
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d020      	beq.n	8002712 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f003 0304 	and.w	r3, r3, #4
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d005      	beq.n	80026e8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80026dc:	4b59      	ldr	r3, [pc, #356]	@ (8002844 <HAL_RCC_ClockConfig+0x1bc>)
 80026de:	689b      	ldr	r3, [r3, #8]
 80026e0:	4a58      	ldr	r2, [pc, #352]	@ (8002844 <HAL_RCC_ClockConfig+0x1bc>)
 80026e2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80026e6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f003 0308 	and.w	r3, r3, #8
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d005      	beq.n	8002700 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80026f4:	4b53      	ldr	r3, [pc, #332]	@ (8002844 <HAL_RCC_ClockConfig+0x1bc>)
 80026f6:	689b      	ldr	r3, [r3, #8]
 80026f8:	4a52      	ldr	r2, [pc, #328]	@ (8002844 <HAL_RCC_ClockConfig+0x1bc>)
 80026fa:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80026fe:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002700:	4b50      	ldr	r3, [pc, #320]	@ (8002844 <HAL_RCC_ClockConfig+0x1bc>)
 8002702:	689b      	ldr	r3, [r3, #8]
 8002704:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	689b      	ldr	r3, [r3, #8]
 800270c:	494d      	ldr	r1, [pc, #308]	@ (8002844 <HAL_RCC_ClockConfig+0x1bc>)
 800270e:	4313      	orrs	r3, r2
 8002710:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f003 0301 	and.w	r3, r3, #1
 800271a:	2b00      	cmp	r3, #0
 800271c:	d044      	beq.n	80027a8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	685b      	ldr	r3, [r3, #4]
 8002722:	2b01      	cmp	r3, #1
 8002724:	d107      	bne.n	8002736 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002726:	4b47      	ldr	r3, [pc, #284]	@ (8002844 <HAL_RCC_ClockConfig+0x1bc>)
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800272e:	2b00      	cmp	r3, #0
 8002730:	d119      	bne.n	8002766 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002732:	2301      	movs	r3, #1
 8002734:	e07f      	b.n	8002836 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	685b      	ldr	r3, [r3, #4]
 800273a:	2b02      	cmp	r3, #2
 800273c:	d003      	beq.n	8002746 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002742:	2b03      	cmp	r3, #3
 8002744:	d107      	bne.n	8002756 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002746:	4b3f      	ldr	r3, [pc, #252]	@ (8002844 <HAL_RCC_ClockConfig+0x1bc>)
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800274e:	2b00      	cmp	r3, #0
 8002750:	d109      	bne.n	8002766 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002752:	2301      	movs	r3, #1
 8002754:	e06f      	b.n	8002836 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002756:	4b3b      	ldr	r3, [pc, #236]	@ (8002844 <HAL_RCC_ClockConfig+0x1bc>)
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f003 0302 	and.w	r3, r3, #2
 800275e:	2b00      	cmp	r3, #0
 8002760:	d101      	bne.n	8002766 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002762:	2301      	movs	r3, #1
 8002764:	e067      	b.n	8002836 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002766:	4b37      	ldr	r3, [pc, #220]	@ (8002844 <HAL_RCC_ClockConfig+0x1bc>)
 8002768:	689b      	ldr	r3, [r3, #8]
 800276a:	f023 0203 	bic.w	r2, r3, #3
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	685b      	ldr	r3, [r3, #4]
 8002772:	4934      	ldr	r1, [pc, #208]	@ (8002844 <HAL_RCC_ClockConfig+0x1bc>)
 8002774:	4313      	orrs	r3, r2
 8002776:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002778:	f7fe fee2 	bl	8001540 <HAL_GetTick>
 800277c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800277e:	e00a      	b.n	8002796 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002780:	f7fe fede 	bl	8001540 <HAL_GetTick>
 8002784:	4602      	mov	r2, r0
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	1ad3      	subs	r3, r2, r3
 800278a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800278e:	4293      	cmp	r3, r2
 8002790:	d901      	bls.n	8002796 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002792:	2303      	movs	r3, #3
 8002794:	e04f      	b.n	8002836 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002796:	4b2b      	ldr	r3, [pc, #172]	@ (8002844 <HAL_RCC_ClockConfig+0x1bc>)
 8002798:	689b      	ldr	r3, [r3, #8]
 800279a:	f003 020c 	and.w	r2, r3, #12
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	685b      	ldr	r3, [r3, #4]
 80027a2:	009b      	lsls	r3, r3, #2
 80027a4:	429a      	cmp	r2, r3
 80027a6:	d1eb      	bne.n	8002780 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80027a8:	4b25      	ldr	r3, [pc, #148]	@ (8002840 <HAL_RCC_ClockConfig+0x1b8>)
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f003 0307 	and.w	r3, r3, #7
 80027b0:	683a      	ldr	r2, [r7, #0]
 80027b2:	429a      	cmp	r2, r3
 80027b4:	d20c      	bcs.n	80027d0 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027b6:	4b22      	ldr	r3, [pc, #136]	@ (8002840 <HAL_RCC_ClockConfig+0x1b8>)
 80027b8:	683a      	ldr	r2, [r7, #0]
 80027ba:	b2d2      	uxtb	r2, r2
 80027bc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80027be:	4b20      	ldr	r3, [pc, #128]	@ (8002840 <HAL_RCC_ClockConfig+0x1b8>)
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f003 0307 	and.w	r3, r3, #7
 80027c6:	683a      	ldr	r2, [r7, #0]
 80027c8:	429a      	cmp	r2, r3
 80027ca:	d001      	beq.n	80027d0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80027cc:	2301      	movs	r3, #1
 80027ce:	e032      	b.n	8002836 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f003 0304 	and.w	r3, r3, #4
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d008      	beq.n	80027ee <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80027dc:	4b19      	ldr	r3, [pc, #100]	@ (8002844 <HAL_RCC_ClockConfig+0x1bc>)
 80027de:	689b      	ldr	r3, [r3, #8]
 80027e0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	68db      	ldr	r3, [r3, #12]
 80027e8:	4916      	ldr	r1, [pc, #88]	@ (8002844 <HAL_RCC_ClockConfig+0x1bc>)
 80027ea:	4313      	orrs	r3, r2
 80027ec:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f003 0308 	and.w	r3, r3, #8
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d009      	beq.n	800280e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80027fa:	4b12      	ldr	r3, [pc, #72]	@ (8002844 <HAL_RCC_ClockConfig+0x1bc>)
 80027fc:	689b      	ldr	r3, [r3, #8]
 80027fe:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	691b      	ldr	r3, [r3, #16]
 8002806:	00db      	lsls	r3, r3, #3
 8002808:	490e      	ldr	r1, [pc, #56]	@ (8002844 <HAL_RCC_ClockConfig+0x1bc>)
 800280a:	4313      	orrs	r3, r2
 800280c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800280e:	f000 f821 	bl	8002854 <HAL_RCC_GetSysClockFreq>
 8002812:	4602      	mov	r2, r0
 8002814:	4b0b      	ldr	r3, [pc, #44]	@ (8002844 <HAL_RCC_ClockConfig+0x1bc>)
 8002816:	689b      	ldr	r3, [r3, #8]
 8002818:	091b      	lsrs	r3, r3, #4
 800281a:	f003 030f 	and.w	r3, r3, #15
 800281e:	490a      	ldr	r1, [pc, #40]	@ (8002848 <HAL_RCC_ClockConfig+0x1c0>)
 8002820:	5ccb      	ldrb	r3, [r1, r3]
 8002822:	fa22 f303 	lsr.w	r3, r2, r3
 8002826:	4a09      	ldr	r2, [pc, #36]	@ (800284c <HAL_RCC_ClockConfig+0x1c4>)
 8002828:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800282a:	4b09      	ldr	r3, [pc, #36]	@ (8002850 <HAL_RCC_ClockConfig+0x1c8>)
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	4618      	mov	r0, r3
 8002830:	f7fe fe42 	bl	80014b8 <HAL_InitTick>

  return HAL_OK;
 8002834:	2300      	movs	r3, #0
}
 8002836:	4618      	mov	r0, r3
 8002838:	3710      	adds	r7, #16
 800283a:	46bd      	mov	sp, r7
 800283c:	bd80      	pop	{r7, pc}
 800283e:	bf00      	nop
 8002840:	40023c00 	.word	0x40023c00
 8002844:	40023800 	.word	0x40023800
 8002848:	080047d0 	.word	0x080047d0
 800284c:	20000000 	.word	0x20000000
 8002850:	20000004 	.word	0x20000004

08002854 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002854:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002858:	b094      	sub	sp, #80	@ 0x50
 800285a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800285c:	2300      	movs	r3, #0
 800285e:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8002860:	2300      	movs	r3, #0
 8002862:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8002864:	2300      	movs	r3, #0
 8002866:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8002868:	2300      	movs	r3, #0
 800286a:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800286c:	4b79      	ldr	r3, [pc, #484]	@ (8002a54 <HAL_RCC_GetSysClockFreq+0x200>)
 800286e:	689b      	ldr	r3, [r3, #8]
 8002870:	f003 030c 	and.w	r3, r3, #12
 8002874:	2b08      	cmp	r3, #8
 8002876:	d00d      	beq.n	8002894 <HAL_RCC_GetSysClockFreq+0x40>
 8002878:	2b08      	cmp	r3, #8
 800287a:	f200 80e1 	bhi.w	8002a40 <HAL_RCC_GetSysClockFreq+0x1ec>
 800287e:	2b00      	cmp	r3, #0
 8002880:	d002      	beq.n	8002888 <HAL_RCC_GetSysClockFreq+0x34>
 8002882:	2b04      	cmp	r3, #4
 8002884:	d003      	beq.n	800288e <HAL_RCC_GetSysClockFreq+0x3a>
 8002886:	e0db      	b.n	8002a40 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002888:	4b73      	ldr	r3, [pc, #460]	@ (8002a58 <HAL_RCC_GetSysClockFreq+0x204>)
 800288a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800288c:	e0db      	b.n	8002a46 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800288e:	4b73      	ldr	r3, [pc, #460]	@ (8002a5c <HAL_RCC_GetSysClockFreq+0x208>)
 8002890:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002892:	e0d8      	b.n	8002a46 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002894:	4b6f      	ldr	r3, [pc, #444]	@ (8002a54 <HAL_RCC_GetSysClockFreq+0x200>)
 8002896:	685b      	ldr	r3, [r3, #4]
 8002898:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800289c:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800289e:	4b6d      	ldr	r3, [pc, #436]	@ (8002a54 <HAL_RCC_GetSysClockFreq+0x200>)
 80028a0:	685b      	ldr	r3, [r3, #4]
 80028a2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d063      	beq.n	8002972 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80028aa:	4b6a      	ldr	r3, [pc, #424]	@ (8002a54 <HAL_RCC_GetSysClockFreq+0x200>)
 80028ac:	685b      	ldr	r3, [r3, #4]
 80028ae:	099b      	lsrs	r3, r3, #6
 80028b0:	2200      	movs	r2, #0
 80028b2:	63bb      	str	r3, [r7, #56]	@ 0x38
 80028b4:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80028b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80028b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80028bc:	633b      	str	r3, [r7, #48]	@ 0x30
 80028be:	2300      	movs	r3, #0
 80028c0:	637b      	str	r3, [r7, #52]	@ 0x34
 80028c2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80028c6:	4622      	mov	r2, r4
 80028c8:	462b      	mov	r3, r5
 80028ca:	f04f 0000 	mov.w	r0, #0
 80028ce:	f04f 0100 	mov.w	r1, #0
 80028d2:	0159      	lsls	r1, r3, #5
 80028d4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80028d8:	0150      	lsls	r0, r2, #5
 80028da:	4602      	mov	r2, r0
 80028dc:	460b      	mov	r3, r1
 80028de:	4621      	mov	r1, r4
 80028e0:	1a51      	subs	r1, r2, r1
 80028e2:	6139      	str	r1, [r7, #16]
 80028e4:	4629      	mov	r1, r5
 80028e6:	eb63 0301 	sbc.w	r3, r3, r1
 80028ea:	617b      	str	r3, [r7, #20]
 80028ec:	f04f 0200 	mov.w	r2, #0
 80028f0:	f04f 0300 	mov.w	r3, #0
 80028f4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80028f8:	4659      	mov	r1, fp
 80028fa:	018b      	lsls	r3, r1, #6
 80028fc:	4651      	mov	r1, sl
 80028fe:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002902:	4651      	mov	r1, sl
 8002904:	018a      	lsls	r2, r1, #6
 8002906:	4651      	mov	r1, sl
 8002908:	ebb2 0801 	subs.w	r8, r2, r1
 800290c:	4659      	mov	r1, fp
 800290e:	eb63 0901 	sbc.w	r9, r3, r1
 8002912:	f04f 0200 	mov.w	r2, #0
 8002916:	f04f 0300 	mov.w	r3, #0
 800291a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800291e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002922:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002926:	4690      	mov	r8, r2
 8002928:	4699      	mov	r9, r3
 800292a:	4623      	mov	r3, r4
 800292c:	eb18 0303 	adds.w	r3, r8, r3
 8002930:	60bb      	str	r3, [r7, #8]
 8002932:	462b      	mov	r3, r5
 8002934:	eb49 0303 	adc.w	r3, r9, r3
 8002938:	60fb      	str	r3, [r7, #12]
 800293a:	f04f 0200 	mov.w	r2, #0
 800293e:	f04f 0300 	mov.w	r3, #0
 8002942:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002946:	4629      	mov	r1, r5
 8002948:	024b      	lsls	r3, r1, #9
 800294a:	4621      	mov	r1, r4
 800294c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002950:	4621      	mov	r1, r4
 8002952:	024a      	lsls	r2, r1, #9
 8002954:	4610      	mov	r0, r2
 8002956:	4619      	mov	r1, r3
 8002958:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800295a:	2200      	movs	r2, #0
 800295c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800295e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002960:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002964:	f7fe f876 	bl	8000a54 <__aeabi_uldivmod>
 8002968:	4602      	mov	r2, r0
 800296a:	460b      	mov	r3, r1
 800296c:	4613      	mov	r3, r2
 800296e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002970:	e058      	b.n	8002a24 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002972:	4b38      	ldr	r3, [pc, #224]	@ (8002a54 <HAL_RCC_GetSysClockFreq+0x200>)
 8002974:	685b      	ldr	r3, [r3, #4]
 8002976:	099b      	lsrs	r3, r3, #6
 8002978:	2200      	movs	r2, #0
 800297a:	4618      	mov	r0, r3
 800297c:	4611      	mov	r1, r2
 800297e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002982:	623b      	str	r3, [r7, #32]
 8002984:	2300      	movs	r3, #0
 8002986:	627b      	str	r3, [r7, #36]	@ 0x24
 8002988:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800298c:	4642      	mov	r2, r8
 800298e:	464b      	mov	r3, r9
 8002990:	f04f 0000 	mov.w	r0, #0
 8002994:	f04f 0100 	mov.w	r1, #0
 8002998:	0159      	lsls	r1, r3, #5
 800299a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800299e:	0150      	lsls	r0, r2, #5
 80029a0:	4602      	mov	r2, r0
 80029a2:	460b      	mov	r3, r1
 80029a4:	4641      	mov	r1, r8
 80029a6:	ebb2 0a01 	subs.w	sl, r2, r1
 80029aa:	4649      	mov	r1, r9
 80029ac:	eb63 0b01 	sbc.w	fp, r3, r1
 80029b0:	f04f 0200 	mov.w	r2, #0
 80029b4:	f04f 0300 	mov.w	r3, #0
 80029b8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80029bc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80029c0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80029c4:	ebb2 040a 	subs.w	r4, r2, sl
 80029c8:	eb63 050b 	sbc.w	r5, r3, fp
 80029cc:	f04f 0200 	mov.w	r2, #0
 80029d0:	f04f 0300 	mov.w	r3, #0
 80029d4:	00eb      	lsls	r3, r5, #3
 80029d6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80029da:	00e2      	lsls	r2, r4, #3
 80029dc:	4614      	mov	r4, r2
 80029de:	461d      	mov	r5, r3
 80029e0:	4643      	mov	r3, r8
 80029e2:	18e3      	adds	r3, r4, r3
 80029e4:	603b      	str	r3, [r7, #0]
 80029e6:	464b      	mov	r3, r9
 80029e8:	eb45 0303 	adc.w	r3, r5, r3
 80029ec:	607b      	str	r3, [r7, #4]
 80029ee:	f04f 0200 	mov.w	r2, #0
 80029f2:	f04f 0300 	mov.w	r3, #0
 80029f6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80029fa:	4629      	mov	r1, r5
 80029fc:	028b      	lsls	r3, r1, #10
 80029fe:	4621      	mov	r1, r4
 8002a00:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002a04:	4621      	mov	r1, r4
 8002a06:	028a      	lsls	r2, r1, #10
 8002a08:	4610      	mov	r0, r2
 8002a0a:	4619      	mov	r1, r3
 8002a0c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002a0e:	2200      	movs	r2, #0
 8002a10:	61bb      	str	r3, [r7, #24]
 8002a12:	61fa      	str	r2, [r7, #28]
 8002a14:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002a18:	f7fe f81c 	bl	8000a54 <__aeabi_uldivmod>
 8002a1c:	4602      	mov	r2, r0
 8002a1e:	460b      	mov	r3, r1
 8002a20:	4613      	mov	r3, r2
 8002a22:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002a24:	4b0b      	ldr	r3, [pc, #44]	@ (8002a54 <HAL_RCC_GetSysClockFreq+0x200>)
 8002a26:	685b      	ldr	r3, [r3, #4]
 8002a28:	0c1b      	lsrs	r3, r3, #16
 8002a2a:	f003 0303 	and.w	r3, r3, #3
 8002a2e:	3301      	adds	r3, #1
 8002a30:	005b      	lsls	r3, r3, #1
 8002a32:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8002a34:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002a36:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002a38:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a3c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002a3e:	e002      	b.n	8002a46 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002a40:	4b05      	ldr	r3, [pc, #20]	@ (8002a58 <HAL_RCC_GetSysClockFreq+0x204>)
 8002a42:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002a44:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002a46:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8002a48:	4618      	mov	r0, r3
 8002a4a:	3750      	adds	r7, #80	@ 0x50
 8002a4c:	46bd      	mov	sp, r7
 8002a4e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002a52:	bf00      	nop
 8002a54:	40023800 	.word	0x40023800
 8002a58:	00f42400 	.word	0x00f42400
 8002a5c:	007a1200 	.word	0x007a1200

08002a60 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002a60:	b480      	push	{r7}
 8002a62:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002a64:	4b03      	ldr	r3, [pc, #12]	@ (8002a74 <HAL_RCC_GetHCLKFreq+0x14>)
 8002a66:	681b      	ldr	r3, [r3, #0]
}
 8002a68:	4618      	mov	r0, r3
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a70:	4770      	bx	lr
 8002a72:	bf00      	nop
 8002a74:	20000000 	.word	0x20000000

08002a78 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002a78:	b580      	push	{r7, lr}
 8002a7a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002a7c:	f7ff fff0 	bl	8002a60 <HAL_RCC_GetHCLKFreq>
 8002a80:	4602      	mov	r2, r0
 8002a82:	4b05      	ldr	r3, [pc, #20]	@ (8002a98 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002a84:	689b      	ldr	r3, [r3, #8]
 8002a86:	0a9b      	lsrs	r3, r3, #10
 8002a88:	f003 0307 	and.w	r3, r3, #7
 8002a8c:	4903      	ldr	r1, [pc, #12]	@ (8002a9c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002a8e:	5ccb      	ldrb	r3, [r1, r3]
 8002a90:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002a94:	4618      	mov	r0, r3
 8002a96:	bd80      	pop	{r7, pc}
 8002a98:	40023800 	.word	0x40023800
 8002a9c:	080047e0 	.word	0x080047e0

08002aa0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002aa0:	b580      	push	{r7, lr}
 8002aa2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002aa4:	f7ff ffdc 	bl	8002a60 <HAL_RCC_GetHCLKFreq>
 8002aa8:	4602      	mov	r2, r0
 8002aaa:	4b05      	ldr	r3, [pc, #20]	@ (8002ac0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002aac:	689b      	ldr	r3, [r3, #8]
 8002aae:	0b5b      	lsrs	r3, r3, #13
 8002ab0:	f003 0307 	and.w	r3, r3, #7
 8002ab4:	4903      	ldr	r1, [pc, #12]	@ (8002ac4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002ab6:	5ccb      	ldrb	r3, [r1, r3]
 8002ab8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002abc:	4618      	mov	r0, r3
 8002abe:	bd80      	pop	{r7, pc}
 8002ac0:	40023800 	.word	0x40023800
 8002ac4:	080047e0 	.word	0x080047e0

08002ac8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002ac8:	b580      	push	{r7, lr}
 8002aca:	b082      	sub	sp, #8
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d101      	bne.n	8002ada <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002ad6:	2301      	movs	r3, #1
 8002ad8:	e041      	b.n	8002b5e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002ae0:	b2db      	uxtb	r3, r3
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d106      	bne.n	8002af4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	2200      	movs	r2, #0
 8002aea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002aee:	6878      	ldr	r0, [r7, #4]
 8002af0:	f7fe fb6c 	bl	80011cc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	2202      	movs	r2, #2
 8002af8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681a      	ldr	r2, [r3, #0]
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	3304      	adds	r3, #4
 8002b04:	4619      	mov	r1, r3
 8002b06:	4610      	mov	r0, r2
 8002b08:	f000 fb90 	bl	800322c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	2201      	movs	r2, #1
 8002b10:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	2201      	movs	r2, #1
 8002b18:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	2201      	movs	r2, #1
 8002b20:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	2201      	movs	r2, #1
 8002b28:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	2201      	movs	r2, #1
 8002b30:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	2201      	movs	r2, #1
 8002b38:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	2201      	movs	r2, #1
 8002b40:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	2201      	movs	r2, #1
 8002b48:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	2201      	movs	r2, #1
 8002b50:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	2201      	movs	r2, #1
 8002b58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002b5c:	2300      	movs	r3, #0
}
 8002b5e:	4618      	mov	r0, r3
 8002b60:	3708      	adds	r7, #8
 8002b62:	46bd      	mov	sp, r7
 8002b64:	bd80      	pop	{r7, pc}
	...

08002b68 <HAL_TIM_PWM_Start_DMA>:
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
                                        uint16_t Length)
{
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	b086      	sub	sp, #24
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	60f8      	str	r0, [r7, #12]
 8002b70:	60b9      	str	r1, [r7, #8]
 8002b72:	607a      	str	r2, [r7, #4]
 8002b74:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 8002b76:	2300      	movs	r3, #0
 8002b78:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 8002b7a:	68bb      	ldr	r3, [r7, #8]
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d109      	bne.n	8002b94 <HAL_TIM_PWM_Start_DMA+0x2c>
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002b86:	b2db      	uxtb	r3, r3
 8002b88:	2b02      	cmp	r3, #2
 8002b8a:	bf0c      	ite	eq
 8002b8c:	2301      	moveq	r3, #1
 8002b8e:	2300      	movne	r3, #0
 8002b90:	b2db      	uxtb	r3, r3
 8002b92:	e022      	b.n	8002bda <HAL_TIM_PWM_Start_DMA+0x72>
 8002b94:	68bb      	ldr	r3, [r7, #8]
 8002b96:	2b04      	cmp	r3, #4
 8002b98:	d109      	bne.n	8002bae <HAL_TIM_PWM_Start_DMA+0x46>
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8002ba0:	b2db      	uxtb	r3, r3
 8002ba2:	2b02      	cmp	r3, #2
 8002ba4:	bf0c      	ite	eq
 8002ba6:	2301      	moveq	r3, #1
 8002ba8:	2300      	movne	r3, #0
 8002baa:	b2db      	uxtb	r3, r3
 8002bac:	e015      	b.n	8002bda <HAL_TIM_PWM_Start_DMA+0x72>
 8002bae:	68bb      	ldr	r3, [r7, #8]
 8002bb0:	2b08      	cmp	r3, #8
 8002bb2:	d109      	bne.n	8002bc8 <HAL_TIM_PWM_Start_DMA+0x60>
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002bba:	b2db      	uxtb	r3, r3
 8002bbc:	2b02      	cmp	r3, #2
 8002bbe:	bf0c      	ite	eq
 8002bc0:	2301      	moveq	r3, #1
 8002bc2:	2300      	movne	r3, #0
 8002bc4:	b2db      	uxtb	r3, r3
 8002bc6:	e008      	b.n	8002bda <HAL_TIM_PWM_Start_DMA+0x72>
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002bce:	b2db      	uxtb	r3, r3
 8002bd0:	2b02      	cmp	r3, #2
 8002bd2:	bf0c      	ite	eq
 8002bd4:	2301      	moveq	r3, #1
 8002bd6:	2300      	movne	r3, #0
 8002bd8:	b2db      	uxtb	r3, r3
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d001      	beq.n	8002be2 <HAL_TIM_PWM_Start_DMA+0x7a>
  {
    return HAL_BUSY;
 8002bde:	2302      	movs	r3, #2
 8002be0:	e15d      	b.n	8002e9e <HAL_TIM_PWM_Start_DMA+0x336>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 8002be2:	68bb      	ldr	r3, [r7, #8]
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d109      	bne.n	8002bfc <HAL_TIM_PWM_Start_DMA+0x94>
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002bee:	b2db      	uxtb	r3, r3
 8002bf0:	2b01      	cmp	r3, #1
 8002bf2:	bf0c      	ite	eq
 8002bf4:	2301      	moveq	r3, #1
 8002bf6:	2300      	movne	r3, #0
 8002bf8:	b2db      	uxtb	r3, r3
 8002bfa:	e022      	b.n	8002c42 <HAL_TIM_PWM_Start_DMA+0xda>
 8002bfc:	68bb      	ldr	r3, [r7, #8]
 8002bfe:	2b04      	cmp	r3, #4
 8002c00:	d109      	bne.n	8002c16 <HAL_TIM_PWM_Start_DMA+0xae>
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8002c08:	b2db      	uxtb	r3, r3
 8002c0a:	2b01      	cmp	r3, #1
 8002c0c:	bf0c      	ite	eq
 8002c0e:	2301      	moveq	r3, #1
 8002c10:	2300      	movne	r3, #0
 8002c12:	b2db      	uxtb	r3, r3
 8002c14:	e015      	b.n	8002c42 <HAL_TIM_PWM_Start_DMA+0xda>
 8002c16:	68bb      	ldr	r3, [r7, #8]
 8002c18:	2b08      	cmp	r3, #8
 8002c1a:	d109      	bne.n	8002c30 <HAL_TIM_PWM_Start_DMA+0xc8>
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002c22:	b2db      	uxtb	r3, r3
 8002c24:	2b01      	cmp	r3, #1
 8002c26:	bf0c      	ite	eq
 8002c28:	2301      	moveq	r3, #1
 8002c2a:	2300      	movne	r3, #0
 8002c2c:	b2db      	uxtb	r3, r3
 8002c2e:	e008      	b.n	8002c42 <HAL_TIM_PWM_Start_DMA+0xda>
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002c36:	b2db      	uxtb	r3, r3
 8002c38:	2b01      	cmp	r3, #1
 8002c3a:	bf0c      	ite	eq
 8002c3c:	2301      	moveq	r3, #1
 8002c3e:	2300      	movne	r3, #0
 8002c40:	b2db      	uxtb	r3, r3
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d024      	beq.n	8002c90 <HAL_TIM_PWM_Start_DMA+0x128>
  {
    if ((pData == NULL) || (Length == 0U))
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d002      	beq.n	8002c52 <HAL_TIM_PWM_Start_DMA+0xea>
 8002c4c:	887b      	ldrh	r3, [r7, #2]
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d101      	bne.n	8002c56 <HAL_TIM_PWM_Start_DMA+0xee>
    {
      return HAL_ERROR;
 8002c52:	2301      	movs	r3, #1
 8002c54:	e123      	b.n	8002e9e <HAL_TIM_PWM_Start_DMA+0x336>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002c56:	68bb      	ldr	r3, [r7, #8]
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d104      	bne.n	8002c66 <HAL_TIM_PWM_Start_DMA+0xfe>
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	2202      	movs	r2, #2
 8002c60:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002c64:	e016      	b.n	8002c94 <HAL_TIM_PWM_Start_DMA+0x12c>
 8002c66:	68bb      	ldr	r3, [r7, #8]
 8002c68:	2b04      	cmp	r3, #4
 8002c6a:	d104      	bne.n	8002c76 <HAL_TIM_PWM_Start_DMA+0x10e>
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	2202      	movs	r2, #2
 8002c70:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002c74:	e00e      	b.n	8002c94 <HAL_TIM_PWM_Start_DMA+0x12c>
 8002c76:	68bb      	ldr	r3, [r7, #8]
 8002c78:	2b08      	cmp	r3, #8
 8002c7a:	d104      	bne.n	8002c86 <HAL_TIM_PWM_Start_DMA+0x11e>
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	2202      	movs	r2, #2
 8002c80:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002c84:	e006      	b.n	8002c94 <HAL_TIM_PWM_Start_DMA+0x12c>
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	2202      	movs	r2, #2
 8002c8a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8002c8e:	e001      	b.n	8002c94 <HAL_TIM_PWM_Start_DMA+0x12c>
    }
  }
  else
  {
    return HAL_ERROR;
 8002c90:	2301      	movs	r3, #1
 8002c92:	e104      	b.n	8002e9e <HAL_TIM_PWM_Start_DMA+0x336>
  }

  switch (Channel)
 8002c94:	68bb      	ldr	r3, [r7, #8]
 8002c96:	2b0c      	cmp	r3, #12
 8002c98:	f200 80ae 	bhi.w	8002df8 <HAL_TIM_PWM_Start_DMA+0x290>
 8002c9c:	a201      	add	r2, pc, #4	@ (adr r2, 8002ca4 <HAL_TIM_PWM_Start_DMA+0x13c>)
 8002c9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ca2:	bf00      	nop
 8002ca4:	08002cd9 	.word	0x08002cd9
 8002ca8:	08002df9 	.word	0x08002df9
 8002cac:	08002df9 	.word	0x08002df9
 8002cb0:	08002df9 	.word	0x08002df9
 8002cb4:	08002d21 	.word	0x08002d21
 8002cb8:	08002df9 	.word	0x08002df9
 8002cbc:	08002df9 	.word	0x08002df9
 8002cc0:	08002df9 	.word	0x08002df9
 8002cc4:	08002d69 	.word	0x08002d69
 8002cc8:	08002df9 	.word	0x08002df9
 8002ccc:	08002df9 	.word	0x08002df9
 8002cd0:	08002df9 	.word	0x08002df9
 8002cd4:	08002db1 	.word	0x08002db1
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cdc:	4a72      	ldr	r2, [pc, #456]	@ (8002ea8 <HAL_TIM_PWM_Start_DMA+0x340>)
 8002cde:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ce4:	4a71      	ldr	r2, [pc, #452]	@ (8002eac <HAL_TIM_PWM_Start_DMA+0x344>)
 8002ce6:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cec:	4a70      	ldr	r2, [pc, #448]	@ (8002eb0 <HAL_TIM_PWM_Start_DMA+0x348>)
 8002cee:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8002cf4:	6879      	ldr	r1, [r7, #4]
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	3334      	adds	r3, #52	@ 0x34
 8002cfc:	461a      	mov	r2, r3
 8002cfe:	887b      	ldrh	r3, [r7, #2]
 8002d00:	f7fe fdea 	bl	80018d8 <HAL_DMA_Start_IT>
 8002d04:	4603      	mov	r3, r0
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d001      	beq.n	8002d0e <HAL_TIM_PWM_Start_DMA+0x1a6>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8002d0a:	2301      	movs	r3, #1
 8002d0c:	e0c7      	b.n	8002e9e <HAL_TIM_PWM_Start_DMA+0x336>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	68da      	ldr	r2, [r3, #12]
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002d1c:	60da      	str	r2, [r3, #12]
      break;
 8002d1e:	e06e      	b.n	8002dfe <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d24:	4a60      	ldr	r2, [pc, #384]	@ (8002ea8 <HAL_TIM_PWM_Start_DMA+0x340>)
 8002d26:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d2c:	4a5f      	ldr	r2, [pc, #380]	@ (8002eac <HAL_TIM_PWM_Start_DMA+0x344>)
 8002d2e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d34:	4a5e      	ldr	r2, [pc, #376]	@ (8002eb0 <HAL_TIM_PWM_Start_DMA+0x348>)
 8002d36:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8002d3c:	6879      	ldr	r1, [r7, #4]
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	3338      	adds	r3, #56	@ 0x38
 8002d44:	461a      	mov	r2, r3
 8002d46:	887b      	ldrh	r3, [r7, #2]
 8002d48:	f7fe fdc6 	bl	80018d8 <HAL_DMA_Start_IT>
 8002d4c:	4603      	mov	r3, r0
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d001      	beq.n	8002d56 <HAL_TIM_PWM_Start_DMA+0x1ee>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8002d52:	2301      	movs	r3, #1
 8002d54:	e0a3      	b.n	8002e9e <HAL_TIM_PWM_Start_DMA+0x336>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	68da      	ldr	r2, [r3, #12]
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002d64:	60da      	str	r2, [r3, #12]
      break;
 8002d66:	e04a      	b.n	8002dfe <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d6c:	4a4e      	ldr	r2, [pc, #312]	@ (8002ea8 <HAL_TIM_PWM_Start_DMA+0x340>)
 8002d6e:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d74:	4a4d      	ldr	r2, [pc, #308]	@ (8002eac <HAL_TIM_PWM_Start_DMA+0x344>)
 8002d76:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d7c:	4a4c      	ldr	r2, [pc, #304]	@ (8002eb0 <HAL_TIM_PWM_Start_DMA+0x348>)
 8002d7e:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8002d84:	6879      	ldr	r1, [r7, #4]
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	333c      	adds	r3, #60	@ 0x3c
 8002d8c:	461a      	mov	r2, r3
 8002d8e:	887b      	ldrh	r3, [r7, #2]
 8002d90:	f7fe fda2 	bl	80018d8 <HAL_DMA_Start_IT>
 8002d94:	4603      	mov	r3, r0
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d001      	beq.n	8002d9e <HAL_TIM_PWM_Start_DMA+0x236>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8002d9a:	2301      	movs	r3, #1
 8002d9c:	e07f      	b.n	8002e9e <HAL_TIM_PWM_Start_DMA+0x336>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	68da      	ldr	r2, [r3, #12]
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002dac:	60da      	str	r2, [r3, #12]
      break;
 8002dae:	e026      	b.n	8002dfe <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002db4:	4a3c      	ldr	r2, [pc, #240]	@ (8002ea8 <HAL_TIM_PWM_Start_DMA+0x340>)
 8002db6:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002dbc:	4a3b      	ldr	r2, [pc, #236]	@ (8002eac <HAL_TIM_PWM_Start_DMA+0x344>)
 8002dbe:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002dc4:	4a3a      	ldr	r2, [pc, #232]	@ (8002eb0 <HAL_TIM_PWM_Start_DMA+0x348>)
 8002dc6:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8002dcc:	6879      	ldr	r1, [r7, #4]
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	3340      	adds	r3, #64	@ 0x40
 8002dd4:	461a      	mov	r2, r3
 8002dd6:	887b      	ldrh	r3, [r7, #2]
 8002dd8:	f7fe fd7e 	bl	80018d8 <HAL_DMA_Start_IT>
 8002ddc:	4603      	mov	r3, r0
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d001      	beq.n	8002de6 <HAL_TIM_PWM_Start_DMA+0x27e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8002de2:	2301      	movs	r3, #1
 8002de4:	e05b      	b.n	8002e9e <HAL_TIM_PWM_Start_DMA+0x336>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	68da      	ldr	r2, [r3, #12]
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8002df4:	60da      	str	r2, [r3, #12]
      break;
 8002df6:	e002      	b.n	8002dfe <HAL_TIM_PWM_Start_DMA+0x296>
    }

    default:
      status = HAL_ERROR;
 8002df8:	2301      	movs	r3, #1
 8002dfa:	75fb      	strb	r3, [r7, #23]
      break;
 8002dfc:	bf00      	nop
  }

  if (status == HAL_OK)
 8002dfe:	7dfb      	ldrb	r3, [r7, #23]
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d14b      	bne.n	8002e9c <HAL_TIM_PWM_Start_DMA+0x334>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	2201      	movs	r2, #1
 8002e0a:	68b9      	ldr	r1, [r7, #8]
 8002e0c:	4618      	mov	r0, r3
 8002e0e:	f000 fc1f 	bl	8003650 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	4a27      	ldr	r2, [pc, #156]	@ (8002eb4 <HAL_TIM_PWM_Start_DMA+0x34c>)
 8002e18:	4293      	cmp	r3, r2
 8002e1a:	d107      	bne.n	8002e2c <HAL_TIM_PWM_Start_DMA+0x2c4>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002e2a:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	4a20      	ldr	r2, [pc, #128]	@ (8002eb4 <HAL_TIM_PWM_Start_DMA+0x34c>)
 8002e32:	4293      	cmp	r3, r2
 8002e34:	d018      	beq.n	8002e68 <HAL_TIM_PWM_Start_DMA+0x300>
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002e3e:	d013      	beq.n	8002e68 <HAL_TIM_PWM_Start_DMA+0x300>
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	4a1c      	ldr	r2, [pc, #112]	@ (8002eb8 <HAL_TIM_PWM_Start_DMA+0x350>)
 8002e46:	4293      	cmp	r3, r2
 8002e48:	d00e      	beq.n	8002e68 <HAL_TIM_PWM_Start_DMA+0x300>
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	4a1b      	ldr	r2, [pc, #108]	@ (8002ebc <HAL_TIM_PWM_Start_DMA+0x354>)
 8002e50:	4293      	cmp	r3, r2
 8002e52:	d009      	beq.n	8002e68 <HAL_TIM_PWM_Start_DMA+0x300>
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	4a19      	ldr	r2, [pc, #100]	@ (8002ec0 <HAL_TIM_PWM_Start_DMA+0x358>)
 8002e5a:	4293      	cmp	r3, r2
 8002e5c:	d004      	beq.n	8002e68 <HAL_TIM_PWM_Start_DMA+0x300>
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	4a18      	ldr	r2, [pc, #96]	@ (8002ec4 <HAL_TIM_PWM_Start_DMA+0x35c>)
 8002e64:	4293      	cmp	r3, r2
 8002e66:	d111      	bne.n	8002e8c <HAL_TIM_PWM_Start_DMA+0x324>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	689b      	ldr	r3, [r3, #8]
 8002e6e:	f003 0307 	and.w	r3, r3, #7
 8002e72:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e74:	693b      	ldr	r3, [r7, #16]
 8002e76:	2b06      	cmp	r3, #6
 8002e78:	d010      	beq.n	8002e9c <HAL_TIM_PWM_Start_DMA+0x334>
      {
        __HAL_TIM_ENABLE(htim);
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	681a      	ldr	r2, [r3, #0]
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f042 0201 	orr.w	r2, r2, #1
 8002e88:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e8a:	e007      	b.n	8002e9c <HAL_TIM_PWM_Start_DMA+0x334>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	681a      	ldr	r2, [r3, #0]
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f042 0201 	orr.w	r2, r2, #1
 8002e9a:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8002e9c:	7dfb      	ldrb	r3, [r7, #23]
}
 8002e9e:	4618      	mov	r0, r3
 8002ea0:	3718      	adds	r7, #24
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	bd80      	pop	{r7, pc}
 8002ea6:	bf00      	nop
 8002ea8:	0800311b 	.word	0x0800311b
 8002eac:	080031c3 	.word	0x080031c3
 8002eb0:	08003089 	.word	0x08003089
 8002eb4:	40010000 	.word	0x40010000
 8002eb8:	40000400 	.word	0x40000400
 8002ebc:	40000800 	.word	0x40000800
 8002ec0:	40000c00 	.word	0x40000c00
 8002ec4:	40014000 	.word	0x40014000

08002ec8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002ec8:	b580      	push	{r7, lr}
 8002eca:	b086      	sub	sp, #24
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	60f8      	str	r0, [r7, #12]
 8002ed0:	60b9      	str	r1, [r7, #8]
 8002ed2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002ed4:	2300      	movs	r3, #0
 8002ed6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002ede:	2b01      	cmp	r3, #1
 8002ee0:	d101      	bne.n	8002ee6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002ee2:	2302      	movs	r3, #2
 8002ee4:	e0ae      	b.n	8003044 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	2201      	movs	r2, #1
 8002eea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	2b0c      	cmp	r3, #12
 8002ef2:	f200 809f 	bhi.w	8003034 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8002ef6:	a201      	add	r2, pc, #4	@ (adr r2, 8002efc <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002ef8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002efc:	08002f31 	.word	0x08002f31
 8002f00:	08003035 	.word	0x08003035
 8002f04:	08003035 	.word	0x08003035
 8002f08:	08003035 	.word	0x08003035
 8002f0c:	08002f71 	.word	0x08002f71
 8002f10:	08003035 	.word	0x08003035
 8002f14:	08003035 	.word	0x08003035
 8002f18:	08003035 	.word	0x08003035
 8002f1c:	08002fb3 	.word	0x08002fb3
 8002f20:	08003035 	.word	0x08003035
 8002f24:	08003035 	.word	0x08003035
 8002f28:	08003035 	.word	0x08003035
 8002f2c:	08002ff3 	.word	0x08002ff3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	68b9      	ldr	r1, [r7, #8]
 8002f36:	4618      	mov	r0, r3
 8002f38:	f000 f9fe 	bl	8003338 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	699a      	ldr	r2, [r3, #24]
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f042 0208 	orr.w	r2, r2, #8
 8002f4a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	699a      	ldr	r2, [r3, #24]
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	f022 0204 	bic.w	r2, r2, #4
 8002f5a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	6999      	ldr	r1, [r3, #24]
 8002f62:	68bb      	ldr	r3, [r7, #8]
 8002f64:	691a      	ldr	r2, [r3, #16]
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	430a      	orrs	r2, r1
 8002f6c:	619a      	str	r2, [r3, #24]
      break;
 8002f6e:	e064      	b.n	800303a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	68b9      	ldr	r1, [r7, #8]
 8002f76:	4618      	mov	r0, r3
 8002f78:	f000 fa44 	bl	8003404 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	699a      	ldr	r2, [r3, #24]
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002f8a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	699a      	ldr	r2, [r3, #24]
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002f9a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	6999      	ldr	r1, [r3, #24]
 8002fa2:	68bb      	ldr	r3, [r7, #8]
 8002fa4:	691b      	ldr	r3, [r3, #16]
 8002fa6:	021a      	lsls	r2, r3, #8
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	430a      	orrs	r2, r1
 8002fae:	619a      	str	r2, [r3, #24]
      break;
 8002fb0:	e043      	b.n	800303a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	68b9      	ldr	r1, [r7, #8]
 8002fb8:	4618      	mov	r0, r3
 8002fba:	f000 fa8f 	bl	80034dc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	69da      	ldr	r2, [r3, #28]
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f042 0208 	orr.w	r2, r2, #8
 8002fcc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	69da      	ldr	r2, [r3, #28]
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	f022 0204 	bic.w	r2, r2, #4
 8002fdc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	69d9      	ldr	r1, [r3, #28]
 8002fe4:	68bb      	ldr	r3, [r7, #8]
 8002fe6:	691a      	ldr	r2, [r3, #16]
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	430a      	orrs	r2, r1
 8002fee:	61da      	str	r2, [r3, #28]
      break;
 8002ff0:	e023      	b.n	800303a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	68b9      	ldr	r1, [r7, #8]
 8002ff8:	4618      	mov	r0, r3
 8002ffa:	f000 fad9 	bl	80035b0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	69da      	ldr	r2, [r3, #28]
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800300c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	69da      	ldr	r2, [r3, #28]
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800301c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	69d9      	ldr	r1, [r3, #28]
 8003024:	68bb      	ldr	r3, [r7, #8]
 8003026:	691b      	ldr	r3, [r3, #16]
 8003028:	021a      	lsls	r2, r3, #8
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	430a      	orrs	r2, r1
 8003030:	61da      	str	r2, [r3, #28]
      break;
 8003032:	e002      	b.n	800303a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003034:	2301      	movs	r3, #1
 8003036:	75fb      	strb	r3, [r7, #23]
      break;
 8003038:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	2200      	movs	r2, #0
 800303e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003042:	7dfb      	ldrb	r3, [r7, #23]
}
 8003044:	4618      	mov	r0, r3
 8003046:	3718      	adds	r7, #24
 8003048:	46bd      	mov	sp, r7
 800304a:	bd80      	pop	{r7, pc}

0800304c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800304c:	b480      	push	{r7}
 800304e:	b083      	sub	sp, #12
 8003050:	af00      	add	r7, sp, #0
 8003052:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003054:	bf00      	nop
 8003056:	370c      	adds	r7, #12
 8003058:	46bd      	mov	sp, r7
 800305a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800305e:	4770      	bx	lr

08003060 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8003060:	b480      	push	{r7}
 8003062:	b083      	sub	sp, #12
 8003064:	af00      	add	r7, sp, #0
 8003066:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8003068:	bf00      	nop
 800306a:	370c      	adds	r7, #12
 800306c:	46bd      	mov	sp, r7
 800306e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003072:	4770      	bx	lr

08003074 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8003074:	b480      	push	{r7}
 8003076:	b083      	sub	sp, #12
 8003078:	af00      	add	r7, sp, #0
 800307a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 800307c:	bf00      	nop
 800307e:	370c      	adds	r7, #12
 8003080:	46bd      	mov	sp, r7
 8003082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003086:	4770      	bx	lr

08003088 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8003088:	b580      	push	{r7, lr}
 800308a:	b084      	sub	sp, #16
 800308c:	af00      	add	r7, sp, #0
 800308e:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003094:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800309a:	687a      	ldr	r2, [r7, #4]
 800309c:	429a      	cmp	r2, r3
 800309e:	d107      	bne.n	80030b0 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	2201      	movs	r2, #1
 80030a4:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	2201      	movs	r2, #1
 80030aa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80030ae:	e02a      	b.n	8003106 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030b4:	687a      	ldr	r2, [r7, #4]
 80030b6:	429a      	cmp	r2, r3
 80030b8:	d107      	bne.n	80030ca <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	2202      	movs	r2, #2
 80030be:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	2201      	movs	r2, #1
 80030c4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80030c8:	e01d      	b.n	8003106 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030ce:	687a      	ldr	r2, [r7, #4]
 80030d0:	429a      	cmp	r2, r3
 80030d2:	d107      	bne.n	80030e4 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	2204      	movs	r2, #4
 80030d8:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	2201      	movs	r2, #1
 80030de:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80030e2:	e010      	b.n	8003106 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030e8:	687a      	ldr	r2, [r7, #4]
 80030ea:	429a      	cmp	r2, r3
 80030ec:	d107      	bne.n	80030fe <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	2208      	movs	r2, #8
 80030f2:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	2201      	movs	r2, #1
 80030f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80030fc:	e003      	b.n	8003106 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	2201      	movs	r2, #1
 8003102:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8003106:	68f8      	ldr	r0, [r7, #12]
 8003108:	f7ff ffb4 	bl	8003074 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	2200      	movs	r2, #0
 8003110:	771a      	strb	r2, [r3, #28]
}
 8003112:	bf00      	nop
 8003114:	3710      	adds	r7, #16
 8003116:	46bd      	mov	sp, r7
 8003118:	bd80      	pop	{r7, pc}

0800311a <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 800311a:	b580      	push	{r7, lr}
 800311c:	b084      	sub	sp, #16
 800311e:	af00      	add	r7, sp, #0
 8003120:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003126:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800312c:	687a      	ldr	r2, [r7, #4]
 800312e:	429a      	cmp	r2, r3
 8003130:	d10b      	bne.n	800314a <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	2201      	movs	r2, #1
 8003136:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	69db      	ldr	r3, [r3, #28]
 800313c:	2b00      	cmp	r3, #0
 800313e:	d136      	bne.n	80031ae <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	2201      	movs	r2, #1
 8003144:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003148:	e031      	b.n	80031ae <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800314e:	687a      	ldr	r2, [r7, #4]
 8003150:	429a      	cmp	r2, r3
 8003152:	d10b      	bne.n	800316c <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	2202      	movs	r2, #2
 8003158:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	69db      	ldr	r3, [r3, #28]
 800315e:	2b00      	cmp	r3, #0
 8003160:	d125      	bne.n	80031ae <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	2201      	movs	r2, #1
 8003166:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800316a:	e020      	b.n	80031ae <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003170:	687a      	ldr	r2, [r7, #4]
 8003172:	429a      	cmp	r2, r3
 8003174:	d10b      	bne.n	800318e <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	2204      	movs	r2, #4
 800317a:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	69db      	ldr	r3, [r3, #28]
 8003180:	2b00      	cmp	r3, #0
 8003182:	d114      	bne.n	80031ae <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	2201      	movs	r2, #1
 8003188:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800318c:	e00f      	b.n	80031ae <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003192:	687a      	ldr	r2, [r7, #4]
 8003194:	429a      	cmp	r2, r3
 8003196:	d10a      	bne.n	80031ae <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	2208      	movs	r2, #8
 800319c:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	69db      	ldr	r3, [r3, #28]
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d103      	bne.n	80031ae <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	2201      	movs	r2, #1
 80031aa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 80031ae:	68f8      	ldr	r0, [r7, #12]
 80031b0:	f7ff ff4c 	bl	800304c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	2200      	movs	r2, #0
 80031b8:	771a      	strb	r2, [r3, #28]
}
 80031ba:	bf00      	nop
 80031bc:	3710      	adds	r7, #16
 80031be:	46bd      	mov	sp, r7
 80031c0:	bd80      	pop	{r7, pc}

080031c2 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 80031c2:	b580      	push	{r7, lr}
 80031c4:	b084      	sub	sp, #16
 80031c6:	af00      	add	r7, sp, #0
 80031c8:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80031ce:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031d4:	687a      	ldr	r2, [r7, #4]
 80031d6:	429a      	cmp	r2, r3
 80031d8:	d103      	bne.n	80031e2 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	2201      	movs	r2, #1
 80031de:	771a      	strb	r2, [r3, #28]
 80031e0:	e019      	b.n	8003216 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80031e6:	687a      	ldr	r2, [r7, #4]
 80031e8:	429a      	cmp	r2, r3
 80031ea:	d103      	bne.n	80031f4 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	2202      	movs	r2, #2
 80031f0:	771a      	strb	r2, [r3, #28]
 80031f2:	e010      	b.n	8003216 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031f8:	687a      	ldr	r2, [r7, #4]
 80031fa:	429a      	cmp	r2, r3
 80031fc:	d103      	bne.n	8003206 <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	2204      	movs	r2, #4
 8003202:	771a      	strb	r2, [r3, #28]
 8003204:	e007      	b.n	8003216 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800320a:	687a      	ldr	r2, [r7, #4]
 800320c:	429a      	cmp	r2, r3
 800320e:	d102      	bne.n	8003216 <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	2208      	movs	r2, #8
 8003214:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8003216:	68f8      	ldr	r0, [r7, #12]
 8003218:	f7ff ff22 	bl	8003060 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	2200      	movs	r2, #0
 8003220:	771a      	strb	r2, [r3, #28]
}
 8003222:	bf00      	nop
 8003224:	3710      	adds	r7, #16
 8003226:	46bd      	mov	sp, r7
 8003228:	bd80      	pop	{r7, pc}
	...

0800322c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800322c:	b480      	push	{r7}
 800322e:	b085      	sub	sp, #20
 8003230:	af00      	add	r7, sp, #0
 8003232:	6078      	str	r0, [r7, #4]
 8003234:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	4a37      	ldr	r2, [pc, #220]	@ (800331c <TIM_Base_SetConfig+0xf0>)
 8003240:	4293      	cmp	r3, r2
 8003242:	d00f      	beq.n	8003264 <TIM_Base_SetConfig+0x38>
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800324a:	d00b      	beq.n	8003264 <TIM_Base_SetConfig+0x38>
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	4a34      	ldr	r2, [pc, #208]	@ (8003320 <TIM_Base_SetConfig+0xf4>)
 8003250:	4293      	cmp	r3, r2
 8003252:	d007      	beq.n	8003264 <TIM_Base_SetConfig+0x38>
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	4a33      	ldr	r2, [pc, #204]	@ (8003324 <TIM_Base_SetConfig+0xf8>)
 8003258:	4293      	cmp	r3, r2
 800325a:	d003      	beq.n	8003264 <TIM_Base_SetConfig+0x38>
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	4a32      	ldr	r2, [pc, #200]	@ (8003328 <TIM_Base_SetConfig+0xfc>)
 8003260:	4293      	cmp	r3, r2
 8003262:	d108      	bne.n	8003276 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800326a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800326c:	683b      	ldr	r3, [r7, #0]
 800326e:	685b      	ldr	r3, [r3, #4]
 8003270:	68fa      	ldr	r2, [r7, #12]
 8003272:	4313      	orrs	r3, r2
 8003274:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	4a28      	ldr	r2, [pc, #160]	@ (800331c <TIM_Base_SetConfig+0xf0>)
 800327a:	4293      	cmp	r3, r2
 800327c:	d01b      	beq.n	80032b6 <TIM_Base_SetConfig+0x8a>
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003284:	d017      	beq.n	80032b6 <TIM_Base_SetConfig+0x8a>
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	4a25      	ldr	r2, [pc, #148]	@ (8003320 <TIM_Base_SetConfig+0xf4>)
 800328a:	4293      	cmp	r3, r2
 800328c:	d013      	beq.n	80032b6 <TIM_Base_SetConfig+0x8a>
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	4a24      	ldr	r2, [pc, #144]	@ (8003324 <TIM_Base_SetConfig+0xf8>)
 8003292:	4293      	cmp	r3, r2
 8003294:	d00f      	beq.n	80032b6 <TIM_Base_SetConfig+0x8a>
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	4a23      	ldr	r2, [pc, #140]	@ (8003328 <TIM_Base_SetConfig+0xfc>)
 800329a:	4293      	cmp	r3, r2
 800329c:	d00b      	beq.n	80032b6 <TIM_Base_SetConfig+0x8a>
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	4a22      	ldr	r2, [pc, #136]	@ (800332c <TIM_Base_SetConfig+0x100>)
 80032a2:	4293      	cmp	r3, r2
 80032a4:	d007      	beq.n	80032b6 <TIM_Base_SetConfig+0x8a>
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	4a21      	ldr	r2, [pc, #132]	@ (8003330 <TIM_Base_SetConfig+0x104>)
 80032aa:	4293      	cmp	r3, r2
 80032ac:	d003      	beq.n	80032b6 <TIM_Base_SetConfig+0x8a>
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	4a20      	ldr	r2, [pc, #128]	@ (8003334 <TIM_Base_SetConfig+0x108>)
 80032b2:	4293      	cmp	r3, r2
 80032b4:	d108      	bne.n	80032c8 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80032bc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80032be:	683b      	ldr	r3, [r7, #0]
 80032c0:	68db      	ldr	r3, [r3, #12]
 80032c2:	68fa      	ldr	r2, [r7, #12]
 80032c4:	4313      	orrs	r3, r2
 80032c6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80032ce:	683b      	ldr	r3, [r7, #0]
 80032d0:	695b      	ldr	r3, [r3, #20]
 80032d2:	4313      	orrs	r3, r2
 80032d4:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80032d6:	683b      	ldr	r3, [r7, #0]
 80032d8:	689a      	ldr	r2, [r3, #8]
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80032de:	683b      	ldr	r3, [r7, #0]
 80032e0:	681a      	ldr	r2, [r3, #0]
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	4a0c      	ldr	r2, [pc, #48]	@ (800331c <TIM_Base_SetConfig+0xf0>)
 80032ea:	4293      	cmp	r3, r2
 80032ec:	d103      	bne.n	80032f6 <TIM_Base_SetConfig+0xca>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80032ee:	683b      	ldr	r3, [r7, #0]
 80032f0:	691a      	ldr	r2, [r3, #16]
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f043 0204 	orr.w	r2, r3, #4
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	2201      	movs	r2, #1
 8003306:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	68fa      	ldr	r2, [r7, #12]
 800330c:	601a      	str	r2, [r3, #0]
}
 800330e:	bf00      	nop
 8003310:	3714      	adds	r7, #20
 8003312:	46bd      	mov	sp, r7
 8003314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003318:	4770      	bx	lr
 800331a:	bf00      	nop
 800331c:	40010000 	.word	0x40010000
 8003320:	40000400 	.word	0x40000400
 8003324:	40000800 	.word	0x40000800
 8003328:	40000c00 	.word	0x40000c00
 800332c:	40014000 	.word	0x40014000
 8003330:	40014400 	.word	0x40014400
 8003334:	40014800 	.word	0x40014800

08003338 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003338:	b480      	push	{r7}
 800333a:	b087      	sub	sp, #28
 800333c:	af00      	add	r7, sp, #0
 800333e:	6078      	str	r0, [r7, #4]
 8003340:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	6a1b      	ldr	r3, [r3, #32]
 8003346:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	6a1b      	ldr	r3, [r3, #32]
 800334c:	f023 0201 	bic.w	r2, r3, #1
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	685b      	ldr	r3, [r3, #4]
 8003358:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	699b      	ldr	r3, [r3, #24]
 800335e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003366:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	f023 0303 	bic.w	r3, r3, #3
 800336e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003370:	683b      	ldr	r3, [r7, #0]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	68fa      	ldr	r2, [r7, #12]
 8003376:	4313      	orrs	r3, r2
 8003378:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800337a:	697b      	ldr	r3, [r7, #20]
 800337c:	f023 0302 	bic.w	r3, r3, #2
 8003380:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003382:	683b      	ldr	r3, [r7, #0]
 8003384:	689b      	ldr	r3, [r3, #8]
 8003386:	697a      	ldr	r2, [r7, #20]
 8003388:	4313      	orrs	r3, r2
 800338a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	4a1c      	ldr	r2, [pc, #112]	@ (8003400 <TIM_OC1_SetConfig+0xc8>)
 8003390:	4293      	cmp	r3, r2
 8003392:	d10c      	bne.n	80033ae <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003394:	697b      	ldr	r3, [r7, #20]
 8003396:	f023 0308 	bic.w	r3, r3, #8
 800339a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800339c:	683b      	ldr	r3, [r7, #0]
 800339e:	68db      	ldr	r3, [r3, #12]
 80033a0:	697a      	ldr	r2, [r7, #20]
 80033a2:	4313      	orrs	r3, r2
 80033a4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80033a6:	697b      	ldr	r3, [r7, #20]
 80033a8:	f023 0304 	bic.w	r3, r3, #4
 80033ac:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	4a13      	ldr	r2, [pc, #76]	@ (8003400 <TIM_OC1_SetConfig+0xc8>)
 80033b2:	4293      	cmp	r3, r2
 80033b4:	d111      	bne.n	80033da <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80033b6:	693b      	ldr	r3, [r7, #16]
 80033b8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80033bc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80033be:	693b      	ldr	r3, [r7, #16]
 80033c0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80033c4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80033c6:	683b      	ldr	r3, [r7, #0]
 80033c8:	695b      	ldr	r3, [r3, #20]
 80033ca:	693a      	ldr	r2, [r7, #16]
 80033cc:	4313      	orrs	r3, r2
 80033ce:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80033d0:	683b      	ldr	r3, [r7, #0]
 80033d2:	699b      	ldr	r3, [r3, #24]
 80033d4:	693a      	ldr	r2, [r7, #16]
 80033d6:	4313      	orrs	r3, r2
 80033d8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	693a      	ldr	r2, [r7, #16]
 80033de:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	68fa      	ldr	r2, [r7, #12]
 80033e4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80033e6:	683b      	ldr	r3, [r7, #0]
 80033e8:	685a      	ldr	r2, [r3, #4]
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	697a      	ldr	r2, [r7, #20]
 80033f2:	621a      	str	r2, [r3, #32]
}
 80033f4:	bf00      	nop
 80033f6:	371c      	adds	r7, #28
 80033f8:	46bd      	mov	sp, r7
 80033fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033fe:	4770      	bx	lr
 8003400:	40010000 	.word	0x40010000

08003404 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003404:	b480      	push	{r7}
 8003406:	b087      	sub	sp, #28
 8003408:	af00      	add	r7, sp, #0
 800340a:	6078      	str	r0, [r7, #4]
 800340c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	6a1b      	ldr	r3, [r3, #32]
 8003412:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	6a1b      	ldr	r3, [r3, #32]
 8003418:	f023 0210 	bic.w	r2, r3, #16
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	685b      	ldr	r3, [r3, #4]
 8003424:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	699b      	ldr	r3, [r3, #24]
 800342a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003432:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800343a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800343c:	683b      	ldr	r3, [r7, #0]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	021b      	lsls	r3, r3, #8
 8003442:	68fa      	ldr	r2, [r7, #12]
 8003444:	4313      	orrs	r3, r2
 8003446:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003448:	697b      	ldr	r3, [r7, #20]
 800344a:	f023 0320 	bic.w	r3, r3, #32
 800344e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003450:	683b      	ldr	r3, [r7, #0]
 8003452:	689b      	ldr	r3, [r3, #8]
 8003454:	011b      	lsls	r3, r3, #4
 8003456:	697a      	ldr	r2, [r7, #20]
 8003458:	4313      	orrs	r3, r2
 800345a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	4a1e      	ldr	r2, [pc, #120]	@ (80034d8 <TIM_OC2_SetConfig+0xd4>)
 8003460:	4293      	cmp	r3, r2
 8003462:	d10d      	bne.n	8003480 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003464:	697b      	ldr	r3, [r7, #20]
 8003466:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800346a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800346c:	683b      	ldr	r3, [r7, #0]
 800346e:	68db      	ldr	r3, [r3, #12]
 8003470:	011b      	lsls	r3, r3, #4
 8003472:	697a      	ldr	r2, [r7, #20]
 8003474:	4313      	orrs	r3, r2
 8003476:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003478:	697b      	ldr	r3, [r7, #20]
 800347a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800347e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	4a15      	ldr	r2, [pc, #84]	@ (80034d8 <TIM_OC2_SetConfig+0xd4>)
 8003484:	4293      	cmp	r3, r2
 8003486:	d113      	bne.n	80034b0 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003488:	693b      	ldr	r3, [r7, #16]
 800348a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800348e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003490:	693b      	ldr	r3, [r7, #16]
 8003492:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003496:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003498:	683b      	ldr	r3, [r7, #0]
 800349a:	695b      	ldr	r3, [r3, #20]
 800349c:	009b      	lsls	r3, r3, #2
 800349e:	693a      	ldr	r2, [r7, #16]
 80034a0:	4313      	orrs	r3, r2
 80034a2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80034a4:	683b      	ldr	r3, [r7, #0]
 80034a6:	699b      	ldr	r3, [r3, #24]
 80034a8:	009b      	lsls	r3, r3, #2
 80034aa:	693a      	ldr	r2, [r7, #16]
 80034ac:	4313      	orrs	r3, r2
 80034ae:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	693a      	ldr	r2, [r7, #16]
 80034b4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	68fa      	ldr	r2, [r7, #12]
 80034ba:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80034bc:	683b      	ldr	r3, [r7, #0]
 80034be:	685a      	ldr	r2, [r3, #4]
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	697a      	ldr	r2, [r7, #20]
 80034c8:	621a      	str	r2, [r3, #32]
}
 80034ca:	bf00      	nop
 80034cc:	371c      	adds	r7, #28
 80034ce:	46bd      	mov	sp, r7
 80034d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d4:	4770      	bx	lr
 80034d6:	bf00      	nop
 80034d8:	40010000 	.word	0x40010000

080034dc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80034dc:	b480      	push	{r7}
 80034de:	b087      	sub	sp, #28
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	6078      	str	r0, [r7, #4]
 80034e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	6a1b      	ldr	r3, [r3, #32]
 80034ea:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	6a1b      	ldr	r3, [r3, #32]
 80034f0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	685b      	ldr	r3, [r3, #4]
 80034fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	69db      	ldr	r3, [r3, #28]
 8003502:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800350a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	f023 0303 	bic.w	r3, r3, #3
 8003512:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003514:	683b      	ldr	r3, [r7, #0]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	68fa      	ldr	r2, [r7, #12]
 800351a:	4313      	orrs	r3, r2
 800351c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800351e:	697b      	ldr	r3, [r7, #20]
 8003520:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003524:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003526:	683b      	ldr	r3, [r7, #0]
 8003528:	689b      	ldr	r3, [r3, #8]
 800352a:	021b      	lsls	r3, r3, #8
 800352c:	697a      	ldr	r2, [r7, #20]
 800352e:	4313      	orrs	r3, r2
 8003530:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	4a1d      	ldr	r2, [pc, #116]	@ (80035ac <TIM_OC3_SetConfig+0xd0>)
 8003536:	4293      	cmp	r3, r2
 8003538:	d10d      	bne.n	8003556 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800353a:	697b      	ldr	r3, [r7, #20]
 800353c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003540:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003542:	683b      	ldr	r3, [r7, #0]
 8003544:	68db      	ldr	r3, [r3, #12]
 8003546:	021b      	lsls	r3, r3, #8
 8003548:	697a      	ldr	r2, [r7, #20]
 800354a:	4313      	orrs	r3, r2
 800354c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800354e:	697b      	ldr	r3, [r7, #20]
 8003550:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003554:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	4a14      	ldr	r2, [pc, #80]	@ (80035ac <TIM_OC3_SetConfig+0xd0>)
 800355a:	4293      	cmp	r3, r2
 800355c:	d113      	bne.n	8003586 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800355e:	693b      	ldr	r3, [r7, #16]
 8003560:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003564:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003566:	693b      	ldr	r3, [r7, #16]
 8003568:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800356c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800356e:	683b      	ldr	r3, [r7, #0]
 8003570:	695b      	ldr	r3, [r3, #20]
 8003572:	011b      	lsls	r3, r3, #4
 8003574:	693a      	ldr	r2, [r7, #16]
 8003576:	4313      	orrs	r3, r2
 8003578:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800357a:	683b      	ldr	r3, [r7, #0]
 800357c:	699b      	ldr	r3, [r3, #24]
 800357e:	011b      	lsls	r3, r3, #4
 8003580:	693a      	ldr	r2, [r7, #16]
 8003582:	4313      	orrs	r3, r2
 8003584:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	693a      	ldr	r2, [r7, #16]
 800358a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	68fa      	ldr	r2, [r7, #12]
 8003590:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003592:	683b      	ldr	r3, [r7, #0]
 8003594:	685a      	ldr	r2, [r3, #4]
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	697a      	ldr	r2, [r7, #20]
 800359e:	621a      	str	r2, [r3, #32]
}
 80035a0:	bf00      	nop
 80035a2:	371c      	adds	r7, #28
 80035a4:	46bd      	mov	sp, r7
 80035a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035aa:	4770      	bx	lr
 80035ac:	40010000 	.word	0x40010000

080035b0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80035b0:	b480      	push	{r7}
 80035b2:	b087      	sub	sp, #28
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	6078      	str	r0, [r7, #4]
 80035b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	6a1b      	ldr	r3, [r3, #32]
 80035be:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	6a1b      	ldr	r3, [r3, #32]
 80035c4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	685b      	ldr	r3, [r3, #4]
 80035d0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	69db      	ldr	r3, [r3, #28]
 80035d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80035de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80035e6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80035e8:	683b      	ldr	r3, [r7, #0]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	021b      	lsls	r3, r3, #8
 80035ee:	68fa      	ldr	r2, [r7, #12]
 80035f0:	4313      	orrs	r3, r2
 80035f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80035f4:	693b      	ldr	r3, [r7, #16]
 80035f6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80035fa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80035fc:	683b      	ldr	r3, [r7, #0]
 80035fe:	689b      	ldr	r3, [r3, #8]
 8003600:	031b      	lsls	r3, r3, #12
 8003602:	693a      	ldr	r2, [r7, #16]
 8003604:	4313      	orrs	r3, r2
 8003606:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	4a10      	ldr	r2, [pc, #64]	@ (800364c <TIM_OC4_SetConfig+0x9c>)
 800360c:	4293      	cmp	r3, r2
 800360e:	d109      	bne.n	8003624 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003610:	697b      	ldr	r3, [r7, #20]
 8003612:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003616:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003618:	683b      	ldr	r3, [r7, #0]
 800361a:	695b      	ldr	r3, [r3, #20]
 800361c:	019b      	lsls	r3, r3, #6
 800361e:	697a      	ldr	r2, [r7, #20]
 8003620:	4313      	orrs	r3, r2
 8003622:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	697a      	ldr	r2, [r7, #20]
 8003628:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	68fa      	ldr	r2, [r7, #12]
 800362e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003630:	683b      	ldr	r3, [r7, #0]
 8003632:	685a      	ldr	r2, [r3, #4]
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	693a      	ldr	r2, [r7, #16]
 800363c:	621a      	str	r2, [r3, #32]
}
 800363e:	bf00      	nop
 8003640:	371c      	adds	r7, #28
 8003642:	46bd      	mov	sp, r7
 8003644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003648:	4770      	bx	lr
 800364a:	bf00      	nop
 800364c:	40010000 	.word	0x40010000

08003650 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003650:	b480      	push	{r7}
 8003652:	b087      	sub	sp, #28
 8003654:	af00      	add	r7, sp, #0
 8003656:	60f8      	str	r0, [r7, #12]
 8003658:	60b9      	str	r1, [r7, #8]
 800365a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800365c:	68bb      	ldr	r3, [r7, #8]
 800365e:	f003 031f 	and.w	r3, r3, #31
 8003662:	2201      	movs	r2, #1
 8003664:	fa02 f303 	lsl.w	r3, r2, r3
 8003668:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	6a1a      	ldr	r2, [r3, #32]
 800366e:	697b      	ldr	r3, [r7, #20]
 8003670:	43db      	mvns	r3, r3
 8003672:	401a      	ands	r2, r3
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	6a1a      	ldr	r2, [r3, #32]
 800367c:	68bb      	ldr	r3, [r7, #8]
 800367e:	f003 031f 	and.w	r3, r3, #31
 8003682:	6879      	ldr	r1, [r7, #4]
 8003684:	fa01 f303 	lsl.w	r3, r1, r3
 8003688:	431a      	orrs	r2, r3
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	621a      	str	r2, [r3, #32]
}
 800368e:	bf00      	nop
 8003690:	371c      	adds	r7, #28
 8003692:	46bd      	mov	sp, r7
 8003694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003698:	4770      	bx	lr
	...

0800369c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800369c:	b480      	push	{r7}
 800369e:	b085      	sub	sp, #20
 80036a0:	af00      	add	r7, sp, #0
 80036a2:	6078      	str	r0, [r7, #4]
 80036a4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80036ac:	2b01      	cmp	r3, #1
 80036ae:	d101      	bne.n	80036b4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80036b0:	2302      	movs	r3, #2
 80036b2:	e050      	b.n	8003756 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	2201      	movs	r2, #1
 80036b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	2202      	movs	r2, #2
 80036c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	685b      	ldr	r3, [r3, #4]
 80036ca:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	689b      	ldr	r3, [r3, #8]
 80036d2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80036da:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80036dc:	683b      	ldr	r3, [r7, #0]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	68fa      	ldr	r2, [r7, #12]
 80036e2:	4313      	orrs	r3, r2
 80036e4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	68fa      	ldr	r2, [r7, #12]
 80036ec:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	4a1c      	ldr	r2, [pc, #112]	@ (8003764 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80036f4:	4293      	cmp	r3, r2
 80036f6:	d018      	beq.n	800372a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003700:	d013      	beq.n	800372a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	4a18      	ldr	r2, [pc, #96]	@ (8003768 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8003708:	4293      	cmp	r3, r2
 800370a:	d00e      	beq.n	800372a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	4a16      	ldr	r2, [pc, #88]	@ (800376c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003712:	4293      	cmp	r3, r2
 8003714:	d009      	beq.n	800372a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	4a15      	ldr	r2, [pc, #84]	@ (8003770 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800371c:	4293      	cmp	r3, r2
 800371e:	d004      	beq.n	800372a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	4a13      	ldr	r2, [pc, #76]	@ (8003774 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8003726:	4293      	cmp	r3, r2
 8003728:	d10c      	bne.n	8003744 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800372a:	68bb      	ldr	r3, [r7, #8]
 800372c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003730:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003732:	683b      	ldr	r3, [r7, #0]
 8003734:	685b      	ldr	r3, [r3, #4]
 8003736:	68ba      	ldr	r2, [r7, #8]
 8003738:	4313      	orrs	r3, r2
 800373a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	68ba      	ldr	r2, [r7, #8]
 8003742:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	2201      	movs	r2, #1
 8003748:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	2200      	movs	r2, #0
 8003750:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003754:	2300      	movs	r3, #0
}
 8003756:	4618      	mov	r0, r3
 8003758:	3714      	adds	r7, #20
 800375a:	46bd      	mov	sp, r7
 800375c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003760:	4770      	bx	lr
 8003762:	bf00      	nop
 8003764:	40010000 	.word	0x40010000
 8003768:	40000400 	.word	0x40000400
 800376c:	40000800 	.word	0x40000800
 8003770:	40000c00 	.word	0x40000c00
 8003774:	40014000 	.word	0x40014000

08003778 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003778:	b580      	push	{r7, lr}
 800377a:	b082      	sub	sp, #8
 800377c:	af00      	add	r7, sp, #0
 800377e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	2b00      	cmp	r3, #0
 8003784:	d101      	bne.n	800378a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003786:	2301      	movs	r3, #1
 8003788:	e042      	b.n	8003810 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003790:	b2db      	uxtb	r3, r3
 8003792:	2b00      	cmp	r3, #0
 8003794:	d106      	bne.n	80037a4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	2200      	movs	r2, #0
 800379a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800379e:	6878      	ldr	r0, [r7, #4]
 80037a0:	f7fd fdaa 	bl	80012f8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	2224      	movs	r2, #36	@ 0x24
 80037a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	68da      	ldr	r2, [r3, #12]
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80037ba:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80037bc:	6878      	ldr	r0, [r7, #4]
 80037be:	f000 f82b 	bl	8003818 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	691a      	ldr	r2, [r3, #16]
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80037d0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	695a      	ldr	r2, [r3, #20]
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80037e0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	68da      	ldr	r2, [r3, #12]
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80037f0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	2200      	movs	r2, #0
 80037f6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	2220      	movs	r2, #32
 80037fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	2220      	movs	r2, #32
 8003804:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	2200      	movs	r2, #0
 800380c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800380e:	2300      	movs	r3, #0
}
 8003810:	4618      	mov	r0, r3
 8003812:	3708      	adds	r7, #8
 8003814:	46bd      	mov	sp, r7
 8003816:	bd80      	pop	{r7, pc}

08003818 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003818:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800381c:	b0c0      	sub	sp, #256	@ 0x100
 800381e:	af00      	add	r7, sp, #0
 8003820:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003824:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	691b      	ldr	r3, [r3, #16]
 800382c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8003830:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003834:	68d9      	ldr	r1, [r3, #12]
 8003836:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800383a:	681a      	ldr	r2, [r3, #0]
 800383c:	ea40 0301 	orr.w	r3, r0, r1
 8003840:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003842:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003846:	689a      	ldr	r2, [r3, #8]
 8003848:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800384c:	691b      	ldr	r3, [r3, #16]
 800384e:	431a      	orrs	r2, r3
 8003850:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003854:	695b      	ldr	r3, [r3, #20]
 8003856:	431a      	orrs	r2, r3
 8003858:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800385c:	69db      	ldr	r3, [r3, #28]
 800385e:	4313      	orrs	r3, r2
 8003860:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003864:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	68db      	ldr	r3, [r3, #12]
 800386c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8003870:	f021 010c 	bic.w	r1, r1, #12
 8003874:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003878:	681a      	ldr	r2, [r3, #0]
 800387a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800387e:	430b      	orrs	r3, r1
 8003880:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003882:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	695b      	ldr	r3, [r3, #20]
 800388a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800388e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003892:	6999      	ldr	r1, [r3, #24]
 8003894:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003898:	681a      	ldr	r2, [r3, #0]
 800389a:	ea40 0301 	orr.w	r3, r0, r1
 800389e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80038a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80038a4:	681a      	ldr	r2, [r3, #0]
 80038a6:	4b8f      	ldr	r3, [pc, #572]	@ (8003ae4 <UART_SetConfig+0x2cc>)
 80038a8:	429a      	cmp	r2, r3
 80038aa:	d005      	beq.n	80038b8 <UART_SetConfig+0xa0>
 80038ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80038b0:	681a      	ldr	r2, [r3, #0]
 80038b2:	4b8d      	ldr	r3, [pc, #564]	@ (8003ae8 <UART_SetConfig+0x2d0>)
 80038b4:	429a      	cmp	r2, r3
 80038b6:	d104      	bne.n	80038c2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80038b8:	f7ff f8f2 	bl	8002aa0 <HAL_RCC_GetPCLK2Freq>
 80038bc:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80038c0:	e003      	b.n	80038ca <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80038c2:	f7ff f8d9 	bl	8002a78 <HAL_RCC_GetPCLK1Freq>
 80038c6:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80038ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80038ce:	69db      	ldr	r3, [r3, #28]
 80038d0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80038d4:	f040 810c 	bne.w	8003af0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80038d8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80038dc:	2200      	movs	r2, #0
 80038de:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80038e2:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80038e6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80038ea:	4622      	mov	r2, r4
 80038ec:	462b      	mov	r3, r5
 80038ee:	1891      	adds	r1, r2, r2
 80038f0:	65b9      	str	r1, [r7, #88]	@ 0x58
 80038f2:	415b      	adcs	r3, r3
 80038f4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80038f6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80038fa:	4621      	mov	r1, r4
 80038fc:	eb12 0801 	adds.w	r8, r2, r1
 8003900:	4629      	mov	r1, r5
 8003902:	eb43 0901 	adc.w	r9, r3, r1
 8003906:	f04f 0200 	mov.w	r2, #0
 800390a:	f04f 0300 	mov.w	r3, #0
 800390e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003912:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003916:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800391a:	4690      	mov	r8, r2
 800391c:	4699      	mov	r9, r3
 800391e:	4623      	mov	r3, r4
 8003920:	eb18 0303 	adds.w	r3, r8, r3
 8003924:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003928:	462b      	mov	r3, r5
 800392a:	eb49 0303 	adc.w	r3, r9, r3
 800392e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003932:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003936:	685b      	ldr	r3, [r3, #4]
 8003938:	2200      	movs	r2, #0
 800393a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800393e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8003942:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003946:	460b      	mov	r3, r1
 8003948:	18db      	adds	r3, r3, r3
 800394a:	653b      	str	r3, [r7, #80]	@ 0x50
 800394c:	4613      	mov	r3, r2
 800394e:	eb42 0303 	adc.w	r3, r2, r3
 8003952:	657b      	str	r3, [r7, #84]	@ 0x54
 8003954:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8003958:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800395c:	f7fd f87a 	bl	8000a54 <__aeabi_uldivmod>
 8003960:	4602      	mov	r2, r0
 8003962:	460b      	mov	r3, r1
 8003964:	4b61      	ldr	r3, [pc, #388]	@ (8003aec <UART_SetConfig+0x2d4>)
 8003966:	fba3 2302 	umull	r2, r3, r3, r2
 800396a:	095b      	lsrs	r3, r3, #5
 800396c:	011c      	lsls	r4, r3, #4
 800396e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003972:	2200      	movs	r2, #0
 8003974:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003978:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800397c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8003980:	4642      	mov	r2, r8
 8003982:	464b      	mov	r3, r9
 8003984:	1891      	adds	r1, r2, r2
 8003986:	64b9      	str	r1, [r7, #72]	@ 0x48
 8003988:	415b      	adcs	r3, r3
 800398a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800398c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003990:	4641      	mov	r1, r8
 8003992:	eb12 0a01 	adds.w	sl, r2, r1
 8003996:	4649      	mov	r1, r9
 8003998:	eb43 0b01 	adc.w	fp, r3, r1
 800399c:	f04f 0200 	mov.w	r2, #0
 80039a0:	f04f 0300 	mov.w	r3, #0
 80039a4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80039a8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80039ac:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80039b0:	4692      	mov	sl, r2
 80039b2:	469b      	mov	fp, r3
 80039b4:	4643      	mov	r3, r8
 80039b6:	eb1a 0303 	adds.w	r3, sl, r3
 80039ba:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80039be:	464b      	mov	r3, r9
 80039c0:	eb4b 0303 	adc.w	r3, fp, r3
 80039c4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80039c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80039cc:	685b      	ldr	r3, [r3, #4]
 80039ce:	2200      	movs	r2, #0
 80039d0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80039d4:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80039d8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80039dc:	460b      	mov	r3, r1
 80039de:	18db      	adds	r3, r3, r3
 80039e0:	643b      	str	r3, [r7, #64]	@ 0x40
 80039e2:	4613      	mov	r3, r2
 80039e4:	eb42 0303 	adc.w	r3, r2, r3
 80039e8:	647b      	str	r3, [r7, #68]	@ 0x44
 80039ea:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80039ee:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80039f2:	f7fd f82f 	bl	8000a54 <__aeabi_uldivmod>
 80039f6:	4602      	mov	r2, r0
 80039f8:	460b      	mov	r3, r1
 80039fa:	4611      	mov	r1, r2
 80039fc:	4b3b      	ldr	r3, [pc, #236]	@ (8003aec <UART_SetConfig+0x2d4>)
 80039fe:	fba3 2301 	umull	r2, r3, r3, r1
 8003a02:	095b      	lsrs	r3, r3, #5
 8003a04:	2264      	movs	r2, #100	@ 0x64
 8003a06:	fb02 f303 	mul.w	r3, r2, r3
 8003a0a:	1acb      	subs	r3, r1, r3
 8003a0c:	00db      	lsls	r3, r3, #3
 8003a0e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8003a12:	4b36      	ldr	r3, [pc, #216]	@ (8003aec <UART_SetConfig+0x2d4>)
 8003a14:	fba3 2302 	umull	r2, r3, r3, r2
 8003a18:	095b      	lsrs	r3, r3, #5
 8003a1a:	005b      	lsls	r3, r3, #1
 8003a1c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8003a20:	441c      	add	r4, r3
 8003a22:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003a26:	2200      	movs	r2, #0
 8003a28:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003a2c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8003a30:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8003a34:	4642      	mov	r2, r8
 8003a36:	464b      	mov	r3, r9
 8003a38:	1891      	adds	r1, r2, r2
 8003a3a:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003a3c:	415b      	adcs	r3, r3
 8003a3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003a40:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8003a44:	4641      	mov	r1, r8
 8003a46:	1851      	adds	r1, r2, r1
 8003a48:	6339      	str	r1, [r7, #48]	@ 0x30
 8003a4a:	4649      	mov	r1, r9
 8003a4c:	414b      	adcs	r3, r1
 8003a4e:	637b      	str	r3, [r7, #52]	@ 0x34
 8003a50:	f04f 0200 	mov.w	r2, #0
 8003a54:	f04f 0300 	mov.w	r3, #0
 8003a58:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8003a5c:	4659      	mov	r1, fp
 8003a5e:	00cb      	lsls	r3, r1, #3
 8003a60:	4651      	mov	r1, sl
 8003a62:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003a66:	4651      	mov	r1, sl
 8003a68:	00ca      	lsls	r2, r1, #3
 8003a6a:	4610      	mov	r0, r2
 8003a6c:	4619      	mov	r1, r3
 8003a6e:	4603      	mov	r3, r0
 8003a70:	4642      	mov	r2, r8
 8003a72:	189b      	adds	r3, r3, r2
 8003a74:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003a78:	464b      	mov	r3, r9
 8003a7a:	460a      	mov	r2, r1
 8003a7c:	eb42 0303 	adc.w	r3, r2, r3
 8003a80:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003a84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a88:	685b      	ldr	r3, [r3, #4]
 8003a8a:	2200      	movs	r2, #0
 8003a8c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003a90:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8003a94:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003a98:	460b      	mov	r3, r1
 8003a9a:	18db      	adds	r3, r3, r3
 8003a9c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003a9e:	4613      	mov	r3, r2
 8003aa0:	eb42 0303 	adc.w	r3, r2, r3
 8003aa4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003aa6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003aaa:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8003aae:	f7fc ffd1 	bl	8000a54 <__aeabi_uldivmod>
 8003ab2:	4602      	mov	r2, r0
 8003ab4:	460b      	mov	r3, r1
 8003ab6:	4b0d      	ldr	r3, [pc, #52]	@ (8003aec <UART_SetConfig+0x2d4>)
 8003ab8:	fba3 1302 	umull	r1, r3, r3, r2
 8003abc:	095b      	lsrs	r3, r3, #5
 8003abe:	2164      	movs	r1, #100	@ 0x64
 8003ac0:	fb01 f303 	mul.w	r3, r1, r3
 8003ac4:	1ad3      	subs	r3, r2, r3
 8003ac6:	00db      	lsls	r3, r3, #3
 8003ac8:	3332      	adds	r3, #50	@ 0x32
 8003aca:	4a08      	ldr	r2, [pc, #32]	@ (8003aec <UART_SetConfig+0x2d4>)
 8003acc:	fba2 2303 	umull	r2, r3, r2, r3
 8003ad0:	095b      	lsrs	r3, r3, #5
 8003ad2:	f003 0207 	and.w	r2, r3, #7
 8003ad6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	4422      	add	r2, r4
 8003ade:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003ae0:	e106      	b.n	8003cf0 <UART_SetConfig+0x4d8>
 8003ae2:	bf00      	nop
 8003ae4:	40011000 	.word	0x40011000
 8003ae8:	40011400 	.word	0x40011400
 8003aec:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003af0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003af4:	2200      	movs	r2, #0
 8003af6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003afa:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8003afe:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8003b02:	4642      	mov	r2, r8
 8003b04:	464b      	mov	r3, r9
 8003b06:	1891      	adds	r1, r2, r2
 8003b08:	6239      	str	r1, [r7, #32]
 8003b0a:	415b      	adcs	r3, r3
 8003b0c:	627b      	str	r3, [r7, #36]	@ 0x24
 8003b0e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003b12:	4641      	mov	r1, r8
 8003b14:	1854      	adds	r4, r2, r1
 8003b16:	4649      	mov	r1, r9
 8003b18:	eb43 0501 	adc.w	r5, r3, r1
 8003b1c:	f04f 0200 	mov.w	r2, #0
 8003b20:	f04f 0300 	mov.w	r3, #0
 8003b24:	00eb      	lsls	r3, r5, #3
 8003b26:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003b2a:	00e2      	lsls	r2, r4, #3
 8003b2c:	4614      	mov	r4, r2
 8003b2e:	461d      	mov	r5, r3
 8003b30:	4643      	mov	r3, r8
 8003b32:	18e3      	adds	r3, r4, r3
 8003b34:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003b38:	464b      	mov	r3, r9
 8003b3a:	eb45 0303 	adc.w	r3, r5, r3
 8003b3e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003b42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b46:	685b      	ldr	r3, [r3, #4]
 8003b48:	2200      	movs	r2, #0
 8003b4a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003b4e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003b52:	f04f 0200 	mov.w	r2, #0
 8003b56:	f04f 0300 	mov.w	r3, #0
 8003b5a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8003b5e:	4629      	mov	r1, r5
 8003b60:	008b      	lsls	r3, r1, #2
 8003b62:	4621      	mov	r1, r4
 8003b64:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003b68:	4621      	mov	r1, r4
 8003b6a:	008a      	lsls	r2, r1, #2
 8003b6c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8003b70:	f7fc ff70 	bl	8000a54 <__aeabi_uldivmod>
 8003b74:	4602      	mov	r2, r0
 8003b76:	460b      	mov	r3, r1
 8003b78:	4b60      	ldr	r3, [pc, #384]	@ (8003cfc <UART_SetConfig+0x4e4>)
 8003b7a:	fba3 2302 	umull	r2, r3, r3, r2
 8003b7e:	095b      	lsrs	r3, r3, #5
 8003b80:	011c      	lsls	r4, r3, #4
 8003b82:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003b86:	2200      	movs	r2, #0
 8003b88:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003b8c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003b90:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8003b94:	4642      	mov	r2, r8
 8003b96:	464b      	mov	r3, r9
 8003b98:	1891      	adds	r1, r2, r2
 8003b9a:	61b9      	str	r1, [r7, #24]
 8003b9c:	415b      	adcs	r3, r3
 8003b9e:	61fb      	str	r3, [r7, #28]
 8003ba0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003ba4:	4641      	mov	r1, r8
 8003ba6:	1851      	adds	r1, r2, r1
 8003ba8:	6139      	str	r1, [r7, #16]
 8003baa:	4649      	mov	r1, r9
 8003bac:	414b      	adcs	r3, r1
 8003bae:	617b      	str	r3, [r7, #20]
 8003bb0:	f04f 0200 	mov.w	r2, #0
 8003bb4:	f04f 0300 	mov.w	r3, #0
 8003bb8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003bbc:	4659      	mov	r1, fp
 8003bbe:	00cb      	lsls	r3, r1, #3
 8003bc0:	4651      	mov	r1, sl
 8003bc2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003bc6:	4651      	mov	r1, sl
 8003bc8:	00ca      	lsls	r2, r1, #3
 8003bca:	4610      	mov	r0, r2
 8003bcc:	4619      	mov	r1, r3
 8003bce:	4603      	mov	r3, r0
 8003bd0:	4642      	mov	r2, r8
 8003bd2:	189b      	adds	r3, r3, r2
 8003bd4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003bd8:	464b      	mov	r3, r9
 8003bda:	460a      	mov	r2, r1
 8003bdc:	eb42 0303 	adc.w	r3, r2, r3
 8003be0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003be4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003be8:	685b      	ldr	r3, [r3, #4]
 8003bea:	2200      	movs	r2, #0
 8003bec:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003bee:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8003bf0:	f04f 0200 	mov.w	r2, #0
 8003bf4:	f04f 0300 	mov.w	r3, #0
 8003bf8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8003bfc:	4649      	mov	r1, r9
 8003bfe:	008b      	lsls	r3, r1, #2
 8003c00:	4641      	mov	r1, r8
 8003c02:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003c06:	4641      	mov	r1, r8
 8003c08:	008a      	lsls	r2, r1, #2
 8003c0a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8003c0e:	f7fc ff21 	bl	8000a54 <__aeabi_uldivmod>
 8003c12:	4602      	mov	r2, r0
 8003c14:	460b      	mov	r3, r1
 8003c16:	4611      	mov	r1, r2
 8003c18:	4b38      	ldr	r3, [pc, #224]	@ (8003cfc <UART_SetConfig+0x4e4>)
 8003c1a:	fba3 2301 	umull	r2, r3, r3, r1
 8003c1e:	095b      	lsrs	r3, r3, #5
 8003c20:	2264      	movs	r2, #100	@ 0x64
 8003c22:	fb02 f303 	mul.w	r3, r2, r3
 8003c26:	1acb      	subs	r3, r1, r3
 8003c28:	011b      	lsls	r3, r3, #4
 8003c2a:	3332      	adds	r3, #50	@ 0x32
 8003c2c:	4a33      	ldr	r2, [pc, #204]	@ (8003cfc <UART_SetConfig+0x4e4>)
 8003c2e:	fba2 2303 	umull	r2, r3, r2, r3
 8003c32:	095b      	lsrs	r3, r3, #5
 8003c34:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003c38:	441c      	add	r4, r3
 8003c3a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003c3e:	2200      	movs	r2, #0
 8003c40:	673b      	str	r3, [r7, #112]	@ 0x70
 8003c42:	677a      	str	r2, [r7, #116]	@ 0x74
 8003c44:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8003c48:	4642      	mov	r2, r8
 8003c4a:	464b      	mov	r3, r9
 8003c4c:	1891      	adds	r1, r2, r2
 8003c4e:	60b9      	str	r1, [r7, #8]
 8003c50:	415b      	adcs	r3, r3
 8003c52:	60fb      	str	r3, [r7, #12]
 8003c54:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003c58:	4641      	mov	r1, r8
 8003c5a:	1851      	adds	r1, r2, r1
 8003c5c:	6039      	str	r1, [r7, #0]
 8003c5e:	4649      	mov	r1, r9
 8003c60:	414b      	adcs	r3, r1
 8003c62:	607b      	str	r3, [r7, #4]
 8003c64:	f04f 0200 	mov.w	r2, #0
 8003c68:	f04f 0300 	mov.w	r3, #0
 8003c6c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003c70:	4659      	mov	r1, fp
 8003c72:	00cb      	lsls	r3, r1, #3
 8003c74:	4651      	mov	r1, sl
 8003c76:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003c7a:	4651      	mov	r1, sl
 8003c7c:	00ca      	lsls	r2, r1, #3
 8003c7e:	4610      	mov	r0, r2
 8003c80:	4619      	mov	r1, r3
 8003c82:	4603      	mov	r3, r0
 8003c84:	4642      	mov	r2, r8
 8003c86:	189b      	adds	r3, r3, r2
 8003c88:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003c8a:	464b      	mov	r3, r9
 8003c8c:	460a      	mov	r2, r1
 8003c8e:	eb42 0303 	adc.w	r3, r2, r3
 8003c92:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003c94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c98:	685b      	ldr	r3, [r3, #4]
 8003c9a:	2200      	movs	r2, #0
 8003c9c:	663b      	str	r3, [r7, #96]	@ 0x60
 8003c9e:	667a      	str	r2, [r7, #100]	@ 0x64
 8003ca0:	f04f 0200 	mov.w	r2, #0
 8003ca4:	f04f 0300 	mov.w	r3, #0
 8003ca8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8003cac:	4649      	mov	r1, r9
 8003cae:	008b      	lsls	r3, r1, #2
 8003cb0:	4641      	mov	r1, r8
 8003cb2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003cb6:	4641      	mov	r1, r8
 8003cb8:	008a      	lsls	r2, r1, #2
 8003cba:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8003cbe:	f7fc fec9 	bl	8000a54 <__aeabi_uldivmod>
 8003cc2:	4602      	mov	r2, r0
 8003cc4:	460b      	mov	r3, r1
 8003cc6:	4b0d      	ldr	r3, [pc, #52]	@ (8003cfc <UART_SetConfig+0x4e4>)
 8003cc8:	fba3 1302 	umull	r1, r3, r3, r2
 8003ccc:	095b      	lsrs	r3, r3, #5
 8003cce:	2164      	movs	r1, #100	@ 0x64
 8003cd0:	fb01 f303 	mul.w	r3, r1, r3
 8003cd4:	1ad3      	subs	r3, r2, r3
 8003cd6:	011b      	lsls	r3, r3, #4
 8003cd8:	3332      	adds	r3, #50	@ 0x32
 8003cda:	4a08      	ldr	r2, [pc, #32]	@ (8003cfc <UART_SetConfig+0x4e4>)
 8003cdc:	fba2 2303 	umull	r2, r3, r2, r3
 8003ce0:	095b      	lsrs	r3, r3, #5
 8003ce2:	f003 020f 	and.w	r2, r3, #15
 8003ce6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	4422      	add	r2, r4
 8003cee:	609a      	str	r2, [r3, #8]
}
 8003cf0:	bf00      	nop
 8003cf2:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8003cf6:	46bd      	mov	sp, r7
 8003cf8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003cfc:	51eb851f 	.word	0x51eb851f

08003d00 <memset>:
 8003d00:	4402      	add	r2, r0
 8003d02:	4603      	mov	r3, r0
 8003d04:	4293      	cmp	r3, r2
 8003d06:	d100      	bne.n	8003d0a <memset+0xa>
 8003d08:	4770      	bx	lr
 8003d0a:	f803 1b01 	strb.w	r1, [r3], #1
 8003d0e:	e7f9      	b.n	8003d04 <memset+0x4>

08003d10 <__libc_init_array>:
 8003d10:	b570      	push	{r4, r5, r6, lr}
 8003d12:	4d0d      	ldr	r5, [pc, #52]	@ (8003d48 <__libc_init_array+0x38>)
 8003d14:	4c0d      	ldr	r4, [pc, #52]	@ (8003d4c <__libc_init_array+0x3c>)
 8003d16:	1b64      	subs	r4, r4, r5
 8003d18:	10a4      	asrs	r4, r4, #2
 8003d1a:	2600      	movs	r6, #0
 8003d1c:	42a6      	cmp	r6, r4
 8003d1e:	d109      	bne.n	8003d34 <__libc_init_array+0x24>
 8003d20:	4d0b      	ldr	r5, [pc, #44]	@ (8003d50 <__libc_init_array+0x40>)
 8003d22:	4c0c      	ldr	r4, [pc, #48]	@ (8003d54 <__libc_init_array+0x44>)
 8003d24:	f000 fd48 	bl	80047b8 <_init>
 8003d28:	1b64      	subs	r4, r4, r5
 8003d2a:	10a4      	asrs	r4, r4, #2
 8003d2c:	2600      	movs	r6, #0
 8003d2e:	42a6      	cmp	r6, r4
 8003d30:	d105      	bne.n	8003d3e <__libc_init_array+0x2e>
 8003d32:	bd70      	pop	{r4, r5, r6, pc}
 8003d34:	f855 3b04 	ldr.w	r3, [r5], #4
 8003d38:	4798      	blx	r3
 8003d3a:	3601      	adds	r6, #1
 8003d3c:	e7ee      	b.n	8003d1c <__libc_init_array+0xc>
 8003d3e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003d42:	4798      	blx	r3
 8003d44:	3601      	adds	r6, #1
 8003d46:	e7f2      	b.n	8003d2e <__libc_init_array+0x1e>
 8003d48:	08004bc8 	.word	0x08004bc8
 8003d4c:	08004bc8 	.word	0x08004bc8
 8003d50:	08004bc8 	.word	0x08004bc8
 8003d54:	08004bcc 	.word	0x08004bcc

08003d58 <sinf>:
 8003d58:	ee10 3a10 	vmov	r3, s0
 8003d5c:	b507      	push	{r0, r1, r2, lr}
 8003d5e:	4a1f      	ldr	r2, [pc, #124]	@ (8003ddc <sinf+0x84>)
 8003d60:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003d64:	4293      	cmp	r3, r2
 8003d66:	d807      	bhi.n	8003d78 <sinf+0x20>
 8003d68:	eddf 0a1d 	vldr	s1, [pc, #116]	@ 8003de0 <sinf+0x88>
 8003d6c:	2000      	movs	r0, #0
 8003d6e:	b003      	add	sp, #12
 8003d70:	f85d eb04 	ldr.w	lr, [sp], #4
 8003d74:	f000 b88e 	b.w	8003e94 <__kernel_sinf>
 8003d78:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8003d7c:	d304      	bcc.n	8003d88 <sinf+0x30>
 8003d7e:	ee30 0a40 	vsub.f32	s0, s0, s0
 8003d82:	b003      	add	sp, #12
 8003d84:	f85d fb04 	ldr.w	pc, [sp], #4
 8003d88:	4668      	mov	r0, sp
 8003d8a:	f000 f8cb 	bl	8003f24 <__ieee754_rem_pio2f>
 8003d8e:	f000 0003 	and.w	r0, r0, #3
 8003d92:	2801      	cmp	r0, #1
 8003d94:	d00a      	beq.n	8003dac <sinf+0x54>
 8003d96:	2802      	cmp	r0, #2
 8003d98:	d00f      	beq.n	8003dba <sinf+0x62>
 8003d9a:	b9c0      	cbnz	r0, 8003dce <sinf+0x76>
 8003d9c:	eddd 0a01 	vldr	s1, [sp, #4]
 8003da0:	ed9d 0a00 	vldr	s0, [sp]
 8003da4:	2001      	movs	r0, #1
 8003da6:	f000 f875 	bl	8003e94 <__kernel_sinf>
 8003daa:	e7ea      	b.n	8003d82 <sinf+0x2a>
 8003dac:	eddd 0a01 	vldr	s1, [sp, #4]
 8003db0:	ed9d 0a00 	vldr	s0, [sp]
 8003db4:	f000 f816 	bl	8003de4 <__kernel_cosf>
 8003db8:	e7e3      	b.n	8003d82 <sinf+0x2a>
 8003dba:	eddd 0a01 	vldr	s1, [sp, #4]
 8003dbe:	ed9d 0a00 	vldr	s0, [sp]
 8003dc2:	2001      	movs	r0, #1
 8003dc4:	f000 f866 	bl	8003e94 <__kernel_sinf>
 8003dc8:	eeb1 0a40 	vneg.f32	s0, s0
 8003dcc:	e7d9      	b.n	8003d82 <sinf+0x2a>
 8003dce:	eddd 0a01 	vldr	s1, [sp, #4]
 8003dd2:	ed9d 0a00 	vldr	s0, [sp]
 8003dd6:	f000 f805 	bl	8003de4 <__kernel_cosf>
 8003dda:	e7f5      	b.n	8003dc8 <sinf+0x70>
 8003ddc:	3f490fd8 	.word	0x3f490fd8
 8003de0:	00000000 	.word	0x00000000

08003de4 <__kernel_cosf>:
 8003de4:	ee10 3a10 	vmov	r3, s0
 8003de8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003dec:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 8003df0:	eef0 6a40 	vmov.f32	s13, s0
 8003df4:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8003df8:	d204      	bcs.n	8003e04 <__kernel_cosf+0x20>
 8003dfa:	eefd 7ae6 	vcvt.s32.f32	s15, s13
 8003dfe:	ee17 2a90 	vmov	r2, s15
 8003e02:	b342      	cbz	r2, 8003e56 <__kernel_cosf+0x72>
 8003e04:	ee26 7aa6 	vmul.f32	s14, s13, s13
 8003e08:	eddf 7a1a 	vldr	s15, [pc, #104]	@ 8003e74 <__kernel_cosf+0x90>
 8003e0c:	ed9f 6a1a 	vldr	s12, [pc, #104]	@ 8003e78 <__kernel_cosf+0x94>
 8003e10:	4a1a      	ldr	r2, [pc, #104]	@ (8003e7c <__kernel_cosf+0x98>)
 8003e12:	eea7 6a27 	vfma.f32	s12, s14, s15
 8003e16:	4293      	cmp	r3, r2
 8003e18:	eddf 7a19 	vldr	s15, [pc, #100]	@ 8003e80 <__kernel_cosf+0x9c>
 8003e1c:	eee6 7a07 	vfma.f32	s15, s12, s14
 8003e20:	ed9f 6a18 	vldr	s12, [pc, #96]	@ 8003e84 <__kernel_cosf+0xa0>
 8003e24:	eea7 6a87 	vfma.f32	s12, s15, s14
 8003e28:	eddf 7a17 	vldr	s15, [pc, #92]	@ 8003e88 <__kernel_cosf+0xa4>
 8003e2c:	eee6 7a07 	vfma.f32	s15, s12, s14
 8003e30:	ed9f 6a16 	vldr	s12, [pc, #88]	@ 8003e8c <__kernel_cosf+0xa8>
 8003e34:	eea7 6a87 	vfma.f32	s12, s15, s14
 8003e38:	ee60 0ae6 	vnmul.f32	s1, s1, s13
 8003e3c:	ee26 6a07 	vmul.f32	s12, s12, s14
 8003e40:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8003e44:	eee7 0a06 	vfma.f32	s1, s14, s12
 8003e48:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003e4c:	d804      	bhi.n	8003e58 <__kernel_cosf+0x74>
 8003e4e:	ee77 7ae0 	vsub.f32	s15, s15, s1
 8003e52:	ee30 0a67 	vsub.f32	s0, s0, s15
 8003e56:	4770      	bx	lr
 8003e58:	4a0d      	ldr	r2, [pc, #52]	@ (8003e90 <__kernel_cosf+0xac>)
 8003e5a:	4293      	cmp	r3, r2
 8003e5c:	bf9a      	itte	ls
 8003e5e:	f103 437f 	addls.w	r3, r3, #4278190080	@ 0xff000000
 8003e62:	ee07 3a10 	vmovls	s14, r3
 8003e66:	eeb5 7a02 	vmovhi.f32	s14, #82	@ 0x3e900000  0.2812500
 8003e6a:	ee30 0a47 	vsub.f32	s0, s0, s14
 8003e6e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003e72:	e7ec      	b.n	8003e4e <__kernel_cosf+0x6a>
 8003e74:	ad47d74e 	.word	0xad47d74e
 8003e78:	310f74f6 	.word	0x310f74f6
 8003e7c:	3e999999 	.word	0x3e999999
 8003e80:	b493f27c 	.word	0xb493f27c
 8003e84:	37d00d01 	.word	0x37d00d01
 8003e88:	bab60b61 	.word	0xbab60b61
 8003e8c:	3d2aaaab 	.word	0x3d2aaaab
 8003e90:	3f480000 	.word	0x3f480000

08003e94 <__kernel_sinf>:
 8003e94:	ee10 3a10 	vmov	r3, s0
 8003e98:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003e9c:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 8003ea0:	d204      	bcs.n	8003eac <__kernel_sinf+0x18>
 8003ea2:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8003ea6:	ee17 3a90 	vmov	r3, s15
 8003eaa:	b35b      	cbz	r3, 8003f04 <__kernel_sinf+0x70>
 8003eac:	ee20 7a00 	vmul.f32	s14, s0, s0
 8003eb0:	eddf 7a15 	vldr	s15, [pc, #84]	@ 8003f08 <__kernel_sinf+0x74>
 8003eb4:	ed9f 6a15 	vldr	s12, [pc, #84]	@ 8003f0c <__kernel_sinf+0x78>
 8003eb8:	eea7 6a27 	vfma.f32	s12, s14, s15
 8003ebc:	eddf 7a14 	vldr	s15, [pc, #80]	@ 8003f10 <__kernel_sinf+0x7c>
 8003ec0:	eee6 7a07 	vfma.f32	s15, s12, s14
 8003ec4:	ed9f 6a13 	vldr	s12, [pc, #76]	@ 8003f14 <__kernel_sinf+0x80>
 8003ec8:	eea7 6a87 	vfma.f32	s12, s15, s14
 8003ecc:	eddf 7a12 	vldr	s15, [pc, #72]	@ 8003f18 <__kernel_sinf+0x84>
 8003ed0:	ee60 6a07 	vmul.f32	s13, s0, s14
 8003ed4:	eee6 7a07 	vfma.f32	s15, s12, s14
 8003ed8:	b930      	cbnz	r0, 8003ee8 <__kernel_sinf+0x54>
 8003eda:	ed9f 6a10 	vldr	s12, [pc, #64]	@ 8003f1c <__kernel_sinf+0x88>
 8003ede:	eea7 6a27 	vfma.f32	s12, s14, s15
 8003ee2:	eea6 0a26 	vfma.f32	s0, s12, s13
 8003ee6:	4770      	bx	lr
 8003ee8:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 8003eec:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 8003ef0:	eee0 7a86 	vfma.f32	s15, s1, s12
 8003ef4:	eed7 0a87 	vfnms.f32	s1, s15, s14
 8003ef8:	eddf 7a09 	vldr	s15, [pc, #36]	@ 8003f20 <__kernel_sinf+0x8c>
 8003efc:	eee6 0aa7 	vfma.f32	s1, s13, s15
 8003f00:	ee30 0a60 	vsub.f32	s0, s0, s1
 8003f04:	4770      	bx	lr
 8003f06:	bf00      	nop
 8003f08:	2f2ec9d3 	.word	0x2f2ec9d3
 8003f0c:	b2d72f34 	.word	0xb2d72f34
 8003f10:	3638ef1b 	.word	0x3638ef1b
 8003f14:	b9500d01 	.word	0xb9500d01
 8003f18:	3c088889 	.word	0x3c088889
 8003f1c:	be2aaaab 	.word	0xbe2aaaab
 8003f20:	3e2aaaab 	.word	0x3e2aaaab

08003f24 <__ieee754_rem_pio2f>:
 8003f24:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003f26:	ee10 6a10 	vmov	r6, s0
 8003f2a:	4b88      	ldr	r3, [pc, #544]	@ (800414c <__ieee754_rem_pio2f+0x228>)
 8003f2c:	f026 4500 	bic.w	r5, r6, #2147483648	@ 0x80000000
 8003f30:	429d      	cmp	r5, r3
 8003f32:	b087      	sub	sp, #28
 8003f34:	4604      	mov	r4, r0
 8003f36:	d805      	bhi.n	8003f44 <__ieee754_rem_pio2f+0x20>
 8003f38:	2300      	movs	r3, #0
 8003f3a:	ed80 0a00 	vstr	s0, [r0]
 8003f3e:	6043      	str	r3, [r0, #4]
 8003f40:	2000      	movs	r0, #0
 8003f42:	e022      	b.n	8003f8a <__ieee754_rem_pio2f+0x66>
 8003f44:	4b82      	ldr	r3, [pc, #520]	@ (8004150 <__ieee754_rem_pio2f+0x22c>)
 8003f46:	429d      	cmp	r5, r3
 8003f48:	d83a      	bhi.n	8003fc0 <__ieee754_rem_pio2f+0x9c>
 8003f4a:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 8003f4e:	2e00      	cmp	r6, #0
 8003f50:	ed9f 7a80 	vldr	s14, [pc, #512]	@ 8004154 <__ieee754_rem_pio2f+0x230>
 8003f54:	4a80      	ldr	r2, [pc, #512]	@ (8004158 <__ieee754_rem_pio2f+0x234>)
 8003f56:	f023 030f 	bic.w	r3, r3, #15
 8003f5a:	dd18      	ble.n	8003f8e <__ieee754_rem_pio2f+0x6a>
 8003f5c:	4293      	cmp	r3, r2
 8003f5e:	ee70 7a47 	vsub.f32	s15, s0, s14
 8003f62:	bf09      	itett	eq
 8003f64:	ed9f 7a7d 	vldreq	s14, [pc, #500]	@ 800415c <__ieee754_rem_pio2f+0x238>
 8003f68:	eddf 6a7d 	vldrne	s13, [pc, #500]	@ 8004160 <__ieee754_rem_pio2f+0x23c>
 8003f6c:	eddf 6a7d 	vldreq	s13, [pc, #500]	@ 8004164 <__ieee754_rem_pio2f+0x240>
 8003f70:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 8003f74:	ee37 7ae6 	vsub.f32	s14, s15, s13
 8003f78:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003f7c:	ed80 7a00 	vstr	s14, [r0]
 8003f80:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8003f84:	edc0 7a01 	vstr	s15, [r0, #4]
 8003f88:	2001      	movs	r0, #1
 8003f8a:	b007      	add	sp, #28
 8003f8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003f8e:	4293      	cmp	r3, r2
 8003f90:	ee70 7a07 	vadd.f32	s15, s0, s14
 8003f94:	bf09      	itett	eq
 8003f96:	ed9f 7a71 	vldreq	s14, [pc, #452]	@ 800415c <__ieee754_rem_pio2f+0x238>
 8003f9a:	eddf 6a71 	vldrne	s13, [pc, #452]	@ 8004160 <__ieee754_rem_pio2f+0x23c>
 8003f9e:	eddf 6a71 	vldreq	s13, [pc, #452]	@ 8004164 <__ieee754_rem_pio2f+0x240>
 8003fa2:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 8003fa6:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8003faa:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003fae:	ed80 7a00 	vstr	s14, [r0]
 8003fb2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003fb6:	edc0 7a01 	vstr	s15, [r0, #4]
 8003fba:	f04f 30ff 	mov.w	r0, #4294967295
 8003fbe:	e7e4      	b.n	8003f8a <__ieee754_rem_pio2f+0x66>
 8003fc0:	4b69      	ldr	r3, [pc, #420]	@ (8004168 <__ieee754_rem_pio2f+0x244>)
 8003fc2:	429d      	cmp	r5, r3
 8003fc4:	d873      	bhi.n	80040ae <__ieee754_rem_pio2f+0x18a>
 8003fc6:	f000 f8dd 	bl	8004184 <fabsf>
 8003fca:	ed9f 7a68 	vldr	s14, [pc, #416]	@ 800416c <__ieee754_rem_pio2f+0x248>
 8003fce:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8003fd2:	eee0 7a07 	vfma.f32	s15, s0, s14
 8003fd6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003fda:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003fde:	ee17 0a90 	vmov	r0, s15
 8003fe2:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 8004154 <__ieee754_rem_pio2f+0x230>
 8003fe6:	eea7 0a67 	vfms.f32	s0, s14, s15
 8003fea:	281f      	cmp	r0, #31
 8003fec:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 8004160 <__ieee754_rem_pio2f+0x23c>
 8003ff0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003ff4:	eeb1 6a47 	vneg.f32	s12, s14
 8003ff8:	ee70 6a67 	vsub.f32	s13, s0, s15
 8003ffc:	ee16 1a90 	vmov	r1, s13
 8004000:	dc09      	bgt.n	8004016 <__ieee754_rem_pio2f+0xf2>
 8004002:	4a5b      	ldr	r2, [pc, #364]	@ (8004170 <__ieee754_rem_pio2f+0x24c>)
 8004004:	1e47      	subs	r7, r0, #1
 8004006:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 800400a:	f852 2027 	ldr.w	r2, [r2, r7, lsl #2]
 800400e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8004012:	4293      	cmp	r3, r2
 8004014:	d107      	bne.n	8004026 <__ieee754_rem_pio2f+0x102>
 8004016:	f3c1 52c7 	ubfx	r2, r1, #23, #8
 800401a:	ebc2 52d5 	rsb	r2, r2, r5, lsr #23
 800401e:	2a08      	cmp	r2, #8
 8004020:	ea4f 53e5 	mov.w	r3, r5, asr #23
 8004024:	dc14      	bgt.n	8004050 <__ieee754_rem_pio2f+0x12c>
 8004026:	6021      	str	r1, [r4, #0]
 8004028:	ed94 7a00 	vldr	s14, [r4]
 800402c:	ee30 0a47 	vsub.f32	s0, s0, s14
 8004030:	2e00      	cmp	r6, #0
 8004032:	ee30 0a67 	vsub.f32	s0, s0, s15
 8004036:	ed84 0a01 	vstr	s0, [r4, #4]
 800403a:	daa6      	bge.n	8003f8a <__ieee754_rem_pio2f+0x66>
 800403c:	eeb1 7a47 	vneg.f32	s14, s14
 8004040:	eeb1 0a40 	vneg.f32	s0, s0
 8004044:	ed84 7a00 	vstr	s14, [r4]
 8004048:	ed84 0a01 	vstr	s0, [r4, #4]
 800404c:	4240      	negs	r0, r0
 800404e:	e79c      	b.n	8003f8a <__ieee754_rem_pio2f+0x66>
 8004050:	eddf 5a42 	vldr	s11, [pc, #264]	@ 800415c <__ieee754_rem_pio2f+0x238>
 8004054:	eef0 6a40 	vmov.f32	s13, s0
 8004058:	eee6 6a25 	vfma.f32	s13, s12, s11
 800405c:	ee70 7a66 	vsub.f32	s15, s0, s13
 8004060:	eee6 7a25 	vfma.f32	s15, s12, s11
 8004064:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8004164 <__ieee754_rem_pio2f+0x240>
 8004068:	eed7 7a25 	vfnms.f32	s15, s14, s11
 800406c:	ee76 5ae7 	vsub.f32	s11, s13, s15
 8004070:	ee15 2a90 	vmov	r2, s11
 8004074:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 8004078:	1a5b      	subs	r3, r3, r1
 800407a:	2b19      	cmp	r3, #25
 800407c:	dc04      	bgt.n	8004088 <__ieee754_rem_pio2f+0x164>
 800407e:	edc4 5a00 	vstr	s11, [r4]
 8004082:	eeb0 0a66 	vmov.f32	s0, s13
 8004086:	e7cf      	b.n	8004028 <__ieee754_rem_pio2f+0x104>
 8004088:	eddf 5a3a 	vldr	s11, [pc, #232]	@ 8004174 <__ieee754_rem_pio2f+0x250>
 800408c:	eeb0 0a66 	vmov.f32	s0, s13
 8004090:	eea6 0a25 	vfma.f32	s0, s12, s11
 8004094:	ee76 7ac0 	vsub.f32	s15, s13, s0
 8004098:	eddf 6a37 	vldr	s13, [pc, #220]	@ 8004178 <__ieee754_rem_pio2f+0x254>
 800409c:	eee6 7a25 	vfma.f32	s15, s12, s11
 80040a0:	eed7 7a26 	vfnms.f32	s15, s14, s13
 80040a4:	ee30 7a67 	vsub.f32	s14, s0, s15
 80040a8:	ed84 7a00 	vstr	s14, [r4]
 80040ac:	e7bc      	b.n	8004028 <__ieee754_rem_pio2f+0x104>
 80040ae:	f1b5 4fff 	cmp.w	r5, #2139095040	@ 0x7f800000
 80040b2:	d306      	bcc.n	80040c2 <__ieee754_rem_pio2f+0x19e>
 80040b4:	ee70 7a40 	vsub.f32	s15, s0, s0
 80040b8:	edc0 7a01 	vstr	s15, [r0, #4]
 80040bc:	edc0 7a00 	vstr	s15, [r0]
 80040c0:	e73e      	b.n	8003f40 <__ieee754_rem_pio2f+0x1c>
 80040c2:	15ea      	asrs	r2, r5, #23
 80040c4:	3a86      	subs	r2, #134	@ 0x86
 80040c6:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 80040ca:	ee07 3a90 	vmov	s15, r3
 80040ce:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80040d2:	eddf 6a2a 	vldr	s13, [pc, #168]	@ 800417c <__ieee754_rem_pio2f+0x258>
 80040d6:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80040da:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80040de:	ed8d 7a03 	vstr	s14, [sp, #12]
 80040e2:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80040e6:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80040ea:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80040ee:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80040f2:	ed8d 7a04 	vstr	s14, [sp, #16]
 80040f6:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80040fa:	eef5 7a40 	vcmp.f32	s15, #0.0
 80040fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004102:	edcd 7a05 	vstr	s15, [sp, #20]
 8004106:	d11e      	bne.n	8004146 <__ieee754_rem_pio2f+0x222>
 8004108:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800410c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004110:	bf0c      	ite	eq
 8004112:	2301      	moveq	r3, #1
 8004114:	2302      	movne	r3, #2
 8004116:	491a      	ldr	r1, [pc, #104]	@ (8004180 <__ieee754_rem_pio2f+0x25c>)
 8004118:	9101      	str	r1, [sp, #4]
 800411a:	2102      	movs	r1, #2
 800411c:	9100      	str	r1, [sp, #0]
 800411e:	a803      	add	r0, sp, #12
 8004120:	4621      	mov	r1, r4
 8004122:	f000 f837 	bl	8004194 <__kernel_rem_pio2f>
 8004126:	2e00      	cmp	r6, #0
 8004128:	f6bf af2f 	bge.w	8003f8a <__ieee754_rem_pio2f+0x66>
 800412c:	edd4 7a00 	vldr	s15, [r4]
 8004130:	eef1 7a67 	vneg.f32	s15, s15
 8004134:	edc4 7a00 	vstr	s15, [r4]
 8004138:	edd4 7a01 	vldr	s15, [r4, #4]
 800413c:	eef1 7a67 	vneg.f32	s15, s15
 8004140:	edc4 7a01 	vstr	s15, [r4, #4]
 8004144:	e782      	b.n	800404c <__ieee754_rem_pio2f+0x128>
 8004146:	2303      	movs	r3, #3
 8004148:	e7e5      	b.n	8004116 <__ieee754_rem_pio2f+0x1f2>
 800414a:	bf00      	nop
 800414c:	3f490fd8 	.word	0x3f490fd8
 8004150:	4016cbe3 	.word	0x4016cbe3
 8004154:	3fc90f80 	.word	0x3fc90f80
 8004158:	3fc90fd0 	.word	0x3fc90fd0
 800415c:	37354400 	.word	0x37354400
 8004160:	37354443 	.word	0x37354443
 8004164:	2e85a308 	.word	0x2e85a308
 8004168:	43490f80 	.word	0x43490f80
 800416c:	3f22f984 	.word	0x3f22f984
 8004170:	080047f0 	.word	0x080047f0
 8004174:	2e85a300 	.word	0x2e85a300
 8004178:	248d3132 	.word	0x248d3132
 800417c:	43800000 	.word	0x43800000
 8004180:	08004870 	.word	0x08004870

08004184 <fabsf>:
 8004184:	ee10 3a10 	vmov	r3, s0
 8004188:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800418c:	ee00 3a10 	vmov	s0, r3
 8004190:	4770      	bx	lr
	...

08004194 <__kernel_rem_pio2f>:
 8004194:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004198:	ed2d 8b04 	vpush	{d8-d9}
 800419c:	b0d9      	sub	sp, #356	@ 0x164
 800419e:	4690      	mov	r8, r2
 80041a0:	9001      	str	r0, [sp, #4]
 80041a2:	4ab6      	ldr	r2, [pc, #728]	@ (800447c <__kernel_rem_pio2f+0x2e8>)
 80041a4:	9866      	ldr	r0, [sp, #408]	@ 0x198
 80041a6:	f118 0f04 	cmn.w	r8, #4
 80041aa:	f852 a020 	ldr.w	sl, [r2, r0, lsl #2]
 80041ae:	460f      	mov	r7, r1
 80041b0:	f103 3bff 	add.w	fp, r3, #4294967295
 80041b4:	db26      	blt.n	8004204 <__kernel_rem_pio2f+0x70>
 80041b6:	f1b8 0203 	subs.w	r2, r8, #3
 80041ba:	bf48      	it	mi
 80041bc:	f108 0204 	addmi.w	r2, r8, #4
 80041c0:	10d2      	asrs	r2, r2, #3
 80041c2:	1c55      	adds	r5, r2, #1
 80041c4:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 80041c6:	ed9f 7ab1 	vldr	s14, [pc, #708]	@ 800448c <__kernel_rem_pio2f+0x2f8>
 80041ca:	00e8      	lsls	r0, r5, #3
 80041cc:	eba2 060b 	sub.w	r6, r2, fp
 80041d0:	9002      	str	r0, [sp, #8]
 80041d2:	eba8 05c5 	sub.w	r5, r8, r5, lsl #3
 80041d6:	eb0a 0c0b 	add.w	ip, sl, fp
 80041da:	ac1c      	add	r4, sp, #112	@ 0x70
 80041dc:	eb01 0e86 	add.w	lr, r1, r6, lsl #2
 80041e0:	2000      	movs	r0, #0
 80041e2:	4560      	cmp	r0, ip
 80041e4:	dd10      	ble.n	8004208 <__kernel_rem_pio2f+0x74>
 80041e6:	a91c      	add	r1, sp, #112	@ 0x70
 80041e8:	eb01 0083 	add.w	r0, r1, r3, lsl #2
 80041ec:	f50d 7988 	add.w	r9, sp, #272	@ 0x110
 80041f0:	2600      	movs	r6, #0
 80041f2:	4556      	cmp	r6, sl
 80041f4:	dc24      	bgt.n	8004240 <__kernel_rem_pio2f+0xac>
 80041f6:	f8dd e004 	ldr.w	lr, [sp, #4]
 80041fa:	eddf 7aa4 	vldr	s15, [pc, #656]	@ 800448c <__kernel_rem_pio2f+0x2f8>
 80041fe:	4684      	mov	ip, r0
 8004200:	2400      	movs	r4, #0
 8004202:	e016      	b.n	8004232 <__kernel_rem_pio2f+0x9e>
 8004204:	2200      	movs	r2, #0
 8004206:	e7dc      	b.n	80041c2 <__kernel_rem_pio2f+0x2e>
 8004208:	42c6      	cmn	r6, r0
 800420a:	bf5d      	ittte	pl
 800420c:	f85e 1020 	ldrpl.w	r1, [lr, r0, lsl #2]
 8004210:	ee07 1a90 	vmovpl	s15, r1
 8004214:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 8004218:	eef0 7a47 	vmovmi.f32	s15, s14
 800421c:	ece4 7a01 	vstmia	r4!, {s15}
 8004220:	3001      	adds	r0, #1
 8004222:	e7de      	b.n	80041e2 <__kernel_rem_pio2f+0x4e>
 8004224:	ecfe 6a01 	vldmia	lr!, {s13}
 8004228:	ed3c 7a01 	vldmdb	ip!, {s14}
 800422c:	eee6 7a87 	vfma.f32	s15, s13, s14
 8004230:	3401      	adds	r4, #1
 8004232:	455c      	cmp	r4, fp
 8004234:	ddf6      	ble.n	8004224 <__kernel_rem_pio2f+0x90>
 8004236:	ece9 7a01 	vstmia	r9!, {s15}
 800423a:	3601      	adds	r6, #1
 800423c:	3004      	adds	r0, #4
 800423e:	e7d8      	b.n	80041f2 <__kernel_rem_pio2f+0x5e>
 8004240:	a908      	add	r1, sp, #32
 8004242:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8004246:	9104      	str	r1, [sp, #16]
 8004248:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 800424a:	eddf 8a8f 	vldr	s17, [pc, #572]	@ 8004488 <__kernel_rem_pio2f+0x2f4>
 800424e:	ed9f 9a8d 	vldr	s18, [pc, #564]	@ 8004484 <__kernel_rem_pio2f+0x2f0>
 8004252:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 8004256:	9203      	str	r2, [sp, #12]
 8004258:	4654      	mov	r4, sl
 800425a:	00a2      	lsls	r2, r4, #2
 800425c:	9205      	str	r2, [sp, #20]
 800425e:	aa58      	add	r2, sp, #352	@ 0x160
 8004260:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 8004264:	ed12 0a14 	vldr	s0, [r2, #-80]	@ 0xffffffb0
 8004268:	a944      	add	r1, sp, #272	@ 0x110
 800426a:	aa08      	add	r2, sp, #32
 800426c:	eb01 0084 	add.w	r0, r1, r4, lsl #2
 8004270:	4694      	mov	ip, r2
 8004272:	4626      	mov	r6, r4
 8004274:	2e00      	cmp	r6, #0
 8004276:	dc4c      	bgt.n	8004312 <__kernel_rem_pio2f+0x17e>
 8004278:	4628      	mov	r0, r5
 800427a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800427e:	f000 f9f1 	bl	8004664 <scalbnf>
 8004282:	eeb0 8a40 	vmov.f32	s16, s0
 8004286:	eeb4 0a00 	vmov.f32	s0, #64	@ 0x3e000000  0.125
 800428a:	ee28 0a00 	vmul.f32	s0, s16, s0
 800428e:	f000 fa4f 	bl	8004730 <floorf>
 8004292:	eef2 7a00 	vmov.f32	s15, #32	@ 0x41000000  8.0
 8004296:	eea0 8a67 	vfms.f32	s16, s0, s15
 800429a:	2d00      	cmp	r5, #0
 800429c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80042a0:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 80042a4:	ee17 9a90 	vmov	r9, s15
 80042a8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80042ac:	ee38 8a67 	vsub.f32	s16, s16, s15
 80042b0:	dd41      	ble.n	8004336 <__kernel_rem_pio2f+0x1a2>
 80042b2:	f104 3cff 	add.w	ip, r4, #4294967295
 80042b6:	a908      	add	r1, sp, #32
 80042b8:	f1c5 0e08 	rsb	lr, r5, #8
 80042bc:	f851 602c 	ldr.w	r6, [r1, ip, lsl #2]
 80042c0:	fa46 f00e 	asr.w	r0, r6, lr
 80042c4:	4481      	add	r9, r0
 80042c6:	fa00 f00e 	lsl.w	r0, r0, lr
 80042ca:	1a36      	subs	r6, r6, r0
 80042cc:	f1c5 0007 	rsb	r0, r5, #7
 80042d0:	f841 602c 	str.w	r6, [r1, ip, lsl #2]
 80042d4:	4106      	asrs	r6, r0
 80042d6:	2e00      	cmp	r6, #0
 80042d8:	dd3c      	ble.n	8004354 <__kernel_rem_pio2f+0x1c0>
 80042da:	f04f 0e00 	mov.w	lr, #0
 80042de:	f109 0901 	add.w	r9, r9, #1
 80042e2:	4670      	mov	r0, lr
 80042e4:	4574      	cmp	r4, lr
 80042e6:	dc68      	bgt.n	80043ba <__kernel_rem_pio2f+0x226>
 80042e8:	2d00      	cmp	r5, #0
 80042ea:	dd03      	ble.n	80042f4 <__kernel_rem_pio2f+0x160>
 80042ec:	2d01      	cmp	r5, #1
 80042ee:	d074      	beq.n	80043da <__kernel_rem_pio2f+0x246>
 80042f0:	2d02      	cmp	r5, #2
 80042f2:	d07d      	beq.n	80043f0 <__kernel_rem_pio2f+0x25c>
 80042f4:	2e02      	cmp	r6, #2
 80042f6:	d12d      	bne.n	8004354 <__kernel_rem_pio2f+0x1c0>
 80042f8:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 80042fc:	ee30 8a48 	vsub.f32	s16, s0, s16
 8004300:	b340      	cbz	r0, 8004354 <__kernel_rem_pio2f+0x1c0>
 8004302:	4628      	mov	r0, r5
 8004304:	9306      	str	r3, [sp, #24]
 8004306:	f000 f9ad 	bl	8004664 <scalbnf>
 800430a:	9b06      	ldr	r3, [sp, #24]
 800430c:	ee38 8a40 	vsub.f32	s16, s16, s0
 8004310:	e020      	b.n	8004354 <__kernel_rem_pio2f+0x1c0>
 8004312:	ee60 7a28 	vmul.f32	s15, s0, s17
 8004316:	3e01      	subs	r6, #1
 8004318:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800431c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004320:	eea7 0ac9 	vfms.f32	s0, s15, s18
 8004324:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8004328:	ecac 0a01 	vstmia	ip!, {s0}
 800432c:	ed30 0a01 	vldmdb	r0!, {s0}
 8004330:	ee37 0a80 	vadd.f32	s0, s15, s0
 8004334:	e79e      	b.n	8004274 <__kernel_rem_pio2f+0xe0>
 8004336:	d105      	bne.n	8004344 <__kernel_rem_pio2f+0x1b0>
 8004338:	1e60      	subs	r0, r4, #1
 800433a:	a908      	add	r1, sp, #32
 800433c:	f851 6020 	ldr.w	r6, [r1, r0, lsl #2]
 8004340:	11f6      	asrs	r6, r6, #7
 8004342:	e7c8      	b.n	80042d6 <__kernel_rem_pio2f+0x142>
 8004344:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8004348:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800434c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004350:	da31      	bge.n	80043b6 <__kernel_rem_pio2f+0x222>
 8004352:	2600      	movs	r6, #0
 8004354:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8004358:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800435c:	f040 8098 	bne.w	8004490 <__kernel_rem_pio2f+0x2fc>
 8004360:	1e60      	subs	r0, r4, #1
 8004362:	2200      	movs	r2, #0
 8004364:	4550      	cmp	r0, sl
 8004366:	da4b      	bge.n	8004400 <__kernel_rem_pio2f+0x26c>
 8004368:	2a00      	cmp	r2, #0
 800436a:	d065      	beq.n	8004438 <__kernel_rem_pio2f+0x2a4>
 800436c:	3c01      	subs	r4, #1
 800436e:	ab08      	add	r3, sp, #32
 8004370:	3d08      	subs	r5, #8
 8004372:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8004376:	2b00      	cmp	r3, #0
 8004378:	d0f8      	beq.n	800436c <__kernel_rem_pio2f+0x1d8>
 800437a:	4628      	mov	r0, r5
 800437c:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8004380:	f000 f970 	bl	8004664 <scalbnf>
 8004384:	1c63      	adds	r3, r4, #1
 8004386:	aa44      	add	r2, sp, #272	@ 0x110
 8004388:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 8004488 <__kernel_rem_pio2f+0x2f4>
 800438c:	0099      	lsls	r1, r3, #2
 800438e:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8004392:	4623      	mov	r3, r4
 8004394:	2b00      	cmp	r3, #0
 8004396:	f280 80a9 	bge.w	80044ec <__kernel_rem_pio2f+0x358>
 800439a:	4623      	mov	r3, r4
 800439c:	2b00      	cmp	r3, #0
 800439e:	f2c0 80c7 	blt.w	8004530 <__kernel_rem_pio2f+0x39c>
 80043a2:	aa44      	add	r2, sp, #272	@ 0x110
 80043a4:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 80043a8:	f8df c0d4 	ldr.w	ip, [pc, #212]	@ 8004480 <__kernel_rem_pio2f+0x2ec>
 80043ac:	eddf 7a37 	vldr	s15, [pc, #220]	@ 800448c <__kernel_rem_pio2f+0x2f8>
 80043b0:	2000      	movs	r0, #0
 80043b2:	1ae2      	subs	r2, r4, r3
 80043b4:	e0b1      	b.n	800451a <__kernel_rem_pio2f+0x386>
 80043b6:	2602      	movs	r6, #2
 80043b8:	e78f      	b.n	80042da <__kernel_rem_pio2f+0x146>
 80043ba:	f852 1b04 	ldr.w	r1, [r2], #4
 80043be:	b948      	cbnz	r0, 80043d4 <__kernel_rem_pio2f+0x240>
 80043c0:	b121      	cbz	r1, 80043cc <__kernel_rem_pio2f+0x238>
 80043c2:	f5c1 7180 	rsb	r1, r1, #256	@ 0x100
 80043c6:	f842 1c04 	str.w	r1, [r2, #-4]
 80043ca:	2101      	movs	r1, #1
 80043cc:	f10e 0e01 	add.w	lr, lr, #1
 80043d0:	4608      	mov	r0, r1
 80043d2:	e787      	b.n	80042e4 <__kernel_rem_pio2f+0x150>
 80043d4:	f1c1 01ff 	rsb	r1, r1, #255	@ 0xff
 80043d8:	e7f5      	b.n	80043c6 <__kernel_rem_pio2f+0x232>
 80043da:	f104 3cff 	add.w	ip, r4, #4294967295
 80043de:	aa08      	add	r2, sp, #32
 80043e0:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 80043e4:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80043e8:	a908      	add	r1, sp, #32
 80043ea:	f841 202c 	str.w	r2, [r1, ip, lsl #2]
 80043ee:	e781      	b.n	80042f4 <__kernel_rem_pio2f+0x160>
 80043f0:	f104 3cff 	add.w	ip, r4, #4294967295
 80043f4:	aa08      	add	r2, sp, #32
 80043f6:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 80043fa:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 80043fe:	e7f3      	b.n	80043e8 <__kernel_rem_pio2f+0x254>
 8004400:	a908      	add	r1, sp, #32
 8004402:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 8004406:	3801      	subs	r0, #1
 8004408:	430a      	orrs	r2, r1
 800440a:	e7ab      	b.n	8004364 <__kernel_rem_pio2f+0x1d0>
 800440c:	3201      	adds	r2, #1
 800440e:	f850 6d04 	ldr.w	r6, [r0, #-4]!
 8004412:	2e00      	cmp	r6, #0
 8004414:	d0fa      	beq.n	800440c <__kernel_rem_pio2f+0x278>
 8004416:	9905      	ldr	r1, [sp, #20]
 8004418:	f501 71b0 	add.w	r1, r1, #352	@ 0x160
 800441c:	eb0d 0001 	add.w	r0, sp, r1
 8004420:	18e6      	adds	r6, r4, r3
 8004422:	a91c      	add	r1, sp, #112	@ 0x70
 8004424:	f104 0c01 	add.w	ip, r4, #1
 8004428:	384c      	subs	r0, #76	@ 0x4c
 800442a:	eb01 0686 	add.w	r6, r1, r6, lsl #2
 800442e:	4422      	add	r2, r4
 8004430:	4562      	cmp	r2, ip
 8004432:	da04      	bge.n	800443e <__kernel_rem_pio2f+0x2aa>
 8004434:	4614      	mov	r4, r2
 8004436:	e710      	b.n	800425a <__kernel_rem_pio2f+0xc6>
 8004438:	9804      	ldr	r0, [sp, #16]
 800443a:	2201      	movs	r2, #1
 800443c:	e7e7      	b.n	800440e <__kernel_rem_pio2f+0x27a>
 800443e:	9903      	ldr	r1, [sp, #12]
 8004440:	f8dd e004 	ldr.w	lr, [sp, #4]
 8004444:	f851 102c 	ldr.w	r1, [r1, ip, lsl #2]
 8004448:	9105      	str	r1, [sp, #20]
 800444a:	ee07 1a90 	vmov	s15, r1
 800444e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004452:	2400      	movs	r4, #0
 8004454:	ece6 7a01 	vstmia	r6!, {s15}
 8004458:	eddf 7a0c 	vldr	s15, [pc, #48]	@ 800448c <__kernel_rem_pio2f+0x2f8>
 800445c:	46b1      	mov	r9, r6
 800445e:	455c      	cmp	r4, fp
 8004460:	dd04      	ble.n	800446c <__kernel_rem_pio2f+0x2d8>
 8004462:	ece0 7a01 	vstmia	r0!, {s15}
 8004466:	f10c 0c01 	add.w	ip, ip, #1
 800446a:	e7e1      	b.n	8004430 <__kernel_rem_pio2f+0x29c>
 800446c:	ecfe 6a01 	vldmia	lr!, {s13}
 8004470:	ed39 7a01 	vldmdb	r9!, {s14}
 8004474:	3401      	adds	r4, #1
 8004476:	eee6 7a87 	vfma.f32	s15, s13, s14
 800447a:	e7f0      	b.n	800445e <__kernel_rem_pio2f+0x2ca>
 800447c:	08004bb4 	.word	0x08004bb4
 8004480:	08004b88 	.word	0x08004b88
 8004484:	43800000 	.word	0x43800000
 8004488:	3b800000 	.word	0x3b800000
 800448c:	00000000 	.word	0x00000000
 8004490:	9b02      	ldr	r3, [sp, #8]
 8004492:	eeb0 0a48 	vmov.f32	s0, s16
 8004496:	eba3 0008 	sub.w	r0, r3, r8
 800449a:	f000 f8e3 	bl	8004664 <scalbnf>
 800449e:	ed1f 7a07 	vldr	s14, [pc, #-28]	@ 8004484 <__kernel_rem_pio2f+0x2f0>
 80044a2:	eeb4 0ac7 	vcmpe.f32	s0, s14
 80044a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80044aa:	db19      	blt.n	80044e0 <__kernel_rem_pio2f+0x34c>
 80044ac:	ed5f 7a0a 	vldr	s15, [pc, #-40]	@ 8004488 <__kernel_rem_pio2f+0x2f4>
 80044b0:	ee60 7a27 	vmul.f32	s15, s0, s15
 80044b4:	aa08      	add	r2, sp, #32
 80044b6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80044ba:	3508      	adds	r5, #8
 80044bc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80044c0:	eea7 0ac7 	vfms.f32	s0, s15, s14
 80044c4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80044c8:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 80044cc:	ee10 3a10 	vmov	r3, s0
 80044d0:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 80044d4:	ee17 3a90 	vmov	r3, s15
 80044d8:	3401      	adds	r4, #1
 80044da:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 80044de:	e74c      	b.n	800437a <__kernel_rem_pio2f+0x1e6>
 80044e0:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 80044e4:	aa08      	add	r2, sp, #32
 80044e6:	ee10 3a10 	vmov	r3, s0
 80044ea:	e7f6      	b.n	80044da <__kernel_rem_pio2f+0x346>
 80044ec:	a808      	add	r0, sp, #32
 80044ee:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 80044f2:	9001      	str	r0, [sp, #4]
 80044f4:	ee07 0a90 	vmov	s15, r0
 80044f8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80044fc:	3b01      	subs	r3, #1
 80044fe:	ee67 7a80 	vmul.f32	s15, s15, s0
 8004502:	ee20 0a07 	vmul.f32	s0, s0, s14
 8004506:	ed62 7a01 	vstmdb	r2!, {s15}
 800450a:	e743      	b.n	8004394 <__kernel_rem_pio2f+0x200>
 800450c:	ecfc 6a01 	vldmia	ip!, {s13}
 8004510:	ecb5 7a01 	vldmia	r5!, {s14}
 8004514:	eee6 7a87 	vfma.f32	s15, s13, s14
 8004518:	3001      	adds	r0, #1
 800451a:	4550      	cmp	r0, sl
 800451c:	dc01      	bgt.n	8004522 <__kernel_rem_pio2f+0x38e>
 800451e:	4290      	cmp	r0, r2
 8004520:	ddf4      	ble.n	800450c <__kernel_rem_pio2f+0x378>
 8004522:	a858      	add	r0, sp, #352	@ 0x160
 8004524:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8004528:	ed42 7a28 	vstr	s15, [r2, #-160]	@ 0xffffff60
 800452c:	3b01      	subs	r3, #1
 800452e:	e735      	b.n	800439c <__kernel_rem_pio2f+0x208>
 8004530:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 8004532:	2b02      	cmp	r3, #2
 8004534:	dc09      	bgt.n	800454a <__kernel_rem_pio2f+0x3b6>
 8004536:	2b00      	cmp	r3, #0
 8004538:	dc27      	bgt.n	800458a <__kernel_rem_pio2f+0x3f6>
 800453a:	d040      	beq.n	80045be <__kernel_rem_pio2f+0x42a>
 800453c:	f009 0007 	and.w	r0, r9, #7
 8004540:	b059      	add	sp, #356	@ 0x164
 8004542:	ecbd 8b04 	vpop	{d8-d9}
 8004546:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800454a:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 800454c:	2b03      	cmp	r3, #3
 800454e:	d1f5      	bne.n	800453c <__kernel_rem_pio2f+0x3a8>
 8004550:	aa30      	add	r2, sp, #192	@ 0xc0
 8004552:	1f0b      	subs	r3, r1, #4
 8004554:	4413      	add	r3, r2
 8004556:	461a      	mov	r2, r3
 8004558:	4620      	mov	r0, r4
 800455a:	2800      	cmp	r0, #0
 800455c:	dc50      	bgt.n	8004600 <__kernel_rem_pio2f+0x46c>
 800455e:	4622      	mov	r2, r4
 8004560:	2a01      	cmp	r2, #1
 8004562:	dc5d      	bgt.n	8004620 <__kernel_rem_pio2f+0x48c>
 8004564:	ab30      	add	r3, sp, #192	@ 0xc0
 8004566:	ed5f 7a37 	vldr	s15, [pc, #-220]	@ 800448c <__kernel_rem_pio2f+0x2f8>
 800456a:	440b      	add	r3, r1
 800456c:	2c01      	cmp	r4, #1
 800456e:	dc67      	bgt.n	8004640 <__kernel_rem_pio2f+0x4ac>
 8004570:	eddd 6a30 	vldr	s13, [sp, #192]	@ 0xc0
 8004574:	ed9d 7a31 	vldr	s14, [sp, #196]	@ 0xc4
 8004578:	2e00      	cmp	r6, #0
 800457a:	d167      	bne.n	800464c <__kernel_rem_pio2f+0x4b8>
 800457c:	edc7 6a00 	vstr	s13, [r7]
 8004580:	ed87 7a01 	vstr	s14, [r7, #4]
 8004584:	edc7 7a02 	vstr	s15, [r7, #8]
 8004588:	e7d8      	b.n	800453c <__kernel_rem_pio2f+0x3a8>
 800458a:	ab30      	add	r3, sp, #192	@ 0xc0
 800458c:	ed1f 7a41 	vldr	s14, [pc, #-260]	@ 800448c <__kernel_rem_pio2f+0x2f8>
 8004590:	440b      	add	r3, r1
 8004592:	4622      	mov	r2, r4
 8004594:	2a00      	cmp	r2, #0
 8004596:	da24      	bge.n	80045e2 <__kernel_rem_pio2f+0x44e>
 8004598:	b34e      	cbz	r6, 80045ee <__kernel_rem_pio2f+0x45a>
 800459a:	eef1 7a47 	vneg.f32	s15, s14
 800459e:	edc7 7a00 	vstr	s15, [r7]
 80045a2:	eddd 7a30 	vldr	s15, [sp, #192]	@ 0xc0
 80045a6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80045aa:	aa31      	add	r2, sp, #196	@ 0xc4
 80045ac:	2301      	movs	r3, #1
 80045ae:	429c      	cmp	r4, r3
 80045b0:	da20      	bge.n	80045f4 <__kernel_rem_pio2f+0x460>
 80045b2:	b10e      	cbz	r6, 80045b8 <__kernel_rem_pio2f+0x424>
 80045b4:	eef1 7a67 	vneg.f32	s15, s15
 80045b8:	edc7 7a01 	vstr	s15, [r7, #4]
 80045bc:	e7be      	b.n	800453c <__kernel_rem_pio2f+0x3a8>
 80045be:	ab30      	add	r3, sp, #192	@ 0xc0
 80045c0:	ed5f 7a4e 	vldr	s15, [pc, #-312]	@ 800448c <__kernel_rem_pio2f+0x2f8>
 80045c4:	440b      	add	r3, r1
 80045c6:	2c00      	cmp	r4, #0
 80045c8:	da05      	bge.n	80045d6 <__kernel_rem_pio2f+0x442>
 80045ca:	b10e      	cbz	r6, 80045d0 <__kernel_rem_pio2f+0x43c>
 80045cc:	eef1 7a67 	vneg.f32	s15, s15
 80045d0:	edc7 7a00 	vstr	s15, [r7]
 80045d4:	e7b2      	b.n	800453c <__kernel_rem_pio2f+0x3a8>
 80045d6:	ed33 7a01 	vldmdb	r3!, {s14}
 80045da:	3c01      	subs	r4, #1
 80045dc:	ee77 7a87 	vadd.f32	s15, s15, s14
 80045e0:	e7f1      	b.n	80045c6 <__kernel_rem_pio2f+0x432>
 80045e2:	ed73 7a01 	vldmdb	r3!, {s15}
 80045e6:	3a01      	subs	r2, #1
 80045e8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80045ec:	e7d2      	b.n	8004594 <__kernel_rem_pio2f+0x400>
 80045ee:	eef0 7a47 	vmov.f32	s15, s14
 80045f2:	e7d4      	b.n	800459e <__kernel_rem_pio2f+0x40a>
 80045f4:	ecb2 7a01 	vldmia	r2!, {s14}
 80045f8:	3301      	adds	r3, #1
 80045fa:	ee77 7a87 	vadd.f32	s15, s15, s14
 80045fe:	e7d6      	b.n	80045ae <__kernel_rem_pio2f+0x41a>
 8004600:	ed72 7a01 	vldmdb	r2!, {s15}
 8004604:	edd2 6a01 	vldr	s13, [r2, #4]
 8004608:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800460c:	3801      	subs	r0, #1
 800460e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004612:	ed82 7a00 	vstr	s14, [r2]
 8004616:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800461a:	edc2 7a01 	vstr	s15, [r2, #4]
 800461e:	e79c      	b.n	800455a <__kernel_rem_pio2f+0x3c6>
 8004620:	ed73 7a01 	vldmdb	r3!, {s15}
 8004624:	edd3 6a01 	vldr	s13, [r3, #4]
 8004628:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800462c:	3a01      	subs	r2, #1
 800462e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004632:	ed83 7a00 	vstr	s14, [r3]
 8004636:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800463a:	edc3 7a01 	vstr	s15, [r3, #4]
 800463e:	e78f      	b.n	8004560 <__kernel_rem_pio2f+0x3cc>
 8004640:	ed33 7a01 	vldmdb	r3!, {s14}
 8004644:	3c01      	subs	r4, #1
 8004646:	ee77 7a87 	vadd.f32	s15, s15, s14
 800464a:	e78f      	b.n	800456c <__kernel_rem_pio2f+0x3d8>
 800464c:	eef1 6a66 	vneg.f32	s13, s13
 8004650:	eeb1 7a47 	vneg.f32	s14, s14
 8004654:	edc7 6a00 	vstr	s13, [r7]
 8004658:	ed87 7a01 	vstr	s14, [r7, #4]
 800465c:	eef1 7a67 	vneg.f32	s15, s15
 8004660:	e790      	b.n	8004584 <__kernel_rem_pio2f+0x3f0>
 8004662:	bf00      	nop

08004664 <scalbnf>:
 8004664:	ee10 3a10 	vmov	r3, s0
 8004668:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 800466c:	d02b      	beq.n	80046c6 <scalbnf+0x62>
 800466e:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 8004672:	d302      	bcc.n	800467a <scalbnf+0x16>
 8004674:	ee30 0a00 	vadd.f32	s0, s0, s0
 8004678:	4770      	bx	lr
 800467a:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 800467e:	d123      	bne.n	80046c8 <scalbnf+0x64>
 8004680:	4b24      	ldr	r3, [pc, #144]	@ (8004714 <scalbnf+0xb0>)
 8004682:	eddf 7a25 	vldr	s15, [pc, #148]	@ 8004718 <scalbnf+0xb4>
 8004686:	4298      	cmp	r0, r3
 8004688:	ee20 0a27 	vmul.f32	s0, s0, s15
 800468c:	db17      	blt.n	80046be <scalbnf+0x5a>
 800468e:	ee10 3a10 	vmov	r3, s0
 8004692:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8004696:	3a19      	subs	r2, #25
 8004698:	f24c 3150 	movw	r1, #50000	@ 0xc350
 800469c:	4288      	cmp	r0, r1
 800469e:	dd15      	ble.n	80046cc <scalbnf+0x68>
 80046a0:	eddf 7a1e 	vldr	s15, [pc, #120]	@ 800471c <scalbnf+0xb8>
 80046a4:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 8004720 <scalbnf+0xbc>
 80046a8:	ee10 3a10 	vmov	r3, s0
 80046ac:	eeb0 7a67 	vmov.f32	s14, s15
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	bfb8      	it	lt
 80046b4:	eef0 7a66 	vmovlt.f32	s15, s13
 80046b8:	ee27 0a87 	vmul.f32	s0, s15, s14
 80046bc:	4770      	bx	lr
 80046be:	eddf 7a19 	vldr	s15, [pc, #100]	@ 8004724 <scalbnf+0xc0>
 80046c2:	ee27 0a80 	vmul.f32	s0, s15, s0
 80046c6:	4770      	bx	lr
 80046c8:	0dd2      	lsrs	r2, r2, #23
 80046ca:	e7e5      	b.n	8004698 <scalbnf+0x34>
 80046cc:	4410      	add	r0, r2
 80046ce:	28fe      	cmp	r0, #254	@ 0xfe
 80046d0:	dce6      	bgt.n	80046a0 <scalbnf+0x3c>
 80046d2:	2800      	cmp	r0, #0
 80046d4:	dd06      	ble.n	80046e4 <scalbnf+0x80>
 80046d6:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 80046da:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 80046de:	ee00 3a10 	vmov	s0, r3
 80046e2:	4770      	bx	lr
 80046e4:	f110 0f16 	cmn.w	r0, #22
 80046e8:	da09      	bge.n	80046fe <scalbnf+0x9a>
 80046ea:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 8004724 <scalbnf+0xc0>
 80046ee:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 8004728 <scalbnf+0xc4>
 80046f2:	ee10 3a10 	vmov	r3, s0
 80046f6:	eeb0 7a67 	vmov.f32	s14, s15
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	e7d9      	b.n	80046b2 <scalbnf+0x4e>
 80046fe:	3019      	adds	r0, #25
 8004700:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8004704:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 8004708:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 800472c <scalbnf+0xc8>
 800470c:	ee07 3a90 	vmov	s15, r3
 8004710:	e7d7      	b.n	80046c2 <scalbnf+0x5e>
 8004712:	bf00      	nop
 8004714:	ffff3cb0 	.word	0xffff3cb0
 8004718:	4c000000 	.word	0x4c000000
 800471c:	7149f2ca 	.word	0x7149f2ca
 8004720:	f149f2ca 	.word	0xf149f2ca
 8004724:	0da24260 	.word	0x0da24260
 8004728:	8da24260 	.word	0x8da24260
 800472c:	33000000 	.word	0x33000000

08004730 <floorf>:
 8004730:	ee10 3a10 	vmov	r3, s0
 8004734:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8004738:	3a7f      	subs	r2, #127	@ 0x7f
 800473a:	2a16      	cmp	r2, #22
 800473c:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8004740:	dc2b      	bgt.n	800479a <floorf+0x6a>
 8004742:	2a00      	cmp	r2, #0
 8004744:	da12      	bge.n	800476c <floorf+0x3c>
 8004746:	eddf 7a19 	vldr	s15, [pc, #100]	@ 80047ac <floorf+0x7c>
 800474a:	ee30 0a27 	vadd.f32	s0, s0, s15
 800474e:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8004752:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004756:	dd06      	ble.n	8004766 <floorf+0x36>
 8004758:	2b00      	cmp	r3, #0
 800475a:	da24      	bge.n	80047a6 <floorf+0x76>
 800475c:	2900      	cmp	r1, #0
 800475e:	4b14      	ldr	r3, [pc, #80]	@ (80047b0 <floorf+0x80>)
 8004760:	bf08      	it	eq
 8004762:	f04f 4300 	moveq.w	r3, #2147483648	@ 0x80000000
 8004766:	ee00 3a10 	vmov	s0, r3
 800476a:	4770      	bx	lr
 800476c:	4911      	ldr	r1, [pc, #68]	@ (80047b4 <floorf+0x84>)
 800476e:	4111      	asrs	r1, r2
 8004770:	420b      	tst	r3, r1
 8004772:	d0fa      	beq.n	800476a <floorf+0x3a>
 8004774:	eddf 7a0d 	vldr	s15, [pc, #52]	@ 80047ac <floorf+0x7c>
 8004778:	ee30 0a27 	vadd.f32	s0, s0, s15
 800477c:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8004780:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004784:	ddef      	ble.n	8004766 <floorf+0x36>
 8004786:	2b00      	cmp	r3, #0
 8004788:	bfbe      	ittt	lt
 800478a:	f44f 0000 	movlt.w	r0, #8388608	@ 0x800000
 800478e:	fa40 f202 	asrlt.w	r2, r0, r2
 8004792:	189b      	addlt	r3, r3, r2
 8004794:	ea23 0301 	bic.w	r3, r3, r1
 8004798:	e7e5      	b.n	8004766 <floorf+0x36>
 800479a:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 800479e:	d3e4      	bcc.n	800476a <floorf+0x3a>
 80047a0:	ee30 0a00 	vadd.f32	s0, s0, s0
 80047a4:	4770      	bx	lr
 80047a6:	2300      	movs	r3, #0
 80047a8:	e7dd      	b.n	8004766 <floorf+0x36>
 80047aa:	bf00      	nop
 80047ac:	7149f2ca 	.word	0x7149f2ca
 80047b0:	bf800000 	.word	0xbf800000
 80047b4:	007fffff 	.word	0x007fffff

080047b8 <_init>:
 80047b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80047ba:	bf00      	nop
 80047bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80047be:	bc08      	pop	{r3}
 80047c0:	469e      	mov	lr, r3
 80047c2:	4770      	bx	lr

080047c4 <_fini>:
 80047c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80047c6:	bf00      	nop
 80047c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80047ca:	bc08      	pop	{r3}
 80047cc:	469e      	mov	lr, r3
 80047ce:	4770      	bx	lr
