
Lab10.1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000032e4  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  08003484  08003484  00004484  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080034f4  080034f4  0000505c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080034f4  080034f4  000044f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080034fc  080034fc  0000505c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080034fc  080034fc  000044fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003500  08003500  00004500  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08003504  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001c4  2000005c  08003560  0000505c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000220  08003560  00005220  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000505c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ac11  00000000  00000000  0000508c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001e13  00000000  00000000  0000fc9d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a90  00000000  00000000  00011ab0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000800  00000000  00000000  00012540  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017402  00000000  00000000  00012d40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b13e  00000000  00000000  0002a142  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000938c3  00000000  00000000  00035280  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c8b43  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003058  00000000  00000000  000c8b88  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  000cbbe0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000005c 	.word	0x2000005c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800346c 	.word	0x0800346c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000060 	.word	0x20000060
 80001dc:	0800346c 	.word	0x0800346c

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b988 	b.w	80005b8 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	468e      	mov	lr, r1
 80002c8:	4604      	mov	r4, r0
 80002ca:	4688      	mov	r8, r1
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d14a      	bne.n	8000366 <__udivmoddi4+0xa6>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4617      	mov	r7, r2
 80002d4:	d962      	bls.n	800039c <__udivmoddi4+0xdc>
 80002d6:	fab2 f682 	clz	r6, r2
 80002da:	b14e      	cbz	r6, 80002f0 <__udivmoddi4+0x30>
 80002dc:	f1c6 0320 	rsb	r3, r6, #32
 80002e0:	fa01 f806 	lsl.w	r8, r1, r6
 80002e4:	fa20 f303 	lsr.w	r3, r0, r3
 80002e8:	40b7      	lsls	r7, r6
 80002ea:	ea43 0808 	orr.w	r8, r3, r8
 80002ee:	40b4      	lsls	r4, r6
 80002f0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002f4:	fa1f fc87 	uxth.w	ip, r7
 80002f8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002fc:	0c23      	lsrs	r3, r4, #16
 80002fe:	fb0e 8811 	mls	r8, lr, r1, r8
 8000302:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000306:	fb01 f20c 	mul.w	r2, r1, ip
 800030a:	429a      	cmp	r2, r3
 800030c:	d909      	bls.n	8000322 <__udivmoddi4+0x62>
 800030e:	18fb      	adds	r3, r7, r3
 8000310:	f101 30ff 	add.w	r0, r1, #4294967295
 8000314:	f080 80ea 	bcs.w	80004ec <__udivmoddi4+0x22c>
 8000318:	429a      	cmp	r2, r3
 800031a:	f240 80e7 	bls.w	80004ec <__udivmoddi4+0x22c>
 800031e:	3902      	subs	r1, #2
 8000320:	443b      	add	r3, r7
 8000322:	1a9a      	subs	r2, r3, r2
 8000324:	b2a3      	uxth	r3, r4
 8000326:	fbb2 f0fe 	udiv	r0, r2, lr
 800032a:	fb0e 2210 	mls	r2, lr, r0, r2
 800032e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000332:	fb00 fc0c 	mul.w	ip, r0, ip
 8000336:	459c      	cmp	ip, r3
 8000338:	d909      	bls.n	800034e <__udivmoddi4+0x8e>
 800033a:	18fb      	adds	r3, r7, r3
 800033c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000340:	f080 80d6 	bcs.w	80004f0 <__udivmoddi4+0x230>
 8000344:	459c      	cmp	ip, r3
 8000346:	f240 80d3 	bls.w	80004f0 <__udivmoddi4+0x230>
 800034a:	443b      	add	r3, r7
 800034c:	3802      	subs	r0, #2
 800034e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000352:	eba3 030c 	sub.w	r3, r3, ip
 8000356:	2100      	movs	r1, #0
 8000358:	b11d      	cbz	r5, 8000362 <__udivmoddi4+0xa2>
 800035a:	40f3      	lsrs	r3, r6
 800035c:	2200      	movs	r2, #0
 800035e:	e9c5 3200 	strd	r3, r2, [r5]
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	428b      	cmp	r3, r1
 8000368:	d905      	bls.n	8000376 <__udivmoddi4+0xb6>
 800036a:	b10d      	cbz	r5, 8000370 <__udivmoddi4+0xb0>
 800036c:	e9c5 0100 	strd	r0, r1, [r5]
 8000370:	2100      	movs	r1, #0
 8000372:	4608      	mov	r0, r1
 8000374:	e7f5      	b.n	8000362 <__udivmoddi4+0xa2>
 8000376:	fab3 f183 	clz	r1, r3
 800037a:	2900      	cmp	r1, #0
 800037c:	d146      	bne.n	800040c <__udivmoddi4+0x14c>
 800037e:	4573      	cmp	r3, lr
 8000380:	d302      	bcc.n	8000388 <__udivmoddi4+0xc8>
 8000382:	4282      	cmp	r2, r0
 8000384:	f200 8105 	bhi.w	8000592 <__udivmoddi4+0x2d2>
 8000388:	1a84      	subs	r4, r0, r2
 800038a:	eb6e 0203 	sbc.w	r2, lr, r3
 800038e:	2001      	movs	r0, #1
 8000390:	4690      	mov	r8, r2
 8000392:	2d00      	cmp	r5, #0
 8000394:	d0e5      	beq.n	8000362 <__udivmoddi4+0xa2>
 8000396:	e9c5 4800 	strd	r4, r8, [r5]
 800039a:	e7e2      	b.n	8000362 <__udivmoddi4+0xa2>
 800039c:	2a00      	cmp	r2, #0
 800039e:	f000 8090 	beq.w	80004c2 <__udivmoddi4+0x202>
 80003a2:	fab2 f682 	clz	r6, r2
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	f040 80a4 	bne.w	80004f4 <__udivmoddi4+0x234>
 80003ac:	1a8a      	subs	r2, r1, r2
 80003ae:	0c03      	lsrs	r3, r0, #16
 80003b0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003b4:	b280      	uxth	r0, r0
 80003b6:	b2bc      	uxth	r4, r7
 80003b8:	2101      	movs	r1, #1
 80003ba:	fbb2 fcfe 	udiv	ip, r2, lr
 80003be:	fb0e 221c 	mls	r2, lr, ip, r2
 80003c2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003c6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ca:	429a      	cmp	r2, r3
 80003cc:	d907      	bls.n	80003de <__udivmoddi4+0x11e>
 80003ce:	18fb      	adds	r3, r7, r3
 80003d0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003d4:	d202      	bcs.n	80003dc <__udivmoddi4+0x11c>
 80003d6:	429a      	cmp	r2, r3
 80003d8:	f200 80e0 	bhi.w	800059c <__udivmoddi4+0x2dc>
 80003dc:	46c4      	mov	ip, r8
 80003de:	1a9b      	subs	r3, r3, r2
 80003e0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003e4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003e8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003ec:	fb02 f404 	mul.w	r4, r2, r4
 80003f0:	429c      	cmp	r4, r3
 80003f2:	d907      	bls.n	8000404 <__udivmoddi4+0x144>
 80003f4:	18fb      	adds	r3, r7, r3
 80003f6:	f102 30ff 	add.w	r0, r2, #4294967295
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0x142>
 80003fc:	429c      	cmp	r4, r3
 80003fe:	f200 80ca 	bhi.w	8000596 <__udivmoddi4+0x2d6>
 8000402:	4602      	mov	r2, r0
 8000404:	1b1b      	subs	r3, r3, r4
 8000406:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800040a:	e7a5      	b.n	8000358 <__udivmoddi4+0x98>
 800040c:	f1c1 0620 	rsb	r6, r1, #32
 8000410:	408b      	lsls	r3, r1
 8000412:	fa22 f706 	lsr.w	r7, r2, r6
 8000416:	431f      	orrs	r7, r3
 8000418:	fa0e f401 	lsl.w	r4, lr, r1
 800041c:	fa20 f306 	lsr.w	r3, r0, r6
 8000420:	fa2e fe06 	lsr.w	lr, lr, r6
 8000424:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000428:	4323      	orrs	r3, r4
 800042a:	fa00 f801 	lsl.w	r8, r0, r1
 800042e:	fa1f fc87 	uxth.w	ip, r7
 8000432:	fbbe f0f9 	udiv	r0, lr, r9
 8000436:	0c1c      	lsrs	r4, r3, #16
 8000438:	fb09 ee10 	mls	lr, r9, r0, lr
 800043c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000440:	fb00 fe0c 	mul.w	lr, r0, ip
 8000444:	45a6      	cmp	lr, r4
 8000446:	fa02 f201 	lsl.w	r2, r2, r1
 800044a:	d909      	bls.n	8000460 <__udivmoddi4+0x1a0>
 800044c:	193c      	adds	r4, r7, r4
 800044e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000452:	f080 809c 	bcs.w	800058e <__udivmoddi4+0x2ce>
 8000456:	45a6      	cmp	lr, r4
 8000458:	f240 8099 	bls.w	800058e <__udivmoddi4+0x2ce>
 800045c:	3802      	subs	r0, #2
 800045e:	443c      	add	r4, r7
 8000460:	eba4 040e 	sub.w	r4, r4, lr
 8000464:	fa1f fe83 	uxth.w	lr, r3
 8000468:	fbb4 f3f9 	udiv	r3, r4, r9
 800046c:	fb09 4413 	mls	r4, r9, r3, r4
 8000470:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000474:	fb03 fc0c 	mul.w	ip, r3, ip
 8000478:	45a4      	cmp	ip, r4
 800047a:	d908      	bls.n	800048e <__udivmoddi4+0x1ce>
 800047c:	193c      	adds	r4, r7, r4
 800047e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000482:	f080 8082 	bcs.w	800058a <__udivmoddi4+0x2ca>
 8000486:	45a4      	cmp	ip, r4
 8000488:	d97f      	bls.n	800058a <__udivmoddi4+0x2ca>
 800048a:	3b02      	subs	r3, #2
 800048c:	443c      	add	r4, r7
 800048e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000492:	eba4 040c 	sub.w	r4, r4, ip
 8000496:	fba0 ec02 	umull	lr, ip, r0, r2
 800049a:	4564      	cmp	r4, ip
 800049c:	4673      	mov	r3, lr
 800049e:	46e1      	mov	r9, ip
 80004a0:	d362      	bcc.n	8000568 <__udivmoddi4+0x2a8>
 80004a2:	d05f      	beq.n	8000564 <__udivmoddi4+0x2a4>
 80004a4:	b15d      	cbz	r5, 80004be <__udivmoddi4+0x1fe>
 80004a6:	ebb8 0203 	subs.w	r2, r8, r3
 80004aa:	eb64 0409 	sbc.w	r4, r4, r9
 80004ae:	fa04 f606 	lsl.w	r6, r4, r6
 80004b2:	fa22 f301 	lsr.w	r3, r2, r1
 80004b6:	431e      	orrs	r6, r3
 80004b8:	40cc      	lsrs	r4, r1
 80004ba:	e9c5 6400 	strd	r6, r4, [r5]
 80004be:	2100      	movs	r1, #0
 80004c0:	e74f      	b.n	8000362 <__udivmoddi4+0xa2>
 80004c2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004c6:	0c01      	lsrs	r1, r0, #16
 80004c8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004cc:	b280      	uxth	r0, r0
 80004ce:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004d2:	463b      	mov	r3, r7
 80004d4:	4638      	mov	r0, r7
 80004d6:	463c      	mov	r4, r7
 80004d8:	46b8      	mov	r8, r7
 80004da:	46be      	mov	lr, r7
 80004dc:	2620      	movs	r6, #32
 80004de:	fbb1 f1f7 	udiv	r1, r1, r7
 80004e2:	eba2 0208 	sub.w	r2, r2, r8
 80004e6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004ea:	e766      	b.n	80003ba <__udivmoddi4+0xfa>
 80004ec:	4601      	mov	r1, r0
 80004ee:	e718      	b.n	8000322 <__udivmoddi4+0x62>
 80004f0:	4610      	mov	r0, r2
 80004f2:	e72c      	b.n	800034e <__udivmoddi4+0x8e>
 80004f4:	f1c6 0220 	rsb	r2, r6, #32
 80004f8:	fa2e f302 	lsr.w	r3, lr, r2
 80004fc:	40b7      	lsls	r7, r6
 80004fe:	40b1      	lsls	r1, r6
 8000500:	fa20 f202 	lsr.w	r2, r0, r2
 8000504:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000508:	430a      	orrs	r2, r1
 800050a:	fbb3 f8fe 	udiv	r8, r3, lr
 800050e:	b2bc      	uxth	r4, r7
 8000510:	fb0e 3318 	mls	r3, lr, r8, r3
 8000514:	0c11      	lsrs	r1, r2, #16
 8000516:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800051a:	fb08 f904 	mul.w	r9, r8, r4
 800051e:	40b0      	lsls	r0, r6
 8000520:	4589      	cmp	r9, r1
 8000522:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000526:	b280      	uxth	r0, r0
 8000528:	d93e      	bls.n	80005a8 <__udivmoddi4+0x2e8>
 800052a:	1879      	adds	r1, r7, r1
 800052c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000530:	d201      	bcs.n	8000536 <__udivmoddi4+0x276>
 8000532:	4589      	cmp	r9, r1
 8000534:	d81f      	bhi.n	8000576 <__udivmoddi4+0x2b6>
 8000536:	eba1 0109 	sub.w	r1, r1, r9
 800053a:	fbb1 f9fe 	udiv	r9, r1, lr
 800053e:	fb09 f804 	mul.w	r8, r9, r4
 8000542:	fb0e 1119 	mls	r1, lr, r9, r1
 8000546:	b292      	uxth	r2, r2
 8000548:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800054c:	4542      	cmp	r2, r8
 800054e:	d229      	bcs.n	80005a4 <__udivmoddi4+0x2e4>
 8000550:	18ba      	adds	r2, r7, r2
 8000552:	f109 31ff 	add.w	r1, r9, #4294967295
 8000556:	d2c4      	bcs.n	80004e2 <__udivmoddi4+0x222>
 8000558:	4542      	cmp	r2, r8
 800055a:	d2c2      	bcs.n	80004e2 <__udivmoddi4+0x222>
 800055c:	f1a9 0102 	sub.w	r1, r9, #2
 8000560:	443a      	add	r2, r7
 8000562:	e7be      	b.n	80004e2 <__udivmoddi4+0x222>
 8000564:	45f0      	cmp	r8, lr
 8000566:	d29d      	bcs.n	80004a4 <__udivmoddi4+0x1e4>
 8000568:	ebbe 0302 	subs.w	r3, lr, r2
 800056c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000570:	3801      	subs	r0, #1
 8000572:	46e1      	mov	r9, ip
 8000574:	e796      	b.n	80004a4 <__udivmoddi4+0x1e4>
 8000576:	eba7 0909 	sub.w	r9, r7, r9
 800057a:	4449      	add	r1, r9
 800057c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000580:	fbb1 f9fe 	udiv	r9, r1, lr
 8000584:	fb09 f804 	mul.w	r8, r9, r4
 8000588:	e7db      	b.n	8000542 <__udivmoddi4+0x282>
 800058a:	4673      	mov	r3, lr
 800058c:	e77f      	b.n	800048e <__udivmoddi4+0x1ce>
 800058e:	4650      	mov	r0, sl
 8000590:	e766      	b.n	8000460 <__udivmoddi4+0x1a0>
 8000592:	4608      	mov	r0, r1
 8000594:	e6fd      	b.n	8000392 <__udivmoddi4+0xd2>
 8000596:	443b      	add	r3, r7
 8000598:	3a02      	subs	r2, #2
 800059a:	e733      	b.n	8000404 <__udivmoddi4+0x144>
 800059c:	f1ac 0c02 	sub.w	ip, ip, #2
 80005a0:	443b      	add	r3, r7
 80005a2:	e71c      	b.n	80003de <__udivmoddi4+0x11e>
 80005a4:	4649      	mov	r1, r9
 80005a6:	e79c      	b.n	80004e2 <__udivmoddi4+0x222>
 80005a8:	eba1 0109 	sub.w	r1, r1, r9
 80005ac:	46c4      	mov	ip, r8
 80005ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80005b2:	fb09 f804 	mul.w	r8, r9, r4
 80005b6:	e7c4      	b.n	8000542 <__udivmoddi4+0x282>

080005b8 <__aeabi_idiv0>:
 80005b8:	4770      	bx	lr
 80005ba:	bf00      	nop

080005bc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80005bc:	b480      	push	{r7}
 80005be:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80005c0:	4b04      	ldr	r3, [pc, #16]	@ (80005d4 <__NVIC_GetPriorityGrouping+0x18>)
 80005c2:	68db      	ldr	r3, [r3, #12]
 80005c4:	0a1b      	lsrs	r3, r3, #8
 80005c6:	f003 0307 	and.w	r3, r3, #7
}
 80005ca:	4618      	mov	r0, r3
 80005cc:	46bd      	mov	sp, r7
 80005ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d2:	4770      	bx	lr
 80005d4:	e000ed00 	.word	0xe000ed00

080005d8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80005d8:	b480      	push	{r7}
 80005da:	b083      	sub	sp, #12
 80005dc:	af00      	add	r7, sp, #0
 80005de:	4603      	mov	r3, r0
 80005e0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80005e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005e6:	2b00      	cmp	r3, #0
 80005e8:	db0b      	blt.n	8000602 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80005ea:	79fb      	ldrb	r3, [r7, #7]
 80005ec:	f003 021f 	and.w	r2, r3, #31
 80005f0:	4907      	ldr	r1, [pc, #28]	@ (8000610 <__NVIC_EnableIRQ+0x38>)
 80005f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005f6:	095b      	lsrs	r3, r3, #5
 80005f8:	2001      	movs	r0, #1
 80005fa:	fa00 f202 	lsl.w	r2, r0, r2
 80005fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000602:	bf00      	nop
 8000604:	370c      	adds	r7, #12
 8000606:	46bd      	mov	sp, r7
 8000608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800060c:	4770      	bx	lr
 800060e:	bf00      	nop
 8000610:	e000e100 	.word	0xe000e100

08000614 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000614:	b480      	push	{r7}
 8000616:	b083      	sub	sp, #12
 8000618:	af00      	add	r7, sp, #0
 800061a:	4603      	mov	r3, r0
 800061c:	6039      	str	r1, [r7, #0]
 800061e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000620:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000624:	2b00      	cmp	r3, #0
 8000626:	db0a      	blt.n	800063e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000628:	683b      	ldr	r3, [r7, #0]
 800062a:	b2da      	uxtb	r2, r3
 800062c:	490c      	ldr	r1, [pc, #48]	@ (8000660 <__NVIC_SetPriority+0x4c>)
 800062e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000632:	0112      	lsls	r2, r2, #4
 8000634:	b2d2      	uxtb	r2, r2
 8000636:	440b      	add	r3, r1
 8000638:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800063c:	e00a      	b.n	8000654 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800063e:	683b      	ldr	r3, [r7, #0]
 8000640:	b2da      	uxtb	r2, r3
 8000642:	4908      	ldr	r1, [pc, #32]	@ (8000664 <__NVIC_SetPriority+0x50>)
 8000644:	79fb      	ldrb	r3, [r7, #7]
 8000646:	f003 030f 	and.w	r3, r3, #15
 800064a:	3b04      	subs	r3, #4
 800064c:	0112      	lsls	r2, r2, #4
 800064e:	b2d2      	uxtb	r2, r2
 8000650:	440b      	add	r3, r1
 8000652:	761a      	strb	r2, [r3, #24]
}
 8000654:	bf00      	nop
 8000656:	370c      	adds	r7, #12
 8000658:	46bd      	mov	sp, r7
 800065a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800065e:	4770      	bx	lr
 8000660:	e000e100 	.word	0xe000e100
 8000664:	e000ed00 	.word	0xe000ed00

08000668 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000668:	b480      	push	{r7}
 800066a:	b089      	sub	sp, #36	@ 0x24
 800066c:	af00      	add	r7, sp, #0
 800066e:	60f8      	str	r0, [r7, #12]
 8000670:	60b9      	str	r1, [r7, #8]
 8000672:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000674:	68fb      	ldr	r3, [r7, #12]
 8000676:	f003 0307 	and.w	r3, r3, #7
 800067a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800067c:	69fb      	ldr	r3, [r7, #28]
 800067e:	f1c3 0307 	rsb	r3, r3, #7
 8000682:	2b04      	cmp	r3, #4
 8000684:	bf28      	it	cs
 8000686:	2304      	movcs	r3, #4
 8000688:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800068a:	69fb      	ldr	r3, [r7, #28]
 800068c:	3304      	adds	r3, #4
 800068e:	2b06      	cmp	r3, #6
 8000690:	d902      	bls.n	8000698 <NVIC_EncodePriority+0x30>
 8000692:	69fb      	ldr	r3, [r7, #28]
 8000694:	3b03      	subs	r3, #3
 8000696:	e000      	b.n	800069a <NVIC_EncodePriority+0x32>
 8000698:	2300      	movs	r3, #0
 800069a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800069c:	f04f 32ff 	mov.w	r2, #4294967295
 80006a0:	69bb      	ldr	r3, [r7, #24]
 80006a2:	fa02 f303 	lsl.w	r3, r2, r3
 80006a6:	43da      	mvns	r2, r3
 80006a8:	68bb      	ldr	r3, [r7, #8]
 80006aa:	401a      	ands	r2, r3
 80006ac:	697b      	ldr	r3, [r7, #20]
 80006ae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80006b0:	f04f 31ff 	mov.w	r1, #4294967295
 80006b4:	697b      	ldr	r3, [r7, #20]
 80006b6:	fa01 f303 	lsl.w	r3, r1, r3
 80006ba:	43d9      	mvns	r1, r3
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006c0:	4313      	orrs	r3, r2
         );
}
 80006c2:	4618      	mov	r0, r3
 80006c4:	3724      	adds	r7, #36	@ 0x24
 80006c6:	46bd      	mov	sp, r7
 80006c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006cc:	4770      	bx	lr
	...

080006d0 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 80006d0:	b480      	push	{r7}
 80006d2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 80006d4:	4b05      	ldr	r3, [pc, #20]	@ (80006ec <LL_RCC_HSI_Enable+0x1c>)
 80006d6:	681b      	ldr	r3, [r3, #0]
 80006d8:	4a04      	ldr	r2, [pc, #16]	@ (80006ec <LL_RCC_HSI_Enable+0x1c>)
 80006da:	f043 0301 	orr.w	r3, r3, #1
 80006de:	6013      	str	r3, [r2, #0]
}
 80006e0:	bf00      	nop
 80006e2:	46bd      	mov	sp, r7
 80006e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e8:	4770      	bx	lr
 80006ea:	bf00      	nop
 80006ec:	40023800 	.word	0x40023800

080006f0 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 80006f0:	b480      	push	{r7}
 80006f2:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 80006f4:	4b06      	ldr	r3, [pc, #24]	@ (8000710 <LL_RCC_HSI_IsReady+0x20>)
 80006f6:	681b      	ldr	r3, [r3, #0]
 80006f8:	f003 0302 	and.w	r3, r3, #2
 80006fc:	2b02      	cmp	r3, #2
 80006fe:	bf0c      	ite	eq
 8000700:	2301      	moveq	r3, #1
 8000702:	2300      	movne	r3, #0
 8000704:	b2db      	uxtb	r3, r3
}
 8000706:	4618      	mov	r0, r3
 8000708:	46bd      	mov	sp, r7
 800070a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800070e:	4770      	bx	lr
 8000710:	40023800 	.word	0x40023800

08000714 <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll CR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 31
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 8000714:	b480      	push	{r7}
 8000716:	b083      	sub	sp, #12
 8000718:	af00      	add	r7, sp, #0
 800071a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_HSITRIM, Value << RCC_CR_HSITRIM_Pos);
 800071c:	4b07      	ldr	r3, [pc, #28]	@ (800073c <LL_RCC_HSI_SetCalibTrimming+0x28>)
 800071e:	681b      	ldr	r3, [r3, #0]
 8000720:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	00db      	lsls	r3, r3, #3
 8000728:	4904      	ldr	r1, [pc, #16]	@ (800073c <LL_RCC_HSI_SetCalibTrimming+0x28>)
 800072a:	4313      	orrs	r3, r2
 800072c:	600b      	str	r3, [r1, #0]
}
 800072e:	bf00      	nop
 8000730:	370c      	adds	r7, #12
 8000732:	46bd      	mov	sp, r7
 8000734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000738:	4770      	bx	lr
 800073a:	bf00      	nop
 800073c:	40023800 	.word	0x40023800

08000740 <LL_RCC_SetSysClkSource>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8000740:	b480      	push	{r7}
 8000742:	b083      	sub	sp, #12
 8000744:	af00      	add	r7, sp, #0
 8000746:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8000748:	4b06      	ldr	r3, [pc, #24]	@ (8000764 <LL_RCC_SetSysClkSource+0x24>)
 800074a:	689b      	ldr	r3, [r3, #8]
 800074c:	f023 0203 	bic.w	r2, r3, #3
 8000750:	4904      	ldr	r1, [pc, #16]	@ (8000764 <LL_RCC_SetSysClkSource+0x24>)
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	4313      	orrs	r3, r2
 8000756:	608b      	str	r3, [r1, #8]
}
 8000758:	bf00      	nop
 800075a:	370c      	adds	r7, #12
 800075c:	46bd      	mov	sp, r7
 800075e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000762:	4770      	bx	lr
 8000764:	40023800 	.word	0x40023800

08000768 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLLR (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8000768:	b480      	push	{r7}
 800076a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800076c:	4b04      	ldr	r3, [pc, #16]	@ (8000780 <LL_RCC_GetSysClkSource+0x18>)
 800076e:	689b      	ldr	r3, [r3, #8]
 8000770:	f003 030c 	and.w	r3, r3, #12
}
 8000774:	4618      	mov	r0, r3
 8000776:	46bd      	mov	sp, r7
 8000778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800077c:	4770      	bx	lr
 800077e:	bf00      	nop
 8000780:	40023800 	.word	0x40023800

08000784 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8000784:	b480      	push	{r7}
 8000786:	b083      	sub	sp, #12
 8000788:	af00      	add	r7, sp, #0
 800078a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 800078c:	4b06      	ldr	r3, [pc, #24]	@ (80007a8 <LL_RCC_SetAHBPrescaler+0x24>)
 800078e:	689b      	ldr	r3, [r3, #8]
 8000790:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8000794:	4904      	ldr	r1, [pc, #16]	@ (80007a8 <LL_RCC_SetAHBPrescaler+0x24>)
 8000796:	687b      	ldr	r3, [r7, #4]
 8000798:	4313      	orrs	r3, r2
 800079a:	608b      	str	r3, [r1, #8]
}
 800079c:	bf00      	nop
 800079e:	370c      	adds	r7, #12
 80007a0:	46bd      	mov	sp, r7
 80007a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a6:	4770      	bx	lr
 80007a8:	40023800 	.word	0x40023800

080007ac <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 80007ac:	b480      	push	{r7}
 80007ae:	b083      	sub	sp, #12
 80007b0:	af00      	add	r7, sp, #0
 80007b2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 80007b4:	4b06      	ldr	r3, [pc, #24]	@ (80007d0 <LL_RCC_SetAPB1Prescaler+0x24>)
 80007b6:	689b      	ldr	r3, [r3, #8]
 80007b8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80007bc:	4904      	ldr	r1, [pc, #16]	@ (80007d0 <LL_RCC_SetAPB1Prescaler+0x24>)
 80007be:	687b      	ldr	r3, [r7, #4]
 80007c0:	4313      	orrs	r3, r2
 80007c2:	608b      	str	r3, [r1, #8]
}
 80007c4:	bf00      	nop
 80007c6:	370c      	adds	r7, #12
 80007c8:	46bd      	mov	sp, r7
 80007ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ce:	4770      	bx	lr
 80007d0:	40023800 	.word	0x40023800

080007d4 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 80007d4:	b480      	push	{r7}
 80007d6:	b083      	sub	sp, #12
 80007d8:	af00      	add	r7, sp, #0
 80007da:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 80007dc:	4b06      	ldr	r3, [pc, #24]	@ (80007f8 <LL_RCC_SetAPB2Prescaler+0x24>)
 80007de:	689b      	ldr	r3, [r3, #8]
 80007e0:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80007e4:	4904      	ldr	r1, [pc, #16]	@ (80007f8 <LL_RCC_SetAPB2Prescaler+0x24>)
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	4313      	orrs	r3, r2
 80007ea:	608b      	str	r3, [r1, #8]
}
 80007ec:	bf00      	nop
 80007ee:	370c      	adds	r7, #12
 80007f0:	46bd      	mov	sp, r7
 80007f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f6:	4770      	bx	lr
 80007f8:	40023800 	.word	0x40023800

080007fc <LL_RCC_SetTIMPrescaler>:
  *         @arg @ref LL_RCC_TIM_PRESCALER_TWICE
  *         @arg @ref LL_RCC_TIM_PRESCALER_FOUR_TIMES
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetTIMPrescaler(uint32_t Prescaler)
{
 80007fc:	b480      	push	{r7}
 80007fe:	b083      	sub	sp, #12
 8000800:	af00      	add	r7, sp, #0
 8000802:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->DCKCFGR, RCC_DCKCFGR_TIMPRE, Prescaler);
 8000804:	4b07      	ldr	r3, [pc, #28]	@ (8000824 <LL_RCC_SetTIMPrescaler+0x28>)
 8000806:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800080a:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800080e:	4905      	ldr	r1, [pc, #20]	@ (8000824 <LL_RCC_SetTIMPrescaler+0x28>)
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	4313      	orrs	r3, r2
 8000814:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
}
 8000818:	bf00      	nop
 800081a:	370c      	adds	r7, #12
 800081c:	46bd      	mov	sp, r7
 800081e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000822:	4770      	bx	lr
 8000824:	40023800 	.word	0x40023800

08000828 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8000828:	b480      	push	{r7}
 800082a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 800082c:	4b05      	ldr	r3, [pc, #20]	@ (8000844 <LL_RCC_PLL_Enable+0x1c>)
 800082e:	681b      	ldr	r3, [r3, #0]
 8000830:	4a04      	ldr	r2, [pc, #16]	@ (8000844 <LL_RCC_PLL_Enable+0x1c>)
 8000832:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000836:	6013      	str	r3, [r2, #0]
}
 8000838:	bf00      	nop
 800083a:	46bd      	mov	sp, r7
 800083c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000840:	4770      	bx	lr
 8000842:	bf00      	nop
 8000844:	40023800 	.word	0x40023800

08000848 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8000848:	b480      	push	{r7}
 800084a:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY));
 800084c:	4b07      	ldr	r3, [pc, #28]	@ (800086c <LL_RCC_PLL_IsReady+0x24>)
 800084e:	681b      	ldr	r3, [r3, #0]
 8000850:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000854:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8000858:	bf0c      	ite	eq
 800085a:	2301      	moveq	r3, #1
 800085c:	2300      	movne	r3, #0
 800085e:	b2db      	uxtb	r3, r3
}
 8000860:	4618      	mov	r0, r3
 8000862:	46bd      	mov	sp, r7
 8000864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000868:	4770      	bx	lr
 800086a:	bf00      	nop
 800086c:	40023800 	.word	0x40023800

08000870 <LL_RCC_PLL_ConfigDomain_SYS>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLM, uint32_t PLLN, uint32_t PLLP_R)
{
 8000870:	b480      	push	{r7}
 8000872:	b085      	sub	sp, #20
 8000874:	af00      	add	r7, sp, #0
 8000876:	60f8      	str	r0, [r7, #12]
 8000878:	60b9      	str	r1, [r7, #8]
 800087a:	607a      	str	r2, [r7, #4]
 800087c:	603b      	str	r3, [r7, #0]
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM | RCC_PLLCFGR_PLLN,
 800087e:	4b0d      	ldr	r3, [pc, #52]	@ (80008b4 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 8000880:	685a      	ldr	r2, [r3, #4]
 8000882:	4b0d      	ldr	r3, [pc, #52]	@ (80008b8 <LL_RCC_PLL_ConfigDomain_SYS+0x48>)
 8000884:	4013      	ands	r3, r2
 8000886:	68f9      	ldr	r1, [r7, #12]
 8000888:	68ba      	ldr	r2, [r7, #8]
 800088a:	4311      	orrs	r1, r2
 800088c:	687a      	ldr	r2, [r7, #4]
 800088e:	0192      	lsls	r2, r2, #6
 8000890:	430a      	orrs	r2, r1
 8000892:	4908      	ldr	r1, [pc, #32]	@ (80008b4 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 8000894:	4313      	orrs	r3, r2
 8000896:	604b      	str	r3, [r1, #4]
             Source | PLLM | PLLN << RCC_PLLCFGR_PLLN_Pos);
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLP, PLLP_R);
 8000898:	4b06      	ldr	r3, [pc, #24]	@ (80008b4 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 800089a:	685b      	ldr	r3, [r3, #4]
 800089c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80008a0:	4904      	ldr	r1, [pc, #16]	@ (80008b4 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 80008a2:	683b      	ldr	r3, [r7, #0]
 80008a4:	4313      	orrs	r3, r2
 80008a6:	604b      	str	r3, [r1, #4]
#if defined(RCC_PLLR_SYSCLK_SUPPORT)
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLR, PLLP_R);
#endif /* RCC_PLLR_SYSCLK_SUPPORT */
}
 80008a8:	bf00      	nop
 80008aa:	3714      	adds	r7, #20
 80008ac:	46bd      	mov	sp, r7
 80008ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b2:	4770      	bx	lr
 80008b4:	40023800 	.word	0x40023800
 80008b8:	ffbf8000 	.word	0xffbf8000

080008bc <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 80008bc:	b480      	push	{r7}
 80008be:	b085      	sub	sp, #20
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 80008c4:	4b08      	ldr	r3, [pc, #32]	@ (80008e8 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80008c6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80008c8:	4907      	ldr	r1, [pc, #28]	@ (80008e8 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	4313      	orrs	r3, r2
 80008ce:	630b      	str	r3, [r1, #48]	@ 0x30
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80008d0:	4b05      	ldr	r3, [pc, #20]	@ (80008e8 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80008d2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	4013      	ands	r3, r2
 80008d8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80008da:	68fb      	ldr	r3, [r7, #12]
}
 80008dc:	bf00      	nop
 80008de:	3714      	adds	r7, #20
 80008e0:	46bd      	mov	sp, r7
 80008e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e6:	4770      	bx	lr
 80008e8:	40023800 	.word	0x40023800

080008ec <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 80008ec:	b480      	push	{r7}
 80008ee:	b085      	sub	sp, #20
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 80008f4:	4b08      	ldr	r3, [pc, #32]	@ (8000918 <LL_APB1_GRP1_EnableClock+0x2c>)
 80008f6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80008f8:	4907      	ldr	r1, [pc, #28]	@ (8000918 <LL_APB1_GRP1_EnableClock+0x2c>)
 80008fa:	687b      	ldr	r3, [r7, #4]
 80008fc:	4313      	orrs	r3, r2
 80008fe:	640b      	str	r3, [r1, #64]	@ 0x40
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8000900:	4b05      	ldr	r3, [pc, #20]	@ (8000918 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000902:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	4013      	ands	r3, r2
 8000908:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800090a:	68fb      	ldr	r3, [r7, #12]
}
 800090c:	bf00      	nop
 800090e:	3714      	adds	r7, #20
 8000910:	46bd      	mov	sp, r7
 8000912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000916:	4770      	bx	lr
 8000918:	40023800 	.word	0x40023800

0800091c <LL_SYSCFG_SetEXTISource>:
  *         @arg @ref LL_SYSCFG_EXTI_LINE14
  *         @arg @ref LL_SYSCFG_EXTI_LINE15
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_SetEXTISource(uint32_t Port, uint32_t Line)
{
 800091c:	b480      	push	{r7}
 800091e:	b087      	sub	sp, #28
 8000920:	af00      	add	r7, sp, #0
 8000922:	6078      	str	r0, [r7, #4]
 8000924:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SYSCFG->EXTICR[Line & 0xFF], (Line >> 16), Port << POSITION_VAL((Line >> 16)));
 8000926:	4a17      	ldr	r2, [pc, #92]	@ (8000984 <LL_SYSCFG_SetEXTISource+0x68>)
 8000928:	683b      	ldr	r3, [r7, #0]
 800092a:	b2db      	uxtb	r3, r3
 800092c:	3302      	adds	r3, #2
 800092e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000932:	683b      	ldr	r3, [r7, #0]
 8000934:	0c1b      	lsrs	r3, r3, #16
 8000936:	43db      	mvns	r3, r3
 8000938:	ea02 0103 	and.w	r1, r2, r3
 800093c:	683b      	ldr	r3, [r7, #0]
 800093e:	0c1b      	lsrs	r3, r3, #16
 8000940:	613b      	str	r3, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000942:	693b      	ldr	r3, [r7, #16]
 8000944:	fa93 f3a3 	rbit	r3, r3
 8000948:	60fb      	str	r3, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800094a:	68fb      	ldr	r3, [r7, #12]
 800094c:	617b      	str	r3, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800094e:	697b      	ldr	r3, [r7, #20]
 8000950:	2b00      	cmp	r3, #0
 8000952:	d101      	bne.n	8000958 <LL_SYSCFG_SetEXTISource+0x3c>
  {
    return 32U;
 8000954:	2320      	movs	r3, #32
 8000956:	e003      	b.n	8000960 <LL_SYSCFG_SetEXTISource+0x44>
  }
  return __builtin_clz(value);
 8000958:	697b      	ldr	r3, [r7, #20]
 800095a:	fab3 f383 	clz	r3, r3
 800095e:	b2db      	uxtb	r3, r3
 8000960:	461a      	mov	r2, r3
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	fa03 f202 	lsl.w	r2, r3, r2
 8000968:	4806      	ldr	r0, [pc, #24]	@ (8000984 <LL_SYSCFG_SetEXTISource+0x68>)
 800096a:	683b      	ldr	r3, [r7, #0]
 800096c:	b2db      	uxtb	r3, r3
 800096e:	430a      	orrs	r2, r1
 8000970:	3302      	adds	r3, #2
 8000972:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
 8000976:	bf00      	nop
 8000978:	371c      	adds	r7, #28
 800097a:	46bd      	mov	sp, r7
 800097c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000980:	4770      	bx	lr
 8000982:	bf00      	nop
 8000984:	40013800 	.word	0x40013800

08000988 <LL_DBGMCU_APB1_GRP1_FreezePeriph>:
  *         
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_DBGMCU_APB1_GRP1_FreezePeriph(uint32_t Periphs)
{
 8000988:	b480      	push	{r7}
 800098a:	b083      	sub	sp, #12
 800098c:	af00      	add	r7, sp, #0
 800098e:	6078      	str	r0, [r7, #4]
  SET_BIT(DBGMCU->APB1FZ, Periphs);
 8000990:	4b05      	ldr	r3, [pc, #20]	@ (80009a8 <LL_DBGMCU_APB1_GRP1_FreezePeriph+0x20>)
 8000992:	689a      	ldr	r2, [r3, #8]
 8000994:	4904      	ldr	r1, [pc, #16]	@ (80009a8 <LL_DBGMCU_APB1_GRP1_FreezePeriph+0x20>)
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	4313      	orrs	r3, r2
 800099a:	608b      	str	r3, [r1, #8]
}
 800099c:	bf00      	nop
 800099e:	370c      	adds	r7, #12
 80009a0:	46bd      	mov	sp, r7
 80009a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a6:	4770      	bx	lr
 80009a8:	e0042000 	.word	0xe0042000

080009ac <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_14
  *         @arg @ref LL_FLASH_LATENCY_15
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 80009ac:	b480      	push	{r7}
 80009ae:	b083      	sub	sp, #12
 80009b0:	af00      	add	r7, sp, #0
 80009b2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 80009b4:	4b06      	ldr	r3, [pc, #24]	@ (80009d0 <LL_FLASH_SetLatency+0x24>)
 80009b6:	681b      	ldr	r3, [r3, #0]
 80009b8:	f023 0207 	bic.w	r2, r3, #7
 80009bc:	4904      	ldr	r1, [pc, #16]	@ (80009d0 <LL_FLASH_SetLatency+0x24>)
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	4313      	orrs	r3, r2
 80009c2:	600b      	str	r3, [r1, #0]
}
 80009c4:	bf00      	nop
 80009c6:	370c      	adds	r7, #12
 80009c8:	46bd      	mov	sp, r7
 80009ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ce:	4770      	bx	lr
 80009d0:	40023c00 	.word	0x40023c00

080009d4 <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_13
  *         @arg @ref LL_FLASH_LATENCY_14
  *         @arg @ref LL_FLASH_LATENCY_15
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 80009d4:	b480      	push	{r7}
 80009d6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 80009d8:	4b04      	ldr	r3, [pc, #16]	@ (80009ec <LL_FLASH_GetLatency+0x18>)
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	f003 0307 	and.w	r3, r3, #7
}
 80009e0:	4618      	mov	r0, r3
 80009e2:	46bd      	mov	sp, r7
 80009e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e8:	4770      	bx	lr
 80009ea:	bf00      	nop
 80009ec:	40023c00 	.word	0x40023c00

080009f0 <LL_PWR_SetRegulVoltageScaling>:
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE3
  *         (*) LL_PWR_REGU_VOLTAGE_SCALE1 is not available for STM32F401xx devices
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRegulVoltageScaling(uint32_t VoltageScaling)
{
 80009f0:	b480      	push	{r7}
 80009f2:	b083      	sub	sp, #12
 80009f4:	af00      	add	r7, sp, #0
 80009f6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR, PWR_CR_VOS, VoltageScaling);
 80009f8:	4b06      	ldr	r3, [pc, #24]	@ (8000a14 <LL_PWR_SetRegulVoltageScaling+0x24>)
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8000a00:	4904      	ldr	r1, [pc, #16]	@ (8000a14 <LL_PWR_SetRegulVoltageScaling+0x24>)
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	4313      	orrs	r3, r2
 8000a06:	600b      	str	r3, [r1, #0]
}
 8000a08:	bf00      	nop
 8000a0a:	370c      	adds	r7, #12
 8000a0c:	46bd      	mov	sp, r7
 8000a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a12:	4770      	bx	lr
 8000a14:	40007000 	.word	0x40007000

08000a18 <LL_PWR_IsActiveFlag_VOS>:
  * @brief  Indicate whether the Regulator is ready in the selected voltage range or if its output voltage is still changing to the required voltage level
  * @rmtoll CSR   VOS       LL_PWR_IsActiveFlag_VOS
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_VOS(void)
{
 8000a18:	b480      	push	{r7}
 8000a1a:	af00      	add	r7, sp, #0
  return (READ_BIT(PWR->CSR, LL_PWR_CSR_VOS) == (LL_PWR_CSR_VOS));
 8000a1c:	4b07      	ldr	r3, [pc, #28]	@ (8000a3c <LL_PWR_IsActiveFlag_VOS+0x24>)
 8000a1e:	685b      	ldr	r3, [r3, #4]
 8000a20:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000a24:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8000a28:	bf0c      	ite	eq
 8000a2a:	2301      	moveq	r3, #1
 8000a2c:	2300      	movne	r3, #0
 8000a2e:	b2db      	uxtb	r3, r3
}
 8000a30:	4618      	mov	r0, r3
 8000a32:	46bd      	mov	sp, r7
 8000a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a38:	4770      	bx	lr
 8000a3a:	bf00      	nop
 8000a3c:	40007000 	.word	0x40007000

08000a40 <LL_TIM_DisableARRPreload>:
  * @rmtoll CR1          ARPE          LL_TIM_DisableARRPreload
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableARRPreload(TIM_TypeDef *TIMx)
{
 8000a40:	b480      	push	{r7}
 8000a42:	b083      	sub	sp, #12
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_ARPE);
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	681b      	ldr	r3, [r3, #0]
 8000a4c:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	601a      	str	r2, [r3, #0]
}
 8000a54:	bf00      	nop
 8000a56:	370c      	adds	r7, #12
 8000a58:	46bd      	mov	sp, r7
 8000a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a5e:	4770      	bx	lr

08000a60 <LL_TIM_IC_SetActiveInput>:
  *         @arg @ref LL_TIM_ACTIVEINPUT_INDIRECTTI
  *         @arg @ref LL_TIM_ACTIVEINPUT_TRC
  * @retval None
  */
__STATIC_INLINE void LL_TIM_IC_SetActiveInput(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ICActiveInput)
{
 8000a60:	b480      	push	{r7}
 8000a62:	b087      	sub	sp, #28
 8000a64:	af00      	add	r7, sp, #0
 8000a66:	60f8      	str	r0, [r7, #12]
 8000a68:	60b9      	str	r1, [r7, #8]
 8000a6a:	607a      	str	r2, [r7, #4]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8000a6c:	68bb      	ldr	r3, [r7, #8]
 8000a6e:	2b01      	cmp	r3, #1
 8000a70:	d01c      	beq.n	8000aac <LL_TIM_IC_SetActiveInput+0x4c>
 8000a72:	68bb      	ldr	r3, [r7, #8]
 8000a74:	2b04      	cmp	r3, #4
 8000a76:	d017      	beq.n	8000aa8 <LL_TIM_IC_SetActiveInput+0x48>
 8000a78:	68bb      	ldr	r3, [r7, #8]
 8000a7a:	2b10      	cmp	r3, #16
 8000a7c:	d012      	beq.n	8000aa4 <LL_TIM_IC_SetActiveInput+0x44>
 8000a7e:	68bb      	ldr	r3, [r7, #8]
 8000a80:	2b40      	cmp	r3, #64	@ 0x40
 8000a82:	d00d      	beq.n	8000aa0 <LL_TIM_IC_SetActiveInput+0x40>
 8000a84:	68bb      	ldr	r3, [r7, #8]
 8000a86:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000a8a:	d007      	beq.n	8000a9c <LL_TIM_IC_SetActiveInput+0x3c>
 8000a8c:	68bb      	ldr	r3, [r7, #8]
 8000a8e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000a92:	d101      	bne.n	8000a98 <LL_TIM_IC_SetActiveInput+0x38>
 8000a94:	2305      	movs	r3, #5
 8000a96:	e00a      	b.n	8000aae <LL_TIM_IC_SetActiveInput+0x4e>
 8000a98:	2306      	movs	r3, #6
 8000a9a:	e008      	b.n	8000aae <LL_TIM_IC_SetActiveInput+0x4e>
 8000a9c:	2304      	movs	r3, #4
 8000a9e:	e006      	b.n	8000aae <LL_TIM_IC_SetActiveInput+0x4e>
 8000aa0:	2303      	movs	r3, #3
 8000aa2:	e004      	b.n	8000aae <LL_TIM_IC_SetActiveInput+0x4e>
 8000aa4:	2302      	movs	r3, #2
 8000aa6:	e002      	b.n	8000aae <LL_TIM_IC_SetActiveInput+0x4e>
 8000aa8:	2301      	movs	r3, #1
 8000aaa:	e000      	b.n	8000aae <LL_TIM_IC_SetActiveInput+0x4e>
 8000aac:	2300      	movs	r3, #0
 8000aae:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8000ab0:	68fb      	ldr	r3, [r7, #12]
 8000ab2:	3318      	adds	r3, #24
 8000ab4:	4619      	mov	r1, r3
 8000ab6:	7dfb      	ldrb	r3, [r7, #23]
 8000ab8:	4a0e      	ldr	r2, [pc, #56]	@ (8000af4 <LL_TIM_IC_SetActiveInput+0x94>)
 8000aba:	5cd3      	ldrb	r3, [r2, r3]
 8000abc:	440b      	add	r3, r1
 8000abe:	613b      	str	r3, [r7, #16]
  MODIFY_REG(*pReg, ((TIM_CCMR1_CC1S) << SHIFT_TAB_ICxx[iChannel]), (ICActiveInput >> 16U) << SHIFT_TAB_ICxx[iChannel]);
 8000ac0:	693b      	ldr	r3, [r7, #16]
 8000ac2:	681a      	ldr	r2, [r3, #0]
 8000ac4:	7dfb      	ldrb	r3, [r7, #23]
 8000ac6:	490c      	ldr	r1, [pc, #48]	@ (8000af8 <LL_TIM_IC_SetActiveInput+0x98>)
 8000ac8:	5ccb      	ldrb	r3, [r1, r3]
 8000aca:	4619      	mov	r1, r3
 8000acc:	2303      	movs	r3, #3
 8000ace:	408b      	lsls	r3, r1
 8000ad0:	43db      	mvns	r3, r3
 8000ad2:	401a      	ands	r2, r3
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	0c1b      	lsrs	r3, r3, #16
 8000ad8:	7df9      	ldrb	r1, [r7, #23]
 8000ada:	4807      	ldr	r0, [pc, #28]	@ (8000af8 <LL_TIM_IC_SetActiveInput+0x98>)
 8000adc:	5c41      	ldrb	r1, [r0, r1]
 8000ade:	408b      	lsls	r3, r1
 8000ae0:	431a      	orrs	r2, r3
 8000ae2:	693b      	ldr	r3, [r7, #16]
 8000ae4:	601a      	str	r2, [r3, #0]
}
 8000ae6:	bf00      	nop
 8000ae8:	371c      	adds	r7, #28
 8000aea:	46bd      	mov	sp, r7
 8000aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af0:	4770      	bx	lr
 8000af2:	bf00      	nop
 8000af4:	080034a0 	.word	0x080034a0
 8000af8:	080034a8 	.word	0x080034a8

08000afc <LL_TIM_IC_SetPrescaler>:
  *         @arg @ref LL_TIM_ICPSC_DIV4
  *         @arg @ref LL_TIM_ICPSC_DIV8
  * @retval None
  */
__STATIC_INLINE void LL_TIM_IC_SetPrescaler(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ICPrescaler)
{
 8000afc:	b480      	push	{r7}
 8000afe:	b087      	sub	sp, #28
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	60f8      	str	r0, [r7, #12]
 8000b04:	60b9      	str	r1, [r7, #8]
 8000b06:	607a      	str	r2, [r7, #4]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8000b08:	68bb      	ldr	r3, [r7, #8]
 8000b0a:	2b01      	cmp	r3, #1
 8000b0c:	d01c      	beq.n	8000b48 <LL_TIM_IC_SetPrescaler+0x4c>
 8000b0e:	68bb      	ldr	r3, [r7, #8]
 8000b10:	2b04      	cmp	r3, #4
 8000b12:	d017      	beq.n	8000b44 <LL_TIM_IC_SetPrescaler+0x48>
 8000b14:	68bb      	ldr	r3, [r7, #8]
 8000b16:	2b10      	cmp	r3, #16
 8000b18:	d012      	beq.n	8000b40 <LL_TIM_IC_SetPrescaler+0x44>
 8000b1a:	68bb      	ldr	r3, [r7, #8]
 8000b1c:	2b40      	cmp	r3, #64	@ 0x40
 8000b1e:	d00d      	beq.n	8000b3c <LL_TIM_IC_SetPrescaler+0x40>
 8000b20:	68bb      	ldr	r3, [r7, #8]
 8000b22:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000b26:	d007      	beq.n	8000b38 <LL_TIM_IC_SetPrescaler+0x3c>
 8000b28:	68bb      	ldr	r3, [r7, #8]
 8000b2a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000b2e:	d101      	bne.n	8000b34 <LL_TIM_IC_SetPrescaler+0x38>
 8000b30:	2305      	movs	r3, #5
 8000b32:	e00a      	b.n	8000b4a <LL_TIM_IC_SetPrescaler+0x4e>
 8000b34:	2306      	movs	r3, #6
 8000b36:	e008      	b.n	8000b4a <LL_TIM_IC_SetPrescaler+0x4e>
 8000b38:	2304      	movs	r3, #4
 8000b3a:	e006      	b.n	8000b4a <LL_TIM_IC_SetPrescaler+0x4e>
 8000b3c:	2303      	movs	r3, #3
 8000b3e:	e004      	b.n	8000b4a <LL_TIM_IC_SetPrescaler+0x4e>
 8000b40:	2302      	movs	r3, #2
 8000b42:	e002      	b.n	8000b4a <LL_TIM_IC_SetPrescaler+0x4e>
 8000b44:	2301      	movs	r3, #1
 8000b46:	e000      	b.n	8000b4a <LL_TIM_IC_SetPrescaler+0x4e>
 8000b48:	2300      	movs	r3, #0
 8000b4a:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8000b4c:	68fb      	ldr	r3, [r7, #12]
 8000b4e:	3318      	adds	r3, #24
 8000b50:	4619      	mov	r1, r3
 8000b52:	7dfb      	ldrb	r3, [r7, #23]
 8000b54:	4a0e      	ldr	r2, [pc, #56]	@ (8000b90 <LL_TIM_IC_SetPrescaler+0x94>)
 8000b56:	5cd3      	ldrb	r3, [r2, r3]
 8000b58:	440b      	add	r3, r1
 8000b5a:	613b      	str	r3, [r7, #16]
  MODIFY_REG(*pReg, ((TIM_CCMR1_IC1PSC) << SHIFT_TAB_ICxx[iChannel]), (ICPrescaler >> 16U) << SHIFT_TAB_ICxx[iChannel]);
 8000b5c:	693b      	ldr	r3, [r7, #16]
 8000b5e:	681a      	ldr	r2, [r3, #0]
 8000b60:	7dfb      	ldrb	r3, [r7, #23]
 8000b62:	490c      	ldr	r1, [pc, #48]	@ (8000b94 <LL_TIM_IC_SetPrescaler+0x98>)
 8000b64:	5ccb      	ldrb	r3, [r1, r3]
 8000b66:	4619      	mov	r1, r3
 8000b68:	230c      	movs	r3, #12
 8000b6a:	408b      	lsls	r3, r1
 8000b6c:	43db      	mvns	r3, r3
 8000b6e:	401a      	ands	r2, r3
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	0c1b      	lsrs	r3, r3, #16
 8000b74:	7df9      	ldrb	r1, [r7, #23]
 8000b76:	4807      	ldr	r0, [pc, #28]	@ (8000b94 <LL_TIM_IC_SetPrescaler+0x98>)
 8000b78:	5c41      	ldrb	r1, [r0, r1]
 8000b7a:	408b      	lsls	r3, r1
 8000b7c:	431a      	orrs	r2, r3
 8000b7e:	693b      	ldr	r3, [r7, #16]
 8000b80:	601a      	str	r2, [r3, #0]
}
 8000b82:	bf00      	nop
 8000b84:	371c      	adds	r7, #28
 8000b86:	46bd      	mov	sp, r7
 8000b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8c:	4770      	bx	lr
 8000b8e:	bf00      	nop
 8000b90:	080034a0 	.word	0x080034a0
 8000b94:	080034a8 	.word	0x080034a8

08000b98 <LL_TIM_IC_SetFilter>:
  *         @arg @ref LL_TIM_IC_FILTER_FDIV32_N6
  *         @arg @ref LL_TIM_IC_FILTER_FDIV32_N8
  * @retval None
  */
__STATIC_INLINE void LL_TIM_IC_SetFilter(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ICFilter)
{
 8000b98:	b480      	push	{r7}
 8000b9a:	b087      	sub	sp, #28
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	60f8      	str	r0, [r7, #12]
 8000ba0:	60b9      	str	r1, [r7, #8]
 8000ba2:	607a      	str	r2, [r7, #4]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8000ba4:	68bb      	ldr	r3, [r7, #8]
 8000ba6:	2b01      	cmp	r3, #1
 8000ba8:	d01c      	beq.n	8000be4 <LL_TIM_IC_SetFilter+0x4c>
 8000baa:	68bb      	ldr	r3, [r7, #8]
 8000bac:	2b04      	cmp	r3, #4
 8000bae:	d017      	beq.n	8000be0 <LL_TIM_IC_SetFilter+0x48>
 8000bb0:	68bb      	ldr	r3, [r7, #8]
 8000bb2:	2b10      	cmp	r3, #16
 8000bb4:	d012      	beq.n	8000bdc <LL_TIM_IC_SetFilter+0x44>
 8000bb6:	68bb      	ldr	r3, [r7, #8]
 8000bb8:	2b40      	cmp	r3, #64	@ 0x40
 8000bba:	d00d      	beq.n	8000bd8 <LL_TIM_IC_SetFilter+0x40>
 8000bbc:	68bb      	ldr	r3, [r7, #8]
 8000bbe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000bc2:	d007      	beq.n	8000bd4 <LL_TIM_IC_SetFilter+0x3c>
 8000bc4:	68bb      	ldr	r3, [r7, #8]
 8000bc6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000bca:	d101      	bne.n	8000bd0 <LL_TIM_IC_SetFilter+0x38>
 8000bcc:	2305      	movs	r3, #5
 8000bce:	e00a      	b.n	8000be6 <LL_TIM_IC_SetFilter+0x4e>
 8000bd0:	2306      	movs	r3, #6
 8000bd2:	e008      	b.n	8000be6 <LL_TIM_IC_SetFilter+0x4e>
 8000bd4:	2304      	movs	r3, #4
 8000bd6:	e006      	b.n	8000be6 <LL_TIM_IC_SetFilter+0x4e>
 8000bd8:	2303      	movs	r3, #3
 8000bda:	e004      	b.n	8000be6 <LL_TIM_IC_SetFilter+0x4e>
 8000bdc:	2302      	movs	r3, #2
 8000bde:	e002      	b.n	8000be6 <LL_TIM_IC_SetFilter+0x4e>
 8000be0:	2301      	movs	r3, #1
 8000be2:	e000      	b.n	8000be6 <LL_TIM_IC_SetFilter+0x4e>
 8000be4:	2300      	movs	r3, #0
 8000be6:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8000be8:	68fb      	ldr	r3, [r7, #12]
 8000bea:	3318      	adds	r3, #24
 8000bec:	4619      	mov	r1, r3
 8000bee:	7dfb      	ldrb	r3, [r7, #23]
 8000bf0:	4a0e      	ldr	r2, [pc, #56]	@ (8000c2c <LL_TIM_IC_SetFilter+0x94>)
 8000bf2:	5cd3      	ldrb	r3, [r2, r3]
 8000bf4:	440b      	add	r3, r1
 8000bf6:	613b      	str	r3, [r7, #16]
  MODIFY_REG(*pReg, ((TIM_CCMR1_IC1F) << SHIFT_TAB_ICxx[iChannel]), (ICFilter >> 16U) << SHIFT_TAB_ICxx[iChannel]);
 8000bf8:	693b      	ldr	r3, [r7, #16]
 8000bfa:	681a      	ldr	r2, [r3, #0]
 8000bfc:	7dfb      	ldrb	r3, [r7, #23]
 8000bfe:	490c      	ldr	r1, [pc, #48]	@ (8000c30 <LL_TIM_IC_SetFilter+0x98>)
 8000c00:	5ccb      	ldrb	r3, [r1, r3]
 8000c02:	4619      	mov	r1, r3
 8000c04:	23f0      	movs	r3, #240	@ 0xf0
 8000c06:	408b      	lsls	r3, r1
 8000c08:	43db      	mvns	r3, r3
 8000c0a:	401a      	ands	r2, r3
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	0c1b      	lsrs	r3, r3, #16
 8000c10:	7df9      	ldrb	r1, [r7, #23]
 8000c12:	4807      	ldr	r0, [pc, #28]	@ (8000c30 <LL_TIM_IC_SetFilter+0x98>)
 8000c14:	5c41      	ldrb	r1, [r0, r1]
 8000c16:	408b      	lsls	r3, r1
 8000c18:	431a      	orrs	r2, r3
 8000c1a:	693b      	ldr	r3, [r7, #16]
 8000c1c:	601a      	str	r2, [r3, #0]
}
 8000c1e:	bf00      	nop
 8000c20:	371c      	adds	r7, #28
 8000c22:	46bd      	mov	sp, r7
 8000c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c28:	4770      	bx	lr
 8000c2a:	bf00      	nop
 8000c2c:	080034a0 	.word	0x080034a0
 8000c30:	080034a8 	.word	0x080034a8

08000c34 <LL_TIM_IC_SetPolarity>:
  *         @arg @ref LL_TIM_IC_POLARITY_FALLING
  *         @arg @ref LL_TIM_IC_POLARITY_BOTHEDGE
  * @retval None
  */
__STATIC_INLINE void LL_TIM_IC_SetPolarity(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ICPolarity)
{
 8000c34:	b480      	push	{r7}
 8000c36:	b087      	sub	sp, #28
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	60f8      	str	r0, [r7, #12]
 8000c3c:	60b9      	str	r1, [r7, #8]
 8000c3e:	607a      	str	r2, [r7, #4]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8000c40:	68bb      	ldr	r3, [r7, #8]
 8000c42:	2b01      	cmp	r3, #1
 8000c44:	d01c      	beq.n	8000c80 <LL_TIM_IC_SetPolarity+0x4c>
 8000c46:	68bb      	ldr	r3, [r7, #8]
 8000c48:	2b04      	cmp	r3, #4
 8000c4a:	d017      	beq.n	8000c7c <LL_TIM_IC_SetPolarity+0x48>
 8000c4c:	68bb      	ldr	r3, [r7, #8]
 8000c4e:	2b10      	cmp	r3, #16
 8000c50:	d012      	beq.n	8000c78 <LL_TIM_IC_SetPolarity+0x44>
 8000c52:	68bb      	ldr	r3, [r7, #8]
 8000c54:	2b40      	cmp	r3, #64	@ 0x40
 8000c56:	d00d      	beq.n	8000c74 <LL_TIM_IC_SetPolarity+0x40>
 8000c58:	68bb      	ldr	r3, [r7, #8]
 8000c5a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000c5e:	d007      	beq.n	8000c70 <LL_TIM_IC_SetPolarity+0x3c>
 8000c60:	68bb      	ldr	r3, [r7, #8]
 8000c62:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000c66:	d101      	bne.n	8000c6c <LL_TIM_IC_SetPolarity+0x38>
 8000c68:	2305      	movs	r3, #5
 8000c6a:	e00a      	b.n	8000c82 <LL_TIM_IC_SetPolarity+0x4e>
 8000c6c:	2306      	movs	r3, #6
 8000c6e:	e008      	b.n	8000c82 <LL_TIM_IC_SetPolarity+0x4e>
 8000c70:	2304      	movs	r3, #4
 8000c72:	e006      	b.n	8000c82 <LL_TIM_IC_SetPolarity+0x4e>
 8000c74:	2303      	movs	r3, #3
 8000c76:	e004      	b.n	8000c82 <LL_TIM_IC_SetPolarity+0x4e>
 8000c78:	2302      	movs	r3, #2
 8000c7a:	e002      	b.n	8000c82 <LL_TIM_IC_SetPolarity+0x4e>
 8000c7c:	2301      	movs	r3, #1
 8000c7e:	e000      	b.n	8000c82 <LL_TIM_IC_SetPolarity+0x4e>
 8000c80:	2300      	movs	r3, #0
 8000c82:	75fb      	strb	r3, [r7, #23]
  MODIFY_REG(TIMx->CCER, ((TIM_CCER_CC1NP | TIM_CCER_CC1P) << SHIFT_TAB_CCxP[iChannel]),
 8000c84:	68fb      	ldr	r3, [r7, #12]
 8000c86:	6a1a      	ldr	r2, [r3, #32]
 8000c88:	7dfb      	ldrb	r3, [r7, #23]
 8000c8a:	490b      	ldr	r1, [pc, #44]	@ (8000cb8 <LL_TIM_IC_SetPolarity+0x84>)
 8000c8c:	5ccb      	ldrb	r3, [r1, r3]
 8000c8e:	4619      	mov	r1, r3
 8000c90:	230a      	movs	r3, #10
 8000c92:	408b      	lsls	r3, r1
 8000c94:	43db      	mvns	r3, r3
 8000c96:	401a      	ands	r2, r3
 8000c98:	7dfb      	ldrb	r3, [r7, #23]
 8000c9a:	4907      	ldr	r1, [pc, #28]	@ (8000cb8 <LL_TIM_IC_SetPolarity+0x84>)
 8000c9c:	5ccb      	ldrb	r3, [r1, r3]
 8000c9e:	4619      	mov	r1, r3
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	408b      	lsls	r3, r1
 8000ca4:	431a      	orrs	r2, r3
 8000ca6:	68fb      	ldr	r3, [r7, #12]
 8000ca8:	621a      	str	r2, [r3, #32]
             ICPolarity << SHIFT_TAB_CCxP[iChannel]);
}
 8000caa:	bf00      	nop
 8000cac:	371c      	adds	r7, #28
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop
 8000cb8:	080034b0 	.word	0x080034b0

08000cbc <LL_TIM_SetClockSource>:
  *         @arg @ref LL_TIM_CLOCKSOURCE_EXT_MODE1
  *         @arg @ref LL_TIM_CLOCKSOURCE_EXT_MODE2
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetClockSource(TIM_TypeDef *TIMx, uint32_t ClockSource)
{
 8000cbc:	b480      	push	{r7}
 8000cbe:	b083      	sub	sp, #12
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	6078      	str	r0, [r7, #4]
 8000cc4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	689b      	ldr	r3, [r3, #8]
 8000cca:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8000cce:	f023 0307 	bic.w	r3, r3, #7
 8000cd2:	683a      	ldr	r2, [r7, #0]
 8000cd4:	431a      	orrs	r2, r3
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	609a      	str	r2, [r3, #8]
}
 8000cda:	bf00      	nop
 8000cdc:	370c      	adds	r7, #12
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce4:	4770      	bx	lr

08000ce6 <LL_TIM_SetTriggerOutput>:
  *         @arg @ref LL_TIM_TRGO_OC3REF
  *         @arg @ref LL_TIM_TRGO_OC4REF
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetTriggerOutput(TIM_TypeDef *TIMx, uint32_t TimerSynchronization)
{
 8000ce6:	b480      	push	{r7}
 8000ce8:	b083      	sub	sp, #12
 8000cea:	af00      	add	r7, sp, #0
 8000cec:	6078      	str	r0, [r7, #4]
 8000cee:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	685b      	ldr	r3, [r3, #4]
 8000cf4:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8000cf8:	683b      	ldr	r3, [r7, #0]
 8000cfa:	431a      	orrs	r2, r3
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	605a      	str	r2, [r3, #4]
}
 8000d00:	bf00      	nop
 8000d02:	370c      	adds	r7, #12
 8000d04:	46bd      	mov	sp, r7
 8000d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0a:	4770      	bx	lr

08000d0c <LL_TIM_DisableMasterSlaveMode>:
  * @rmtoll SMCR         MSM           LL_TIM_DisableMasterSlaveMode
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableMasterSlaveMode(TIM_TypeDef *TIMx)
{
 8000d0c:	b480      	push	{r7}
 8000d0e:	b083      	sub	sp, #12
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	689b      	ldr	r3, [r3, #8]
 8000d18:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	609a      	str	r2, [r3, #8]
}
 8000d20:	bf00      	nop
 8000d22:	370c      	adds	r7, #12
 8000d24:	46bd      	mov	sp, r7
 8000d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2a:	4770      	bx	lr

08000d2c <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	b08b      	sub	sp, #44	@ 0x2c
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	60f8      	str	r0, [r7, #12]
 8000d34:	60b9      	str	r1, [r7, #8]
 8000d36:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8000d38:	68fb      	ldr	r3, [r7, #12]
 8000d3a:	681a      	ldr	r2, [r3, #0]
 8000d3c:	68bb      	ldr	r3, [r7, #8]
 8000d3e:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d40:	697b      	ldr	r3, [r7, #20]
 8000d42:	fa93 f3a3 	rbit	r3, r3
 8000d46:	613b      	str	r3, [r7, #16]
  return result;
 8000d48:	693b      	ldr	r3, [r7, #16]
 8000d4a:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8000d4c:	69bb      	ldr	r3, [r7, #24]
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d101      	bne.n	8000d56 <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 8000d52:	2320      	movs	r3, #32
 8000d54:	e003      	b.n	8000d5e <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 8000d56:	69bb      	ldr	r3, [r7, #24]
 8000d58:	fab3 f383 	clz	r3, r3
 8000d5c:	b2db      	uxtb	r3, r3
 8000d5e:	005b      	lsls	r3, r3, #1
 8000d60:	2103      	movs	r1, #3
 8000d62:	fa01 f303 	lsl.w	r3, r1, r3
 8000d66:	43db      	mvns	r3, r3
 8000d68:	401a      	ands	r2, r3
 8000d6a:	68bb      	ldr	r3, [r7, #8]
 8000d6c:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d6e:	6a3b      	ldr	r3, [r7, #32]
 8000d70:	fa93 f3a3 	rbit	r3, r3
 8000d74:	61fb      	str	r3, [r7, #28]
  return result;
 8000d76:	69fb      	ldr	r3, [r7, #28]
 8000d78:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8000d7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d101      	bne.n	8000d84 <LL_GPIO_SetPinMode+0x58>
    return 32U;
 8000d80:	2320      	movs	r3, #32
 8000d82:	e003      	b.n	8000d8c <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 8000d84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d86:	fab3 f383 	clz	r3, r3
 8000d8a:	b2db      	uxtb	r3, r3
 8000d8c:	005b      	lsls	r3, r3, #1
 8000d8e:	6879      	ldr	r1, [r7, #4]
 8000d90:	fa01 f303 	lsl.w	r3, r1, r3
 8000d94:	431a      	orrs	r2, r3
 8000d96:	68fb      	ldr	r3, [r7, #12]
 8000d98:	601a      	str	r2, [r3, #0]
}
 8000d9a:	bf00      	nop
 8000d9c:	372c      	adds	r7, #44	@ 0x2c
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da4:	4770      	bx	lr

08000da6 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 8000da6:	b480      	push	{r7}
 8000da8:	b08b      	sub	sp, #44	@ 0x2c
 8000daa:	af00      	add	r7, sp, #0
 8000dac:	60f8      	str	r0, [r7, #12]
 8000dae:	60b9      	str	r1, [r7, #8]
 8000db0:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8000db2:	68fb      	ldr	r3, [r7, #12]
 8000db4:	68da      	ldr	r2, [r3, #12]
 8000db6:	68bb      	ldr	r3, [r7, #8]
 8000db8:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000dba:	697b      	ldr	r3, [r7, #20]
 8000dbc:	fa93 f3a3 	rbit	r3, r3
 8000dc0:	613b      	str	r3, [r7, #16]
  return result;
 8000dc2:	693b      	ldr	r3, [r7, #16]
 8000dc4:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8000dc6:	69bb      	ldr	r3, [r7, #24]
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d101      	bne.n	8000dd0 <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 8000dcc:	2320      	movs	r3, #32
 8000dce:	e003      	b.n	8000dd8 <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 8000dd0:	69bb      	ldr	r3, [r7, #24]
 8000dd2:	fab3 f383 	clz	r3, r3
 8000dd6:	b2db      	uxtb	r3, r3
 8000dd8:	005b      	lsls	r3, r3, #1
 8000dda:	2103      	movs	r1, #3
 8000ddc:	fa01 f303 	lsl.w	r3, r1, r3
 8000de0:	43db      	mvns	r3, r3
 8000de2:	401a      	ands	r2, r3
 8000de4:	68bb      	ldr	r3, [r7, #8]
 8000de6:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000de8:	6a3b      	ldr	r3, [r7, #32]
 8000dea:	fa93 f3a3 	rbit	r3, r3
 8000dee:	61fb      	str	r3, [r7, #28]
  return result;
 8000df0:	69fb      	ldr	r3, [r7, #28]
 8000df2:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8000df4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d101      	bne.n	8000dfe <LL_GPIO_SetPinPull+0x58>
    return 32U;
 8000dfa:	2320      	movs	r3, #32
 8000dfc:	e003      	b.n	8000e06 <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 8000dfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e00:	fab3 f383 	clz	r3, r3
 8000e04:	b2db      	uxtb	r3, r3
 8000e06:	005b      	lsls	r3, r3, #1
 8000e08:	6879      	ldr	r1, [r7, #4]
 8000e0a:	fa01 f303 	lsl.w	r3, r1, r3
 8000e0e:	431a      	orrs	r2, r3
 8000e10:	68fb      	ldr	r3, [r7, #12]
 8000e12:	60da      	str	r2, [r3, #12]
}
 8000e14:	bf00      	nop
 8000e16:	372c      	adds	r7, #44	@ 0x2c
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1e:	4770      	bx	lr

08000e20 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000e20:	b480      	push	{r7}
 8000e22:	b083      	sub	sp, #12
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	6078      	str	r0, [r7, #4]
 8000e28:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8000e2a:	683b      	ldr	r3, [r7, #0]
 8000e2c:	041a      	lsls	r2, r3, #16
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	619a      	str	r2, [r3, #24]
}
 8000e32:	bf00      	nop
 8000e34:	370c      	adds	r7, #12
 8000e36:	46bd      	mov	sp, r7
 8000e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3c:	4770      	bx	lr
	...

08000e40 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b092      	sub	sp, #72	@ 0x48
 8000e44:	af02      	add	r7, sp, #8
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000e46:	f000 fb7d 	bl	8001544 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000e4a:	f000 f867 	bl	8000f1c <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000e4e:	f000 f959 	bl	8001104 <MX_GPIO_Init>
	MX_USART2_UART_Init();
 8000e52:	f000 f92d 	bl	80010b0 <MX_USART2_UART_Init>
	MX_TIM3_Init();
 8000e56:	f000 f8b7 	bl	8000fc8 <MX_TIM3_Init>
	/* USER CODE BEGIN 2 */

	// ---- START TIM3 configuration ----
	LL_TIM_WriteReg(TIM3, PSC, 99);	// Prescaler value
 8000e5a:	4b29      	ldr	r3, [pc, #164]	@ (8000f00 <main+0xc0>)
 8000e5c:	2263      	movs	r2, #99	@ 0x63
 8000e5e:	629a      	str	r2, [r3, #40]	@ 0x28
	LL_TIM_WriteReg(TIM3, ARR, 0xFFFF);	// ARR value
 8000e60:	4b27      	ldr	r3, [pc, #156]	@ (8000f00 <main+0xc0>)
 8000e62:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000e66:	62da      	str	r2, [r3, #44]	@ 0x2c
	LL_TIM_WriteReg(TIM3, DIER, LL_TIM_ReadReg(TIM3,DIER) | 0b011);	// Enable interrupt for CC1 and UIF
 8000e68:	4b25      	ldr	r3, [pc, #148]	@ (8000f00 <main+0xc0>)
 8000e6a:	68db      	ldr	r3, [r3, #12]
 8000e6c:	4a24      	ldr	r2, [pc, #144]	@ (8000f00 <main+0xc0>)
 8000e6e:	f043 0303 	orr.w	r3, r3, #3
 8000e72:	60d3      	str	r3, [r2, #12]
	LL_TIM_WriteReg(TIM3, CCER, LL_TIM_ReadReg(TIM3, CCER) | 0x01); // Enable CC1
 8000e74:	4b22      	ldr	r3, [pc, #136]	@ (8000f00 <main+0xc0>)
 8000e76:	6a1b      	ldr	r3, [r3, #32]
 8000e78:	4a21      	ldr	r2, [pc, #132]	@ (8000f00 <main+0xc0>)
 8000e7a:	f043 0301 	orr.w	r3, r3, #1
 8000e7e:	6213      	str	r3, [r2, #32]
	LL_TIM_WriteReg(TIM3, CNT, 0x0000); // Clear CNT
 8000e80:	4b1f      	ldr	r3, [pc, #124]	@ (8000f00 <main+0xc0>)
 8000e82:	2200      	movs	r2, #0
 8000e84:	625a      	str	r2, [r3, #36]	@ 0x24
	// ---- END TIM3 configuration ----

	LL_TIM_WriteReg(TIM3, CR1, LL_TIM_ReadReg(TIM3,CR1) | 0x01); // Enable TIM3
 8000e86:	4b1e      	ldr	r3, [pc, #120]	@ (8000f00 <main+0xc0>)
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	4a1d      	ldr	r2, [pc, #116]	@ (8000f00 <main+0xc0>)
 8000e8c:	f043 0301 	orr.w	r3, r3, #1
 8000e90:	6013      	str	r3, [r2, #0]
	LL_DBGMCU_APB1_GRP1_FreezePeriph(LL_DBGMCU_APB1_GRP1_TIM3_STOP);
 8000e92:	2002      	movs	r0, #2
 8000e94:	f7ff fd78 	bl	8000988 <LL_DBGMCU_APB1_GRP1_FreezePeriph>

	const float timFreq = (84000000 / 100);
 8000e98:	4b1a      	ldr	r3, [pc, #104]	@ (8000f04 <main+0xc4>)
 8000e9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
		volatile int frequency = timFreq / period;
 8000e9c:	4b1a      	ldr	r3, [pc, #104]	@ (8000f08 <main+0xc8>)
 8000e9e:	881b      	ldrh	r3, [r3, #0]
 8000ea0:	b29b      	uxth	r3, r3
 8000ea2:	ee07 3a90 	vmov	s15, r3
 8000ea6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000eaa:	edd7 6a0f 	vldr	s13, [r7, #60]	@ 0x3c
 8000eae:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000eb2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000eb6:	ee17 3a90 	vmov	r3, s15
 8000eba:	63bb      	str	r3, [r7, #56]	@ 0x38
		volatile int dutyCycleMain = dutyCycle;
 8000ebc:	4b13      	ldr	r3, [pc, #76]	@ (8000f0c <main+0xcc>)
 8000ebe:	edd3 7a00 	vldr	s15, [r3]
 8000ec2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000ec6:	ee17 3a90 	vmov	r3, s15
 8000eca:	637b      	str	r3, [r7, #52]	@ 0x34
		char buffer[50];
		snprintf(buffer, sizeof(buffer), "Frequency: %d Hz\tDC: %d \n\n", frequency,
 8000ecc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8000ece:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000ed0:	4638      	mov	r0, r7
 8000ed2:	9300      	str	r3, [sp, #0]
 8000ed4:	4613      	mov	r3, r2
 8000ed6:	4a0e      	ldr	r2, [pc, #56]	@ (8000f10 <main+0xd0>)
 8000ed8:	2132      	movs	r1, #50	@ 0x32
 8000eda:	f001 fe1b 	bl	8002b14 <sniprintf>
				dutyCycleMain);
		HAL_UART_Transmit(&huart2, (uint8_t*) buffer, strlen(buffer), 100000);
 8000ede:	463b      	mov	r3, r7
 8000ee0:	4618      	mov	r0, r3
 8000ee2:	f7ff f97d 	bl	80001e0 <strlen>
 8000ee6:	4603      	mov	r3, r0
 8000ee8:	b29a      	uxth	r2, r3
 8000eea:	4639      	mov	r1, r7
 8000eec:	4b09      	ldr	r3, [pc, #36]	@ (8000f14 <main+0xd4>)
 8000eee:	480a      	ldr	r0, [pc, #40]	@ (8000f18 <main+0xd8>)
 8000ef0:	f000 feac 	bl	8001c4c <HAL_UART_Transmit>
		HAL_Delay(500);
 8000ef4:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000ef8:	f000 fb96 	bl	8001628 <HAL_Delay>
	while (1) {
 8000efc:	bf00      	nop
 8000efe:	e7cd      	b.n	8000e9c <main+0x5c>
 8000f00:	40000400 	.word	0x40000400
 8000f04:	494d1400 	.word	0x494d1400
 8000f08:	200000c0 	.word	0x200000c0
 8000f0c:	200000c4 	.word	0x200000c4
 8000f10:	08003484 	.word	0x08003484
 8000f14:	000186a0 	.word	0x000186a0
 8000f18:	20000078 	.word	0x20000078

08000f1c <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	af00      	add	r7, sp, #0
	LL_FLASH_SetLatency(LL_FLASH_LATENCY_2);
 8000f20:	2002      	movs	r0, #2
 8000f22:	f7ff fd43 	bl	80009ac <LL_FLASH_SetLatency>
	while (LL_FLASH_GetLatency() != LL_FLASH_LATENCY_2) {
 8000f26:	bf00      	nop
 8000f28:	f7ff fd54 	bl	80009d4 <LL_FLASH_GetLatency>
 8000f2c:	4603      	mov	r3, r0
 8000f2e:	2b02      	cmp	r3, #2
 8000f30:	d1fa      	bne.n	8000f28 <SystemClock_Config+0xc>
	}
	LL_PWR_SetRegulVoltageScaling(LL_PWR_REGU_VOLTAGE_SCALE2);
 8000f32:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8000f36:	f7ff fd5b 	bl	80009f0 <LL_PWR_SetRegulVoltageScaling>
	LL_RCC_HSI_SetCalibTrimming(16);
 8000f3a:	2010      	movs	r0, #16
 8000f3c:	f7ff fbea 	bl	8000714 <LL_RCC_HSI_SetCalibTrimming>
	LL_RCC_HSI_Enable();
 8000f40:	f7ff fbc6 	bl	80006d0 <LL_RCC_HSI_Enable>

	/* Wait till HSI is ready */
	while (LL_RCC_HSI_IsReady() != 1) {
 8000f44:	bf00      	nop
 8000f46:	f7ff fbd3 	bl	80006f0 <LL_RCC_HSI_IsReady>
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	2b01      	cmp	r3, #1
 8000f4e:	d1fa      	bne.n	8000f46 <SystemClock_Config+0x2a>

	}
	LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSI, LL_RCC_PLLM_DIV_16, 336,
 8000f50:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000f54:	f44f 72a8 	mov.w	r2, #336	@ 0x150
 8000f58:	2110      	movs	r1, #16
 8000f5a:	2000      	movs	r0, #0
 8000f5c:	f7ff fc88 	bl	8000870 <LL_RCC_PLL_ConfigDomain_SYS>
			LL_RCC_PLLP_DIV_4);
	LL_RCC_PLL_Enable();
 8000f60:	f7ff fc62 	bl	8000828 <LL_RCC_PLL_Enable>

	/* Wait till PLL is ready */
	while (LL_RCC_PLL_IsReady() != 1) {
 8000f64:	bf00      	nop
 8000f66:	f7ff fc6f 	bl	8000848 <LL_RCC_PLL_IsReady>
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	2b01      	cmp	r3, #1
 8000f6e:	d1fa      	bne.n	8000f66 <SystemClock_Config+0x4a>

	}
	while (LL_PWR_IsActiveFlag_VOS() == 0) {
 8000f70:	bf00      	nop
 8000f72:	f7ff fd51 	bl	8000a18 <LL_PWR_IsActiveFlag_VOS>
 8000f76:	4603      	mov	r3, r0
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d0fa      	beq.n	8000f72 <SystemClock_Config+0x56>
	}
	LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 8000f7c:	2000      	movs	r0, #0
 8000f7e:	f7ff fc01 	bl	8000784 <LL_RCC_SetAHBPrescaler>
	LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_2);
 8000f82:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8000f86:	f7ff fc11 	bl	80007ac <LL_RCC_SetAPB1Prescaler>
	LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);
 8000f8a:	2000      	movs	r0, #0
 8000f8c:	f7ff fc22 	bl	80007d4 <LL_RCC_SetAPB2Prescaler>
	LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
 8000f90:	2002      	movs	r0, #2
 8000f92:	f7ff fbd5 	bl	8000740 <LL_RCC_SetSysClkSource>

	/* Wait till System clock is ready */
	while (LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL) {
 8000f96:	bf00      	nop
 8000f98:	f7ff fbe6 	bl	8000768 <LL_RCC_GetSysClkSource>
 8000f9c:	4603      	mov	r3, r0
 8000f9e:	2b08      	cmp	r3, #8
 8000fa0:	d1fa      	bne.n	8000f98 <SystemClock_Config+0x7c>

	}
	LL_SetSystemCoreClock(84000000);
 8000fa2:	4808      	ldr	r0, [pc, #32]	@ (8000fc4 <SystemClock_Config+0xa8>)
 8000fa4:	f001 fda6 	bl	8002af4 <LL_SetSystemCoreClock>

	/* Update the time base */
	if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK) {
 8000fa8:	2000      	movs	r0, #0
 8000faa:	f000 faed 	bl	8001588 <HAL_InitTick>
 8000fae:	4603      	mov	r3, r0
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d001      	beq.n	8000fb8 <SystemClock_Config+0x9c>
		Error_Handler();
 8000fb4:	f000 f8fe 	bl	80011b4 <Error_Handler>
	}
	LL_RCC_SetTIMPrescaler(LL_RCC_TIM_PRESCALER_TWICE);
 8000fb8:	2000      	movs	r0, #0
 8000fba:	f7ff fc1f 	bl	80007fc <LL_RCC_SetTIMPrescaler>
}
 8000fbe:	bf00      	nop
 8000fc0:	bd80      	pop	{r7, pc}
 8000fc2:	bf00      	nop
 8000fc4:	0501bd00 	.word	0x0501bd00

08000fc8 <MX_TIM3_Init>:
/**
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void) {
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b08c      	sub	sp, #48	@ 0x30
 8000fcc:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM3_Init 0 */

	/* USER CODE END TIM3_Init 0 */

	LL_TIM_InitTypeDef TIM_InitStruct = { 0 };
 8000fce:	f107 031c 	add.w	r3, r7, #28
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	601a      	str	r2, [r3, #0]
 8000fd6:	605a      	str	r2, [r3, #4]
 8000fd8:	609a      	str	r2, [r3, #8]
 8000fda:	60da      	str	r2, [r3, #12]
 8000fdc:	611a      	str	r2, [r3, #16]

	LL_GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000fde:	1d3b      	adds	r3, r7, #4
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	601a      	str	r2, [r3, #0]
 8000fe4:	605a      	str	r2, [r3, #4]
 8000fe6:	609a      	str	r2, [r3, #8]
 8000fe8:	60da      	str	r2, [r3, #12]
 8000fea:	611a      	str	r2, [r3, #16]
 8000fec:	615a      	str	r2, [r3, #20]

	/* Peripheral clock enable */
	LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM3);
 8000fee:	2002      	movs	r0, #2
 8000ff0:	f7ff fc7c 	bl	80008ec <LL_APB1_GRP1_EnableClock>

	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8000ff4:	2001      	movs	r0, #1
 8000ff6:	f7ff fc61 	bl	80008bc <LL_AHB1_GRP1_EnableClock>
	/**TIM3 GPIO Configuration
	 PA6   ------> TIM3_CH1
	 */
	GPIO_InitStruct.Pin = LL_GPIO_PIN_6;
 8000ffa:	2340      	movs	r3, #64	@ 0x40
 8000ffc:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000ffe:	2302      	movs	r3, #2
 8001000:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001002:	2300      	movs	r3, #0
 8001004:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001006:	2300      	movs	r3, #0
 8001008:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800100a:	2300      	movs	r3, #0
 800100c:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Alternate = LL_GPIO_AF_2;
 800100e:	2302      	movs	r3, #2
 8001010:	61bb      	str	r3, [r7, #24]
	LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001012:	1d3b      	adds	r3, r7, #4
 8001014:	4619      	mov	r1, r3
 8001016:	4824      	ldr	r0, [pc, #144]	@ (80010a8 <MX_TIM3_Init+0xe0>)
 8001018:	f001 fc36 	bl	8002888 <LL_GPIO_Init>

	/* TIM3 interrupt Init */
	NVIC_SetPriority(TIM3_IRQn,
 800101c:	f7ff face 	bl	80005bc <__NVIC_GetPriorityGrouping>
 8001020:	4603      	mov	r3, r0
 8001022:	2200      	movs	r2, #0
 8001024:	2100      	movs	r1, #0
 8001026:	4618      	mov	r0, r3
 8001028:	f7ff fb1e 	bl	8000668 <NVIC_EncodePriority>
 800102c:	4603      	mov	r3, r0
 800102e:	4619      	mov	r1, r3
 8001030:	201d      	movs	r0, #29
 8001032:	f7ff faef 	bl	8000614 <__NVIC_SetPriority>
			NVIC_EncodePriority(NVIC_GetPriorityGrouping(), 0, 0));
	NVIC_EnableIRQ(TIM3_IRQn);
 8001036:	201d      	movs	r0, #29
 8001038:	f7ff face 	bl	80005d8 <__NVIC_EnableIRQ>

	/* USER CODE BEGIN TIM3_Init 1 */

	/* USER CODE END TIM3_Init 1 */
	TIM_InitStruct.Prescaler = 0;
 800103c:	2300      	movs	r3, #0
 800103e:	83bb      	strh	r3, [r7, #28]
	TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8001040:	2300      	movs	r3, #0
 8001042:	623b      	str	r3, [r7, #32]
	TIM_InitStruct.Autoreload = 65535;
 8001044:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001048:	627b      	str	r3, [r7, #36]	@ 0x24
	TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 800104a:	2300      	movs	r3, #0
 800104c:	62bb      	str	r3, [r7, #40]	@ 0x28
	LL_TIM_Init(TIM3, &TIM_InitStruct);
 800104e:	f107 031c 	add.w	r3, r7, #28
 8001052:	4619      	mov	r1, r3
 8001054:	4815      	ldr	r0, [pc, #84]	@ (80010ac <MX_TIM3_Init+0xe4>)
 8001056:	f001 fcd3 	bl	8002a00 <LL_TIM_Init>
	LL_TIM_DisableARRPreload(TIM3);
 800105a:	4814      	ldr	r0, [pc, #80]	@ (80010ac <MX_TIM3_Init+0xe4>)
 800105c:	f7ff fcf0 	bl	8000a40 <LL_TIM_DisableARRPreload>
	LL_TIM_SetClockSource(TIM3, LL_TIM_CLOCKSOURCE_INTERNAL);
 8001060:	2100      	movs	r1, #0
 8001062:	4812      	ldr	r0, [pc, #72]	@ (80010ac <MX_TIM3_Init+0xe4>)
 8001064:	f7ff fe2a 	bl	8000cbc <LL_TIM_SetClockSource>
	LL_TIM_SetTriggerOutput(TIM3, LL_TIM_TRGO_RESET);
 8001068:	2100      	movs	r1, #0
 800106a:	4810      	ldr	r0, [pc, #64]	@ (80010ac <MX_TIM3_Init+0xe4>)
 800106c:	f7ff fe3b 	bl	8000ce6 <LL_TIM_SetTriggerOutput>
	LL_TIM_DisableMasterSlaveMode(TIM3);
 8001070:	480e      	ldr	r0, [pc, #56]	@ (80010ac <MX_TIM3_Init+0xe4>)
 8001072:	f7ff fe4b 	bl	8000d0c <LL_TIM_DisableMasterSlaveMode>
	LL_TIM_IC_SetActiveInput(TIM3, LL_TIM_CHANNEL_CH1,
 8001076:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800107a:	2101      	movs	r1, #1
 800107c:	480b      	ldr	r0, [pc, #44]	@ (80010ac <MX_TIM3_Init+0xe4>)
 800107e:	f7ff fcef 	bl	8000a60 <LL_TIM_IC_SetActiveInput>
			LL_TIM_ACTIVEINPUT_DIRECTTI);
	LL_TIM_IC_SetPrescaler(TIM3, LL_TIM_CHANNEL_CH1, LL_TIM_ICPSC_DIV1);
 8001082:	2200      	movs	r2, #0
 8001084:	2101      	movs	r1, #1
 8001086:	4809      	ldr	r0, [pc, #36]	@ (80010ac <MX_TIM3_Init+0xe4>)
 8001088:	f7ff fd38 	bl	8000afc <LL_TIM_IC_SetPrescaler>
	LL_TIM_IC_SetFilter(TIM3, LL_TIM_CHANNEL_CH1, LL_TIM_IC_FILTER_FDIV1);
 800108c:	2200      	movs	r2, #0
 800108e:	2101      	movs	r1, #1
 8001090:	4806      	ldr	r0, [pc, #24]	@ (80010ac <MX_TIM3_Init+0xe4>)
 8001092:	f7ff fd81 	bl	8000b98 <LL_TIM_IC_SetFilter>
	LL_TIM_IC_SetPolarity(TIM3, LL_TIM_CHANNEL_CH1,
 8001096:	220a      	movs	r2, #10
 8001098:	2101      	movs	r1, #1
 800109a:	4804      	ldr	r0, [pc, #16]	@ (80010ac <MX_TIM3_Init+0xe4>)
 800109c:	f7ff fdca 	bl	8000c34 <LL_TIM_IC_SetPolarity>
			LL_TIM_IC_POLARITY_BOTHEDGE);
	/* USER CODE BEGIN TIM3_Init 2 */

	/* USER CODE END TIM3_Init 2 */

}
 80010a0:	bf00      	nop
 80010a2:	3730      	adds	r7, #48	@ 0x30
 80010a4:	46bd      	mov	sp, r7
 80010a6:	bd80      	pop	{r7, pc}
 80010a8:	40020000 	.word	0x40020000
 80010ac:	40000400 	.word	0x40000400

080010b0 <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 80010b0:	b580      	push	{r7, lr}
 80010b2:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 80010b4:	4b11      	ldr	r3, [pc, #68]	@ (80010fc <MX_USART2_UART_Init+0x4c>)
 80010b6:	4a12      	ldr	r2, [pc, #72]	@ (8001100 <MX_USART2_UART_Init+0x50>)
 80010b8:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 80010ba:	4b10      	ldr	r3, [pc, #64]	@ (80010fc <MX_USART2_UART_Init+0x4c>)
 80010bc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80010c0:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80010c2:	4b0e      	ldr	r3, [pc, #56]	@ (80010fc <MX_USART2_UART_Init+0x4c>)
 80010c4:	2200      	movs	r2, #0
 80010c6:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 80010c8:	4b0c      	ldr	r3, [pc, #48]	@ (80010fc <MX_USART2_UART_Init+0x4c>)
 80010ca:	2200      	movs	r2, #0
 80010cc:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 80010ce:	4b0b      	ldr	r3, [pc, #44]	@ (80010fc <MX_USART2_UART_Init+0x4c>)
 80010d0:	2200      	movs	r2, #0
 80010d2:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 80010d4:	4b09      	ldr	r3, [pc, #36]	@ (80010fc <MX_USART2_UART_Init+0x4c>)
 80010d6:	220c      	movs	r2, #12
 80010d8:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80010da:	4b08      	ldr	r3, [pc, #32]	@ (80010fc <MX_USART2_UART_Init+0x4c>)
 80010dc:	2200      	movs	r2, #0
 80010de:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80010e0:	4b06      	ldr	r3, [pc, #24]	@ (80010fc <MX_USART2_UART_Init+0x4c>)
 80010e2:	2200      	movs	r2, #0
 80010e4:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 80010e6:	4805      	ldr	r0, [pc, #20]	@ (80010fc <MX_USART2_UART_Init+0x4c>)
 80010e8:	f000 fd60 	bl	8001bac <HAL_UART_Init>
 80010ec:	4603      	mov	r3, r0
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d001      	beq.n	80010f6 <MX_USART2_UART_Init+0x46>
		Error_Handler();
 80010f2:	f000 f85f 	bl	80011b4 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 80010f6:	bf00      	nop
 80010f8:	bd80      	pop	{r7, pc}
 80010fa:	bf00      	nop
 80010fc:	20000078 	.word	0x20000078
 8001100:	40004400 	.word	0x40004400

08001104 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8001104:	b580      	push	{r7, lr}
 8001106:	b088      	sub	sp, #32
 8001108:	af00      	add	r7, sp, #0
	LL_EXTI_InitTypeDef EXTI_InitStruct = { 0 };
 800110a:	f107 0318 	add.w	r3, r7, #24
 800110e:	2200      	movs	r2, #0
 8001110:	601a      	str	r2, [r3, #0]
 8001112:	605a      	str	r2, [r3, #4]
	LL_GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8001114:	463b      	mov	r3, r7
 8001116:	2200      	movs	r2, #0
 8001118:	601a      	str	r2, [r3, #0]
 800111a:	605a      	str	r2, [r3, #4]
 800111c:	609a      	str	r2, [r3, #8]
 800111e:	60da      	str	r2, [r3, #12]
 8001120:	611a      	str	r2, [r3, #16]
 8001122:	615a      	str	r2, [r3, #20]
	/* USER CODE BEGIN MX_GPIO_Init_1 */

	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 8001124:	2004      	movs	r0, #4
 8001126:	f7ff fbc9 	bl	80008bc <LL_AHB1_GRP1_EnableClock>
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOH);
 800112a:	2080      	movs	r0, #128	@ 0x80
 800112c:	f7ff fbc6 	bl	80008bc <LL_AHB1_GRP1_EnableClock>
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8001130:	2001      	movs	r0, #1
 8001132:	f7ff fbc3 	bl	80008bc <LL_AHB1_GRP1_EnableClock>
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8001136:	2002      	movs	r0, #2
 8001138:	f7ff fbc0 	bl	80008bc <LL_AHB1_GRP1_EnableClock>

	/**/
	LL_GPIO_ResetOutputPin(LD2_GPIO_Port, LD2_Pin);
 800113c:	2120      	movs	r1, #32
 800113e:	481a      	ldr	r0, [pc, #104]	@ (80011a8 <MX_GPIO_Init+0xa4>)
 8001140:	f7ff fe6e 	bl	8000e20 <LL_GPIO_ResetOutputPin>

	/**/
	LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTC, LL_SYSCFG_EXTI_LINE13);
 8001144:	4919      	ldr	r1, [pc, #100]	@ (80011ac <MX_GPIO_Init+0xa8>)
 8001146:	2002      	movs	r0, #2
 8001148:	f7ff fbe8 	bl	800091c <LL_SYSCFG_SetEXTISource>

	/**/
	EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_13;
 800114c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001150:	61bb      	str	r3, [r7, #24]
	EXTI_InitStruct.LineCommand = ENABLE;
 8001152:	2301      	movs	r3, #1
 8001154:	773b      	strb	r3, [r7, #28]
	EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8001156:	2300      	movs	r3, #0
 8001158:	777b      	strb	r3, [r7, #29]
	EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 800115a:	2302      	movs	r3, #2
 800115c:	77bb      	strb	r3, [r7, #30]
	LL_EXTI_Init(&EXTI_InitStruct);
 800115e:	f107 0318 	add.w	r3, r7, #24
 8001162:	4618      	mov	r0, r3
 8001164:	f001 f9c6 	bl	80024f4 <LL_EXTI_Init>

	/**/
	LL_GPIO_SetPinPull(B1_GPIO_Port, B1_Pin, LL_GPIO_PULL_NO);
 8001168:	2200      	movs	r2, #0
 800116a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800116e:	4810      	ldr	r0, [pc, #64]	@ (80011b0 <MX_GPIO_Init+0xac>)
 8001170:	f7ff fe19 	bl	8000da6 <LL_GPIO_SetPinPull>

	/**/
	LL_GPIO_SetPinMode(B1_GPIO_Port, B1_Pin, LL_GPIO_MODE_INPUT);
 8001174:	2200      	movs	r2, #0
 8001176:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800117a:	480d      	ldr	r0, [pc, #52]	@ (80011b0 <MX_GPIO_Init+0xac>)
 800117c:	f7ff fdd6 	bl	8000d2c <LL_GPIO_SetPinMode>

	/**/
	GPIO_InitStruct.Pin = LD2_Pin;
 8001180:	2320      	movs	r3, #32
 8001182:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001184:	2301      	movs	r3, #1
 8001186:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001188:	2300      	movs	r3, #0
 800118a:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800118c:	2300      	movs	r3, #0
 800118e:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001190:	2300      	movs	r3, #0
 8001192:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001194:	463b      	mov	r3, r7
 8001196:	4619      	mov	r1, r3
 8001198:	4803      	ldr	r0, [pc, #12]	@ (80011a8 <MX_GPIO_Init+0xa4>)
 800119a:	f001 fb75 	bl	8002888 <LL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */

	/* USER CODE END MX_GPIO_Init_2 */
}
 800119e:	bf00      	nop
 80011a0:	3720      	adds	r7, #32
 80011a2:	46bd      	mov	sp, r7
 80011a4:	bd80      	pop	{r7, pc}
 80011a6:	bf00      	nop
 80011a8:	40020000 	.word	0x40020000
 80011ac:	00f00003 	.word	0x00f00003
 80011b0:	40020800 	.word	0x40020800

080011b4 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 80011b4:	b480      	push	{r7}
 80011b6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80011b8:	b672      	cpsid	i
}
 80011ba:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80011bc:	bf00      	nop
 80011be:	e7fd      	b.n	80011bc <Error_Handler+0x8>

080011c0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b082      	sub	sp, #8
 80011c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011c6:	2300      	movs	r3, #0
 80011c8:	607b      	str	r3, [r7, #4]
 80011ca:	4b10      	ldr	r3, [pc, #64]	@ (800120c <HAL_MspInit+0x4c>)
 80011cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011ce:	4a0f      	ldr	r2, [pc, #60]	@ (800120c <HAL_MspInit+0x4c>)
 80011d0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80011d4:	6453      	str	r3, [r2, #68]	@ 0x44
 80011d6:	4b0d      	ldr	r3, [pc, #52]	@ (800120c <HAL_MspInit+0x4c>)
 80011d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011da:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80011de:	607b      	str	r3, [r7, #4]
 80011e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80011e2:	2300      	movs	r3, #0
 80011e4:	603b      	str	r3, [r7, #0]
 80011e6:	4b09      	ldr	r3, [pc, #36]	@ (800120c <HAL_MspInit+0x4c>)
 80011e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011ea:	4a08      	ldr	r2, [pc, #32]	@ (800120c <HAL_MspInit+0x4c>)
 80011ec:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80011f0:	6413      	str	r3, [r2, #64]	@ 0x40
 80011f2:	4b06      	ldr	r3, [pc, #24]	@ (800120c <HAL_MspInit+0x4c>)
 80011f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011f6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80011fa:	603b      	str	r3, [r7, #0]
 80011fc:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_1);
 80011fe:	2006      	movs	r0, #6
 8001200:	f000 fae8 	bl	80017d4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001204:	bf00      	nop
 8001206:	3708      	adds	r7, #8
 8001208:	46bd      	mov	sp, r7
 800120a:	bd80      	pop	{r7, pc}
 800120c:	40023800 	.word	0x40023800

08001210 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	b08a      	sub	sp, #40	@ 0x28
 8001214:	af00      	add	r7, sp, #0
 8001216:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001218:	f107 0314 	add.w	r3, r7, #20
 800121c:	2200      	movs	r2, #0
 800121e:	601a      	str	r2, [r3, #0]
 8001220:	605a      	str	r2, [r3, #4]
 8001222:	609a      	str	r2, [r3, #8]
 8001224:	60da      	str	r2, [r3, #12]
 8001226:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	4a19      	ldr	r2, [pc, #100]	@ (8001294 <HAL_UART_MspInit+0x84>)
 800122e:	4293      	cmp	r3, r2
 8001230:	d12b      	bne.n	800128a <HAL_UART_MspInit+0x7a>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001232:	2300      	movs	r3, #0
 8001234:	613b      	str	r3, [r7, #16]
 8001236:	4b18      	ldr	r3, [pc, #96]	@ (8001298 <HAL_UART_MspInit+0x88>)
 8001238:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800123a:	4a17      	ldr	r2, [pc, #92]	@ (8001298 <HAL_UART_MspInit+0x88>)
 800123c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001240:	6413      	str	r3, [r2, #64]	@ 0x40
 8001242:	4b15      	ldr	r3, [pc, #84]	@ (8001298 <HAL_UART_MspInit+0x88>)
 8001244:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001246:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800124a:	613b      	str	r3, [r7, #16]
 800124c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800124e:	2300      	movs	r3, #0
 8001250:	60fb      	str	r3, [r7, #12]
 8001252:	4b11      	ldr	r3, [pc, #68]	@ (8001298 <HAL_UART_MspInit+0x88>)
 8001254:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001256:	4a10      	ldr	r2, [pc, #64]	@ (8001298 <HAL_UART_MspInit+0x88>)
 8001258:	f043 0301 	orr.w	r3, r3, #1
 800125c:	6313      	str	r3, [r2, #48]	@ 0x30
 800125e:	4b0e      	ldr	r3, [pc, #56]	@ (8001298 <HAL_UART_MspInit+0x88>)
 8001260:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001262:	f003 0301 	and.w	r3, r3, #1
 8001266:	60fb      	str	r3, [r7, #12]
 8001268:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800126a:	230c      	movs	r3, #12
 800126c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800126e:	2302      	movs	r3, #2
 8001270:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001272:	2300      	movs	r3, #0
 8001274:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001276:	2300      	movs	r3, #0
 8001278:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800127a:	2307      	movs	r3, #7
 800127c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800127e:	f107 0314 	add.w	r3, r7, #20
 8001282:	4619      	mov	r1, r3
 8001284:	4805      	ldr	r0, [pc, #20]	@ (800129c <HAL_UART_MspInit+0x8c>)
 8001286:	f000 fad9 	bl	800183c <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 800128a:	bf00      	nop
 800128c:	3728      	adds	r7, #40	@ 0x28
 800128e:	46bd      	mov	sp, r7
 8001290:	bd80      	pop	{r7, pc}
 8001292:	bf00      	nop
 8001294:	40004400 	.word	0x40004400
 8001298:	40023800 	.word	0x40023800
 800129c:	40020000 	.word	0x40020000

080012a0 <LL_TIM_ClearFlag_UPDATE>:
  * @rmtoll SR           UIF           LL_TIM_ClearFlag_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_ClearFlag_UPDATE(TIM_TypeDef *TIMx)
{
 80012a0:	b480      	push	{r7}
 80012a2:	b083      	sub	sp, #12
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	f06f 0201 	mvn.w	r2, #1
 80012ae:	611a      	str	r2, [r3, #16]
}
 80012b0:	bf00      	nop
 80012b2:	370c      	adds	r7, #12
 80012b4:	46bd      	mov	sp, r7
 80012b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ba:	4770      	bx	lr

080012bc <LL_TIM_IsActiveFlag_UPDATE>:
  * @rmtoll SR           UIF           LL_TIM_IsActiveFlag_UPDATE
  * @param  TIMx Timer instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_TIM_IsActiveFlag_UPDATE(const TIM_TypeDef *TIMx)
{
 80012bc:	b480      	push	{r7}
 80012be:	b083      	sub	sp, #12
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	691b      	ldr	r3, [r3, #16]
 80012c8:	f003 0301 	and.w	r3, r3, #1
 80012cc:	2b01      	cmp	r3, #1
 80012ce:	d101      	bne.n	80012d4 <LL_TIM_IsActiveFlag_UPDATE+0x18>
 80012d0:	2301      	movs	r3, #1
 80012d2:	e000      	b.n	80012d6 <LL_TIM_IsActiveFlag_UPDATE+0x1a>
 80012d4:	2300      	movs	r3, #0
}
 80012d6:	4618      	mov	r0, r3
 80012d8:	370c      	adds	r7, #12
 80012da:	46bd      	mov	sp, r7
 80012dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e0:	4770      	bx	lr

080012e2 <LL_TIM_ClearFlag_CC1>:
  * @rmtoll SR           CC1IF         LL_TIM_ClearFlag_CC1
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_ClearFlag_CC1(TIM_TypeDef *TIMx)
{
 80012e2:	b480      	push	{r7}
 80012e4:	b083      	sub	sp, #12
 80012e6:	af00      	add	r7, sp, #0
 80012e8:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_CC1IF));
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	f06f 0202 	mvn.w	r2, #2
 80012f0:	611a      	str	r2, [r3, #16]
}
 80012f2:	bf00      	nop
 80012f4:	370c      	adds	r7, #12
 80012f6:	46bd      	mov	sp, r7
 80012f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fc:	4770      	bx	lr

080012fe <LL_TIM_IsActiveFlag_CC1>:
  * @rmtoll SR           CC1IF         LL_TIM_IsActiveFlag_CC1
  * @param  TIMx Timer instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_TIM_IsActiveFlag_CC1(const TIM_TypeDef *TIMx)
{
 80012fe:	b480      	push	{r7}
 8001300:	b083      	sub	sp, #12
 8001302:	af00      	add	r7, sp, #0
 8001304:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(TIMx->SR, TIM_SR_CC1IF) == (TIM_SR_CC1IF)) ? 1UL : 0UL);
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	691b      	ldr	r3, [r3, #16]
 800130a:	f003 0302 	and.w	r3, r3, #2
 800130e:	2b02      	cmp	r3, #2
 8001310:	d101      	bne.n	8001316 <LL_TIM_IsActiveFlag_CC1+0x18>
 8001312:	2301      	movs	r3, #1
 8001314:	e000      	b.n	8001318 <LL_TIM_IsActiveFlag_CC1+0x1a>
 8001316:	2300      	movs	r3, #0
}
 8001318:	4618      	mov	r0, r3
 800131a:	370c      	adds	r7, #12
 800131c:	46bd      	mov	sp, r7
 800131e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001322:	4770      	bx	lr

08001324 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001324:	b480      	push	{r7}
 8001326:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
 8001328:	bf00      	nop
 800132a:	e7fd      	b.n	8001328 <NMI_Handler+0x4>

0800132c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800132c:	b480      	push	{r7}
 800132e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001330:	bf00      	nop
 8001332:	e7fd      	b.n	8001330 <HardFault_Handler+0x4>

08001334 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001334:	b480      	push	{r7}
 8001336:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001338:	bf00      	nop
 800133a:	e7fd      	b.n	8001338 <MemManage_Handler+0x4>

0800133c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800133c:	b480      	push	{r7}
 800133e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001340:	bf00      	nop
 8001342:	e7fd      	b.n	8001340 <BusFault_Handler+0x4>

08001344 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001344:	b480      	push	{r7}
 8001346:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001348:	bf00      	nop
 800134a:	e7fd      	b.n	8001348 <UsageFault_Handler+0x4>

0800134c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800134c:	b480      	push	{r7}
 800134e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001350:	bf00      	nop
 8001352:	46bd      	mov	sp, r7
 8001354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001358:	4770      	bx	lr

0800135a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800135a:	b480      	push	{r7}
 800135c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800135e:	bf00      	nop
 8001360:	46bd      	mov	sp, r7
 8001362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001366:	4770      	bx	lr

08001368 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001368:	b480      	push	{r7}
 800136a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800136c:	bf00      	nop
 800136e:	46bd      	mov	sp, r7
 8001370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001374:	4770      	bx	lr

08001376 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001376:	b580      	push	{r7, lr}
 8001378:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800137a:	f000 f935 	bl	80015e8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800137e:	bf00      	nop
 8001380:	bd80      	pop	{r7, pc}
	...

08001384 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

	// Check CC1IF
	if (LL_TIM_IsActiveFlag_CC1(TIM3)) {
 8001388:	482c      	ldr	r0, [pc, #176]	@ (800143c <TIM3_IRQHandler+0xb8>)
 800138a:	f7ff ffb8 	bl	80012fe <LL_TIM_IsActiveFlag_CC1>
 800138e:	4603      	mov	r3, r0
 8001390:	2b00      	cmp	r3, #0
 8001392:	d02d      	beq.n	80013f0 <TIM3_IRQHandler+0x6c>

		interval = LL_TIM_ReadReg(TIM3, CCR1) & 0xFFFF; // Read captured value
 8001394:	4b29      	ldr	r3, [pc, #164]	@ (800143c <TIM3_IRQHandler+0xb8>)
 8001396:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001398:	b29a      	uxth	r2, r3
 800139a:	4b29      	ldr	r3, [pc, #164]	@ (8001440 <TIM3_IRQHandler+0xbc>)
 800139c:	801a      	strh	r2, [r3, #0]
		LL_TIM_ClearFlag_CC1(TIM3);  // Clear capture flag
 800139e:	4827      	ldr	r0, [pc, #156]	@ (800143c <TIM3_IRQHandler+0xb8>)
 80013a0:	f7ff ff9f 	bl	80012e2 <LL_TIM_ClearFlag_CC1>

		if ((LL_GPIO_ReadReg(GPIOA,IDR) & (1<<6)) == (1<<6)) {
 80013a4:	4b27      	ldr	r3, [pc, #156]	@ (8001444 <TIM3_IRQHandler+0xc0>)
 80013a6:	691b      	ldr	r3, [r3, #16]
 80013a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80013ac:	2b40      	cmp	r3, #64	@ 0x40
 80013ae:	d113      	bne.n	80013d8 <TIM3_IRQHandler+0x54>
			// Rising edge detected
			period = ((interval  + ovf_cnt * 0xFFFF) - prevInterval);
 80013b0:	4b23      	ldr	r3, [pc, #140]	@ (8001440 <TIM3_IRQHandler+0xbc>)
 80013b2:	881b      	ldrh	r3, [r3, #0]
 80013b4:	4a24      	ldr	r2, [pc, #144]	@ (8001448 <TIM3_IRQHandler+0xc4>)
 80013b6:	7812      	ldrb	r2, [r2, #0]
 80013b8:	1a9b      	subs	r3, r3, r2
 80013ba:	b29a      	uxth	r2, r3
 80013bc:	4b23      	ldr	r3, [pc, #140]	@ (800144c <TIM3_IRQHandler+0xc8>)
 80013be:	881b      	ldrh	r3, [r3, #0]
 80013c0:	1ad3      	subs	r3, r2, r3
 80013c2:	b29a      	uxth	r2, r3
 80013c4:	4b22      	ldr	r3, [pc, #136]	@ (8001450 <TIM3_IRQHandler+0xcc>)
 80013c6:	801a      	strh	r2, [r3, #0]
			prevInterval = interval;
 80013c8:	4b1d      	ldr	r3, [pc, #116]	@ (8001440 <TIM3_IRQHandler+0xbc>)
 80013ca:	881a      	ldrh	r2, [r3, #0]
 80013cc:	4b1f      	ldr	r3, [pc, #124]	@ (800144c <TIM3_IRQHandler+0xc8>)
 80013ce:	801a      	strh	r2, [r3, #0]
			ovf_cnt = 0;
 80013d0:	4b1d      	ldr	r3, [pc, #116]	@ (8001448 <TIM3_IRQHandler+0xc4>)
 80013d2:	2200      	movs	r2, #0
 80013d4:	701a      	strb	r2, [r3, #0]
 80013d6:	e00b      	b.n	80013f0 <TIM3_IRQHandler+0x6c>

		} else {
			// Falling edge detected
			highTime = (interval + ovf_cnt * 0xFFFF) - prevInterval;
 80013d8:	4b19      	ldr	r3, [pc, #100]	@ (8001440 <TIM3_IRQHandler+0xbc>)
 80013da:	881b      	ldrh	r3, [r3, #0]
 80013dc:	4a1a      	ldr	r2, [pc, #104]	@ (8001448 <TIM3_IRQHandler+0xc4>)
 80013de:	7812      	ldrb	r2, [r2, #0]
 80013e0:	1a9b      	subs	r3, r3, r2
 80013e2:	b29a      	uxth	r2, r3
 80013e4:	4b19      	ldr	r3, [pc, #100]	@ (800144c <TIM3_IRQHandler+0xc8>)
 80013e6:	881b      	ldrh	r3, [r3, #0]
 80013e8:	1ad3      	subs	r3, r2, r3
 80013ea:	b29a      	uxth	r2, r3
 80013ec:	4b19      	ldr	r3, [pc, #100]	@ (8001454 <TIM3_IRQHandler+0xd0>)
 80013ee:	801a      	strh	r2, [r3, #0]

		}
	}

	// Check if timer overflow occurred
	if (LL_TIM_IsActiveFlag_UPDATE(TIM3)) {
 80013f0:	4812      	ldr	r0, [pc, #72]	@ (800143c <TIM3_IRQHandler+0xb8>)
 80013f2:	f7ff ff63 	bl	80012bc <LL_TIM_IsActiveFlag_UPDATE>
 80013f6:	4603      	mov	r3, r0
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d008      	beq.n	800140e <TIM3_IRQHandler+0x8a>
		ovf_cnt += 1;
 80013fc:	4b12      	ldr	r3, [pc, #72]	@ (8001448 <TIM3_IRQHandler+0xc4>)
 80013fe:	781b      	ldrb	r3, [r3, #0]
 8001400:	3301      	adds	r3, #1
 8001402:	b2da      	uxtb	r2, r3
 8001404:	4b10      	ldr	r3, [pc, #64]	@ (8001448 <TIM3_IRQHandler+0xc4>)
 8001406:	701a      	strb	r2, [r3, #0]
		LL_TIM_ClearFlag_UPDATE(TIM3);  // Clear overflow flag
 8001408:	480c      	ldr	r0, [pc, #48]	@ (800143c <TIM3_IRQHandler+0xb8>)
 800140a:	f7ff ff49 	bl	80012a0 <LL_TIM_ClearFlag_UPDATE>
	}

	// Compute duty cycle
	dutyCycle = (float) highTime / (float) period * 100.0;
 800140e:	4b11      	ldr	r3, [pc, #68]	@ (8001454 <TIM3_IRQHandler+0xd0>)
 8001410:	881b      	ldrh	r3, [r3, #0]
 8001412:	ee07 3a90 	vmov	s15, r3
 8001416:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800141a:	4b0d      	ldr	r3, [pc, #52]	@ (8001450 <TIM3_IRQHandler+0xcc>)
 800141c:	881b      	ldrh	r3, [r3, #0]
 800141e:	ee07 3a90 	vmov	s15, r3
 8001422:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001426:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800142a:	ed9f 7a0b 	vldr	s14, [pc, #44]	@ 8001458 <TIM3_IRQHandler+0xd4>
 800142e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001432:	4b0a      	ldr	r3, [pc, #40]	@ (800145c <TIM3_IRQHandler+0xd8>)
 8001434:	edc3 7a00 	vstr	s15, [r3]
  /* USER CODE END TIM3_IRQn 0 */
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001438:	bf00      	nop
 800143a:	bd80      	pop	{r7, pc}
 800143c:	40000400 	.word	0x40000400
 8001440:	200000ca 	.word	0x200000ca
 8001444:	40020000 	.word	0x40020000
 8001448:	200000ce 	.word	0x200000ce
 800144c:	200000c8 	.word	0x200000c8
 8001450:	200000c0 	.word	0x200000c0
 8001454:	200000cc 	.word	0x200000cc
 8001458:	42c80000 	.word	0x42c80000
 800145c:	200000c4 	.word	0x200000c4

08001460 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	b086      	sub	sp, #24
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001468:	4a14      	ldr	r2, [pc, #80]	@ (80014bc <_sbrk+0x5c>)
 800146a:	4b15      	ldr	r3, [pc, #84]	@ (80014c0 <_sbrk+0x60>)
 800146c:	1ad3      	subs	r3, r2, r3
 800146e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001470:	697b      	ldr	r3, [r7, #20]
 8001472:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001474:	4b13      	ldr	r3, [pc, #76]	@ (80014c4 <_sbrk+0x64>)
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	2b00      	cmp	r3, #0
 800147a:	d102      	bne.n	8001482 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800147c:	4b11      	ldr	r3, [pc, #68]	@ (80014c4 <_sbrk+0x64>)
 800147e:	4a12      	ldr	r2, [pc, #72]	@ (80014c8 <_sbrk+0x68>)
 8001480:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001482:	4b10      	ldr	r3, [pc, #64]	@ (80014c4 <_sbrk+0x64>)
 8001484:	681a      	ldr	r2, [r3, #0]
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	4413      	add	r3, r2
 800148a:	693a      	ldr	r2, [r7, #16]
 800148c:	429a      	cmp	r2, r3
 800148e:	d207      	bcs.n	80014a0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001490:	f001 fb76 	bl	8002b80 <__errno>
 8001494:	4603      	mov	r3, r0
 8001496:	220c      	movs	r2, #12
 8001498:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800149a:	f04f 33ff 	mov.w	r3, #4294967295
 800149e:	e009      	b.n	80014b4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80014a0:	4b08      	ldr	r3, [pc, #32]	@ (80014c4 <_sbrk+0x64>)
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80014a6:	4b07      	ldr	r3, [pc, #28]	@ (80014c4 <_sbrk+0x64>)
 80014a8:	681a      	ldr	r2, [r3, #0]
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	4413      	add	r3, r2
 80014ae:	4a05      	ldr	r2, [pc, #20]	@ (80014c4 <_sbrk+0x64>)
 80014b0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80014b2:	68fb      	ldr	r3, [r7, #12]
}
 80014b4:	4618      	mov	r0, r3
 80014b6:	3718      	adds	r7, #24
 80014b8:	46bd      	mov	sp, r7
 80014ba:	bd80      	pop	{r7, pc}
 80014bc:	20018000 	.word	0x20018000
 80014c0:	00000400 	.word	0x00000400
 80014c4:	200000d0 	.word	0x200000d0
 80014c8:	20000220 	.word	0x20000220

080014cc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80014cc:	b480      	push	{r7}
 80014ce:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80014d0:	4b06      	ldr	r3, [pc, #24]	@ (80014ec <SystemInit+0x20>)
 80014d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80014d6:	4a05      	ldr	r2, [pc, #20]	@ (80014ec <SystemInit+0x20>)
 80014d8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80014dc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80014e0:	bf00      	nop
 80014e2:	46bd      	mov	sp, r7
 80014e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e8:	4770      	bx	lr
 80014ea:	bf00      	nop
 80014ec:	e000ed00 	.word	0xe000ed00

080014f0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80014f0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001528 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 80014f4:	f7ff ffea 	bl	80014cc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80014f8:	480c      	ldr	r0, [pc, #48]	@ (800152c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80014fa:	490d      	ldr	r1, [pc, #52]	@ (8001530 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80014fc:	4a0d      	ldr	r2, [pc, #52]	@ (8001534 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80014fe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001500:	e002      	b.n	8001508 <LoopCopyDataInit>

08001502 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001502:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001504:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001506:	3304      	adds	r3, #4

08001508 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001508:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800150a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800150c:	d3f9      	bcc.n	8001502 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800150e:	4a0a      	ldr	r2, [pc, #40]	@ (8001538 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001510:	4c0a      	ldr	r4, [pc, #40]	@ (800153c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001512:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001514:	e001      	b.n	800151a <LoopFillZerobss>

08001516 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001516:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001518:	3204      	adds	r2, #4

0800151a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800151a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800151c:	d3fb      	bcc.n	8001516 <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 800151e:	f001 fb35 	bl	8002b8c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001522:	f7ff fc8d 	bl	8000e40 <main>
  bx  lr    
 8001526:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001528:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 800152c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001530:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8001534:	08003504 	.word	0x08003504
  ldr r2, =_sbss
 8001538:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 800153c:	20000220 	.word	0x20000220

08001540 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001540:	e7fe      	b.n	8001540 <ADC_IRQHandler>
	...

08001544 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001548:	4b0e      	ldr	r3, [pc, #56]	@ (8001584 <HAL_Init+0x40>)
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	4a0d      	ldr	r2, [pc, #52]	@ (8001584 <HAL_Init+0x40>)
 800154e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001552:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001554:	4b0b      	ldr	r3, [pc, #44]	@ (8001584 <HAL_Init+0x40>)
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	4a0a      	ldr	r2, [pc, #40]	@ (8001584 <HAL_Init+0x40>)
 800155a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800155e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001560:	4b08      	ldr	r3, [pc, #32]	@ (8001584 <HAL_Init+0x40>)
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	4a07      	ldr	r2, [pc, #28]	@ (8001584 <HAL_Init+0x40>)
 8001566:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800156a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800156c:	2003      	movs	r0, #3
 800156e:	f000 f931 	bl	80017d4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001572:	2000      	movs	r0, #0
 8001574:	f000 f808 	bl	8001588 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001578:	f7ff fe22 	bl	80011c0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800157c:	2300      	movs	r3, #0
}
 800157e:	4618      	mov	r0, r3
 8001580:	bd80      	pop	{r7, pc}
 8001582:	bf00      	nop
 8001584:	40023c00 	.word	0x40023c00

08001588 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	b082      	sub	sp, #8
 800158c:	af00      	add	r7, sp, #0
 800158e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001590:	4b12      	ldr	r3, [pc, #72]	@ (80015dc <HAL_InitTick+0x54>)
 8001592:	681a      	ldr	r2, [r3, #0]
 8001594:	4b12      	ldr	r3, [pc, #72]	@ (80015e0 <HAL_InitTick+0x58>)
 8001596:	781b      	ldrb	r3, [r3, #0]
 8001598:	4619      	mov	r1, r3
 800159a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800159e:	fbb3 f3f1 	udiv	r3, r3, r1
 80015a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80015a6:	4618      	mov	r0, r3
 80015a8:	f000 f93b 	bl	8001822 <HAL_SYSTICK_Config>
 80015ac:	4603      	mov	r3, r0
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d001      	beq.n	80015b6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80015b2:	2301      	movs	r3, #1
 80015b4:	e00e      	b.n	80015d4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	2b0f      	cmp	r3, #15
 80015ba:	d80a      	bhi.n	80015d2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80015bc:	2200      	movs	r2, #0
 80015be:	6879      	ldr	r1, [r7, #4]
 80015c0:	f04f 30ff 	mov.w	r0, #4294967295
 80015c4:	f000 f911 	bl	80017ea <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80015c8:	4a06      	ldr	r2, [pc, #24]	@ (80015e4 <HAL_InitTick+0x5c>)
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80015ce:	2300      	movs	r3, #0
 80015d0:	e000      	b.n	80015d4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80015d2:	2301      	movs	r3, #1
}
 80015d4:	4618      	mov	r0, r3
 80015d6:	3708      	adds	r7, #8
 80015d8:	46bd      	mov	sp, r7
 80015da:	bd80      	pop	{r7, pc}
 80015dc:	20000000 	.word	0x20000000
 80015e0:	20000008 	.word	0x20000008
 80015e4:	20000004 	.word	0x20000004

080015e8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80015e8:	b480      	push	{r7}
 80015ea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80015ec:	4b06      	ldr	r3, [pc, #24]	@ (8001608 <HAL_IncTick+0x20>)
 80015ee:	781b      	ldrb	r3, [r3, #0]
 80015f0:	461a      	mov	r2, r3
 80015f2:	4b06      	ldr	r3, [pc, #24]	@ (800160c <HAL_IncTick+0x24>)
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	4413      	add	r3, r2
 80015f8:	4a04      	ldr	r2, [pc, #16]	@ (800160c <HAL_IncTick+0x24>)
 80015fa:	6013      	str	r3, [r2, #0]
}
 80015fc:	bf00      	nop
 80015fe:	46bd      	mov	sp, r7
 8001600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001604:	4770      	bx	lr
 8001606:	bf00      	nop
 8001608:	20000008 	.word	0x20000008
 800160c:	200000d4 	.word	0x200000d4

08001610 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001610:	b480      	push	{r7}
 8001612:	af00      	add	r7, sp, #0
  return uwTick;
 8001614:	4b03      	ldr	r3, [pc, #12]	@ (8001624 <HAL_GetTick+0x14>)
 8001616:	681b      	ldr	r3, [r3, #0]
}
 8001618:	4618      	mov	r0, r3
 800161a:	46bd      	mov	sp, r7
 800161c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001620:	4770      	bx	lr
 8001622:	bf00      	nop
 8001624:	200000d4 	.word	0x200000d4

08001628 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	b084      	sub	sp, #16
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001630:	f7ff ffee 	bl	8001610 <HAL_GetTick>
 8001634:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800163a:	68fb      	ldr	r3, [r7, #12]
 800163c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001640:	d005      	beq.n	800164e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001642:	4b0a      	ldr	r3, [pc, #40]	@ (800166c <HAL_Delay+0x44>)
 8001644:	781b      	ldrb	r3, [r3, #0]
 8001646:	461a      	mov	r2, r3
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	4413      	add	r3, r2
 800164c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800164e:	bf00      	nop
 8001650:	f7ff ffde 	bl	8001610 <HAL_GetTick>
 8001654:	4602      	mov	r2, r0
 8001656:	68bb      	ldr	r3, [r7, #8]
 8001658:	1ad3      	subs	r3, r2, r3
 800165a:	68fa      	ldr	r2, [r7, #12]
 800165c:	429a      	cmp	r2, r3
 800165e:	d8f7      	bhi.n	8001650 <HAL_Delay+0x28>
  {
  }
}
 8001660:	bf00      	nop
 8001662:	bf00      	nop
 8001664:	3710      	adds	r7, #16
 8001666:	46bd      	mov	sp, r7
 8001668:	bd80      	pop	{r7, pc}
 800166a:	bf00      	nop
 800166c:	20000008 	.word	0x20000008

08001670 <__NVIC_SetPriorityGrouping>:
{
 8001670:	b480      	push	{r7}
 8001672:	b085      	sub	sp, #20
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	f003 0307 	and.w	r3, r3, #7
 800167e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001680:	4b0c      	ldr	r3, [pc, #48]	@ (80016b4 <__NVIC_SetPriorityGrouping+0x44>)
 8001682:	68db      	ldr	r3, [r3, #12]
 8001684:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001686:	68ba      	ldr	r2, [r7, #8]
 8001688:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800168c:	4013      	ands	r3, r2
 800168e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001694:	68bb      	ldr	r3, [r7, #8]
 8001696:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001698:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800169c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80016a0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80016a2:	4a04      	ldr	r2, [pc, #16]	@ (80016b4 <__NVIC_SetPriorityGrouping+0x44>)
 80016a4:	68bb      	ldr	r3, [r7, #8]
 80016a6:	60d3      	str	r3, [r2, #12]
}
 80016a8:	bf00      	nop
 80016aa:	3714      	adds	r7, #20
 80016ac:	46bd      	mov	sp, r7
 80016ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b2:	4770      	bx	lr
 80016b4:	e000ed00 	.word	0xe000ed00

080016b8 <__NVIC_GetPriorityGrouping>:
{
 80016b8:	b480      	push	{r7}
 80016ba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80016bc:	4b04      	ldr	r3, [pc, #16]	@ (80016d0 <__NVIC_GetPriorityGrouping+0x18>)
 80016be:	68db      	ldr	r3, [r3, #12]
 80016c0:	0a1b      	lsrs	r3, r3, #8
 80016c2:	f003 0307 	and.w	r3, r3, #7
}
 80016c6:	4618      	mov	r0, r3
 80016c8:	46bd      	mov	sp, r7
 80016ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ce:	4770      	bx	lr
 80016d0:	e000ed00 	.word	0xe000ed00

080016d4 <__NVIC_SetPriority>:
{
 80016d4:	b480      	push	{r7}
 80016d6:	b083      	sub	sp, #12
 80016d8:	af00      	add	r7, sp, #0
 80016da:	4603      	mov	r3, r0
 80016dc:	6039      	str	r1, [r7, #0]
 80016de:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	db0a      	blt.n	80016fe <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016e8:	683b      	ldr	r3, [r7, #0]
 80016ea:	b2da      	uxtb	r2, r3
 80016ec:	490c      	ldr	r1, [pc, #48]	@ (8001720 <__NVIC_SetPriority+0x4c>)
 80016ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016f2:	0112      	lsls	r2, r2, #4
 80016f4:	b2d2      	uxtb	r2, r2
 80016f6:	440b      	add	r3, r1
 80016f8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80016fc:	e00a      	b.n	8001714 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016fe:	683b      	ldr	r3, [r7, #0]
 8001700:	b2da      	uxtb	r2, r3
 8001702:	4908      	ldr	r1, [pc, #32]	@ (8001724 <__NVIC_SetPriority+0x50>)
 8001704:	79fb      	ldrb	r3, [r7, #7]
 8001706:	f003 030f 	and.w	r3, r3, #15
 800170a:	3b04      	subs	r3, #4
 800170c:	0112      	lsls	r2, r2, #4
 800170e:	b2d2      	uxtb	r2, r2
 8001710:	440b      	add	r3, r1
 8001712:	761a      	strb	r2, [r3, #24]
}
 8001714:	bf00      	nop
 8001716:	370c      	adds	r7, #12
 8001718:	46bd      	mov	sp, r7
 800171a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171e:	4770      	bx	lr
 8001720:	e000e100 	.word	0xe000e100
 8001724:	e000ed00 	.word	0xe000ed00

08001728 <NVIC_EncodePriority>:
{
 8001728:	b480      	push	{r7}
 800172a:	b089      	sub	sp, #36	@ 0x24
 800172c:	af00      	add	r7, sp, #0
 800172e:	60f8      	str	r0, [r7, #12]
 8001730:	60b9      	str	r1, [r7, #8]
 8001732:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	f003 0307 	and.w	r3, r3, #7
 800173a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800173c:	69fb      	ldr	r3, [r7, #28]
 800173e:	f1c3 0307 	rsb	r3, r3, #7
 8001742:	2b04      	cmp	r3, #4
 8001744:	bf28      	it	cs
 8001746:	2304      	movcs	r3, #4
 8001748:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800174a:	69fb      	ldr	r3, [r7, #28]
 800174c:	3304      	adds	r3, #4
 800174e:	2b06      	cmp	r3, #6
 8001750:	d902      	bls.n	8001758 <NVIC_EncodePriority+0x30>
 8001752:	69fb      	ldr	r3, [r7, #28]
 8001754:	3b03      	subs	r3, #3
 8001756:	e000      	b.n	800175a <NVIC_EncodePriority+0x32>
 8001758:	2300      	movs	r3, #0
 800175a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800175c:	f04f 32ff 	mov.w	r2, #4294967295
 8001760:	69bb      	ldr	r3, [r7, #24]
 8001762:	fa02 f303 	lsl.w	r3, r2, r3
 8001766:	43da      	mvns	r2, r3
 8001768:	68bb      	ldr	r3, [r7, #8]
 800176a:	401a      	ands	r2, r3
 800176c:	697b      	ldr	r3, [r7, #20]
 800176e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001770:	f04f 31ff 	mov.w	r1, #4294967295
 8001774:	697b      	ldr	r3, [r7, #20]
 8001776:	fa01 f303 	lsl.w	r3, r1, r3
 800177a:	43d9      	mvns	r1, r3
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001780:	4313      	orrs	r3, r2
}
 8001782:	4618      	mov	r0, r3
 8001784:	3724      	adds	r7, #36	@ 0x24
 8001786:	46bd      	mov	sp, r7
 8001788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178c:	4770      	bx	lr
	...

08001790 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	b082      	sub	sp, #8
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	3b01      	subs	r3, #1
 800179c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80017a0:	d301      	bcc.n	80017a6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80017a2:	2301      	movs	r3, #1
 80017a4:	e00f      	b.n	80017c6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80017a6:	4a0a      	ldr	r2, [pc, #40]	@ (80017d0 <SysTick_Config+0x40>)
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	3b01      	subs	r3, #1
 80017ac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80017ae:	210f      	movs	r1, #15
 80017b0:	f04f 30ff 	mov.w	r0, #4294967295
 80017b4:	f7ff ff8e 	bl	80016d4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80017b8:	4b05      	ldr	r3, [pc, #20]	@ (80017d0 <SysTick_Config+0x40>)
 80017ba:	2200      	movs	r2, #0
 80017bc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80017be:	4b04      	ldr	r3, [pc, #16]	@ (80017d0 <SysTick_Config+0x40>)
 80017c0:	2207      	movs	r2, #7
 80017c2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80017c4:	2300      	movs	r3, #0
}
 80017c6:	4618      	mov	r0, r3
 80017c8:	3708      	adds	r7, #8
 80017ca:	46bd      	mov	sp, r7
 80017cc:	bd80      	pop	{r7, pc}
 80017ce:	bf00      	nop
 80017d0:	e000e010 	.word	0xe000e010

080017d4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b082      	sub	sp, #8
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80017dc:	6878      	ldr	r0, [r7, #4]
 80017de:	f7ff ff47 	bl	8001670 <__NVIC_SetPriorityGrouping>
}
 80017e2:	bf00      	nop
 80017e4:	3708      	adds	r7, #8
 80017e6:	46bd      	mov	sp, r7
 80017e8:	bd80      	pop	{r7, pc}

080017ea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80017ea:	b580      	push	{r7, lr}
 80017ec:	b086      	sub	sp, #24
 80017ee:	af00      	add	r7, sp, #0
 80017f0:	4603      	mov	r3, r0
 80017f2:	60b9      	str	r1, [r7, #8]
 80017f4:	607a      	str	r2, [r7, #4]
 80017f6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80017f8:	2300      	movs	r3, #0
 80017fa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80017fc:	f7ff ff5c 	bl	80016b8 <__NVIC_GetPriorityGrouping>
 8001800:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001802:	687a      	ldr	r2, [r7, #4]
 8001804:	68b9      	ldr	r1, [r7, #8]
 8001806:	6978      	ldr	r0, [r7, #20]
 8001808:	f7ff ff8e 	bl	8001728 <NVIC_EncodePriority>
 800180c:	4602      	mov	r2, r0
 800180e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001812:	4611      	mov	r1, r2
 8001814:	4618      	mov	r0, r3
 8001816:	f7ff ff5d 	bl	80016d4 <__NVIC_SetPriority>
}
 800181a:	bf00      	nop
 800181c:	3718      	adds	r7, #24
 800181e:	46bd      	mov	sp, r7
 8001820:	bd80      	pop	{r7, pc}

08001822 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001822:	b580      	push	{r7, lr}
 8001824:	b082      	sub	sp, #8
 8001826:	af00      	add	r7, sp, #0
 8001828:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800182a:	6878      	ldr	r0, [r7, #4]
 800182c:	f7ff ffb0 	bl	8001790 <SysTick_Config>
 8001830:	4603      	mov	r3, r0
}
 8001832:	4618      	mov	r0, r3
 8001834:	3708      	adds	r7, #8
 8001836:	46bd      	mov	sp, r7
 8001838:	bd80      	pop	{r7, pc}
	...

0800183c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800183c:	b480      	push	{r7}
 800183e:	b089      	sub	sp, #36	@ 0x24
 8001840:	af00      	add	r7, sp, #0
 8001842:	6078      	str	r0, [r7, #4]
 8001844:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001846:	2300      	movs	r3, #0
 8001848:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800184a:	2300      	movs	r3, #0
 800184c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800184e:	2300      	movs	r3, #0
 8001850:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001852:	2300      	movs	r3, #0
 8001854:	61fb      	str	r3, [r7, #28]
 8001856:	e159      	b.n	8001b0c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001858:	2201      	movs	r2, #1
 800185a:	69fb      	ldr	r3, [r7, #28]
 800185c:	fa02 f303 	lsl.w	r3, r2, r3
 8001860:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001862:	683b      	ldr	r3, [r7, #0]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	697a      	ldr	r2, [r7, #20]
 8001868:	4013      	ands	r3, r2
 800186a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800186c:	693a      	ldr	r2, [r7, #16]
 800186e:	697b      	ldr	r3, [r7, #20]
 8001870:	429a      	cmp	r2, r3
 8001872:	f040 8148 	bne.w	8001b06 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001876:	683b      	ldr	r3, [r7, #0]
 8001878:	685b      	ldr	r3, [r3, #4]
 800187a:	f003 0303 	and.w	r3, r3, #3
 800187e:	2b01      	cmp	r3, #1
 8001880:	d005      	beq.n	800188e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001882:	683b      	ldr	r3, [r7, #0]
 8001884:	685b      	ldr	r3, [r3, #4]
 8001886:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800188a:	2b02      	cmp	r3, #2
 800188c:	d130      	bne.n	80018f0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	689b      	ldr	r3, [r3, #8]
 8001892:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001894:	69fb      	ldr	r3, [r7, #28]
 8001896:	005b      	lsls	r3, r3, #1
 8001898:	2203      	movs	r2, #3
 800189a:	fa02 f303 	lsl.w	r3, r2, r3
 800189e:	43db      	mvns	r3, r3
 80018a0:	69ba      	ldr	r2, [r7, #24]
 80018a2:	4013      	ands	r3, r2
 80018a4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80018a6:	683b      	ldr	r3, [r7, #0]
 80018a8:	68da      	ldr	r2, [r3, #12]
 80018aa:	69fb      	ldr	r3, [r7, #28]
 80018ac:	005b      	lsls	r3, r3, #1
 80018ae:	fa02 f303 	lsl.w	r3, r2, r3
 80018b2:	69ba      	ldr	r2, [r7, #24]
 80018b4:	4313      	orrs	r3, r2
 80018b6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	69ba      	ldr	r2, [r7, #24]
 80018bc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	685b      	ldr	r3, [r3, #4]
 80018c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80018c4:	2201      	movs	r2, #1
 80018c6:	69fb      	ldr	r3, [r7, #28]
 80018c8:	fa02 f303 	lsl.w	r3, r2, r3
 80018cc:	43db      	mvns	r3, r3
 80018ce:	69ba      	ldr	r2, [r7, #24]
 80018d0:	4013      	ands	r3, r2
 80018d2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80018d4:	683b      	ldr	r3, [r7, #0]
 80018d6:	685b      	ldr	r3, [r3, #4]
 80018d8:	091b      	lsrs	r3, r3, #4
 80018da:	f003 0201 	and.w	r2, r3, #1
 80018de:	69fb      	ldr	r3, [r7, #28]
 80018e0:	fa02 f303 	lsl.w	r3, r2, r3
 80018e4:	69ba      	ldr	r2, [r7, #24]
 80018e6:	4313      	orrs	r3, r2
 80018e8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	69ba      	ldr	r2, [r7, #24]
 80018ee:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80018f0:	683b      	ldr	r3, [r7, #0]
 80018f2:	685b      	ldr	r3, [r3, #4]
 80018f4:	f003 0303 	and.w	r3, r3, #3
 80018f8:	2b03      	cmp	r3, #3
 80018fa:	d017      	beq.n	800192c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	68db      	ldr	r3, [r3, #12]
 8001900:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001902:	69fb      	ldr	r3, [r7, #28]
 8001904:	005b      	lsls	r3, r3, #1
 8001906:	2203      	movs	r2, #3
 8001908:	fa02 f303 	lsl.w	r3, r2, r3
 800190c:	43db      	mvns	r3, r3
 800190e:	69ba      	ldr	r2, [r7, #24]
 8001910:	4013      	ands	r3, r2
 8001912:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001914:	683b      	ldr	r3, [r7, #0]
 8001916:	689a      	ldr	r2, [r3, #8]
 8001918:	69fb      	ldr	r3, [r7, #28]
 800191a:	005b      	lsls	r3, r3, #1
 800191c:	fa02 f303 	lsl.w	r3, r2, r3
 8001920:	69ba      	ldr	r2, [r7, #24]
 8001922:	4313      	orrs	r3, r2
 8001924:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	69ba      	ldr	r2, [r7, #24]
 800192a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800192c:	683b      	ldr	r3, [r7, #0]
 800192e:	685b      	ldr	r3, [r3, #4]
 8001930:	f003 0303 	and.w	r3, r3, #3
 8001934:	2b02      	cmp	r3, #2
 8001936:	d123      	bne.n	8001980 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001938:	69fb      	ldr	r3, [r7, #28]
 800193a:	08da      	lsrs	r2, r3, #3
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	3208      	adds	r2, #8
 8001940:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001944:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001946:	69fb      	ldr	r3, [r7, #28]
 8001948:	f003 0307 	and.w	r3, r3, #7
 800194c:	009b      	lsls	r3, r3, #2
 800194e:	220f      	movs	r2, #15
 8001950:	fa02 f303 	lsl.w	r3, r2, r3
 8001954:	43db      	mvns	r3, r3
 8001956:	69ba      	ldr	r2, [r7, #24]
 8001958:	4013      	ands	r3, r2
 800195a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800195c:	683b      	ldr	r3, [r7, #0]
 800195e:	691a      	ldr	r2, [r3, #16]
 8001960:	69fb      	ldr	r3, [r7, #28]
 8001962:	f003 0307 	and.w	r3, r3, #7
 8001966:	009b      	lsls	r3, r3, #2
 8001968:	fa02 f303 	lsl.w	r3, r2, r3
 800196c:	69ba      	ldr	r2, [r7, #24]
 800196e:	4313      	orrs	r3, r2
 8001970:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001972:	69fb      	ldr	r3, [r7, #28]
 8001974:	08da      	lsrs	r2, r3, #3
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	3208      	adds	r2, #8
 800197a:	69b9      	ldr	r1, [r7, #24]
 800197c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001986:	69fb      	ldr	r3, [r7, #28]
 8001988:	005b      	lsls	r3, r3, #1
 800198a:	2203      	movs	r2, #3
 800198c:	fa02 f303 	lsl.w	r3, r2, r3
 8001990:	43db      	mvns	r3, r3
 8001992:	69ba      	ldr	r2, [r7, #24]
 8001994:	4013      	ands	r3, r2
 8001996:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001998:	683b      	ldr	r3, [r7, #0]
 800199a:	685b      	ldr	r3, [r3, #4]
 800199c:	f003 0203 	and.w	r2, r3, #3
 80019a0:	69fb      	ldr	r3, [r7, #28]
 80019a2:	005b      	lsls	r3, r3, #1
 80019a4:	fa02 f303 	lsl.w	r3, r2, r3
 80019a8:	69ba      	ldr	r2, [r7, #24]
 80019aa:	4313      	orrs	r3, r2
 80019ac:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	69ba      	ldr	r2, [r7, #24]
 80019b2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80019b4:	683b      	ldr	r3, [r7, #0]
 80019b6:	685b      	ldr	r3, [r3, #4]
 80019b8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80019bc:	2b00      	cmp	r3, #0
 80019be:	f000 80a2 	beq.w	8001b06 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019c2:	2300      	movs	r3, #0
 80019c4:	60fb      	str	r3, [r7, #12]
 80019c6:	4b57      	ldr	r3, [pc, #348]	@ (8001b24 <HAL_GPIO_Init+0x2e8>)
 80019c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019ca:	4a56      	ldr	r2, [pc, #344]	@ (8001b24 <HAL_GPIO_Init+0x2e8>)
 80019cc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80019d0:	6453      	str	r3, [r2, #68]	@ 0x44
 80019d2:	4b54      	ldr	r3, [pc, #336]	@ (8001b24 <HAL_GPIO_Init+0x2e8>)
 80019d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019d6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80019da:	60fb      	str	r3, [r7, #12]
 80019dc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80019de:	4a52      	ldr	r2, [pc, #328]	@ (8001b28 <HAL_GPIO_Init+0x2ec>)
 80019e0:	69fb      	ldr	r3, [r7, #28]
 80019e2:	089b      	lsrs	r3, r3, #2
 80019e4:	3302      	adds	r3, #2
 80019e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80019ec:	69fb      	ldr	r3, [r7, #28]
 80019ee:	f003 0303 	and.w	r3, r3, #3
 80019f2:	009b      	lsls	r3, r3, #2
 80019f4:	220f      	movs	r2, #15
 80019f6:	fa02 f303 	lsl.w	r3, r2, r3
 80019fa:	43db      	mvns	r3, r3
 80019fc:	69ba      	ldr	r2, [r7, #24]
 80019fe:	4013      	ands	r3, r2
 8001a00:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	4a49      	ldr	r2, [pc, #292]	@ (8001b2c <HAL_GPIO_Init+0x2f0>)
 8001a06:	4293      	cmp	r3, r2
 8001a08:	d019      	beq.n	8001a3e <HAL_GPIO_Init+0x202>
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	4a48      	ldr	r2, [pc, #288]	@ (8001b30 <HAL_GPIO_Init+0x2f4>)
 8001a0e:	4293      	cmp	r3, r2
 8001a10:	d013      	beq.n	8001a3a <HAL_GPIO_Init+0x1fe>
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	4a47      	ldr	r2, [pc, #284]	@ (8001b34 <HAL_GPIO_Init+0x2f8>)
 8001a16:	4293      	cmp	r3, r2
 8001a18:	d00d      	beq.n	8001a36 <HAL_GPIO_Init+0x1fa>
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	4a46      	ldr	r2, [pc, #280]	@ (8001b38 <HAL_GPIO_Init+0x2fc>)
 8001a1e:	4293      	cmp	r3, r2
 8001a20:	d007      	beq.n	8001a32 <HAL_GPIO_Init+0x1f6>
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	4a45      	ldr	r2, [pc, #276]	@ (8001b3c <HAL_GPIO_Init+0x300>)
 8001a26:	4293      	cmp	r3, r2
 8001a28:	d101      	bne.n	8001a2e <HAL_GPIO_Init+0x1f2>
 8001a2a:	2304      	movs	r3, #4
 8001a2c:	e008      	b.n	8001a40 <HAL_GPIO_Init+0x204>
 8001a2e:	2307      	movs	r3, #7
 8001a30:	e006      	b.n	8001a40 <HAL_GPIO_Init+0x204>
 8001a32:	2303      	movs	r3, #3
 8001a34:	e004      	b.n	8001a40 <HAL_GPIO_Init+0x204>
 8001a36:	2302      	movs	r3, #2
 8001a38:	e002      	b.n	8001a40 <HAL_GPIO_Init+0x204>
 8001a3a:	2301      	movs	r3, #1
 8001a3c:	e000      	b.n	8001a40 <HAL_GPIO_Init+0x204>
 8001a3e:	2300      	movs	r3, #0
 8001a40:	69fa      	ldr	r2, [r7, #28]
 8001a42:	f002 0203 	and.w	r2, r2, #3
 8001a46:	0092      	lsls	r2, r2, #2
 8001a48:	4093      	lsls	r3, r2
 8001a4a:	69ba      	ldr	r2, [r7, #24]
 8001a4c:	4313      	orrs	r3, r2
 8001a4e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001a50:	4935      	ldr	r1, [pc, #212]	@ (8001b28 <HAL_GPIO_Init+0x2ec>)
 8001a52:	69fb      	ldr	r3, [r7, #28]
 8001a54:	089b      	lsrs	r3, r3, #2
 8001a56:	3302      	adds	r3, #2
 8001a58:	69ba      	ldr	r2, [r7, #24]
 8001a5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001a5e:	4b38      	ldr	r3, [pc, #224]	@ (8001b40 <HAL_GPIO_Init+0x304>)
 8001a60:	689b      	ldr	r3, [r3, #8]
 8001a62:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a64:	693b      	ldr	r3, [r7, #16]
 8001a66:	43db      	mvns	r3, r3
 8001a68:	69ba      	ldr	r2, [r7, #24]
 8001a6a:	4013      	ands	r3, r2
 8001a6c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001a6e:	683b      	ldr	r3, [r7, #0]
 8001a70:	685b      	ldr	r3, [r3, #4]
 8001a72:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d003      	beq.n	8001a82 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001a7a:	69ba      	ldr	r2, [r7, #24]
 8001a7c:	693b      	ldr	r3, [r7, #16]
 8001a7e:	4313      	orrs	r3, r2
 8001a80:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001a82:	4a2f      	ldr	r2, [pc, #188]	@ (8001b40 <HAL_GPIO_Init+0x304>)
 8001a84:	69bb      	ldr	r3, [r7, #24]
 8001a86:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001a88:	4b2d      	ldr	r3, [pc, #180]	@ (8001b40 <HAL_GPIO_Init+0x304>)
 8001a8a:	68db      	ldr	r3, [r3, #12]
 8001a8c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a8e:	693b      	ldr	r3, [r7, #16]
 8001a90:	43db      	mvns	r3, r3
 8001a92:	69ba      	ldr	r2, [r7, #24]
 8001a94:	4013      	ands	r3, r2
 8001a96:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001a98:	683b      	ldr	r3, [r7, #0]
 8001a9a:	685b      	ldr	r3, [r3, #4]
 8001a9c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d003      	beq.n	8001aac <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001aa4:	69ba      	ldr	r2, [r7, #24]
 8001aa6:	693b      	ldr	r3, [r7, #16]
 8001aa8:	4313      	orrs	r3, r2
 8001aaa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001aac:	4a24      	ldr	r2, [pc, #144]	@ (8001b40 <HAL_GPIO_Init+0x304>)
 8001aae:	69bb      	ldr	r3, [r7, #24]
 8001ab0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001ab2:	4b23      	ldr	r3, [pc, #140]	@ (8001b40 <HAL_GPIO_Init+0x304>)
 8001ab4:	685b      	ldr	r3, [r3, #4]
 8001ab6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ab8:	693b      	ldr	r3, [r7, #16]
 8001aba:	43db      	mvns	r3, r3
 8001abc:	69ba      	ldr	r2, [r7, #24]
 8001abe:	4013      	ands	r3, r2
 8001ac0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001ac2:	683b      	ldr	r3, [r7, #0]
 8001ac4:	685b      	ldr	r3, [r3, #4]
 8001ac6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d003      	beq.n	8001ad6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001ace:	69ba      	ldr	r2, [r7, #24]
 8001ad0:	693b      	ldr	r3, [r7, #16]
 8001ad2:	4313      	orrs	r3, r2
 8001ad4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001ad6:	4a1a      	ldr	r2, [pc, #104]	@ (8001b40 <HAL_GPIO_Init+0x304>)
 8001ad8:	69bb      	ldr	r3, [r7, #24]
 8001ada:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001adc:	4b18      	ldr	r3, [pc, #96]	@ (8001b40 <HAL_GPIO_Init+0x304>)
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ae2:	693b      	ldr	r3, [r7, #16]
 8001ae4:	43db      	mvns	r3, r3
 8001ae6:	69ba      	ldr	r2, [r7, #24]
 8001ae8:	4013      	ands	r3, r2
 8001aea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001aec:	683b      	ldr	r3, [r7, #0]
 8001aee:	685b      	ldr	r3, [r3, #4]
 8001af0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d003      	beq.n	8001b00 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001af8:	69ba      	ldr	r2, [r7, #24]
 8001afa:	693b      	ldr	r3, [r7, #16]
 8001afc:	4313      	orrs	r3, r2
 8001afe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001b00:	4a0f      	ldr	r2, [pc, #60]	@ (8001b40 <HAL_GPIO_Init+0x304>)
 8001b02:	69bb      	ldr	r3, [r7, #24]
 8001b04:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001b06:	69fb      	ldr	r3, [r7, #28]
 8001b08:	3301      	adds	r3, #1
 8001b0a:	61fb      	str	r3, [r7, #28]
 8001b0c:	69fb      	ldr	r3, [r7, #28]
 8001b0e:	2b0f      	cmp	r3, #15
 8001b10:	f67f aea2 	bls.w	8001858 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001b14:	bf00      	nop
 8001b16:	bf00      	nop
 8001b18:	3724      	adds	r7, #36	@ 0x24
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b20:	4770      	bx	lr
 8001b22:	bf00      	nop
 8001b24:	40023800 	.word	0x40023800
 8001b28:	40013800 	.word	0x40013800
 8001b2c:	40020000 	.word	0x40020000
 8001b30:	40020400 	.word	0x40020400
 8001b34:	40020800 	.word	0x40020800
 8001b38:	40020c00 	.word	0x40020c00
 8001b3c:	40021000 	.word	0x40021000
 8001b40:	40013c00 	.word	0x40013c00

08001b44 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001b44:	b480      	push	{r7}
 8001b46:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001b48:	4b03      	ldr	r3, [pc, #12]	@ (8001b58 <HAL_RCC_GetHCLKFreq+0x14>)
 8001b4a:	681b      	ldr	r3, [r3, #0]
}
 8001b4c:	4618      	mov	r0, r3
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b54:	4770      	bx	lr
 8001b56:	bf00      	nop
 8001b58:	20000000 	.word	0x20000000

08001b5c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001b60:	f7ff fff0 	bl	8001b44 <HAL_RCC_GetHCLKFreq>
 8001b64:	4602      	mov	r2, r0
 8001b66:	4b05      	ldr	r3, [pc, #20]	@ (8001b7c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001b68:	689b      	ldr	r3, [r3, #8]
 8001b6a:	0a9b      	lsrs	r3, r3, #10
 8001b6c:	f003 0307 	and.w	r3, r3, #7
 8001b70:	4903      	ldr	r1, [pc, #12]	@ (8001b80 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001b72:	5ccb      	ldrb	r3, [r1, r3]
 8001b74:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001b78:	4618      	mov	r0, r3
 8001b7a:	bd80      	pop	{r7, pc}
 8001b7c:	40023800 	.word	0x40023800
 8001b80:	080034b8 	.word	0x080034b8

08001b84 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001b88:	f7ff ffdc 	bl	8001b44 <HAL_RCC_GetHCLKFreq>
 8001b8c:	4602      	mov	r2, r0
 8001b8e:	4b05      	ldr	r3, [pc, #20]	@ (8001ba4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001b90:	689b      	ldr	r3, [r3, #8]
 8001b92:	0b5b      	lsrs	r3, r3, #13
 8001b94:	f003 0307 	and.w	r3, r3, #7
 8001b98:	4903      	ldr	r1, [pc, #12]	@ (8001ba8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001b9a:	5ccb      	ldrb	r3, [r1, r3]
 8001b9c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	bd80      	pop	{r7, pc}
 8001ba4:	40023800 	.word	0x40023800
 8001ba8:	080034b8 	.word	0x080034b8

08001bac <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b082      	sub	sp, #8
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d101      	bne.n	8001bbe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001bba:	2301      	movs	r3, #1
 8001bbc:	e042      	b.n	8001c44 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001bc4:	b2db      	uxtb	r3, r3
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d106      	bne.n	8001bd8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	2200      	movs	r2, #0
 8001bce:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001bd2:	6878      	ldr	r0, [r7, #4]
 8001bd4:	f7ff fb1c 	bl	8001210 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	2224      	movs	r2, #36	@ 0x24
 8001bdc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	68da      	ldr	r2, [r3, #12]
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8001bee:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001bf0:	6878      	ldr	r0, [r7, #4]
 8001bf2:	f000 f973 	bl	8001edc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	691a      	ldr	r2, [r3, #16]
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8001c04:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	695a      	ldr	r2, [r3, #20]
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8001c14:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	68da      	ldr	r2, [r3, #12]
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8001c24:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	2200      	movs	r2, #0
 8001c2a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	2220      	movs	r2, #32
 8001c30:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	2220      	movs	r2, #32
 8001c38:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	2200      	movs	r2, #0
 8001c40:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8001c42:	2300      	movs	r3, #0
}
 8001c44:	4618      	mov	r0, r3
 8001c46:	3708      	adds	r7, #8
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	bd80      	pop	{r7, pc}

08001c4c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	b08a      	sub	sp, #40	@ 0x28
 8001c50:	af02      	add	r7, sp, #8
 8001c52:	60f8      	str	r0, [r7, #12]
 8001c54:	60b9      	str	r1, [r7, #8]
 8001c56:	603b      	str	r3, [r7, #0]
 8001c58:	4613      	mov	r3, r2
 8001c5a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001c5c:	2300      	movs	r3, #0
 8001c5e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001c66:	b2db      	uxtb	r3, r3
 8001c68:	2b20      	cmp	r3, #32
 8001c6a:	d175      	bne.n	8001d58 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8001c6c:	68bb      	ldr	r3, [r7, #8]
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d002      	beq.n	8001c78 <HAL_UART_Transmit+0x2c>
 8001c72:	88fb      	ldrh	r3, [r7, #6]
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d101      	bne.n	8001c7c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001c78:	2301      	movs	r3, #1
 8001c7a:	e06e      	b.n	8001d5a <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	2200      	movs	r2, #0
 8001c80:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	2221      	movs	r2, #33	@ 0x21
 8001c86:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001c8a:	f7ff fcc1 	bl	8001610 <HAL_GetTick>
 8001c8e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	88fa      	ldrh	r2, [r7, #6]
 8001c94:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	88fa      	ldrh	r2, [r7, #6]
 8001c9a:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	689b      	ldr	r3, [r3, #8]
 8001ca0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001ca4:	d108      	bne.n	8001cb8 <HAL_UART_Transmit+0x6c>
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	691b      	ldr	r3, [r3, #16]
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d104      	bne.n	8001cb8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8001cae:	2300      	movs	r3, #0
 8001cb0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8001cb2:	68bb      	ldr	r3, [r7, #8]
 8001cb4:	61bb      	str	r3, [r7, #24]
 8001cb6:	e003      	b.n	8001cc0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8001cb8:	68bb      	ldr	r3, [r7, #8]
 8001cba:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001cbc:	2300      	movs	r3, #0
 8001cbe:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8001cc0:	e02e      	b.n	8001d20 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001cc2:	683b      	ldr	r3, [r7, #0]
 8001cc4:	9300      	str	r3, [sp, #0]
 8001cc6:	697b      	ldr	r3, [r7, #20]
 8001cc8:	2200      	movs	r2, #0
 8001cca:	2180      	movs	r1, #128	@ 0x80
 8001ccc:	68f8      	ldr	r0, [r7, #12]
 8001cce:	f000 f848 	bl	8001d62 <UART_WaitOnFlagUntilTimeout>
 8001cd2:	4603      	mov	r3, r0
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d005      	beq.n	8001ce4 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	2220      	movs	r2, #32
 8001cdc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8001ce0:	2303      	movs	r3, #3
 8001ce2:	e03a      	b.n	8001d5a <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8001ce4:	69fb      	ldr	r3, [r7, #28]
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d10b      	bne.n	8001d02 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001cea:	69bb      	ldr	r3, [r7, #24]
 8001cec:	881b      	ldrh	r3, [r3, #0]
 8001cee:	461a      	mov	r2, r3
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001cf8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001cfa:	69bb      	ldr	r3, [r7, #24]
 8001cfc:	3302      	adds	r3, #2
 8001cfe:	61bb      	str	r3, [r7, #24]
 8001d00:	e007      	b.n	8001d12 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001d02:	69fb      	ldr	r3, [r7, #28]
 8001d04:	781a      	ldrb	r2, [r3, #0]
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001d0c:	69fb      	ldr	r3, [r7, #28]
 8001d0e:	3301      	adds	r3, #1
 8001d10:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8001d16:	b29b      	uxth	r3, r3
 8001d18:	3b01      	subs	r3, #1
 8001d1a:	b29a      	uxth	r2, r3
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8001d24:	b29b      	uxth	r3, r3
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d1cb      	bne.n	8001cc2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001d2a:	683b      	ldr	r3, [r7, #0]
 8001d2c:	9300      	str	r3, [sp, #0]
 8001d2e:	697b      	ldr	r3, [r7, #20]
 8001d30:	2200      	movs	r2, #0
 8001d32:	2140      	movs	r1, #64	@ 0x40
 8001d34:	68f8      	ldr	r0, [r7, #12]
 8001d36:	f000 f814 	bl	8001d62 <UART_WaitOnFlagUntilTimeout>
 8001d3a:	4603      	mov	r3, r0
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d005      	beq.n	8001d4c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	2220      	movs	r2, #32
 8001d44:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8001d48:	2303      	movs	r3, #3
 8001d4a:	e006      	b.n	8001d5a <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	2220      	movs	r2, #32
 8001d50:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8001d54:	2300      	movs	r3, #0
 8001d56:	e000      	b.n	8001d5a <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8001d58:	2302      	movs	r3, #2
  }
}
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	3720      	adds	r7, #32
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	bd80      	pop	{r7, pc}

08001d62 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8001d62:	b580      	push	{r7, lr}
 8001d64:	b086      	sub	sp, #24
 8001d66:	af00      	add	r7, sp, #0
 8001d68:	60f8      	str	r0, [r7, #12]
 8001d6a:	60b9      	str	r1, [r7, #8]
 8001d6c:	603b      	str	r3, [r7, #0]
 8001d6e:	4613      	mov	r3, r2
 8001d70:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001d72:	e03b      	b.n	8001dec <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001d74:	6a3b      	ldr	r3, [r7, #32]
 8001d76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d7a:	d037      	beq.n	8001dec <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001d7c:	f7ff fc48 	bl	8001610 <HAL_GetTick>
 8001d80:	4602      	mov	r2, r0
 8001d82:	683b      	ldr	r3, [r7, #0]
 8001d84:	1ad3      	subs	r3, r2, r3
 8001d86:	6a3a      	ldr	r2, [r7, #32]
 8001d88:	429a      	cmp	r2, r3
 8001d8a:	d302      	bcc.n	8001d92 <UART_WaitOnFlagUntilTimeout+0x30>
 8001d8c:	6a3b      	ldr	r3, [r7, #32]
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d101      	bne.n	8001d96 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8001d92:	2303      	movs	r3, #3
 8001d94:	e03a      	b.n	8001e0c <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	68db      	ldr	r3, [r3, #12]
 8001d9c:	f003 0304 	and.w	r3, r3, #4
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d023      	beq.n	8001dec <UART_WaitOnFlagUntilTimeout+0x8a>
 8001da4:	68bb      	ldr	r3, [r7, #8]
 8001da6:	2b80      	cmp	r3, #128	@ 0x80
 8001da8:	d020      	beq.n	8001dec <UART_WaitOnFlagUntilTimeout+0x8a>
 8001daa:	68bb      	ldr	r3, [r7, #8]
 8001dac:	2b40      	cmp	r3, #64	@ 0x40
 8001dae:	d01d      	beq.n	8001dec <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	f003 0308 	and.w	r3, r3, #8
 8001dba:	2b08      	cmp	r3, #8
 8001dbc:	d116      	bne.n	8001dec <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	617b      	str	r3, [r7, #20]
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	617b      	str	r3, [r7, #20]
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	685b      	ldr	r3, [r3, #4]
 8001dd0:	617b      	str	r3, [r7, #20]
 8001dd2:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8001dd4:	68f8      	ldr	r0, [r7, #12]
 8001dd6:	f000 f81d 	bl	8001e14 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	2208      	movs	r2, #8
 8001dde:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	2200      	movs	r2, #0
 8001de4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8001de8:	2301      	movs	r3, #1
 8001dea:	e00f      	b.n	8001e0c <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	681a      	ldr	r2, [r3, #0]
 8001df2:	68bb      	ldr	r3, [r7, #8]
 8001df4:	4013      	ands	r3, r2
 8001df6:	68ba      	ldr	r2, [r7, #8]
 8001df8:	429a      	cmp	r2, r3
 8001dfa:	bf0c      	ite	eq
 8001dfc:	2301      	moveq	r3, #1
 8001dfe:	2300      	movne	r3, #0
 8001e00:	b2db      	uxtb	r3, r3
 8001e02:	461a      	mov	r2, r3
 8001e04:	79fb      	ldrb	r3, [r7, #7]
 8001e06:	429a      	cmp	r2, r3
 8001e08:	d0b4      	beq.n	8001d74 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001e0a:	2300      	movs	r3, #0
}
 8001e0c:	4618      	mov	r0, r3
 8001e0e:	3718      	adds	r7, #24
 8001e10:	46bd      	mov	sp, r7
 8001e12:	bd80      	pop	{r7, pc}

08001e14 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8001e14:	b480      	push	{r7}
 8001e16:	b095      	sub	sp, #84	@ 0x54
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	330c      	adds	r3, #12
 8001e22:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001e24:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001e26:	e853 3f00 	ldrex	r3, [r3]
 8001e2a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8001e2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001e2e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8001e32:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	330c      	adds	r3, #12
 8001e3a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001e3c:	643a      	str	r2, [r7, #64]	@ 0x40
 8001e3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001e40:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8001e42:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8001e44:	e841 2300 	strex	r3, r2, [r1]
 8001e48:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8001e4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d1e5      	bne.n	8001e1c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	3314      	adds	r3, #20
 8001e56:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001e58:	6a3b      	ldr	r3, [r7, #32]
 8001e5a:	e853 3f00 	ldrex	r3, [r3]
 8001e5e:	61fb      	str	r3, [r7, #28]
   return(result);
 8001e60:	69fb      	ldr	r3, [r7, #28]
 8001e62:	f023 0301 	bic.w	r3, r3, #1
 8001e66:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	3314      	adds	r3, #20
 8001e6e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8001e70:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001e72:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001e74:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001e76:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001e78:	e841 2300 	strex	r3, r2, [r1]
 8001e7c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8001e7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d1e5      	bne.n	8001e50 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e88:	2b01      	cmp	r3, #1
 8001e8a:	d119      	bne.n	8001ec0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	330c      	adds	r3, #12
 8001e92:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	e853 3f00 	ldrex	r3, [r3]
 8001e9a:	60bb      	str	r3, [r7, #8]
   return(result);
 8001e9c:	68bb      	ldr	r3, [r7, #8]
 8001e9e:	f023 0310 	bic.w	r3, r3, #16
 8001ea2:	647b      	str	r3, [r7, #68]	@ 0x44
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	330c      	adds	r3, #12
 8001eaa:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8001eac:	61ba      	str	r2, [r7, #24]
 8001eae:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001eb0:	6979      	ldr	r1, [r7, #20]
 8001eb2:	69ba      	ldr	r2, [r7, #24]
 8001eb4:	e841 2300 	strex	r3, r2, [r1]
 8001eb8:	613b      	str	r3, [r7, #16]
   return(result);
 8001eba:	693b      	ldr	r3, [r7, #16]
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d1e5      	bne.n	8001e8c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	2220      	movs	r2, #32
 8001ec4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	2200      	movs	r2, #0
 8001ecc:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8001ece:	bf00      	nop
 8001ed0:	3754      	adds	r7, #84	@ 0x54
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed8:	4770      	bx	lr
	...

08001edc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001edc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001ee0:	b0c0      	sub	sp, #256	@ 0x100
 8001ee2:	af00      	add	r7, sp, #0
 8001ee4:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001ee8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	691b      	ldr	r3, [r3, #16]
 8001ef0:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8001ef4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001ef8:	68d9      	ldr	r1, [r3, #12]
 8001efa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001efe:	681a      	ldr	r2, [r3, #0]
 8001f00:	ea40 0301 	orr.w	r3, r0, r1
 8001f04:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001f06:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001f0a:	689a      	ldr	r2, [r3, #8]
 8001f0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001f10:	691b      	ldr	r3, [r3, #16]
 8001f12:	431a      	orrs	r2, r3
 8001f14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001f18:	695b      	ldr	r3, [r3, #20]
 8001f1a:	431a      	orrs	r2, r3
 8001f1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001f20:	69db      	ldr	r3, [r3, #28]
 8001f22:	4313      	orrs	r3, r2
 8001f24:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8001f28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	68db      	ldr	r3, [r3, #12]
 8001f30:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8001f34:	f021 010c 	bic.w	r1, r1, #12
 8001f38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001f3c:	681a      	ldr	r2, [r3, #0]
 8001f3e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8001f42:	430b      	orrs	r3, r1
 8001f44:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001f46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	695b      	ldr	r3, [r3, #20]
 8001f4e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8001f52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001f56:	6999      	ldr	r1, [r3, #24]
 8001f58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001f5c:	681a      	ldr	r2, [r3, #0]
 8001f5e:	ea40 0301 	orr.w	r3, r0, r1
 8001f62:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8001f64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001f68:	681a      	ldr	r2, [r3, #0]
 8001f6a:	4b8f      	ldr	r3, [pc, #572]	@ (80021a8 <UART_SetConfig+0x2cc>)
 8001f6c:	429a      	cmp	r2, r3
 8001f6e:	d005      	beq.n	8001f7c <UART_SetConfig+0xa0>
 8001f70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001f74:	681a      	ldr	r2, [r3, #0]
 8001f76:	4b8d      	ldr	r3, [pc, #564]	@ (80021ac <UART_SetConfig+0x2d0>)
 8001f78:	429a      	cmp	r2, r3
 8001f7a:	d104      	bne.n	8001f86 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8001f7c:	f7ff fe02 	bl	8001b84 <HAL_RCC_GetPCLK2Freq>
 8001f80:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8001f84:	e003      	b.n	8001f8e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8001f86:	f7ff fde9 	bl	8001b5c <HAL_RCC_GetPCLK1Freq>
 8001f8a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001f8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001f92:	69db      	ldr	r3, [r3, #28]
 8001f94:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001f98:	f040 810c 	bne.w	80021b4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8001f9c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8001fa6:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8001faa:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8001fae:	4622      	mov	r2, r4
 8001fb0:	462b      	mov	r3, r5
 8001fb2:	1891      	adds	r1, r2, r2
 8001fb4:	65b9      	str	r1, [r7, #88]	@ 0x58
 8001fb6:	415b      	adcs	r3, r3
 8001fb8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8001fba:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8001fbe:	4621      	mov	r1, r4
 8001fc0:	eb12 0801 	adds.w	r8, r2, r1
 8001fc4:	4629      	mov	r1, r5
 8001fc6:	eb43 0901 	adc.w	r9, r3, r1
 8001fca:	f04f 0200 	mov.w	r2, #0
 8001fce:	f04f 0300 	mov.w	r3, #0
 8001fd2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001fd6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001fda:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001fde:	4690      	mov	r8, r2
 8001fe0:	4699      	mov	r9, r3
 8001fe2:	4623      	mov	r3, r4
 8001fe4:	eb18 0303 	adds.w	r3, r8, r3
 8001fe8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8001fec:	462b      	mov	r3, r5
 8001fee:	eb49 0303 	adc.w	r3, r9, r3
 8001ff2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8001ff6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001ffa:	685b      	ldr	r3, [r3, #4]
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8002002:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8002006:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800200a:	460b      	mov	r3, r1
 800200c:	18db      	adds	r3, r3, r3
 800200e:	653b      	str	r3, [r7, #80]	@ 0x50
 8002010:	4613      	mov	r3, r2
 8002012:	eb42 0303 	adc.w	r3, r2, r3
 8002016:	657b      	str	r3, [r7, #84]	@ 0x54
 8002018:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800201c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8002020:	f7fe f936 	bl	8000290 <__aeabi_uldivmod>
 8002024:	4602      	mov	r2, r0
 8002026:	460b      	mov	r3, r1
 8002028:	4b61      	ldr	r3, [pc, #388]	@ (80021b0 <UART_SetConfig+0x2d4>)
 800202a:	fba3 2302 	umull	r2, r3, r3, r2
 800202e:	095b      	lsrs	r3, r3, #5
 8002030:	011c      	lsls	r4, r3, #4
 8002032:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002036:	2200      	movs	r2, #0
 8002038:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800203c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8002040:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8002044:	4642      	mov	r2, r8
 8002046:	464b      	mov	r3, r9
 8002048:	1891      	adds	r1, r2, r2
 800204a:	64b9      	str	r1, [r7, #72]	@ 0x48
 800204c:	415b      	adcs	r3, r3
 800204e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002050:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002054:	4641      	mov	r1, r8
 8002056:	eb12 0a01 	adds.w	sl, r2, r1
 800205a:	4649      	mov	r1, r9
 800205c:	eb43 0b01 	adc.w	fp, r3, r1
 8002060:	f04f 0200 	mov.w	r2, #0
 8002064:	f04f 0300 	mov.w	r3, #0
 8002068:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800206c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002070:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002074:	4692      	mov	sl, r2
 8002076:	469b      	mov	fp, r3
 8002078:	4643      	mov	r3, r8
 800207a:	eb1a 0303 	adds.w	r3, sl, r3
 800207e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002082:	464b      	mov	r3, r9
 8002084:	eb4b 0303 	adc.w	r3, fp, r3
 8002088:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800208c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002090:	685b      	ldr	r3, [r3, #4]
 8002092:	2200      	movs	r2, #0
 8002094:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002098:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800209c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80020a0:	460b      	mov	r3, r1
 80020a2:	18db      	adds	r3, r3, r3
 80020a4:	643b      	str	r3, [r7, #64]	@ 0x40
 80020a6:	4613      	mov	r3, r2
 80020a8:	eb42 0303 	adc.w	r3, r2, r3
 80020ac:	647b      	str	r3, [r7, #68]	@ 0x44
 80020ae:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80020b2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80020b6:	f7fe f8eb 	bl	8000290 <__aeabi_uldivmod>
 80020ba:	4602      	mov	r2, r0
 80020bc:	460b      	mov	r3, r1
 80020be:	4611      	mov	r1, r2
 80020c0:	4b3b      	ldr	r3, [pc, #236]	@ (80021b0 <UART_SetConfig+0x2d4>)
 80020c2:	fba3 2301 	umull	r2, r3, r3, r1
 80020c6:	095b      	lsrs	r3, r3, #5
 80020c8:	2264      	movs	r2, #100	@ 0x64
 80020ca:	fb02 f303 	mul.w	r3, r2, r3
 80020ce:	1acb      	subs	r3, r1, r3
 80020d0:	00db      	lsls	r3, r3, #3
 80020d2:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80020d6:	4b36      	ldr	r3, [pc, #216]	@ (80021b0 <UART_SetConfig+0x2d4>)
 80020d8:	fba3 2302 	umull	r2, r3, r3, r2
 80020dc:	095b      	lsrs	r3, r3, #5
 80020de:	005b      	lsls	r3, r3, #1
 80020e0:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80020e4:	441c      	add	r4, r3
 80020e6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80020ea:	2200      	movs	r2, #0
 80020ec:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80020f0:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80020f4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80020f8:	4642      	mov	r2, r8
 80020fa:	464b      	mov	r3, r9
 80020fc:	1891      	adds	r1, r2, r2
 80020fe:	63b9      	str	r1, [r7, #56]	@ 0x38
 8002100:	415b      	adcs	r3, r3
 8002102:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002104:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8002108:	4641      	mov	r1, r8
 800210a:	1851      	adds	r1, r2, r1
 800210c:	6339      	str	r1, [r7, #48]	@ 0x30
 800210e:	4649      	mov	r1, r9
 8002110:	414b      	adcs	r3, r1
 8002112:	637b      	str	r3, [r7, #52]	@ 0x34
 8002114:	f04f 0200 	mov.w	r2, #0
 8002118:	f04f 0300 	mov.w	r3, #0
 800211c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8002120:	4659      	mov	r1, fp
 8002122:	00cb      	lsls	r3, r1, #3
 8002124:	4651      	mov	r1, sl
 8002126:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800212a:	4651      	mov	r1, sl
 800212c:	00ca      	lsls	r2, r1, #3
 800212e:	4610      	mov	r0, r2
 8002130:	4619      	mov	r1, r3
 8002132:	4603      	mov	r3, r0
 8002134:	4642      	mov	r2, r8
 8002136:	189b      	adds	r3, r3, r2
 8002138:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800213c:	464b      	mov	r3, r9
 800213e:	460a      	mov	r2, r1
 8002140:	eb42 0303 	adc.w	r3, r2, r3
 8002144:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002148:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800214c:	685b      	ldr	r3, [r3, #4]
 800214e:	2200      	movs	r2, #0
 8002150:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8002154:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8002158:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800215c:	460b      	mov	r3, r1
 800215e:	18db      	adds	r3, r3, r3
 8002160:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002162:	4613      	mov	r3, r2
 8002164:	eb42 0303 	adc.w	r3, r2, r3
 8002168:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800216a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800216e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8002172:	f7fe f88d 	bl	8000290 <__aeabi_uldivmod>
 8002176:	4602      	mov	r2, r0
 8002178:	460b      	mov	r3, r1
 800217a:	4b0d      	ldr	r3, [pc, #52]	@ (80021b0 <UART_SetConfig+0x2d4>)
 800217c:	fba3 1302 	umull	r1, r3, r3, r2
 8002180:	095b      	lsrs	r3, r3, #5
 8002182:	2164      	movs	r1, #100	@ 0x64
 8002184:	fb01 f303 	mul.w	r3, r1, r3
 8002188:	1ad3      	subs	r3, r2, r3
 800218a:	00db      	lsls	r3, r3, #3
 800218c:	3332      	adds	r3, #50	@ 0x32
 800218e:	4a08      	ldr	r2, [pc, #32]	@ (80021b0 <UART_SetConfig+0x2d4>)
 8002190:	fba2 2303 	umull	r2, r3, r2, r3
 8002194:	095b      	lsrs	r3, r3, #5
 8002196:	f003 0207 	and.w	r2, r3, #7
 800219a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	4422      	add	r2, r4
 80021a2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80021a4:	e106      	b.n	80023b4 <UART_SetConfig+0x4d8>
 80021a6:	bf00      	nop
 80021a8:	40011000 	.word	0x40011000
 80021ac:	40011400 	.word	0x40011400
 80021b0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80021b4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80021b8:	2200      	movs	r2, #0
 80021ba:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80021be:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80021c2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80021c6:	4642      	mov	r2, r8
 80021c8:	464b      	mov	r3, r9
 80021ca:	1891      	adds	r1, r2, r2
 80021cc:	6239      	str	r1, [r7, #32]
 80021ce:	415b      	adcs	r3, r3
 80021d0:	627b      	str	r3, [r7, #36]	@ 0x24
 80021d2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80021d6:	4641      	mov	r1, r8
 80021d8:	1854      	adds	r4, r2, r1
 80021da:	4649      	mov	r1, r9
 80021dc:	eb43 0501 	adc.w	r5, r3, r1
 80021e0:	f04f 0200 	mov.w	r2, #0
 80021e4:	f04f 0300 	mov.w	r3, #0
 80021e8:	00eb      	lsls	r3, r5, #3
 80021ea:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80021ee:	00e2      	lsls	r2, r4, #3
 80021f0:	4614      	mov	r4, r2
 80021f2:	461d      	mov	r5, r3
 80021f4:	4643      	mov	r3, r8
 80021f6:	18e3      	adds	r3, r4, r3
 80021f8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80021fc:	464b      	mov	r3, r9
 80021fe:	eb45 0303 	adc.w	r3, r5, r3
 8002202:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8002206:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800220a:	685b      	ldr	r3, [r3, #4]
 800220c:	2200      	movs	r2, #0
 800220e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8002212:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8002216:	f04f 0200 	mov.w	r2, #0
 800221a:	f04f 0300 	mov.w	r3, #0
 800221e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8002222:	4629      	mov	r1, r5
 8002224:	008b      	lsls	r3, r1, #2
 8002226:	4621      	mov	r1, r4
 8002228:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800222c:	4621      	mov	r1, r4
 800222e:	008a      	lsls	r2, r1, #2
 8002230:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8002234:	f7fe f82c 	bl	8000290 <__aeabi_uldivmod>
 8002238:	4602      	mov	r2, r0
 800223a:	460b      	mov	r3, r1
 800223c:	4b60      	ldr	r3, [pc, #384]	@ (80023c0 <UART_SetConfig+0x4e4>)
 800223e:	fba3 2302 	umull	r2, r3, r3, r2
 8002242:	095b      	lsrs	r3, r3, #5
 8002244:	011c      	lsls	r4, r3, #4
 8002246:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800224a:	2200      	movs	r2, #0
 800224c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002250:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8002254:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8002258:	4642      	mov	r2, r8
 800225a:	464b      	mov	r3, r9
 800225c:	1891      	adds	r1, r2, r2
 800225e:	61b9      	str	r1, [r7, #24]
 8002260:	415b      	adcs	r3, r3
 8002262:	61fb      	str	r3, [r7, #28]
 8002264:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002268:	4641      	mov	r1, r8
 800226a:	1851      	adds	r1, r2, r1
 800226c:	6139      	str	r1, [r7, #16]
 800226e:	4649      	mov	r1, r9
 8002270:	414b      	adcs	r3, r1
 8002272:	617b      	str	r3, [r7, #20]
 8002274:	f04f 0200 	mov.w	r2, #0
 8002278:	f04f 0300 	mov.w	r3, #0
 800227c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002280:	4659      	mov	r1, fp
 8002282:	00cb      	lsls	r3, r1, #3
 8002284:	4651      	mov	r1, sl
 8002286:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800228a:	4651      	mov	r1, sl
 800228c:	00ca      	lsls	r2, r1, #3
 800228e:	4610      	mov	r0, r2
 8002290:	4619      	mov	r1, r3
 8002292:	4603      	mov	r3, r0
 8002294:	4642      	mov	r2, r8
 8002296:	189b      	adds	r3, r3, r2
 8002298:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800229c:	464b      	mov	r3, r9
 800229e:	460a      	mov	r2, r1
 80022a0:	eb42 0303 	adc.w	r3, r2, r3
 80022a4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80022a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80022ac:	685b      	ldr	r3, [r3, #4]
 80022ae:	2200      	movs	r2, #0
 80022b0:	67bb      	str	r3, [r7, #120]	@ 0x78
 80022b2:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80022b4:	f04f 0200 	mov.w	r2, #0
 80022b8:	f04f 0300 	mov.w	r3, #0
 80022bc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80022c0:	4649      	mov	r1, r9
 80022c2:	008b      	lsls	r3, r1, #2
 80022c4:	4641      	mov	r1, r8
 80022c6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80022ca:	4641      	mov	r1, r8
 80022cc:	008a      	lsls	r2, r1, #2
 80022ce:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80022d2:	f7fd ffdd 	bl	8000290 <__aeabi_uldivmod>
 80022d6:	4602      	mov	r2, r0
 80022d8:	460b      	mov	r3, r1
 80022da:	4611      	mov	r1, r2
 80022dc:	4b38      	ldr	r3, [pc, #224]	@ (80023c0 <UART_SetConfig+0x4e4>)
 80022de:	fba3 2301 	umull	r2, r3, r3, r1
 80022e2:	095b      	lsrs	r3, r3, #5
 80022e4:	2264      	movs	r2, #100	@ 0x64
 80022e6:	fb02 f303 	mul.w	r3, r2, r3
 80022ea:	1acb      	subs	r3, r1, r3
 80022ec:	011b      	lsls	r3, r3, #4
 80022ee:	3332      	adds	r3, #50	@ 0x32
 80022f0:	4a33      	ldr	r2, [pc, #204]	@ (80023c0 <UART_SetConfig+0x4e4>)
 80022f2:	fba2 2303 	umull	r2, r3, r2, r3
 80022f6:	095b      	lsrs	r3, r3, #5
 80022f8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80022fc:	441c      	add	r4, r3
 80022fe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002302:	2200      	movs	r2, #0
 8002304:	673b      	str	r3, [r7, #112]	@ 0x70
 8002306:	677a      	str	r2, [r7, #116]	@ 0x74
 8002308:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800230c:	4642      	mov	r2, r8
 800230e:	464b      	mov	r3, r9
 8002310:	1891      	adds	r1, r2, r2
 8002312:	60b9      	str	r1, [r7, #8]
 8002314:	415b      	adcs	r3, r3
 8002316:	60fb      	str	r3, [r7, #12]
 8002318:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800231c:	4641      	mov	r1, r8
 800231e:	1851      	adds	r1, r2, r1
 8002320:	6039      	str	r1, [r7, #0]
 8002322:	4649      	mov	r1, r9
 8002324:	414b      	adcs	r3, r1
 8002326:	607b      	str	r3, [r7, #4]
 8002328:	f04f 0200 	mov.w	r2, #0
 800232c:	f04f 0300 	mov.w	r3, #0
 8002330:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002334:	4659      	mov	r1, fp
 8002336:	00cb      	lsls	r3, r1, #3
 8002338:	4651      	mov	r1, sl
 800233a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800233e:	4651      	mov	r1, sl
 8002340:	00ca      	lsls	r2, r1, #3
 8002342:	4610      	mov	r0, r2
 8002344:	4619      	mov	r1, r3
 8002346:	4603      	mov	r3, r0
 8002348:	4642      	mov	r2, r8
 800234a:	189b      	adds	r3, r3, r2
 800234c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800234e:	464b      	mov	r3, r9
 8002350:	460a      	mov	r2, r1
 8002352:	eb42 0303 	adc.w	r3, r2, r3
 8002356:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002358:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800235c:	685b      	ldr	r3, [r3, #4]
 800235e:	2200      	movs	r2, #0
 8002360:	663b      	str	r3, [r7, #96]	@ 0x60
 8002362:	667a      	str	r2, [r7, #100]	@ 0x64
 8002364:	f04f 0200 	mov.w	r2, #0
 8002368:	f04f 0300 	mov.w	r3, #0
 800236c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8002370:	4649      	mov	r1, r9
 8002372:	008b      	lsls	r3, r1, #2
 8002374:	4641      	mov	r1, r8
 8002376:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800237a:	4641      	mov	r1, r8
 800237c:	008a      	lsls	r2, r1, #2
 800237e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8002382:	f7fd ff85 	bl	8000290 <__aeabi_uldivmod>
 8002386:	4602      	mov	r2, r0
 8002388:	460b      	mov	r3, r1
 800238a:	4b0d      	ldr	r3, [pc, #52]	@ (80023c0 <UART_SetConfig+0x4e4>)
 800238c:	fba3 1302 	umull	r1, r3, r3, r2
 8002390:	095b      	lsrs	r3, r3, #5
 8002392:	2164      	movs	r1, #100	@ 0x64
 8002394:	fb01 f303 	mul.w	r3, r1, r3
 8002398:	1ad3      	subs	r3, r2, r3
 800239a:	011b      	lsls	r3, r3, #4
 800239c:	3332      	adds	r3, #50	@ 0x32
 800239e:	4a08      	ldr	r2, [pc, #32]	@ (80023c0 <UART_SetConfig+0x4e4>)
 80023a0:	fba2 2303 	umull	r2, r3, r2, r3
 80023a4:	095b      	lsrs	r3, r3, #5
 80023a6:	f003 020f 	and.w	r2, r3, #15
 80023aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	4422      	add	r2, r4
 80023b2:	609a      	str	r2, [r3, #8]
}
 80023b4:	bf00      	nop
 80023b6:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80023ba:	46bd      	mov	sp, r7
 80023bc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80023c0:	51eb851f 	.word	0x51eb851f

080023c4 <LL_EXTI_EnableIT_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 80023c4:	b480      	push	{r7}
 80023c6:	b083      	sub	sp, #12
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR, ExtiLine);
 80023cc:	4b05      	ldr	r3, [pc, #20]	@ (80023e4 <LL_EXTI_EnableIT_0_31+0x20>)
 80023ce:	681a      	ldr	r2, [r3, #0]
 80023d0:	4904      	ldr	r1, [pc, #16]	@ (80023e4 <LL_EXTI_EnableIT_0_31+0x20>)
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	4313      	orrs	r3, r2
 80023d6:	600b      	str	r3, [r1, #0]
}
 80023d8:	bf00      	nop
 80023da:	370c      	adds	r7, #12
 80023dc:	46bd      	mov	sp, r7
 80023de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e2:	4770      	bx	lr
 80023e4:	40013c00 	.word	0x40013c00

080023e8 <LL_EXTI_DisableIT_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableIT_0_31(uint32_t ExtiLine)
{
 80023e8:	b480      	push	{r7}
 80023ea:	b083      	sub	sp, #12
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR, ExtiLine);
 80023f0:	4b06      	ldr	r3, [pc, #24]	@ (800240c <LL_EXTI_DisableIT_0_31+0x24>)
 80023f2:	681a      	ldr	r2, [r3, #0]
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	43db      	mvns	r3, r3
 80023f8:	4904      	ldr	r1, [pc, #16]	@ (800240c <LL_EXTI_DisableIT_0_31+0x24>)
 80023fa:	4013      	ands	r3, r2
 80023fc:	600b      	str	r3, [r1, #0]
}
 80023fe:	bf00      	nop
 8002400:	370c      	adds	r7, #12
 8002402:	46bd      	mov	sp, r7
 8002404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002408:	4770      	bx	lr
 800240a:	bf00      	nop
 800240c:	40013c00 	.word	0x40013c00

08002410 <LL_EXTI_EnableEvent_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableEvent_0_31(uint32_t ExtiLine)
{
 8002410:	b480      	push	{r7}
 8002412:	b083      	sub	sp, #12
 8002414:	af00      	add	r7, sp, #0
 8002416:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR, ExtiLine);
 8002418:	4b05      	ldr	r3, [pc, #20]	@ (8002430 <LL_EXTI_EnableEvent_0_31+0x20>)
 800241a:	685a      	ldr	r2, [r3, #4]
 800241c:	4904      	ldr	r1, [pc, #16]	@ (8002430 <LL_EXTI_EnableEvent_0_31+0x20>)
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	4313      	orrs	r3, r2
 8002422:	604b      	str	r3, [r1, #4]

}
 8002424:	bf00      	nop
 8002426:	370c      	adds	r7, #12
 8002428:	46bd      	mov	sp, r7
 800242a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242e:	4770      	bx	lr
 8002430:	40013c00 	.word	0x40013c00

08002434 <LL_EXTI_DisableEvent_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableEvent_0_31(uint32_t ExtiLine)
{
 8002434:	b480      	push	{r7}
 8002436:	b083      	sub	sp, #12
 8002438:	af00      	add	r7, sp, #0
 800243a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR, ExtiLine);
 800243c:	4b06      	ldr	r3, [pc, #24]	@ (8002458 <LL_EXTI_DisableEvent_0_31+0x24>)
 800243e:	685a      	ldr	r2, [r3, #4]
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	43db      	mvns	r3, r3
 8002444:	4904      	ldr	r1, [pc, #16]	@ (8002458 <LL_EXTI_DisableEvent_0_31+0x24>)
 8002446:	4013      	ands	r3, r2
 8002448:	604b      	str	r3, [r1, #4]
}
 800244a:	bf00      	nop
 800244c:	370c      	adds	r7, #12
 800244e:	46bd      	mov	sp, r7
 8002450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002454:	4770      	bx	lr
 8002456:	bf00      	nop
 8002458:	40013c00 	.word	0x40013c00

0800245c <LL_EXTI_EnableRisingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 800245c:	b480      	push	{r7}
 800245e:	b083      	sub	sp, #12
 8002460:	af00      	add	r7, sp, #0
 8002462:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR, ExtiLine);
 8002464:	4b05      	ldr	r3, [pc, #20]	@ (800247c <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8002466:	689a      	ldr	r2, [r3, #8]
 8002468:	4904      	ldr	r1, [pc, #16]	@ (800247c <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	4313      	orrs	r3, r2
 800246e:	608b      	str	r3, [r1, #8]

}
 8002470:	bf00      	nop
 8002472:	370c      	adds	r7, #12
 8002474:	46bd      	mov	sp, r7
 8002476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247a:	4770      	bx	lr
 800247c:	40013c00 	.word	0x40013c00

08002480 <LL_EXTI_DisableRisingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_0_31(uint32_t ExtiLine)
{
 8002480:	b480      	push	{r7}
 8002482:	b083      	sub	sp, #12
 8002484:	af00      	add	r7, sp, #0
 8002486:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR, ExtiLine);
 8002488:	4b06      	ldr	r3, [pc, #24]	@ (80024a4 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 800248a:	689a      	ldr	r2, [r3, #8]
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	43db      	mvns	r3, r3
 8002490:	4904      	ldr	r1, [pc, #16]	@ (80024a4 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8002492:	4013      	ands	r3, r2
 8002494:	608b      	str	r3, [r1, #8]

}
 8002496:	bf00      	nop
 8002498:	370c      	adds	r7, #12
 800249a:	46bd      	mov	sp, r7
 800249c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a0:	4770      	bx	lr
 80024a2:	bf00      	nop
 80024a4:	40013c00 	.word	0x40013c00

080024a8 <LL_EXTI_EnableFallingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_0_31(uint32_t ExtiLine)
{
 80024a8:	b480      	push	{r7}
 80024aa:	b083      	sub	sp, #12
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR, ExtiLine);
 80024b0:	4b05      	ldr	r3, [pc, #20]	@ (80024c8 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 80024b2:	68da      	ldr	r2, [r3, #12]
 80024b4:	4904      	ldr	r1, [pc, #16]	@ (80024c8 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	4313      	orrs	r3, r2
 80024ba:	60cb      	str	r3, [r1, #12]
}
 80024bc:	bf00      	nop
 80024be:	370c      	adds	r7, #12
 80024c0:	46bd      	mov	sp, r7
 80024c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c6:	4770      	bx	lr
 80024c8:	40013c00 	.word	0x40013c00

080024cc <LL_EXTI_DisableFallingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_0_31(uint32_t ExtiLine)
{
 80024cc:	b480      	push	{r7}
 80024ce:	b083      	sub	sp, #12
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR, ExtiLine);
 80024d4:	4b06      	ldr	r3, [pc, #24]	@ (80024f0 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 80024d6:	68da      	ldr	r2, [r3, #12]
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	43db      	mvns	r3, r3
 80024dc:	4904      	ldr	r1, [pc, #16]	@ (80024f0 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 80024de:	4013      	ands	r3, r2
 80024e0:	60cb      	str	r3, [r1, #12]
}
 80024e2:	bf00      	nop
 80024e4:	370c      	adds	r7, #12
 80024e6:	46bd      	mov	sp, r7
 80024e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ec:	4770      	bx	lr
 80024ee:	bf00      	nop
 80024f0:	40013c00 	.word	0x40013c00

080024f4 <LL_EXTI_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: EXTI registers are initialized
  *          - ERROR: not applicable
  */
uint32_t LL_EXTI_Init(LL_EXTI_InitTypeDef *EXTI_InitStruct)
{
 80024f4:	b580      	push	{r7, lr}
 80024f6:	b084      	sub	sp, #16
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	6078      	str	r0, [r7, #4]
  ErrorStatus status = SUCCESS;
 80024fc:	2300      	movs	r3, #0
 80024fe:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_EXTI_LINE_0_31(EXTI_InitStruct->Line_0_31));
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->LineCommand));
  assert_param(IS_LL_EXTI_MODE(EXTI_InitStruct->Mode));

  /* ENABLE LineCommand */
  if (EXTI_InitStruct->LineCommand != DISABLE)
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	791b      	ldrb	r3, [r3, #4]
 8002504:	2b00      	cmp	r3, #0
 8002506:	d065      	beq.n	80025d4 <LL_EXTI_Init+0xe0>
  {
    assert_param(IS_LL_EXTI_TRIGGER(EXTI_InitStruct->Trigger));

    /* Configure EXTI Lines in range from 0 to 31 */
    if (EXTI_InitStruct->Line_0_31 != LL_EXTI_LINE_NONE)
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	2b00      	cmp	r3, #0
 800250e:	d06b      	beq.n	80025e8 <LL_EXTI_Init+0xf4>
    {
      switch (EXTI_InitStruct->Mode)
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	795b      	ldrb	r3, [r3, #5]
 8002514:	2b02      	cmp	r3, #2
 8002516:	d01c      	beq.n	8002552 <LL_EXTI_Init+0x5e>
 8002518:	2b02      	cmp	r3, #2
 800251a:	dc25      	bgt.n	8002568 <LL_EXTI_Init+0x74>
 800251c:	2b00      	cmp	r3, #0
 800251e:	d002      	beq.n	8002526 <LL_EXTI_Init+0x32>
 8002520:	2b01      	cmp	r3, #1
 8002522:	d00b      	beq.n	800253c <LL_EXTI_Init+0x48>
 8002524:	e020      	b.n	8002568 <LL_EXTI_Init+0x74>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	4618      	mov	r0, r3
 800252c:	f7ff ff82 	bl	8002434 <LL_EXTI_DisableEvent_0_31>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	4618      	mov	r0, r3
 8002536:	f7ff ff45 	bl	80023c4 <LL_EXTI_EnableIT_0_31>
          break;
 800253a:	e018      	b.n	800256e <LL_EXTI_Init+0x7a>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	4618      	mov	r0, r3
 8002542:	f7ff ff51 	bl	80023e8 <LL_EXTI_DisableIT_0_31>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	4618      	mov	r0, r3
 800254c:	f7ff ff60 	bl	8002410 <LL_EXTI_EnableEvent_0_31>
          break;
 8002550:	e00d      	b.n	800256e <LL_EXTI_Init+0x7a>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT & Event on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	4618      	mov	r0, r3
 8002558:	f7ff ff34 	bl	80023c4 <LL_EXTI_EnableIT_0_31>
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	4618      	mov	r0, r3
 8002562:	f7ff ff55 	bl	8002410 <LL_EXTI_EnableEvent_0_31>
          break;
 8002566:	e002      	b.n	800256e <LL_EXTI_Init+0x7a>
        default:
          status = ERROR;
 8002568:	2301      	movs	r3, #1
 800256a:	73fb      	strb	r3, [r7, #15]
          break;
 800256c:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	799b      	ldrb	r3, [r3, #6]
 8002572:	2b00      	cmp	r3, #0
 8002574:	d038      	beq.n	80025e8 <LL_EXTI_Init+0xf4>
      {
        switch (EXTI_InitStruct->Trigger)
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	799b      	ldrb	r3, [r3, #6]
 800257a:	2b03      	cmp	r3, #3
 800257c:	d01c      	beq.n	80025b8 <LL_EXTI_Init+0xc4>
 800257e:	2b03      	cmp	r3, #3
 8002580:	dc25      	bgt.n	80025ce <LL_EXTI_Init+0xda>
 8002582:	2b01      	cmp	r3, #1
 8002584:	d002      	beq.n	800258c <LL_EXTI_Init+0x98>
 8002586:	2b02      	cmp	r3, #2
 8002588:	d00b      	beq.n	80025a2 <LL_EXTI_Init+0xae>
 800258a:	e020      	b.n	80025ce <LL_EXTI_Init+0xda>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	4618      	mov	r0, r3
 8002592:	f7ff ff9b 	bl	80024cc <LL_EXTI_DisableFallingTrig_0_31>
            /* Then Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	4618      	mov	r0, r3
 800259c:	f7ff ff5e 	bl	800245c <LL_EXTI_EnableRisingTrig_0_31>
            break;
 80025a0:	e022      	b.n	80025e8 <LL_EXTI_Init+0xf4>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	4618      	mov	r0, r3
 80025a8:	f7ff ff6a 	bl	8002480 <LL_EXTI_DisableRisingTrig_0_31>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	4618      	mov	r0, r3
 80025b2:	f7ff ff79 	bl	80024a8 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 80025b6:	e017      	b.n	80025e8 <LL_EXTI_Init+0xf4>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	4618      	mov	r0, r3
 80025be:	f7ff ff4d 	bl	800245c <LL_EXTI_EnableRisingTrig_0_31>
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	4618      	mov	r0, r3
 80025c8:	f7ff ff6e 	bl	80024a8 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 80025cc:	e00c      	b.n	80025e8 <LL_EXTI_Init+0xf4>
          default:
            status = ERROR;
 80025ce:	2301      	movs	r3, #1
 80025d0:	73fb      	strb	r3, [r7, #15]
            break;
 80025d2:	e009      	b.n	80025e8 <LL_EXTI_Init+0xf4>
  }
  /* DISABLE LineCommand */
  else
  {
    /* De-configure EXTI Lines in range from 0 to 31 */
    LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	4618      	mov	r0, r3
 80025da:	f7ff ff05 	bl	80023e8 <LL_EXTI_DisableIT_0_31>
    LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	4618      	mov	r0, r3
 80025e4:	f7ff ff26 	bl	8002434 <LL_EXTI_DisableEvent_0_31>
  }
  return status;
 80025e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80025ea:	4618      	mov	r0, r3
 80025ec:	3710      	adds	r7, #16
 80025ee:	46bd      	mov	sp, r7
 80025f0:	bd80      	pop	{r7, pc}

080025f2 <LL_GPIO_SetPinMode>:
{
 80025f2:	b480      	push	{r7}
 80025f4:	b08b      	sub	sp, #44	@ 0x2c
 80025f6:	af00      	add	r7, sp, #0
 80025f8:	60f8      	str	r0, [r7, #12]
 80025fa:	60b9      	str	r1, [r7, #8]
 80025fc:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	681a      	ldr	r2, [r3, #0]
 8002602:	68bb      	ldr	r3, [r7, #8]
 8002604:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002606:	697b      	ldr	r3, [r7, #20]
 8002608:	fa93 f3a3 	rbit	r3, r3
 800260c:	613b      	str	r3, [r7, #16]
  return result;
 800260e:	693b      	ldr	r3, [r7, #16]
 8002610:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002612:	69bb      	ldr	r3, [r7, #24]
 8002614:	2b00      	cmp	r3, #0
 8002616:	d101      	bne.n	800261c <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 8002618:	2320      	movs	r3, #32
 800261a:	e003      	b.n	8002624 <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 800261c:	69bb      	ldr	r3, [r7, #24]
 800261e:	fab3 f383 	clz	r3, r3
 8002622:	b2db      	uxtb	r3, r3
 8002624:	005b      	lsls	r3, r3, #1
 8002626:	2103      	movs	r1, #3
 8002628:	fa01 f303 	lsl.w	r3, r1, r3
 800262c:	43db      	mvns	r3, r3
 800262e:	401a      	ands	r2, r3
 8002630:	68bb      	ldr	r3, [r7, #8]
 8002632:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002634:	6a3b      	ldr	r3, [r7, #32]
 8002636:	fa93 f3a3 	rbit	r3, r3
 800263a:	61fb      	str	r3, [r7, #28]
  return result;
 800263c:	69fb      	ldr	r3, [r7, #28]
 800263e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8002640:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002642:	2b00      	cmp	r3, #0
 8002644:	d101      	bne.n	800264a <LL_GPIO_SetPinMode+0x58>
    return 32U;
 8002646:	2320      	movs	r3, #32
 8002648:	e003      	b.n	8002652 <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 800264a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800264c:	fab3 f383 	clz	r3, r3
 8002650:	b2db      	uxtb	r3, r3
 8002652:	005b      	lsls	r3, r3, #1
 8002654:	6879      	ldr	r1, [r7, #4]
 8002656:	fa01 f303 	lsl.w	r3, r1, r3
 800265a:	431a      	orrs	r2, r3
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	601a      	str	r2, [r3, #0]
}
 8002660:	bf00      	nop
 8002662:	372c      	adds	r7, #44	@ 0x2c
 8002664:	46bd      	mov	sp, r7
 8002666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800266a:	4770      	bx	lr

0800266c <LL_GPIO_SetPinOutputType>:
{
 800266c:	b480      	push	{r7}
 800266e:	b085      	sub	sp, #20
 8002670:	af00      	add	r7, sp, #0
 8002672:	60f8      	str	r0, [r7, #12]
 8002674:	60b9      	str	r1, [r7, #8]
 8002676:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	685a      	ldr	r2, [r3, #4]
 800267c:	68bb      	ldr	r3, [r7, #8]
 800267e:	43db      	mvns	r3, r3
 8002680:	401a      	ands	r2, r3
 8002682:	68bb      	ldr	r3, [r7, #8]
 8002684:	6879      	ldr	r1, [r7, #4]
 8002686:	fb01 f303 	mul.w	r3, r1, r3
 800268a:	431a      	orrs	r2, r3
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	605a      	str	r2, [r3, #4]
}
 8002690:	bf00      	nop
 8002692:	3714      	adds	r7, #20
 8002694:	46bd      	mov	sp, r7
 8002696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269a:	4770      	bx	lr

0800269c <LL_GPIO_SetPinSpeed>:
{
 800269c:	b480      	push	{r7}
 800269e:	b08b      	sub	sp, #44	@ 0x2c
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	60f8      	str	r0, [r7, #12]
 80026a4:	60b9      	str	r1, [r7, #8]
 80026a6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	689a      	ldr	r2, [r3, #8]
 80026ac:	68bb      	ldr	r3, [r7, #8]
 80026ae:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026b0:	697b      	ldr	r3, [r7, #20]
 80026b2:	fa93 f3a3 	rbit	r3, r3
 80026b6:	613b      	str	r3, [r7, #16]
  return result;
 80026b8:	693b      	ldr	r3, [r7, #16]
 80026ba:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80026bc:	69bb      	ldr	r3, [r7, #24]
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d101      	bne.n	80026c6 <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 80026c2:	2320      	movs	r3, #32
 80026c4:	e003      	b.n	80026ce <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 80026c6:	69bb      	ldr	r3, [r7, #24]
 80026c8:	fab3 f383 	clz	r3, r3
 80026cc:	b2db      	uxtb	r3, r3
 80026ce:	005b      	lsls	r3, r3, #1
 80026d0:	2103      	movs	r1, #3
 80026d2:	fa01 f303 	lsl.w	r3, r1, r3
 80026d6:	43db      	mvns	r3, r3
 80026d8:	401a      	ands	r2, r3
 80026da:	68bb      	ldr	r3, [r7, #8]
 80026dc:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026de:	6a3b      	ldr	r3, [r7, #32]
 80026e0:	fa93 f3a3 	rbit	r3, r3
 80026e4:	61fb      	str	r3, [r7, #28]
  return result;
 80026e6:	69fb      	ldr	r3, [r7, #28]
 80026e8:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 80026ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d101      	bne.n	80026f4 <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 80026f0:	2320      	movs	r3, #32
 80026f2:	e003      	b.n	80026fc <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 80026f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026f6:	fab3 f383 	clz	r3, r3
 80026fa:	b2db      	uxtb	r3, r3
 80026fc:	005b      	lsls	r3, r3, #1
 80026fe:	6879      	ldr	r1, [r7, #4]
 8002700:	fa01 f303 	lsl.w	r3, r1, r3
 8002704:	431a      	orrs	r2, r3
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	609a      	str	r2, [r3, #8]
}
 800270a:	bf00      	nop
 800270c:	372c      	adds	r7, #44	@ 0x2c
 800270e:	46bd      	mov	sp, r7
 8002710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002714:	4770      	bx	lr

08002716 <LL_GPIO_SetPinPull>:
{
 8002716:	b480      	push	{r7}
 8002718:	b08b      	sub	sp, #44	@ 0x2c
 800271a:	af00      	add	r7, sp, #0
 800271c:	60f8      	str	r0, [r7, #12]
 800271e:	60b9      	str	r1, [r7, #8]
 8002720:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	68da      	ldr	r2, [r3, #12]
 8002726:	68bb      	ldr	r3, [r7, #8]
 8002728:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800272a:	697b      	ldr	r3, [r7, #20]
 800272c:	fa93 f3a3 	rbit	r3, r3
 8002730:	613b      	str	r3, [r7, #16]
  return result;
 8002732:	693b      	ldr	r3, [r7, #16]
 8002734:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002736:	69bb      	ldr	r3, [r7, #24]
 8002738:	2b00      	cmp	r3, #0
 800273a:	d101      	bne.n	8002740 <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 800273c:	2320      	movs	r3, #32
 800273e:	e003      	b.n	8002748 <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 8002740:	69bb      	ldr	r3, [r7, #24]
 8002742:	fab3 f383 	clz	r3, r3
 8002746:	b2db      	uxtb	r3, r3
 8002748:	005b      	lsls	r3, r3, #1
 800274a:	2103      	movs	r1, #3
 800274c:	fa01 f303 	lsl.w	r3, r1, r3
 8002750:	43db      	mvns	r3, r3
 8002752:	401a      	ands	r2, r3
 8002754:	68bb      	ldr	r3, [r7, #8]
 8002756:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002758:	6a3b      	ldr	r3, [r7, #32]
 800275a:	fa93 f3a3 	rbit	r3, r3
 800275e:	61fb      	str	r3, [r7, #28]
  return result;
 8002760:	69fb      	ldr	r3, [r7, #28]
 8002762:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8002764:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002766:	2b00      	cmp	r3, #0
 8002768:	d101      	bne.n	800276e <LL_GPIO_SetPinPull+0x58>
    return 32U;
 800276a:	2320      	movs	r3, #32
 800276c:	e003      	b.n	8002776 <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 800276e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002770:	fab3 f383 	clz	r3, r3
 8002774:	b2db      	uxtb	r3, r3
 8002776:	005b      	lsls	r3, r3, #1
 8002778:	6879      	ldr	r1, [r7, #4]
 800277a:	fa01 f303 	lsl.w	r3, r1, r3
 800277e:	431a      	orrs	r2, r3
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	60da      	str	r2, [r3, #12]
}
 8002784:	bf00      	nop
 8002786:	372c      	adds	r7, #44	@ 0x2c
 8002788:	46bd      	mov	sp, r7
 800278a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800278e:	4770      	bx	lr

08002790 <LL_GPIO_SetAFPin_0_7>:
{
 8002790:	b480      	push	{r7}
 8002792:	b08b      	sub	sp, #44	@ 0x2c
 8002794:	af00      	add	r7, sp, #0
 8002796:	60f8      	str	r0, [r7, #12]
 8002798:	60b9      	str	r1, [r7, #8]
 800279a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	6a1a      	ldr	r2, [r3, #32]
 80027a0:	68bb      	ldr	r3, [r7, #8]
 80027a2:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027a4:	697b      	ldr	r3, [r7, #20]
 80027a6:	fa93 f3a3 	rbit	r3, r3
 80027aa:	613b      	str	r3, [r7, #16]
  return result;
 80027ac:	693b      	ldr	r3, [r7, #16]
 80027ae:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80027b0:	69bb      	ldr	r3, [r7, #24]
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d101      	bne.n	80027ba <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 80027b6:	2320      	movs	r3, #32
 80027b8:	e003      	b.n	80027c2 <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 80027ba:	69bb      	ldr	r3, [r7, #24]
 80027bc:	fab3 f383 	clz	r3, r3
 80027c0:	b2db      	uxtb	r3, r3
 80027c2:	009b      	lsls	r3, r3, #2
 80027c4:	210f      	movs	r1, #15
 80027c6:	fa01 f303 	lsl.w	r3, r1, r3
 80027ca:	43db      	mvns	r3, r3
 80027cc:	401a      	ands	r2, r3
 80027ce:	68bb      	ldr	r3, [r7, #8]
 80027d0:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027d2:	6a3b      	ldr	r3, [r7, #32]
 80027d4:	fa93 f3a3 	rbit	r3, r3
 80027d8:	61fb      	str	r3, [r7, #28]
  return result;
 80027da:	69fb      	ldr	r3, [r7, #28]
 80027dc:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 80027de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d101      	bne.n	80027e8 <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 80027e4:	2320      	movs	r3, #32
 80027e6:	e003      	b.n	80027f0 <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 80027e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027ea:	fab3 f383 	clz	r3, r3
 80027ee:	b2db      	uxtb	r3, r3
 80027f0:	009b      	lsls	r3, r3, #2
 80027f2:	6879      	ldr	r1, [r7, #4]
 80027f4:	fa01 f303 	lsl.w	r3, r1, r3
 80027f8:	431a      	orrs	r2, r3
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	621a      	str	r2, [r3, #32]
}
 80027fe:	bf00      	nop
 8002800:	372c      	adds	r7, #44	@ 0x2c
 8002802:	46bd      	mov	sp, r7
 8002804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002808:	4770      	bx	lr

0800280a <LL_GPIO_SetAFPin_8_15>:
{
 800280a:	b480      	push	{r7}
 800280c:	b08b      	sub	sp, #44	@ 0x2c
 800280e:	af00      	add	r7, sp, #0
 8002810:	60f8      	str	r0, [r7, #12]
 8002812:	60b9      	str	r1, [r7, #8]
 8002814:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800281a:	68bb      	ldr	r3, [r7, #8]
 800281c:	0a1b      	lsrs	r3, r3, #8
 800281e:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002820:	697b      	ldr	r3, [r7, #20]
 8002822:	fa93 f3a3 	rbit	r3, r3
 8002826:	613b      	str	r3, [r7, #16]
  return result;
 8002828:	693b      	ldr	r3, [r7, #16]
 800282a:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800282c:	69bb      	ldr	r3, [r7, #24]
 800282e:	2b00      	cmp	r3, #0
 8002830:	d101      	bne.n	8002836 <LL_GPIO_SetAFPin_8_15+0x2c>
    return 32U;
 8002832:	2320      	movs	r3, #32
 8002834:	e003      	b.n	800283e <LL_GPIO_SetAFPin_8_15+0x34>
  return __builtin_clz(value);
 8002836:	69bb      	ldr	r3, [r7, #24]
 8002838:	fab3 f383 	clz	r3, r3
 800283c:	b2db      	uxtb	r3, r3
 800283e:	009b      	lsls	r3, r3, #2
 8002840:	210f      	movs	r1, #15
 8002842:	fa01 f303 	lsl.w	r3, r1, r3
 8002846:	43db      	mvns	r3, r3
 8002848:	401a      	ands	r2, r3
 800284a:	68bb      	ldr	r3, [r7, #8]
 800284c:	0a1b      	lsrs	r3, r3, #8
 800284e:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002850:	6a3b      	ldr	r3, [r7, #32]
 8002852:	fa93 f3a3 	rbit	r3, r3
 8002856:	61fb      	str	r3, [r7, #28]
  return result;
 8002858:	69fb      	ldr	r3, [r7, #28]
 800285a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 800285c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800285e:	2b00      	cmp	r3, #0
 8002860:	d101      	bne.n	8002866 <LL_GPIO_SetAFPin_8_15+0x5c>
    return 32U;
 8002862:	2320      	movs	r3, #32
 8002864:	e003      	b.n	800286e <LL_GPIO_SetAFPin_8_15+0x64>
  return __builtin_clz(value);
 8002866:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002868:	fab3 f383 	clz	r3, r3
 800286c:	b2db      	uxtb	r3, r3
 800286e:	009b      	lsls	r3, r3, #2
 8002870:	6879      	ldr	r1, [r7, #4]
 8002872:	fa01 f303 	lsl.w	r3, r1, r3
 8002876:	431a      	orrs	r2, r3
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	625a      	str	r2, [r3, #36]	@ 0x24
}
 800287c:	bf00      	nop
 800287e:	372c      	adds	r7, #44	@ 0x2c
 8002880:	46bd      	mov	sp, r7
 8002882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002886:	4770      	bx	lr

08002888 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8002888:	b580      	push	{r7, lr}
 800288a:	b08a      	sub	sp, #40	@ 0x28
 800288c:	af00      	add	r7, sp, #0
 800288e:	6078      	str	r0, [r7, #4]
 8002890:	6039      	str	r1, [r7, #0]
  uint32_t pinpos     = 0x00000000U;
 8002892:	2300      	movs	r3, #0
 8002894:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t currentpin = 0x00000000U;
 8002896:	2300      	movs	r3, #0
 8002898:	623b      	str	r3, [r7, #32]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 800289a:	683b      	ldr	r3, [r7, #0]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	61bb      	str	r3, [r7, #24]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028a0:	69bb      	ldr	r3, [r7, #24]
 80028a2:	fa93 f3a3 	rbit	r3, r3
 80028a6:	617b      	str	r3, [r7, #20]
  return result;
 80028a8:	697b      	ldr	r3, [r7, #20]
 80028aa:	61fb      	str	r3, [r7, #28]
  if (value == 0U)
 80028ac:	69fb      	ldr	r3, [r7, #28]
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d101      	bne.n	80028b6 <LL_GPIO_Init+0x2e>
    return 32U;
 80028b2:	2320      	movs	r3, #32
 80028b4:	e003      	b.n	80028be <LL_GPIO_Init+0x36>
  return __builtin_clz(value);
 80028b6:	69fb      	ldr	r3, [r7, #28]
 80028b8:	fab3 f383 	clz	r3, r3
 80028bc:	b2db      	uxtb	r3, r3
 80028be:	627b      	str	r3, [r7, #36]	@ 0x24
  
  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 80028c0:	e057      	b.n	8002972 <LL_GPIO_Init+0xea>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 80028c2:	683b      	ldr	r3, [r7, #0]
 80028c4:	681a      	ldr	r2, [r3, #0]
 80028c6:	2101      	movs	r1, #1
 80028c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028ca:	fa01 f303 	lsl.w	r3, r1, r3
 80028ce:	4013      	ands	r3, r2
 80028d0:	623b      	str	r3, [r7, #32]
    
    if (currentpin)
 80028d2:	6a3b      	ldr	r3, [r7, #32]
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d049      	beq.n	800296c <LL_GPIO_Init+0xe4>
    {
      
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 80028d8:	683b      	ldr	r3, [r7, #0]
 80028da:	685b      	ldr	r3, [r3, #4]
 80028dc:	2b01      	cmp	r3, #1
 80028de:	d003      	beq.n	80028e8 <LL_GPIO_Init+0x60>
 80028e0:	683b      	ldr	r3, [r7, #0]
 80028e2:	685b      	ldr	r3, [r3, #4]
 80028e4:	2b02      	cmp	r3, #2
 80028e6:	d10d      	bne.n	8002904 <LL_GPIO_Init+0x7c>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
        
        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 80028e8:	683b      	ldr	r3, [r7, #0]
 80028ea:	689b      	ldr	r3, [r3, #8]
 80028ec:	461a      	mov	r2, r3
 80028ee:	6a39      	ldr	r1, [r7, #32]
 80028f0:	6878      	ldr	r0, [r7, #4]
 80028f2:	f7ff fed3 	bl	800269c <LL_GPIO_SetPinSpeed>
        
        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));
        
        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 80028f6:	683b      	ldr	r3, [r7, #0]
 80028f8:	68db      	ldr	r3, [r3, #12]
 80028fa:	461a      	mov	r2, r3
 80028fc:	6a39      	ldr	r1, [r7, #32]
 80028fe:	6878      	ldr	r0, [r7, #4]
 8002900:	f7ff feb4 	bl	800266c <LL_GPIO_SetPinOutputType>
      }
      
      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8002904:	683b      	ldr	r3, [r7, #0]
 8002906:	691b      	ldr	r3, [r3, #16]
 8002908:	461a      	mov	r2, r3
 800290a:	6a39      	ldr	r1, [r7, #32]
 800290c:	6878      	ldr	r0, [r7, #4]
 800290e:	f7ff ff02 	bl	8002716 <LL_GPIO_SetPinPull>
      
      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8002912:	683b      	ldr	r3, [r7, #0]
 8002914:	685b      	ldr	r3, [r3, #4]
 8002916:	2b02      	cmp	r3, #2
 8002918:	d121      	bne.n	800295e <LL_GPIO_Init+0xd6>
 800291a:	6a3b      	ldr	r3, [r7, #32]
 800291c:	60fb      	str	r3, [r7, #12]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	fa93 f3a3 	rbit	r3, r3
 8002924:	60bb      	str	r3, [r7, #8]
  return result;
 8002926:	68bb      	ldr	r3, [r7, #8]
 8002928:	613b      	str	r3, [r7, #16]
  if (value == 0U)
 800292a:	693b      	ldr	r3, [r7, #16]
 800292c:	2b00      	cmp	r3, #0
 800292e:	d101      	bne.n	8002934 <LL_GPIO_Init+0xac>
    return 32U;
 8002930:	2320      	movs	r3, #32
 8002932:	e003      	b.n	800293c <LL_GPIO_Init+0xb4>
  return __builtin_clz(value);
 8002934:	693b      	ldr	r3, [r7, #16]
 8002936:	fab3 f383 	clz	r3, r3
 800293a:	b2db      	uxtb	r3, r3
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));
        
        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 800293c:	2b07      	cmp	r3, #7
 800293e:	d807      	bhi.n	8002950 <LL_GPIO_Init+0xc8>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8002940:	683b      	ldr	r3, [r7, #0]
 8002942:	695b      	ldr	r3, [r3, #20]
 8002944:	461a      	mov	r2, r3
 8002946:	6a39      	ldr	r1, [r7, #32]
 8002948:	6878      	ldr	r0, [r7, #4]
 800294a:	f7ff ff21 	bl	8002790 <LL_GPIO_SetAFPin_0_7>
 800294e:	e006      	b.n	800295e <LL_GPIO_Init+0xd6>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8002950:	683b      	ldr	r3, [r7, #0]
 8002952:	695b      	ldr	r3, [r3, #20]
 8002954:	461a      	mov	r2, r3
 8002956:	6a39      	ldr	r1, [r7, #32]
 8002958:	6878      	ldr	r0, [r7, #4]
 800295a:	f7ff ff56 	bl	800280a <LL_GPIO_SetAFPin_8_15>
        }
      }
      
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 800295e:	683b      	ldr	r3, [r7, #0]
 8002960:	685b      	ldr	r3, [r3, #4]
 8002962:	461a      	mov	r2, r3
 8002964:	6a39      	ldr	r1, [r7, #32]
 8002966:	6878      	ldr	r0, [r7, #4]
 8002968:	f7ff fe43 	bl	80025f2 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 800296c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800296e:	3301      	adds	r3, #1
 8002970:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8002972:	683b      	ldr	r3, [r7, #0]
 8002974:	681a      	ldr	r2, [r3, #0]
 8002976:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002978:	fa22 f303 	lsr.w	r3, r2, r3
 800297c:	2b00      	cmp	r3, #0
 800297e:	d1a0      	bne.n	80028c2 <LL_GPIO_Init+0x3a>
  }

  return (SUCCESS);
 8002980:	2300      	movs	r3, #0
}
 8002982:	4618      	mov	r0, r3
 8002984:	3728      	adds	r7, #40	@ 0x28
 8002986:	46bd      	mov	sp, r7
 8002988:	bd80      	pop	{r7, pc}

0800298a <LL_TIM_SetPrescaler>:
{
 800298a:	b480      	push	{r7}
 800298c:	b083      	sub	sp, #12
 800298e:	af00      	add	r7, sp, #0
 8002990:	6078      	str	r0, [r7, #4]
 8002992:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	683a      	ldr	r2, [r7, #0]
 8002998:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800299a:	bf00      	nop
 800299c:	370c      	adds	r7, #12
 800299e:	46bd      	mov	sp, r7
 80029a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a4:	4770      	bx	lr

080029a6 <LL_TIM_SetAutoReload>:
{
 80029a6:	b480      	push	{r7}
 80029a8:	b083      	sub	sp, #12
 80029aa:	af00      	add	r7, sp, #0
 80029ac:	6078      	str	r0, [r7, #4]
 80029ae:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	683a      	ldr	r2, [r7, #0]
 80029b4:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 80029b6:	bf00      	nop
 80029b8:	370c      	adds	r7, #12
 80029ba:	46bd      	mov	sp, r7
 80029bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c0:	4770      	bx	lr

080029c2 <LL_TIM_SetRepetitionCounter>:
{
 80029c2:	b480      	push	{r7}
 80029c4:	b083      	sub	sp, #12
 80029c6:	af00      	add	r7, sp, #0
 80029c8:	6078      	str	r0, [r7, #4]
 80029ca:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	683a      	ldr	r2, [r7, #0]
 80029d0:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80029d2:	bf00      	nop
 80029d4:	370c      	adds	r7, #12
 80029d6:	46bd      	mov	sp, r7
 80029d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029dc:	4770      	bx	lr

080029de <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 80029de:	b480      	push	{r7}
 80029e0:	b083      	sub	sp, #12
 80029e2:	af00      	add	r7, sp, #0
 80029e4:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	695b      	ldr	r3, [r3, #20]
 80029ea:	f043 0201 	orr.w	r2, r3, #1
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	615a      	str	r2, [r3, #20]
}
 80029f2:	bf00      	nop
 80029f4:	370c      	adds	r7, #12
 80029f6:	46bd      	mov	sp, r7
 80029f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029fc:	4770      	bx	lr
	...

08002a00 <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, const LL_TIM_InitTypeDef *TIM_InitStruct)
{
 8002a00:	b580      	push	{r7, lr}
 8002a02:	b084      	sub	sp, #16
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	6078      	str	r0, [r7, #4]
 8002a08:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	4a31      	ldr	r2, [pc, #196]	@ (8002ad8 <LL_TIM_Init+0xd8>)
 8002a14:	4293      	cmp	r3, r2
 8002a16:	d00f      	beq.n	8002a38 <LL_TIM_Init+0x38>
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002a1e:	d00b      	beq.n	8002a38 <LL_TIM_Init+0x38>
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	4a2e      	ldr	r2, [pc, #184]	@ (8002adc <LL_TIM_Init+0xdc>)
 8002a24:	4293      	cmp	r3, r2
 8002a26:	d007      	beq.n	8002a38 <LL_TIM_Init+0x38>
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	4a2d      	ldr	r2, [pc, #180]	@ (8002ae0 <LL_TIM_Init+0xe0>)
 8002a2c:	4293      	cmp	r3, r2
 8002a2e:	d003      	beq.n	8002a38 <LL_TIM_Init+0x38>
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	4a2c      	ldr	r2, [pc, #176]	@ (8002ae4 <LL_TIM_Init+0xe4>)
 8002a34:	4293      	cmp	r3, r2
 8002a36:	d106      	bne.n	8002a46 <LL_TIM_Init+0x46>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002a3e:	683b      	ldr	r3, [r7, #0]
 8002a40:	685b      	ldr	r3, [r3, #4]
 8002a42:	4313      	orrs	r3, r2
 8002a44:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	4a23      	ldr	r2, [pc, #140]	@ (8002ad8 <LL_TIM_Init+0xd8>)
 8002a4a:	4293      	cmp	r3, r2
 8002a4c:	d01b      	beq.n	8002a86 <LL_TIM_Init+0x86>
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002a54:	d017      	beq.n	8002a86 <LL_TIM_Init+0x86>
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	4a20      	ldr	r2, [pc, #128]	@ (8002adc <LL_TIM_Init+0xdc>)
 8002a5a:	4293      	cmp	r3, r2
 8002a5c:	d013      	beq.n	8002a86 <LL_TIM_Init+0x86>
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	4a1f      	ldr	r2, [pc, #124]	@ (8002ae0 <LL_TIM_Init+0xe0>)
 8002a62:	4293      	cmp	r3, r2
 8002a64:	d00f      	beq.n	8002a86 <LL_TIM_Init+0x86>
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	4a1e      	ldr	r2, [pc, #120]	@ (8002ae4 <LL_TIM_Init+0xe4>)
 8002a6a:	4293      	cmp	r3, r2
 8002a6c:	d00b      	beq.n	8002a86 <LL_TIM_Init+0x86>
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	4a1d      	ldr	r2, [pc, #116]	@ (8002ae8 <LL_TIM_Init+0xe8>)
 8002a72:	4293      	cmp	r3, r2
 8002a74:	d007      	beq.n	8002a86 <LL_TIM_Init+0x86>
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	4a1c      	ldr	r2, [pc, #112]	@ (8002aec <LL_TIM_Init+0xec>)
 8002a7a:	4293      	cmp	r3, r2
 8002a7c:	d003      	beq.n	8002a86 <LL_TIM_Init+0x86>
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	4a1b      	ldr	r2, [pc, #108]	@ (8002af0 <LL_TIM_Init+0xf0>)
 8002a82:	4293      	cmp	r3, r2
 8002a84:	d106      	bne.n	8002a94 <LL_TIM_Init+0x94>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002a8c:	683b      	ldr	r3, [r7, #0]
 8002a8e:	68db      	ldr	r3, [r3, #12]
 8002a90:	4313      	orrs	r3, r2
 8002a92:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	68fa      	ldr	r2, [r7, #12]
 8002a98:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 8002a9a:	683b      	ldr	r3, [r7, #0]
 8002a9c:	689b      	ldr	r3, [r3, #8]
 8002a9e:	4619      	mov	r1, r3
 8002aa0:	6878      	ldr	r0, [r7, #4]
 8002aa2:	f7ff ff80 	bl	80029a6 <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 8002aa6:	683b      	ldr	r3, [r7, #0]
 8002aa8:	881b      	ldrh	r3, [r3, #0]
 8002aaa:	4619      	mov	r1, r3
 8002aac:	6878      	ldr	r0, [r7, #4]
 8002aae:	f7ff ff6c 	bl	800298a <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	4a08      	ldr	r2, [pc, #32]	@ (8002ad8 <LL_TIM_Init+0xd8>)
 8002ab6:	4293      	cmp	r3, r2
 8002ab8:	d105      	bne.n	8002ac6 <LL_TIM_Init+0xc6>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 8002aba:	683b      	ldr	r3, [r7, #0]
 8002abc:	691b      	ldr	r3, [r3, #16]
 8002abe:	4619      	mov	r1, r3
 8002ac0:	6878      	ldr	r0, [r7, #4]
 8002ac2:	f7ff ff7e 	bl	80029c2 <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 8002ac6:	6878      	ldr	r0, [r7, #4]
 8002ac8:	f7ff ff89 	bl	80029de <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 8002acc:	2300      	movs	r3, #0
}
 8002ace:	4618      	mov	r0, r3
 8002ad0:	3710      	adds	r7, #16
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	bd80      	pop	{r7, pc}
 8002ad6:	bf00      	nop
 8002ad8:	40010000 	.word	0x40010000
 8002adc:	40000400 	.word	0x40000400
 8002ae0:	40000800 	.word	0x40000800
 8002ae4:	40000c00 	.word	0x40000c00
 8002ae8:	40014000 	.word	0x40014000
 8002aec:	40014400 	.word	0x40014400
 8002af0:	40014800 	.word	0x40014800

08002af4 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 8002af4:	b480      	push	{r7}
 8002af6:	b083      	sub	sp, #12
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8002afc:	4a04      	ldr	r2, [pc, #16]	@ (8002b10 <LL_SetSystemCoreClock+0x1c>)
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	6013      	str	r3, [r2, #0]
}
 8002b02:	bf00      	nop
 8002b04:	370c      	adds	r7, #12
 8002b06:	46bd      	mov	sp, r7
 8002b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b0c:	4770      	bx	lr
 8002b0e:	bf00      	nop
 8002b10:	20000000 	.word	0x20000000

08002b14 <sniprintf>:
 8002b14:	b40c      	push	{r2, r3}
 8002b16:	b530      	push	{r4, r5, lr}
 8002b18:	4b18      	ldr	r3, [pc, #96]	@ (8002b7c <sniprintf+0x68>)
 8002b1a:	1e0c      	subs	r4, r1, #0
 8002b1c:	681d      	ldr	r5, [r3, #0]
 8002b1e:	b09d      	sub	sp, #116	@ 0x74
 8002b20:	da08      	bge.n	8002b34 <sniprintf+0x20>
 8002b22:	238b      	movs	r3, #139	@ 0x8b
 8002b24:	602b      	str	r3, [r5, #0]
 8002b26:	f04f 30ff 	mov.w	r0, #4294967295
 8002b2a:	b01d      	add	sp, #116	@ 0x74
 8002b2c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8002b30:	b002      	add	sp, #8
 8002b32:	4770      	bx	lr
 8002b34:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8002b38:	f8ad 3014 	strh.w	r3, [sp, #20]
 8002b3c:	f04f 0300 	mov.w	r3, #0
 8002b40:	931b      	str	r3, [sp, #108]	@ 0x6c
 8002b42:	bf14      	ite	ne
 8002b44:	f104 33ff 	addne.w	r3, r4, #4294967295
 8002b48:	4623      	moveq	r3, r4
 8002b4a:	9304      	str	r3, [sp, #16]
 8002b4c:	9307      	str	r3, [sp, #28]
 8002b4e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002b52:	9002      	str	r0, [sp, #8]
 8002b54:	9006      	str	r0, [sp, #24]
 8002b56:	f8ad 3016 	strh.w	r3, [sp, #22]
 8002b5a:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8002b5c:	ab21      	add	r3, sp, #132	@ 0x84
 8002b5e:	a902      	add	r1, sp, #8
 8002b60:	4628      	mov	r0, r5
 8002b62:	9301      	str	r3, [sp, #4]
 8002b64:	f000 f98c 	bl	8002e80 <_svfiprintf_r>
 8002b68:	1c43      	adds	r3, r0, #1
 8002b6a:	bfbc      	itt	lt
 8002b6c:	238b      	movlt	r3, #139	@ 0x8b
 8002b6e:	602b      	strlt	r3, [r5, #0]
 8002b70:	2c00      	cmp	r4, #0
 8002b72:	d0da      	beq.n	8002b2a <sniprintf+0x16>
 8002b74:	9b02      	ldr	r3, [sp, #8]
 8002b76:	2200      	movs	r2, #0
 8002b78:	701a      	strb	r2, [r3, #0]
 8002b7a:	e7d6      	b.n	8002b2a <sniprintf+0x16>
 8002b7c:	2000000c 	.word	0x2000000c

08002b80 <__errno>:
 8002b80:	4b01      	ldr	r3, [pc, #4]	@ (8002b88 <__errno+0x8>)
 8002b82:	6818      	ldr	r0, [r3, #0]
 8002b84:	4770      	bx	lr
 8002b86:	bf00      	nop
 8002b88:	2000000c 	.word	0x2000000c

08002b8c <__libc_init_array>:
 8002b8c:	b570      	push	{r4, r5, r6, lr}
 8002b8e:	4d0d      	ldr	r5, [pc, #52]	@ (8002bc4 <__libc_init_array+0x38>)
 8002b90:	4c0d      	ldr	r4, [pc, #52]	@ (8002bc8 <__libc_init_array+0x3c>)
 8002b92:	1b64      	subs	r4, r4, r5
 8002b94:	10a4      	asrs	r4, r4, #2
 8002b96:	2600      	movs	r6, #0
 8002b98:	42a6      	cmp	r6, r4
 8002b9a:	d109      	bne.n	8002bb0 <__libc_init_array+0x24>
 8002b9c:	4d0b      	ldr	r5, [pc, #44]	@ (8002bcc <__libc_init_array+0x40>)
 8002b9e:	4c0c      	ldr	r4, [pc, #48]	@ (8002bd0 <__libc_init_array+0x44>)
 8002ba0:	f000 fc64 	bl	800346c <_init>
 8002ba4:	1b64      	subs	r4, r4, r5
 8002ba6:	10a4      	asrs	r4, r4, #2
 8002ba8:	2600      	movs	r6, #0
 8002baa:	42a6      	cmp	r6, r4
 8002bac:	d105      	bne.n	8002bba <__libc_init_array+0x2e>
 8002bae:	bd70      	pop	{r4, r5, r6, pc}
 8002bb0:	f855 3b04 	ldr.w	r3, [r5], #4
 8002bb4:	4798      	blx	r3
 8002bb6:	3601      	adds	r6, #1
 8002bb8:	e7ee      	b.n	8002b98 <__libc_init_array+0xc>
 8002bba:	f855 3b04 	ldr.w	r3, [r5], #4
 8002bbe:	4798      	blx	r3
 8002bc0:	3601      	adds	r6, #1
 8002bc2:	e7f2      	b.n	8002baa <__libc_init_array+0x1e>
 8002bc4:	080034fc 	.word	0x080034fc
 8002bc8:	080034fc 	.word	0x080034fc
 8002bcc:	080034fc 	.word	0x080034fc
 8002bd0:	08003500 	.word	0x08003500

08002bd4 <__retarget_lock_acquire_recursive>:
 8002bd4:	4770      	bx	lr

08002bd6 <__retarget_lock_release_recursive>:
 8002bd6:	4770      	bx	lr

08002bd8 <_free_r>:
 8002bd8:	b538      	push	{r3, r4, r5, lr}
 8002bda:	4605      	mov	r5, r0
 8002bdc:	2900      	cmp	r1, #0
 8002bde:	d041      	beq.n	8002c64 <_free_r+0x8c>
 8002be0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002be4:	1f0c      	subs	r4, r1, #4
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	bfb8      	it	lt
 8002bea:	18e4      	addlt	r4, r4, r3
 8002bec:	f000 f8e0 	bl	8002db0 <__malloc_lock>
 8002bf0:	4a1d      	ldr	r2, [pc, #116]	@ (8002c68 <_free_r+0x90>)
 8002bf2:	6813      	ldr	r3, [r2, #0]
 8002bf4:	b933      	cbnz	r3, 8002c04 <_free_r+0x2c>
 8002bf6:	6063      	str	r3, [r4, #4]
 8002bf8:	6014      	str	r4, [r2, #0]
 8002bfa:	4628      	mov	r0, r5
 8002bfc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002c00:	f000 b8dc 	b.w	8002dbc <__malloc_unlock>
 8002c04:	42a3      	cmp	r3, r4
 8002c06:	d908      	bls.n	8002c1a <_free_r+0x42>
 8002c08:	6820      	ldr	r0, [r4, #0]
 8002c0a:	1821      	adds	r1, r4, r0
 8002c0c:	428b      	cmp	r3, r1
 8002c0e:	bf01      	itttt	eq
 8002c10:	6819      	ldreq	r1, [r3, #0]
 8002c12:	685b      	ldreq	r3, [r3, #4]
 8002c14:	1809      	addeq	r1, r1, r0
 8002c16:	6021      	streq	r1, [r4, #0]
 8002c18:	e7ed      	b.n	8002bf6 <_free_r+0x1e>
 8002c1a:	461a      	mov	r2, r3
 8002c1c:	685b      	ldr	r3, [r3, #4]
 8002c1e:	b10b      	cbz	r3, 8002c24 <_free_r+0x4c>
 8002c20:	42a3      	cmp	r3, r4
 8002c22:	d9fa      	bls.n	8002c1a <_free_r+0x42>
 8002c24:	6811      	ldr	r1, [r2, #0]
 8002c26:	1850      	adds	r0, r2, r1
 8002c28:	42a0      	cmp	r0, r4
 8002c2a:	d10b      	bne.n	8002c44 <_free_r+0x6c>
 8002c2c:	6820      	ldr	r0, [r4, #0]
 8002c2e:	4401      	add	r1, r0
 8002c30:	1850      	adds	r0, r2, r1
 8002c32:	4283      	cmp	r3, r0
 8002c34:	6011      	str	r1, [r2, #0]
 8002c36:	d1e0      	bne.n	8002bfa <_free_r+0x22>
 8002c38:	6818      	ldr	r0, [r3, #0]
 8002c3a:	685b      	ldr	r3, [r3, #4]
 8002c3c:	6053      	str	r3, [r2, #4]
 8002c3e:	4408      	add	r0, r1
 8002c40:	6010      	str	r0, [r2, #0]
 8002c42:	e7da      	b.n	8002bfa <_free_r+0x22>
 8002c44:	d902      	bls.n	8002c4c <_free_r+0x74>
 8002c46:	230c      	movs	r3, #12
 8002c48:	602b      	str	r3, [r5, #0]
 8002c4a:	e7d6      	b.n	8002bfa <_free_r+0x22>
 8002c4c:	6820      	ldr	r0, [r4, #0]
 8002c4e:	1821      	adds	r1, r4, r0
 8002c50:	428b      	cmp	r3, r1
 8002c52:	bf04      	itt	eq
 8002c54:	6819      	ldreq	r1, [r3, #0]
 8002c56:	685b      	ldreq	r3, [r3, #4]
 8002c58:	6063      	str	r3, [r4, #4]
 8002c5a:	bf04      	itt	eq
 8002c5c:	1809      	addeq	r1, r1, r0
 8002c5e:	6021      	streq	r1, [r4, #0]
 8002c60:	6054      	str	r4, [r2, #4]
 8002c62:	e7ca      	b.n	8002bfa <_free_r+0x22>
 8002c64:	bd38      	pop	{r3, r4, r5, pc}
 8002c66:	bf00      	nop
 8002c68:	2000021c 	.word	0x2000021c

08002c6c <sbrk_aligned>:
 8002c6c:	b570      	push	{r4, r5, r6, lr}
 8002c6e:	4e0f      	ldr	r6, [pc, #60]	@ (8002cac <sbrk_aligned+0x40>)
 8002c70:	460c      	mov	r4, r1
 8002c72:	6831      	ldr	r1, [r6, #0]
 8002c74:	4605      	mov	r5, r0
 8002c76:	b911      	cbnz	r1, 8002c7e <sbrk_aligned+0x12>
 8002c78:	f000 fba4 	bl	80033c4 <_sbrk_r>
 8002c7c:	6030      	str	r0, [r6, #0]
 8002c7e:	4621      	mov	r1, r4
 8002c80:	4628      	mov	r0, r5
 8002c82:	f000 fb9f 	bl	80033c4 <_sbrk_r>
 8002c86:	1c43      	adds	r3, r0, #1
 8002c88:	d103      	bne.n	8002c92 <sbrk_aligned+0x26>
 8002c8a:	f04f 34ff 	mov.w	r4, #4294967295
 8002c8e:	4620      	mov	r0, r4
 8002c90:	bd70      	pop	{r4, r5, r6, pc}
 8002c92:	1cc4      	adds	r4, r0, #3
 8002c94:	f024 0403 	bic.w	r4, r4, #3
 8002c98:	42a0      	cmp	r0, r4
 8002c9a:	d0f8      	beq.n	8002c8e <sbrk_aligned+0x22>
 8002c9c:	1a21      	subs	r1, r4, r0
 8002c9e:	4628      	mov	r0, r5
 8002ca0:	f000 fb90 	bl	80033c4 <_sbrk_r>
 8002ca4:	3001      	adds	r0, #1
 8002ca6:	d1f2      	bne.n	8002c8e <sbrk_aligned+0x22>
 8002ca8:	e7ef      	b.n	8002c8a <sbrk_aligned+0x1e>
 8002caa:	bf00      	nop
 8002cac:	20000218 	.word	0x20000218

08002cb0 <_malloc_r>:
 8002cb0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002cb4:	1ccd      	adds	r5, r1, #3
 8002cb6:	f025 0503 	bic.w	r5, r5, #3
 8002cba:	3508      	adds	r5, #8
 8002cbc:	2d0c      	cmp	r5, #12
 8002cbe:	bf38      	it	cc
 8002cc0:	250c      	movcc	r5, #12
 8002cc2:	2d00      	cmp	r5, #0
 8002cc4:	4606      	mov	r6, r0
 8002cc6:	db01      	blt.n	8002ccc <_malloc_r+0x1c>
 8002cc8:	42a9      	cmp	r1, r5
 8002cca:	d904      	bls.n	8002cd6 <_malloc_r+0x26>
 8002ccc:	230c      	movs	r3, #12
 8002cce:	6033      	str	r3, [r6, #0]
 8002cd0:	2000      	movs	r0, #0
 8002cd2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002cd6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8002dac <_malloc_r+0xfc>
 8002cda:	f000 f869 	bl	8002db0 <__malloc_lock>
 8002cde:	f8d8 3000 	ldr.w	r3, [r8]
 8002ce2:	461c      	mov	r4, r3
 8002ce4:	bb44      	cbnz	r4, 8002d38 <_malloc_r+0x88>
 8002ce6:	4629      	mov	r1, r5
 8002ce8:	4630      	mov	r0, r6
 8002cea:	f7ff ffbf 	bl	8002c6c <sbrk_aligned>
 8002cee:	1c43      	adds	r3, r0, #1
 8002cf0:	4604      	mov	r4, r0
 8002cf2:	d158      	bne.n	8002da6 <_malloc_r+0xf6>
 8002cf4:	f8d8 4000 	ldr.w	r4, [r8]
 8002cf8:	4627      	mov	r7, r4
 8002cfa:	2f00      	cmp	r7, #0
 8002cfc:	d143      	bne.n	8002d86 <_malloc_r+0xd6>
 8002cfe:	2c00      	cmp	r4, #0
 8002d00:	d04b      	beq.n	8002d9a <_malloc_r+0xea>
 8002d02:	6823      	ldr	r3, [r4, #0]
 8002d04:	4639      	mov	r1, r7
 8002d06:	4630      	mov	r0, r6
 8002d08:	eb04 0903 	add.w	r9, r4, r3
 8002d0c:	f000 fb5a 	bl	80033c4 <_sbrk_r>
 8002d10:	4581      	cmp	r9, r0
 8002d12:	d142      	bne.n	8002d9a <_malloc_r+0xea>
 8002d14:	6821      	ldr	r1, [r4, #0]
 8002d16:	1a6d      	subs	r5, r5, r1
 8002d18:	4629      	mov	r1, r5
 8002d1a:	4630      	mov	r0, r6
 8002d1c:	f7ff ffa6 	bl	8002c6c <sbrk_aligned>
 8002d20:	3001      	adds	r0, #1
 8002d22:	d03a      	beq.n	8002d9a <_malloc_r+0xea>
 8002d24:	6823      	ldr	r3, [r4, #0]
 8002d26:	442b      	add	r3, r5
 8002d28:	6023      	str	r3, [r4, #0]
 8002d2a:	f8d8 3000 	ldr.w	r3, [r8]
 8002d2e:	685a      	ldr	r2, [r3, #4]
 8002d30:	bb62      	cbnz	r2, 8002d8c <_malloc_r+0xdc>
 8002d32:	f8c8 7000 	str.w	r7, [r8]
 8002d36:	e00f      	b.n	8002d58 <_malloc_r+0xa8>
 8002d38:	6822      	ldr	r2, [r4, #0]
 8002d3a:	1b52      	subs	r2, r2, r5
 8002d3c:	d420      	bmi.n	8002d80 <_malloc_r+0xd0>
 8002d3e:	2a0b      	cmp	r2, #11
 8002d40:	d917      	bls.n	8002d72 <_malloc_r+0xc2>
 8002d42:	1961      	adds	r1, r4, r5
 8002d44:	42a3      	cmp	r3, r4
 8002d46:	6025      	str	r5, [r4, #0]
 8002d48:	bf18      	it	ne
 8002d4a:	6059      	strne	r1, [r3, #4]
 8002d4c:	6863      	ldr	r3, [r4, #4]
 8002d4e:	bf08      	it	eq
 8002d50:	f8c8 1000 	streq.w	r1, [r8]
 8002d54:	5162      	str	r2, [r4, r5]
 8002d56:	604b      	str	r3, [r1, #4]
 8002d58:	4630      	mov	r0, r6
 8002d5a:	f000 f82f 	bl	8002dbc <__malloc_unlock>
 8002d5e:	f104 000b 	add.w	r0, r4, #11
 8002d62:	1d23      	adds	r3, r4, #4
 8002d64:	f020 0007 	bic.w	r0, r0, #7
 8002d68:	1ac2      	subs	r2, r0, r3
 8002d6a:	bf1c      	itt	ne
 8002d6c:	1a1b      	subne	r3, r3, r0
 8002d6e:	50a3      	strne	r3, [r4, r2]
 8002d70:	e7af      	b.n	8002cd2 <_malloc_r+0x22>
 8002d72:	6862      	ldr	r2, [r4, #4]
 8002d74:	42a3      	cmp	r3, r4
 8002d76:	bf0c      	ite	eq
 8002d78:	f8c8 2000 	streq.w	r2, [r8]
 8002d7c:	605a      	strne	r2, [r3, #4]
 8002d7e:	e7eb      	b.n	8002d58 <_malloc_r+0xa8>
 8002d80:	4623      	mov	r3, r4
 8002d82:	6864      	ldr	r4, [r4, #4]
 8002d84:	e7ae      	b.n	8002ce4 <_malloc_r+0x34>
 8002d86:	463c      	mov	r4, r7
 8002d88:	687f      	ldr	r7, [r7, #4]
 8002d8a:	e7b6      	b.n	8002cfa <_malloc_r+0x4a>
 8002d8c:	461a      	mov	r2, r3
 8002d8e:	685b      	ldr	r3, [r3, #4]
 8002d90:	42a3      	cmp	r3, r4
 8002d92:	d1fb      	bne.n	8002d8c <_malloc_r+0xdc>
 8002d94:	2300      	movs	r3, #0
 8002d96:	6053      	str	r3, [r2, #4]
 8002d98:	e7de      	b.n	8002d58 <_malloc_r+0xa8>
 8002d9a:	230c      	movs	r3, #12
 8002d9c:	6033      	str	r3, [r6, #0]
 8002d9e:	4630      	mov	r0, r6
 8002da0:	f000 f80c 	bl	8002dbc <__malloc_unlock>
 8002da4:	e794      	b.n	8002cd0 <_malloc_r+0x20>
 8002da6:	6005      	str	r5, [r0, #0]
 8002da8:	e7d6      	b.n	8002d58 <_malloc_r+0xa8>
 8002daa:	bf00      	nop
 8002dac:	2000021c 	.word	0x2000021c

08002db0 <__malloc_lock>:
 8002db0:	4801      	ldr	r0, [pc, #4]	@ (8002db8 <__malloc_lock+0x8>)
 8002db2:	f7ff bf0f 	b.w	8002bd4 <__retarget_lock_acquire_recursive>
 8002db6:	bf00      	nop
 8002db8:	20000214 	.word	0x20000214

08002dbc <__malloc_unlock>:
 8002dbc:	4801      	ldr	r0, [pc, #4]	@ (8002dc4 <__malloc_unlock+0x8>)
 8002dbe:	f7ff bf0a 	b.w	8002bd6 <__retarget_lock_release_recursive>
 8002dc2:	bf00      	nop
 8002dc4:	20000214 	.word	0x20000214

08002dc8 <__ssputs_r>:
 8002dc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002dcc:	688e      	ldr	r6, [r1, #8]
 8002dce:	461f      	mov	r7, r3
 8002dd0:	42be      	cmp	r6, r7
 8002dd2:	680b      	ldr	r3, [r1, #0]
 8002dd4:	4682      	mov	sl, r0
 8002dd6:	460c      	mov	r4, r1
 8002dd8:	4690      	mov	r8, r2
 8002dda:	d82d      	bhi.n	8002e38 <__ssputs_r+0x70>
 8002ddc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8002de0:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8002de4:	d026      	beq.n	8002e34 <__ssputs_r+0x6c>
 8002de6:	6965      	ldr	r5, [r4, #20]
 8002de8:	6909      	ldr	r1, [r1, #16]
 8002dea:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002dee:	eba3 0901 	sub.w	r9, r3, r1
 8002df2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8002df6:	1c7b      	adds	r3, r7, #1
 8002df8:	444b      	add	r3, r9
 8002dfa:	106d      	asrs	r5, r5, #1
 8002dfc:	429d      	cmp	r5, r3
 8002dfe:	bf38      	it	cc
 8002e00:	461d      	movcc	r5, r3
 8002e02:	0553      	lsls	r3, r2, #21
 8002e04:	d527      	bpl.n	8002e56 <__ssputs_r+0x8e>
 8002e06:	4629      	mov	r1, r5
 8002e08:	f7ff ff52 	bl	8002cb0 <_malloc_r>
 8002e0c:	4606      	mov	r6, r0
 8002e0e:	b360      	cbz	r0, 8002e6a <__ssputs_r+0xa2>
 8002e10:	6921      	ldr	r1, [r4, #16]
 8002e12:	464a      	mov	r2, r9
 8002e14:	f000 fae6 	bl	80033e4 <memcpy>
 8002e18:	89a3      	ldrh	r3, [r4, #12]
 8002e1a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8002e1e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002e22:	81a3      	strh	r3, [r4, #12]
 8002e24:	6126      	str	r6, [r4, #16]
 8002e26:	6165      	str	r5, [r4, #20]
 8002e28:	444e      	add	r6, r9
 8002e2a:	eba5 0509 	sub.w	r5, r5, r9
 8002e2e:	6026      	str	r6, [r4, #0]
 8002e30:	60a5      	str	r5, [r4, #8]
 8002e32:	463e      	mov	r6, r7
 8002e34:	42be      	cmp	r6, r7
 8002e36:	d900      	bls.n	8002e3a <__ssputs_r+0x72>
 8002e38:	463e      	mov	r6, r7
 8002e3a:	6820      	ldr	r0, [r4, #0]
 8002e3c:	4632      	mov	r2, r6
 8002e3e:	4641      	mov	r1, r8
 8002e40:	f000 faa6 	bl	8003390 <memmove>
 8002e44:	68a3      	ldr	r3, [r4, #8]
 8002e46:	1b9b      	subs	r3, r3, r6
 8002e48:	60a3      	str	r3, [r4, #8]
 8002e4a:	6823      	ldr	r3, [r4, #0]
 8002e4c:	4433      	add	r3, r6
 8002e4e:	6023      	str	r3, [r4, #0]
 8002e50:	2000      	movs	r0, #0
 8002e52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002e56:	462a      	mov	r2, r5
 8002e58:	f000 fad2 	bl	8003400 <_realloc_r>
 8002e5c:	4606      	mov	r6, r0
 8002e5e:	2800      	cmp	r0, #0
 8002e60:	d1e0      	bne.n	8002e24 <__ssputs_r+0x5c>
 8002e62:	6921      	ldr	r1, [r4, #16]
 8002e64:	4650      	mov	r0, sl
 8002e66:	f7ff feb7 	bl	8002bd8 <_free_r>
 8002e6a:	230c      	movs	r3, #12
 8002e6c:	f8ca 3000 	str.w	r3, [sl]
 8002e70:	89a3      	ldrh	r3, [r4, #12]
 8002e72:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002e76:	81a3      	strh	r3, [r4, #12]
 8002e78:	f04f 30ff 	mov.w	r0, #4294967295
 8002e7c:	e7e9      	b.n	8002e52 <__ssputs_r+0x8a>
	...

08002e80 <_svfiprintf_r>:
 8002e80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002e84:	4698      	mov	r8, r3
 8002e86:	898b      	ldrh	r3, [r1, #12]
 8002e88:	061b      	lsls	r3, r3, #24
 8002e8a:	b09d      	sub	sp, #116	@ 0x74
 8002e8c:	4607      	mov	r7, r0
 8002e8e:	460d      	mov	r5, r1
 8002e90:	4614      	mov	r4, r2
 8002e92:	d510      	bpl.n	8002eb6 <_svfiprintf_r+0x36>
 8002e94:	690b      	ldr	r3, [r1, #16]
 8002e96:	b973      	cbnz	r3, 8002eb6 <_svfiprintf_r+0x36>
 8002e98:	2140      	movs	r1, #64	@ 0x40
 8002e9a:	f7ff ff09 	bl	8002cb0 <_malloc_r>
 8002e9e:	6028      	str	r0, [r5, #0]
 8002ea0:	6128      	str	r0, [r5, #16]
 8002ea2:	b930      	cbnz	r0, 8002eb2 <_svfiprintf_r+0x32>
 8002ea4:	230c      	movs	r3, #12
 8002ea6:	603b      	str	r3, [r7, #0]
 8002ea8:	f04f 30ff 	mov.w	r0, #4294967295
 8002eac:	b01d      	add	sp, #116	@ 0x74
 8002eae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002eb2:	2340      	movs	r3, #64	@ 0x40
 8002eb4:	616b      	str	r3, [r5, #20]
 8002eb6:	2300      	movs	r3, #0
 8002eb8:	9309      	str	r3, [sp, #36]	@ 0x24
 8002eba:	2320      	movs	r3, #32
 8002ebc:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8002ec0:	f8cd 800c 	str.w	r8, [sp, #12]
 8002ec4:	2330      	movs	r3, #48	@ 0x30
 8002ec6:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8003064 <_svfiprintf_r+0x1e4>
 8002eca:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8002ece:	f04f 0901 	mov.w	r9, #1
 8002ed2:	4623      	mov	r3, r4
 8002ed4:	469a      	mov	sl, r3
 8002ed6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002eda:	b10a      	cbz	r2, 8002ee0 <_svfiprintf_r+0x60>
 8002edc:	2a25      	cmp	r2, #37	@ 0x25
 8002ede:	d1f9      	bne.n	8002ed4 <_svfiprintf_r+0x54>
 8002ee0:	ebba 0b04 	subs.w	fp, sl, r4
 8002ee4:	d00b      	beq.n	8002efe <_svfiprintf_r+0x7e>
 8002ee6:	465b      	mov	r3, fp
 8002ee8:	4622      	mov	r2, r4
 8002eea:	4629      	mov	r1, r5
 8002eec:	4638      	mov	r0, r7
 8002eee:	f7ff ff6b 	bl	8002dc8 <__ssputs_r>
 8002ef2:	3001      	adds	r0, #1
 8002ef4:	f000 80a7 	beq.w	8003046 <_svfiprintf_r+0x1c6>
 8002ef8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8002efa:	445a      	add	r2, fp
 8002efc:	9209      	str	r2, [sp, #36]	@ 0x24
 8002efe:	f89a 3000 	ldrb.w	r3, [sl]
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	f000 809f 	beq.w	8003046 <_svfiprintf_r+0x1c6>
 8002f08:	2300      	movs	r3, #0
 8002f0a:	f04f 32ff 	mov.w	r2, #4294967295
 8002f0e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002f12:	f10a 0a01 	add.w	sl, sl, #1
 8002f16:	9304      	str	r3, [sp, #16]
 8002f18:	9307      	str	r3, [sp, #28]
 8002f1a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8002f1e:	931a      	str	r3, [sp, #104]	@ 0x68
 8002f20:	4654      	mov	r4, sl
 8002f22:	2205      	movs	r2, #5
 8002f24:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002f28:	484e      	ldr	r0, [pc, #312]	@ (8003064 <_svfiprintf_r+0x1e4>)
 8002f2a:	f7fd f961 	bl	80001f0 <memchr>
 8002f2e:	9a04      	ldr	r2, [sp, #16]
 8002f30:	b9d8      	cbnz	r0, 8002f6a <_svfiprintf_r+0xea>
 8002f32:	06d0      	lsls	r0, r2, #27
 8002f34:	bf44      	itt	mi
 8002f36:	2320      	movmi	r3, #32
 8002f38:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8002f3c:	0711      	lsls	r1, r2, #28
 8002f3e:	bf44      	itt	mi
 8002f40:	232b      	movmi	r3, #43	@ 0x2b
 8002f42:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8002f46:	f89a 3000 	ldrb.w	r3, [sl]
 8002f4a:	2b2a      	cmp	r3, #42	@ 0x2a
 8002f4c:	d015      	beq.n	8002f7a <_svfiprintf_r+0xfa>
 8002f4e:	9a07      	ldr	r2, [sp, #28]
 8002f50:	4654      	mov	r4, sl
 8002f52:	2000      	movs	r0, #0
 8002f54:	f04f 0c0a 	mov.w	ip, #10
 8002f58:	4621      	mov	r1, r4
 8002f5a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002f5e:	3b30      	subs	r3, #48	@ 0x30
 8002f60:	2b09      	cmp	r3, #9
 8002f62:	d94b      	bls.n	8002ffc <_svfiprintf_r+0x17c>
 8002f64:	b1b0      	cbz	r0, 8002f94 <_svfiprintf_r+0x114>
 8002f66:	9207      	str	r2, [sp, #28]
 8002f68:	e014      	b.n	8002f94 <_svfiprintf_r+0x114>
 8002f6a:	eba0 0308 	sub.w	r3, r0, r8
 8002f6e:	fa09 f303 	lsl.w	r3, r9, r3
 8002f72:	4313      	orrs	r3, r2
 8002f74:	9304      	str	r3, [sp, #16]
 8002f76:	46a2      	mov	sl, r4
 8002f78:	e7d2      	b.n	8002f20 <_svfiprintf_r+0xa0>
 8002f7a:	9b03      	ldr	r3, [sp, #12]
 8002f7c:	1d19      	adds	r1, r3, #4
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	9103      	str	r1, [sp, #12]
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	bfbb      	ittet	lt
 8002f86:	425b      	neglt	r3, r3
 8002f88:	f042 0202 	orrlt.w	r2, r2, #2
 8002f8c:	9307      	strge	r3, [sp, #28]
 8002f8e:	9307      	strlt	r3, [sp, #28]
 8002f90:	bfb8      	it	lt
 8002f92:	9204      	strlt	r2, [sp, #16]
 8002f94:	7823      	ldrb	r3, [r4, #0]
 8002f96:	2b2e      	cmp	r3, #46	@ 0x2e
 8002f98:	d10a      	bne.n	8002fb0 <_svfiprintf_r+0x130>
 8002f9a:	7863      	ldrb	r3, [r4, #1]
 8002f9c:	2b2a      	cmp	r3, #42	@ 0x2a
 8002f9e:	d132      	bne.n	8003006 <_svfiprintf_r+0x186>
 8002fa0:	9b03      	ldr	r3, [sp, #12]
 8002fa2:	1d1a      	adds	r2, r3, #4
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	9203      	str	r2, [sp, #12]
 8002fa8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8002fac:	3402      	adds	r4, #2
 8002fae:	9305      	str	r3, [sp, #20]
 8002fb0:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8003074 <_svfiprintf_r+0x1f4>
 8002fb4:	7821      	ldrb	r1, [r4, #0]
 8002fb6:	2203      	movs	r2, #3
 8002fb8:	4650      	mov	r0, sl
 8002fba:	f7fd f919 	bl	80001f0 <memchr>
 8002fbe:	b138      	cbz	r0, 8002fd0 <_svfiprintf_r+0x150>
 8002fc0:	9b04      	ldr	r3, [sp, #16]
 8002fc2:	eba0 000a 	sub.w	r0, r0, sl
 8002fc6:	2240      	movs	r2, #64	@ 0x40
 8002fc8:	4082      	lsls	r2, r0
 8002fca:	4313      	orrs	r3, r2
 8002fcc:	3401      	adds	r4, #1
 8002fce:	9304      	str	r3, [sp, #16]
 8002fd0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002fd4:	4824      	ldr	r0, [pc, #144]	@ (8003068 <_svfiprintf_r+0x1e8>)
 8002fd6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8002fda:	2206      	movs	r2, #6
 8002fdc:	f7fd f908 	bl	80001f0 <memchr>
 8002fe0:	2800      	cmp	r0, #0
 8002fe2:	d036      	beq.n	8003052 <_svfiprintf_r+0x1d2>
 8002fe4:	4b21      	ldr	r3, [pc, #132]	@ (800306c <_svfiprintf_r+0x1ec>)
 8002fe6:	bb1b      	cbnz	r3, 8003030 <_svfiprintf_r+0x1b0>
 8002fe8:	9b03      	ldr	r3, [sp, #12]
 8002fea:	3307      	adds	r3, #7
 8002fec:	f023 0307 	bic.w	r3, r3, #7
 8002ff0:	3308      	adds	r3, #8
 8002ff2:	9303      	str	r3, [sp, #12]
 8002ff4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8002ff6:	4433      	add	r3, r6
 8002ff8:	9309      	str	r3, [sp, #36]	@ 0x24
 8002ffa:	e76a      	b.n	8002ed2 <_svfiprintf_r+0x52>
 8002ffc:	fb0c 3202 	mla	r2, ip, r2, r3
 8003000:	460c      	mov	r4, r1
 8003002:	2001      	movs	r0, #1
 8003004:	e7a8      	b.n	8002f58 <_svfiprintf_r+0xd8>
 8003006:	2300      	movs	r3, #0
 8003008:	3401      	adds	r4, #1
 800300a:	9305      	str	r3, [sp, #20]
 800300c:	4619      	mov	r1, r3
 800300e:	f04f 0c0a 	mov.w	ip, #10
 8003012:	4620      	mov	r0, r4
 8003014:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003018:	3a30      	subs	r2, #48	@ 0x30
 800301a:	2a09      	cmp	r2, #9
 800301c:	d903      	bls.n	8003026 <_svfiprintf_r+0x1a6>
 800301e:	2b00      	cmp	r3, #0
 8003020:	d0c6      	beq.n	8002fb0 <_svfiprintf_r+0x130>
 8003022:	9105      	str	r1, [sp, #20]
 8003024:	e7c4      	b.n	8002fb0 <_svfiprintf_r+0x130>
 8003026:	fb0c 2101 	mla	r1, ip, r1, r2
 800302a:	4604      	mov	r4, r0
 800302c:	2301      	movs	r3, #1
 800302e:	e7f0      	b.n	8003012 <_svfiprintf_r+0x192>
 8003030:	ab03      	add	r3, sp, #12
 8003032:	9300      	str	r3, [sp, #0]
 8003034:	462a      	mov	r2, r5
 8003036:	4b0e      	ldr	r3, [pc, #56]	@ (8003070 <_svfiprintf_r+0x1f0>)
 8003038:	a904      	add	r1, sp, #16
 800303a:	4638      	mov	r0, r7
 800303c:	f3af 8000 	nop.w
 8003040:	1c42      	adds	r2, r0, #1
 8003042:	4606      	mov	r6, r0
 8003044:	d1d6      	bne.n	8002ff4 <_svfiprintf_r+0x174>
 8003046:	89ab      	ldrh	r3, [r5, #12]
 8003048:	065b      	lsls	r3, r3, #25
 800304a:	f53f af2d 	bmi.w	8002ea8 <_svfiprintf_r+0x28>
 800304e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8003050:	e72c      	b.n	8002eac <_svfiprintf_r+0x2c>
 8003052:	ab03      	add	r3, sp, #12
 8003054:	9300      	str	r3, [sp, #0]
 8003056:	462a      	mov	r2, r5
 8003058:	4b05      	ldr	r3, [pc, #20]	@ (8003070 <_svfiprintf_r+0x1f0>)
 800305a:	a904      	add	r1, sp, #16
 800305c:	4638      	mov	r0, r7
 800305e:	f000 f879 	bl	8003154 <_printf_i>
 8003062:	e7ed      	b.n	8003040 <_svfiprintf_r+0x1c0>
 8003064:	080034c0 	.word	0x080034c0
 8003068:	080034ca 	.word	0x080034ca
 800306c:	00000000 	.word	0x00000000
 8003070:	08002dc9 	.word	0x08002dc9
 8003074:	080034c6 	.word	0x080034c6

08003078 <_printf_common>:
 8003078:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800307c:	4616      	mov	r6, r2
 800307e:	4698      	mov	r8, r3
 8003080:	688a      	ldr	r2, [r1, #8]
 8003082:	690b      	ldr	r3, [r1, #16]
 8003084:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003088:	4293      	cmp	r3, r2
 800308a:	bfb8      	it	lt
 800308c:	4613      	movlt	r3, r2
 800308e:	6033      	str	r3, [r6, #0]
 8003090:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8003094:	4607      	mov	r7, r0
 8003096:	460c      	mov	r4, r1
 8003098:	b10a      	cbz	r2, 800309e <_printf_common+0x26>
 800309a:	3301      	adds	r3, #1
 800309c:	6033      	str	r3, [r6, #0]
 800309e:	6823      	ldr	r3, [r4, #0]
 80030a0:	0699      	lsls	r1, r3, #26
 80030a2:	bf42      	ittt	mi
 80030a4:	6833      	ldrmi	r3, [r6, #0]
 80030a6:	3302      	addmi	r3, #2
 80030a8:	6033      	strmi	r3, [r6, #0]
 80030aa:	6825      	ldr	r5, [r4, #0]
 80030ac:	f015 0506 	ands.w	r5, r5, #6
 80030b0:	d106      	bne.n	80030c0 <_printf_common+0x48>
 80030b2:	f104 0a19 	add.w	sl, r4, #25
 80030b6:	68e3      	ldr	r3, [r4, #12]
 80030b8:	6832      	ldr	r2, [r6, #0]
 80030ba:	1a9b      	subs	r3, r3, r2
 80030bc:	42ab      	cmp	r3, r5
 80030be:	dc26      	bgt.n	800310e <_printf_common+0x96>
 80030c0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80030c4:	6822      	ldr	r2, [r4, #0]
 80030c6:	3b00      	subs	r3, #0
 80030c8:	bf18      	it	ne
 80030ca:	2301      	movne	r3, #1
 80030cc:	0692      	lsls	r2, r2, #26
 80030ce:	d42b      	bmi.n	8003128 <_printf_common+0xb0>
 80030d0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80030d4:	4641      	mov	r1, r8
 80030d6:	4638      	mov	r0, r7
 80030d8:	47c8      	blx	r9
 80030da:	3001      	adds	r0, #1
 80030dc:	d01e      	beq.n	800311c <_printf_common+0xa4>
 80030de:	6823      	ldr	r3, [r4, #0]
 80030e0:	6922      	ldr	r2, [r4, #16]
 80030e2:	f003 0306 	and.w	r3, r3, #6
 80030e6:	2b04      	cmp	r3, #4
 80030e8:	bf02      	ittt	eq
 80030ea:	68e5      	ldreq	r5, [r4, #12]
 80030ec:	6833      	ldreq	r3, [r6, #0]
 80030ee:	1aed      	subeq	r5, r5, r3
 80030f0:	68a3      	ldr	r3, [r4, #8]
 80030f2:	bf0c      	ite	eq
 80030f4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80030f8:	2500      	movne	r5, #0
 80030fa:	4293      	cmp	r3, r2
 80030fc:	bfc4      	itt	gt
 80030fe:	1a9b      	subgt	r3, r3, r2
 8003100:	18ed      	addgt	r5, r5, r3
 8003102:	2600      	movs	r6, #0
 8003104:	341a      	adds	r4, #26
 8003106:	42b5      	cmp	r5, r6
 8003108:	d11a      	bne.n	8003140 <_printf_common+0xc8>
 800310a:	2000      	movs	r0, #0
 800310c:	e008      	b.n	8003120 <_printf_common+0xa8>
 800310e:	2301      	movs	r3, #1
 8003110:	4652      	mov	r2, sl
 8003112:	4641      	mov	r1, r8
 8003114:	4638      	mov	r0, r7
 8003116:	47c8      	blx	r9
 8003118:	3001      	adds	r0, #1
 800311a:	d103      	bne.n	8003124 <_printf_common+0xac>
 800311c:	f04f 30ff 	mov.w	r0, #4294967295
 8003120:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003124:	3501      	adds	r5, #1
 8003126:	e7c6      	b.n	80030b6 <_printf_common+0x3e>
 8003128:	18e1      	adds	r1, r4, r3
 800312a:	1c5a      	adds	r2, r3, #1
 800312c:	2030      	movs	r0, #48	@ 0x30
 800312e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8003132:	4422      	add	r2, r4
 8003134:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8003138:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800313c:	3302      	adds	r3, #2
 800313e:	e7c7      	b.n	80030d0 <_printf_common+0x58>
 8003140:	2301      	movs	r3, #1
 8003142:	4622      	mov	r2, r4
 8003144:	4641      	mov	r1, r8
 8003146:	4638      	mov	r0, r7
 8003148:	47c8      	blx	r9
 800314a:	3001      	adds	r0, #1
 800314c:	d0e6      	beq.n	800311c <_printf_common+0xa4>
 800314e:	3601      	adds	r6, #1
 8003150:	e7d9      	b.n	8003106 <_printf_common+0x8e>
	...

08003154 <_printf_i>:
 8003154:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003158:	7e0f      	ldrb	r7, [r1, #24]
 800315a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800315c:	2f78      	cmp	r7, #120	@ 0x78
 800315e:	4691      	mov	r9, r2
 8003160:	4680      	mov	r8, r0
 8003162:	460c      	mov	r4, r1
 8003164:	469a      	mov	sl, r3
 8003166:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800316a:	d807      	bhi.n	800317c <_printf_i+0x28>
 800316c:	2f62      	cmp	r7, #98	@ 0x62
 800316e:	d80a      	bhi.n	8003186 <_printf_i+0x32>
 8003170:	2f00      	cmp	r7, #0
 8003172:	f000 80d1 	beq.w	8003318 <_printf_i+0x1c4>
 8003176:	2f58      	cmp	r7, #88	@ 0x58
 8003178:	f000 80b8 	beq.w	80032ec <_printf_i+0x198>
 800317c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003180:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8003184:	e03a      	b.n	80031fc <_printf_i+0xa8>
 8003186:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800318a:	2b15      	cmp	r3, #21
 800318c:	d8f6      	bhi.n	800317c <_printf_i+0x28>
 800318e:	a101      	add	r1, pc, #4	@ (adr r1, 8003194 <_printf_i+0x40>)
 8003190:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003194:	080031ed 	.word	0x080031ed
 8003198:	08003201 	.word	0x08003201
 800319c:	0800317d 	.word	0x0800317d
 80031a0:	0800317d 	.word	0x0800317d
 80031a4:	0800317d 	.word	0x0800317d
 80031a8:	0800317d 	.word	0x0800317d
 80031ac:	08003201 	.word	0x08003201
 80031b0:	0800317d 	.word	0x0800317d
 80031b4:	0800317d 	.word	0x0800317d
 80031b8:	0800317d 	.word	0x0800317d
 80031bc:	0800317d 	.word	0x0800317d
 80031c0:	080032ff 	.word	0x080032ff
 80031c4:	0800322b 	.word	0x0800322b
 80031c8:	080032b9 	.word	0x080032b9
 80031cc:	0800317d 	.word	0x0800317d
 80031d0:	0800317d 	.word	0x0800317d
 80031d4:	08003321 	.word	0x08003321
 80031d8:	0800317d 	.word	0x0800317d
 80031dc:	0800322b 	.word	0x0800322b
 80031e0:	0800317d 	.word	0x0800317d
 80031e4:	0800317d 	.word	0x0800317d
 80031e8:	080032c1 	.word	0x080032c1
 80031ec:	6833      	ldr	r3, [r6, #0]
 80031ee:	1d1a      	adds	r2, r3, #4
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	6032      	str	r2, [r6, #0]
 80031f4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80031f8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80031fc:	2301      	movs	r3, #1
 80031fe:	e09c      	b.n	800333a <_printf_i+0x1e6>
 8003200:	6833      	ldr	r3, [r6, #0]
 8003202:	6820      	ldr	r0, [r4, #0]
 8003204:	1d19      	adds	r1, r3, #4
 8003206:	6031      	str	r1, [r6, #0]
 8003208:	0606      	lsls	r6, r0, #24
 800320a:	d501      	bpl.n	8003210 <_printf_i+0xbc>
 800320c:	681d      	ldr	r5, [r3, #0]
 800320e:	e003      	b.n	8003218 <_printf_i+0xc4>
 8003210:	0645      	lsls	r5, r0, #25
 8003212:	d5fb      	bpl.n	800320c <_printf_i+0xb8>
 8003214:	f9b3 5000 	ldrsh.w	r5, [r3]
 8003218:	2d00      	cmp	r5, #0
 800321a:	da03      	bge.n	8003224 <_printf_i+0xd0>
 800321c:	232d      	movs	r3, #45	@ 0x2d
 800321e:	426d      	negs	r5, r5
 8003220:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003224:	4858      	ldr	r0, [pc, #352]	@ (8003388 <_printf_i+0x234>)
 8003226:	230a      	movs	r3, #10
 8003228:	e011      	b.n	800324e <_printf_i+0xfa>
 800322a:	6821      	ldr	r1, [r4, #0]
 800322c:	6833      	ldr	r3, [r6, #0]
 800322e:	0608      	lsls	r0, r1, #24
 8003230:	f853 5b04 	ldr.w	r5, [r3], #4
 8003234:	d402      	bmi.n	800323c <_printf_i+0xe8>
 8003236:	0649      	lsls	r1, r1, #25
 8003238:	bf48      	it	mi
 800323a:	b2ad      	uxthmi	r5, r5
 800323c:	2f6f      	cmp	r7, #111	@ 0x6f
 800323e:	4852      	ldr	r0, [pc, #328]	@ (8003388 <_printf_i+0x234>)
 8003240:	6033      	str	r3, [r6, #0]
 8003242:	bf14      	ite	ne
 8003244:	230a      	movne	r3, #10
 8003246:	2308      	moveq	r3, #8
 8003248:	2100      	movs	r1, #0
 800324a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800324e:	6866      	ldr	r6, [r4, #4]
 8003250:	60a6      	str	r6, [r4, #8]
 8003252:	2e00      	cmp	r6, #0
 8003254:	db05      	blt.n	8003262 <_printf_i+0x10e>
 8003256:	6821      	ldr	r1, [r4, #0]
 8003258:	432e      	orrs	r6, r5
 800325a:	f021 0104 	bic.w	r1, r1, #4
 800325e:	6021      	str	r1, [r4, #0]
 8003260:	d04b      	beq.n	80032fa <_printf_i+0x1a6>
 8003262:	4616      	mov	r6, r2
 8003264:	fbb5 f1f3 	udiv	r1, r5, r3
 8003268:	fb03 5711 	mls	r7, r3, r1, r5
 800326c:	5dc7      	ldrb	r7, [r0, r7]
 800326e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003272:	462f      	mov	r7, r5
 8003274:	42bb      	cmp	r3, r7
 8003276:	460d      	mov	r5, r1
 8003278:	d9f4      	bls.n	8003264 <_printf_i+0x110>
 800327a:	2b08      	cmp	r3, #8
 800327c:	d10b      	bne.n	8003296 <_printf_i+0x142>
 800327e:	6823      	ldr	r3, [r4, #0]
 8003280:	07df      	lsls	r7, r3, #31
 8003282:	d508      	bpl.n	8003296 <_printf_i+0x142>
 8003284:	6923      	ldr	r3, [r4, #16]
 8003286:	6861      	ldr	r1, [r4, #4]
 8003288:	4299      	cmp	r1, r3
 800328a:	bfde      	ittt	le
 800328c:	2330      	movle	r3, #48	@ 0x30
 800328e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003292:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003296:	1b92      	subs	r2, r2, r6
 8003298:	6122      	str	r2, [r4, #16]
 800329a:	f8cd a000 	str.w	sl, [sp]
 800329e:	464b      	mov	r3, r9
 80032a0:	aa03      	add	r2, sp, #12
 80032a2:	4621      	mov	r1, r4
 80032a4:	4640      	mov	r0, r8
 80032a6:	f7ff fee7 	bl	8003078 <_printf_common>
 80032aa:	3001      	adds	r0, #1
 80032ac:	d14a      	bne.n	8003344 <_printf_i+0x1f0>
 80032ae:	f04f 30ff 	mov.w	r0, #4294967295
 80032b2:	b004      	add	sp, #16
 80032b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80032b8:	6823      	ldr	r3, [r4, #0]
 80032ba:	f043 0320 	orr.w	r3, r3, #32
 80032be:	6023      	str	r3, [r4, #0]
 80032c0:	4832      	ldr	r0, [pc, #200]	@ (800338c <_printf_i+0x238>)
 80032c2:	2778      	movs	r7, #120	@ 0x78
 80032c4:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80032c8:	6823      	ldr	r3, [r4, #0]
 80032ca:	6831      	ldr	r1, [r6, #0]
 80032cc:	061f      	lsls	r7, r3, #24
 80032ce:	f851 5b04 	ldr.w	r5, [r1], #4
 80032d2:	d402      	bmi.n	80032da <_printf_i+0x186>
 80032d4:	065f      	lsls	r7, r3, #25
 80032d6:	bf48      	it	mi
 80032d8:	b2ad      	uxthmi	r5, r5
 80032da:	6031      	str	r1, [r6, #0]
 80032dc:	07d9      	lsls	r1, r3, #31
 80032de:	bf44      	itt	mi
 80032e0:	f043 0320 	orrmi.w	r3, r3, #32
 80032e4:	6023      	strmi	r3, [r4, #0]
 80032e6:	b11d      	cbz	r5, 80032f0 <_printf_i+0x19c>
 80032e8:	2310      	movs	r3, #16
 80032ea:	e7ad      	b.n	8003248 <_printf_i+0xf4>
 80032ec:	4826      	ldr	r0, [pc, #152]	@ (8003388 <_printf_i+0x234>)
 80032ee:	e7e9      	b.n	80032c4 <_printf_i+0x170>
 80032f0:	6823      	ldr	r3, [r4, #0]
 80032f2:	f023 0320 	bic.w	r3, r3, #32
 80032f6:	6023      	str	r3, [r4, #0]
 80032f8:	e7f6      	b.n	80032e8 <_printf_i+0x194>
 80032fa:	4616      	mov	r6, r2
 80032fc:	e7bd      	b.n	800327a <_printf_i+0x126>
 80032fe:	6833      	ldr	r3, [r6, #0]
 8003300:	6825      	ldr	r5, [r4, #0]
 8003302:	6961      	ldr	r1, [r4, #20]
 8003304:	1d18      	adds	r0, r3, #4
 8003306:	6030      	str	r0, [r6, #0]
 8003308:	062e      	lsls	r6, r5, #24
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	d501      	bpl.n	8003312 <_printf_i+0x1be>
 800330e:	6019      	str	r1, [r3, #0]
 8003310:	e002      	b.n	8003318 <_printf_i+0x1c4>
 8003312:	0668      	lsls	r0, r5, #25
 8003314:	d5fb      	bpl.n	800330e <_printf_i+0x1ba>
 8003316:	8019      	strh	r1, [r3, #0]
 8003318:	2300      	movs	r3, #0
 800331a:	6123      	str	r3, [r4, #16]
 800331c:	4616      	mov	r6, r2
 800331e:	e7bc      	b.n	800329a <_printf_i+0x146>
 8003320:	6833      	ldr	r3, [r6, #0]
 8003322:	1d1a      	adds	r2, r3, #4
 8003324:	6032      	str	r2, [r6, #0]
 8003326:	681e      	ldr	r6, [r3, #0]
 8003328:	6862      	ldr	r2, [r4, #4]
 800332a:	2100      	movs	r1, #0
 800332c:	4630      	mov	r0, r6
 800332e:	f7fc ff5f 	bl	80001f0 <memchr>
 8003332:	b108      	cbz	r0, 8003338 <_printf_i+0x1e4>
 8003334:	1b80      	subs	r0, r0, r6
 8003336:	6060      	str	r0, [r4, #4]
 8003338:	6863      	ldr	r3, [r4, #4]
 800333a:	6123      	str	r3, [r4, #16]
 800333c:	2300      	movs	r3, #0
 800333e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003342:	e7aa      	b.n	800329a <_printf_i+0x146>
 8003344:	6923      	ldr	r3, [r4, #16]
 8003346:	4632      	mov	r2, r6
 8003348:	4649      	mov	r1, r9
 800334a:	4640      	mov	r0, r8
 800334c:	47d0      	blx	sl
 800334e:	3001      	adds	r0, #1
 8003350:	d0ad      	beq.n	80032ae <_printf_i+0x15a>
 8003352:	6823      	ldr	r3, [r4, #0]
 8003354:	079b      	lsls	r3, r3, #30
 8003356:	d413      	bmi.n	8003380 <_printf_i+0x22c>
 8003358:	68e0      	ldr	r0, [r4, #12]
 800335a:	9b03      	ldr	r3, [sp, #12]
 800335c:	4298      	cmp	r0, r3
 800335e:	bfb8      	it	lt
 8003360:	4618      	movlt	r0, r3
 8003362:	e7a6      	b.n	80032b2 <_printf_i+0x15e>
 8003364:	2301      	movs	r3, #1
 8003366:	4632      	mov	r2, r6
 8003368:	4649      	mov	r1, r9
 800336a:	4640      	mov	r0, r8
 800336c:	47d0      	blx	sl
 800336e:	3001      	adds	r0, #1
 8003370:	d09d      	beq.n	80032ae <_printf_i+0x15a>
 8003372:	3501      	adds	r5, #1
 8003374:	68e3      	ldr	r3, [r4, #12]
 8003376:	9903      	ldr	r1, [sp, #12]
 8003378:	1a5b      	subs	r3, r3, r1
 800337a:	42ab      	cmp	r3, r5
 800337c:	dcf2      	bgt.n	8003364 <_printf_i+0x210>
 800337e:	e7eb      	b.n	8003358 <_printf_i+0x204>
 8003380:	2500      	movs	r5, #0
 8003382:	f104 0619 	add.w	r6, r4, #25
 8003386:	e7f5      	b.n	8003374 <_printf_i+0x220>
 8003388:	080034d1 	.word	0x080034d1
 800338c:	080034e2 	.word	0x080034e2

08003390 <memmove>:
 8003390:	4288      	cmp	r0, r1
 8003392:	b510      	push	{r4, lr}
 8003394:	eb01 0402 	add.w	r4, r1, r2
 8003398:	d902      	bls.n	80033a0 <memmove+0x10>
 800339a:	4284      	cmp	r4, r0
 800339c:	4623      	mov	r3, r4
 800339e:	d807      	bhi.n	80033b0 <memmove+0x20>
 80033a0:	1e43      	subs	r3, r0, #1
 80033a2:	42a1      	cmp	r1, r4
 80033a4:	d008      	beq.n	80033b8 <memmove+0x28>
 80033a6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80033aa:	f803 2f01 	strb.w	r2, [r3, #1]!
 80033ae:	e7f8      	b.n	80033a2 <memmove+0x12>
 80033b0:	4402      	add	r2, r0
 80033b2:	4601      	mov	r1, r0
 80033b4:	428a      	cmp	r2, r1
 80033b6:	d100      	bne.n	80033ba <memmove+0x2a>
 80033b8:	bd10      	pop	{r4, pc}
 80033ba:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80033be:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80033c2:	e7f7      	b.n	80033b4 <memmove+0x24>

080033c4 <_sbrk_r>:
 80033c4:	b538      	push	{r3, r4, r5, lr}
 80033c6:	4d06      	ldr	r5, [pc, #24]	@ (80033e0 <_sbrk_r+0x1c>)
 80033c8:	2300      	movs	r3, #0
 80033ca:	4604      	mov	r4, r0
 80033cc:	4608      	mov	r0, r1
 80033ce:	602b      	str	r3, [r5, #0]
 80033d0:	f7fe f846 	bl	8001460 <_sbrk>
 80033d4:	1c43      	adds	r3, r0, #1
 80033d6:	d102      	bne.n	80033de <_sbrk_r+0x1a>
 80033d8:	682b      	ldr	r3, [r5, #0]
 80033da:	b103      	cbz	r3, 80033de <_sbrk_r+0x1a>
 80033dc:	6023      	str	r3, [r4, #0]
 80033de:	bd38      	pop	{r3, r4, r5, pc}
 80033e0:	20000210 	.word	0x20000210

080033e4 <memcpy>:
 80033e4:	440a      	add	r2, r1
 80033e6:	4291      	cmp	r1, r2
 80033e8:	f100 33ff 	add.w	r3, r0, #4294967295
 80033ec:	d100      	bne.n	80033f0 <memcpy+0xc>
 80033ee:	4770      	bx	lr
 80033f0:	b510      	push	{r4, lr}
 80033f2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80033f6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80033fa:	4291      	cmp	r1, r2
 80033fc:	d1f9      	bne.n	80033f2 <memcpy+0xe>
 80033fe:	bd10      	pop	{r4, pc}

08003400 <_realloc_r>:
 8003400:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003404:	4607      	mov	r7, r0
 8003406:	4614      	mov	r4, r2
 8003408:	460d      	mov	r5, r1
 800340a:	b921      	cbnz	r1, 8003416 <_realloc_r+0x16>
 800340c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003410:	4611      	mov	r1, r2
 8003412:	f7ff bc4d 	b.w	8002cb0 <_malloc_r>
 8003416:	b92a      	cbnz	r2, 8003424 <_realloc_r+0x24>
 8003418:	f7ff fbde 	bl	8002bd8 <_free_r>
 800341c:	4625      	mov	r5, r4
 800341e:	4628      	mov	r0, r5
 8003420:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003424:	f000 f81a 	bl	800345c <_malloc_usable_size_r>
 8003428:	4284      	cmp	r4, r0
 800342a:	4606      	mov	r6, r0
 800342c:	d802      	bhi.n	8003434 <_realloc_r+0x34>
 800342e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8003432:	d8f4      	bhi.n	800341e <_realloc_r+0x1e>
 8003434:	4621      	mov	r1, r4
 8003436:	4638      	mov	r0, r7
 8003438:	f7ff fc3a 	bl	8002cb0 <_malloc_r>
 800343c:	4680      	mov	r8, r0
 800343e:	b908      	cbnz	r0, 8003444 <_realloc_r+0x44>
 8003440:	4645      	mov	r5, r8
 8003442:	e7ec      	b.n	800341e <_realloc_r+0x1e>
 8003444:	42b4      	cmp	r4, r6
 8003446:	4622      	mov	r2, r4
 8003448:	4629      	mov	r1, r5
 800344a:	bf28      	it	cs
 800344c:	4632      	movcs	r2, r6
 800344e:	f7ff ffc9 	bl	80033e4 <memcpy>
 8003452:	4629      	mov	r1, r5
 8003454:	4638      	mov	r0, r7
 8003456:	f7ff fbbf 	bl	8002bd8 <_free_r>
 800345a:	e7f1      	b.n	8003440 <_realloc_r+0x40>

0800345c <_malloc_usable_size_r>:
 800345c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003460:	1f18      	subs	r0, r3, #4
 8003462:	2b00      	cmp	r3, #0
 8003464:	bfbc      	itt	lt
 8003466:	580b      	ldrlt	r3, [r1, r0]
 8003468:	18c0      	addlt	r0, r0, r3
 800346a:	4770      	bx	lr

0800346c <_init>:
 800346c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800346e:	bf00      	nop
 8003470:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003472:	bc08      	pop	{r3}
 8003474:	469e      	mov	lr, r3
 8003476:	4770      	bx	lr

08003478 <_fini>:
 8003478:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800347a:	bf00      	nop
 800347c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800347e:	bc08      	pop	{r3}
 8003480:	469e      	mov	lr, r3
 8003482:	4770      	bx	lr
